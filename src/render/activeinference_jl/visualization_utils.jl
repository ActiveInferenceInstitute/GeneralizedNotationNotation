#!/usr/bin/env julia

"""
ActiveInference.jl Visualization Utilities

This module provides visualization functions for ActiveInference.jl simulation results.
Works with data generated by activeinference_runner.jl.
"""

using Pkg
using DelimitedFiles
using Statistics
using LinearAlgebra

# Ensure required plotting packages are installed
for pkg in ["Plots", "GR"]
    try
        Pkg.add(pkg)
    catch e
        @warn "Failed to install $pkg: $e"
    end
end

using Plots
gr()  # Use GR backend for reliable output

function check_and_load_csv(filepath::String, required_cols::Int)
    if !isfile(filepath)
        error("Required data file not found: $filepath")
    end
    fileinfo = stat(filepath)
    if fileinfo.size < 10
        error("Data file is empty or too small: $filepath (size: $(fileinfo.size) bytes)")
    end
    data = readdlm(filepath, ',', skipstart=6)  # Skip header row too
    if size(data, 1) == 0 || size(data, 2) < required_cols
        error("Data file $filepath is empty or missing required columns (size: $(fileinfo.size) bytes)")
    end
    # Convert to numeric data
    numeric_data = zeros(Float64, size(data, 1), size(data, 2))
    for i in 1:size(data, 1)
        for j in 1:size(data, 2)
            numeric_data[i, j] = parse(Float64, string(data[i, j]))
        end
    end
    println("‚úÖ Using data file: $filepath (size: $(fileinfo.size) bytes, rows: $(size(numeric_data,1)), cols: $(size(numeric_data,2)))")
    return numeric_data
end

function text_analysis(output_dir::String)
    """Generate text-based analysis from simulation data."""
    plot_dir = joinpath(output_dir, "analysis", "plots")
    viz_dir = joinpath(output_dir, "analysis")
    mkpath(viz_dir)

    # Basic metrics analysis (read from data_traces)
    trace_dir = joinpath(output_dir, "data_traces")
    beliefs_file = joinpath(trace_dir, "beliefs_over_time.csv")
    actions_file = joinpath(trace_dir, "actions_over_time.csv")
    obs_file = joinpath(trace_dir, "observations_over_time.csv")
    
    beliefs_data = check_and_load_csv(beliefs_file, 2)
    actions_data = check_and_load_csv(actions_file, 2)
    obs_data = check_and_load_csv(obs_file, 2)
    
    open(joinpath(viz_dir, "basic_simulation_analysis.txt"), "w") do f
        println(f, "Basic Simulation Analysis")
        println(f, "="^30)
        println(f, "Total steps: $(size(beliefs_data,1))")
        println(f, "Unique observations: $(length(unique(obs_data[:,2])))")
        println(f, "Unique actions: $(length(unique(actions_data[:,2])))")
        println(f, "Mean belief (state 1): $(round(mean(beliefs_data[:,2]), digits=4))")
        println(f, "Std belief (state 1): $(round(std(beliefs_data[:,2]), digits=4))")
        println(f)
        println(f, "Action Distribution:")
        for a in unique(actions_data[:,2])
            counta = count(==(a), actions_data[:,2])
            pct = round(100 * counta / size(actions_data,1), digits=1)
            println(f, "  Action $a: $counta times ($pct%)")
        end
        println(f)
        println(f, "Observation Distribution:")
        for o in unique(obs_data[:,2])
            counto = count(==(o), obs_data[:,2])
            pct = round(100 * counto / size(obs_data,1), digits=1)
            println(f, "  Observation $o: $counto times ($pct%)")
        end
    end
    println("üìù Created basic simulation analysis")

    # Learning progress analysis
    learning_file = joinpath(trace_dir, "learning_curve.csv")
    learning_comp_file = joinpath(trace_dir, "learning_comparison.csv")
    
    learning_data = check_and_load_csv(learning_file, 2)
    learning_comp_data = check_and_load_csv(learning_comp_file, 3)
    
    open(joinpath(viz_dir, "learning_analysis.txt"), "w") do f
        println(f, "Parameter Learning Analysis")
        println(f, "="^30)
        println(f, "Total episodes: $(size(learning_data,1))")
        println(f, "Initial error: $(round(learning_data[1,2], digits=4))")
        println(f, "Final error: $(round(learning_data[end,2], digits=4))")
        error_reduction = learning_data[1,2] - learning_data[end,2]
        println(f, "Error reduction: $(round(error_reduction, digits=4))")
        pct_improvement = 100 * error_reduction / learning_data[1,2]
        println(f, "Improvement: $(round(pct_improvement, digits=1))%")
        println(f)
        println(f, "Learning Progress:")
        for i in 1:size(learning_data,1)
            println(f, "  Episode $(learning_data[i,1]): Error = $(round(learning_data[i,2], digits=4))")
        end
    end
    println("üìà Created learning analysis")

    # Planning analysis
    rewards_file = joinpath(trace_dir, "planning_rewards.csv")
    actions_trial_file = joinpath(trace_dir, "planning_actions.csv")
    
    rewards_data = check_and_load_csv(rewards_file, 2)
    actions_trial_data = check_and_load_csv(actions_trial_file, 2)
    
    open(joinpath(viz_dir, "planning_analysis.txt"), "w") do f
        println(f, "Multi-Step Planning Analysis")
        println(f, "="^30)
        println(f, "Total trials: $(size(rewards_data,1))")
        println(f, "Mean reward: $(round(mean(rewards_data[:,2]), digits=2))")
        println(f, "Max reward: $(maximum(rewards_data[:,2]))")
        println(f, "Min reward: $(minimum(rewards_data[:,2]))")
        println(f, "Std reward: $(round(std(rewards_data[:,2]), digits=2))")
        println(f)
        println(f, "Actions per Trial:")
        for i in 1:size(actions_trial_data,1)
            println(f, "  Trial $(actions_trial_data[i,1]): $(actions_trial_data[i,2]) actions")
        end
    end
    println("üéØ Created planning analysis")
end

function create_graphical_visualizations(output_dir::String)
    """Create graphical visualizations using Plots.jl."""
    try
        plot_dir = joinpath(output_dir, "analysis", "plots")
        trace_dir = joinpath(output_dir, "data_traces")
        
        # Load data files from data_traces
        beliefs_data = check_and_load_csv(joinpath(trace_dir, "beliefs_over_time.csv"), 2)
        actions_data = check_and_load_csv(joinpath(trace_dir, "actions_over_time.csv"), 2)
        obs_data = check_and_load_csv(joinpath(trace_dir, "observations_over_time.csv"), 2)
        learning_data = check_and_load_csv(joinpath(trace_dir, "learning_curve.csv"), 2)
        learning_comp_data = check_and_load_csv(joinpath(trace_dir, "learning_comparison.csv"), 3)
        rewards_data = check_and_load_csv(joinpath(trace_dir, "planning_rewards.csv"), 2)
        actions_trial_data = check_and_load_csv(joinpath(trace_dir, "planning_actions.csv"), 2)
        
        # Create plots
        println("\nüé® Creating graphical visualizations...")
        
        # Beliefs over time
        p1 = plot(beliefs_data[:,1], beliefs_data[:,2],
            title="Beliefs Over Time", xlabel="Step", ylabel="Belief (State 1)",
            linewidth=2, legend=false)
        savefig(p1, joinpath(plot_dir, "beliefs_over_time.png"))
        println("‚úÖ Created beliefs plot")
        
        # Actions over time
        p2 = plot(actions_data[:,1], actions_data[:,2],
            title="Actions Over Time", xlabel="Step", ylabel="Action",
            marker=:circle, linewidth=2, legend=false)
        savefig(p2, joinpath(plot_dir, "actions_over_time.png"))
        println("‚úÖ Created actions plot")
        
        # Observations over time
        p3 = plot(obs_data[:,1], obs_data[:,2],
            title="Observations Over Time", xlabel="Step", ylabel="Observation",
            marker=:square, linewidth=2, legend=false)
        savefig(p3, joinpath(plot_dir, "observations_over_time.png"))
        println("‚úÖ Created observations plot")
        
        # Learning curve
        p4 = plot(learning_data[:,1], learning_data[:,2],
            title="Learning Progress", xlabel="Episode", ylabel="Error",
            linewidth=2, marker=:circle, legend=false)
        savefig(p4, joinpath(plot_dir, "learning_curve.png"))
        println("‚úÖ Created learning curve plot")
        
        # Learning comparison
        p5 = plot(learning_comp_data[:,1], learning_comp_data[:,2],
            label="Error Before", linewidth=2, marker=:circle)
        plot!(learning_comp_data[:,1], learning_comp_data[:,3],
            label="Error After", linewidth=2, marker=:square)
        plot!(title="Learning Progress: Before vs After",
            xlabel="Episode", ylabel="Error")
        savefig(p5, joinpath(plot_dir, "learning_comparison.png"))
        println("‚úÖ Created learning comparison plot")
        
        # Planning rewards
        p6 = bar(rewards_data[:,1], rewards_data[:,2],
            title="Rewards per Trial", xlabel="Trial", ylabel="Total Reward",
            legend=false)
        savefig(p6, joinpath(plot_dir, "planning_rewards.png"))
        println("‚úÖ Created rewards plot")
        
        # Planning actions
        p7 = bar(actions_trial_data[:,1], actions_trial_data[:,2],
            title="Actions per Trial", xlabel="Trial", ylabel="Number of Actions",
            legend=false)
        savefig(p7, joinpath(plot_dir, "planning_actions.png"))
        println("‚úÖ Created actions per trial plot")
        
        println("\nüñºÔ∏è  All graphical visualizations created successfully")
        println("üìÅ Plots saved to: $plot_dir")
        
    catch e
        println("\n‚ö†Ô∏è  Graphical plotting failed: $e")
        println("üí° Error details: $(typeof(e))")
        println("üí° Try installing plotting dependencies: julia -e 'using Pkg; Pkg.add([\"Plots\", \"GR\"])'")
    end
end

function main()
    if length(ARGS) > 0
        output_dir = ARGS[1]
        if isdir(output_dir)
            println("üé® ActiveInference.jl Visualization Utilities")
            println("="^50)
            
            # Run text analysis
            println("\nüìù Running text-based analysis...")
            text_analysis(output_dir)
            
            # Run graphical visualization
            create_graphical_visualizations(output_dir)
            
            println("\n‚úÖ Visualization completed successfully!")
        else
            error("‚ùå Directory not found: $output_dir")
        end
    else
        println("Usage: julia visualization_utils.jl <output_directory>")
        println("Example: julia visualization_utils.jl activeinference_outputs_YYYY-MM-DD_HH-MM-SS")
    end
end

if abspath(PROGRAM_FILE) == @__FILE__
    main()
end 