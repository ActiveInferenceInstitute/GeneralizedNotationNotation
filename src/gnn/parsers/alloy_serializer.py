from typing import Dict, Any, List, Optional, Union, Protocol
from abc import ABC, abstractmethod
import json
from datetime import datetime
from .common import GNNInternalRepresentation, GNNFormat
from .base_serializer import BaseGNNSerializer

class AlloySerializer(BaseGNNSerializer):
    """Serializer for Alloy model checking language."""
    
    def __init__(self):
        super().__init__()
        self.format_name = 'alloy'
    
    def serialize(self, model: GNNInternalRepresentation) -> str:
        """Convert GNN model to Alloy format with embedded data."""
        lines = []
        
        # Module declaration
        model_name_clean = self._sanitize_alloy_name(model.model_name)
        lines.append(f"module {model_name_clean}")
        lines.append("")
        
        # Model documentation
        lines.append("// GNN Model: " + model.model_name)
        if model.annotation:
            lines.append("// " + model.annotation.replace('\n', '\n// '))
        lines.append("// Generated by AlloySerializer")
        lines.append("")
        
        # Signatures for variables
        if model.variables:
            lines.append("// Variable signatures")
            for var in sorted(model.variables, key=lambda v: v.name):
                alloy_type = self._map_to_alloy_type(var.data_type.value if hasattr(var, 'data_type') else 'categorical')
                var_name_clean = self._sanitize_alloy_name(var.name)
                lines.append(f"sig {var_name_clean} {{")
                lines.append(f"  value: {alloy_type},")
                
                # Add dimensions if present
                if hasattr(var, 'dimensions') and var.dimensions:
                    lines.append(f"  dimensions: seq Int  // {var.dimensions}")
                
                lines.append("}")
                lines.append("")
        
        # Facts for connections
        if model.connections:
            lines.append("// Connection constraints")
            lines.append("fact Connections {")
            
            for i, conn in enumerate(model.connections):
                if hasattr(conn, 'source_variables') and hasattr(conn, 'target_variables'):
                    sources = getattr(conn, 'source_variables', [])
                    targets = getattr(conn, 'target_variables', [])
                    
                    for source in sources:
                        for target in targets:
                            source_clean = self._sanitize_alloy_name(source)
                            target_clean = self._sanitize_alloy_name(target)
                            lines.append(f"  // Connection {i+1}: {source} -> {target}")
                            lines.append(f"  some {source_clean} and some {target_clean}")
                            
            lines.append("}")
            lines.append("")
        
        # Predicates for model constraints
        lines.append(f"// Model validity predicate")
        lines.append(f"pred {model_name_clean}Valid {{")
        lines.append("  // All variables must exist")
        
        if model.variables:
            for var in model.variables:
                var_name_clean = self._sanitize_alloy_name(var.name)
                lines.append(f"  some {var_name_clean}")
        else:
            lines.append("  // No variables defined")
        
        lines.append("}")
        lines.append("")
        
        # Parameter constraints
        if model.parameters:
            lines.append("// Parameter constraints")
            lines.append("fact Parameters {")
            for param in model.parameters:
                param_name_clean = self._sanitize_alloy_name(param.name)
                lines.append(f"  // Parameter: {param.name} = {getattr(param, 'value', 'undefined')}")
            lines.append("}")
            lines.append("")
        
        # Join all lines
        content = '\n'.join(lines)
        
        # Add embedded model data for round-trip fidelity
        return self._add_embedded_model_data(content, model)
    
    def _sanitize_alloy_name(self, name: str) -> str:
        """Sanitize names for Alloy syntax."""
        # Remove invalid characters and ensure it starts with a letter
        import re
        sanitized = re.sub(r'[^a-zA-Z0-9_]', '_', name)
        if sanitized and not sanitized[0].isalpha():
            sanitized = 'V' + sanitized
        return sanitized or 'UnnamedEntity'
    
    def _map_to_alloy_type(self, data_type: str) -> str:
        """Map GNN data types to Alloy types."""
        mapping = {
            "categorical": "Int",
            "continuous": "Int",  # Alloy uses Int for numeric values
            "binary": "Int",
            "integer": "Int",
            "float": "Int",
            "complex": "univ"
        }
        return mapping.get(data_type.lower(), "univ") 