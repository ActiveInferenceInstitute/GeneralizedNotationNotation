from typing import Dict, Any, List, Optional, Union, Protocol
from abc import ABC, abstractmethod
import json
from datetime import datetime
from .common import GNNInternalRepresentation, GNNFormat
from .base_serializer import BaseGNNSerializer

class ProtobufSerializer(BaseGNNSerializer):
    """Enhanced serializer for Protocol Buffers format with complete model preservation."""
    
    def serialize(self, model: GNNInternalRepresentation) -> str:
        """Convert GNN model to Protocol Buffers format with embedded model data."""
        lines = []
        
        # Proto3 syntax
        lines.append('syntax = "proto3";')
        lines.append("")
        
        # Package declaration
        package_name = model.model_name.lower().replace(" ", "_").replace("-", "_")
        lines.append(f"package {package_name};")
        lines.append("")
        
        # Add comprehensive model documentation as comments
        lines.append("// GNN Model: " + model.model_name)
        if model.annotation:
            lines.append("// Annotation: " + model.annotation)
        lines.append("// Generated by GNN Protobuf Serializer")
        lines.append("")
        
        # Variable message
        lines.append("message Variable {{")
        lines.append("  string name = 1;")
        lines.append("  string var_type = 2;")
        lines.append("  string data_type = 3;")
        lines.append("  repeated int32 dimensions = 4;")
        lines.append("  string description = 5;")
        lines.append("}}")
        lines.append("")
        
        # Connection message
        lines.append("message Connection {{")
        lines.append("  repeated string source_variables = 1;")
        lines.append("  repeated string target_variables = 2;")
        lines.append("  string connection_type = 3;")
        lines.append("  string description = 4;")
        lines.append("}}")
        lines.append("")
        
        # Parameter message
        lines.append("message Parameter {{")
        lines.append("  string name = 1;")
        lines.append("  string value = 2;")
        lines.append("  string param_type = 3;")
        lines.append("}}")
        lines.append("")
        
        # Equation message
        lines.append("message Equation {{")
        lines.append("  string equation = 1;")
        lines.append("  string type = 2;")
        lines.append("}}")
        lines.append("")
        
        # Time specification message
        lines.append("message TimeSpecification {{")
        lines.append("  string time_type = 1;")
        lines.append("  int32 steps = 2;")
        lines.append("  string description = 3;")
        lines.append("}}")
        lines.append("")
        
        # Ontology mapping message
        lines.append("message OntologyMapping {{")
        lines.append("  string variable_name = 1;")
        lines.append("  string ontology_term = 2;")
        lines.append("}}")
        lines.append("")
        
        # Main model message
        lines.append("message GNNModel {{")
        lines.append("  string name = 1;")
        lines.append("  string annotation = 2;")
        lines.append("  repeated Variable variables = 3;")
        lines.append("  repeated Connection connections = 4;")
        lines.append("  repeated Parameter parameters = 5;")
        lines.append("  repeated Equation equations = 6;")
        lines.append("  TimeSpecification time_specification = 7;")
        lines.append("  repeated OntologyMapping ontology_mappings = 8;")
        lines.append("}}")
        lines.append("")
        
        # Embed complete model data as JSON in comments for round-trip fidelity
        model_data = {
            'model_name': model.model_name,
            'annotation': model.annotation,
            'variables': [
                {
                    'name': var.name,
                    'var_type': var.var_type.value if hasattr(var, 'var_type') else 'hidden_state',
                    'data_type': var.data_type.value if hasattr(var, 'data_type') else 'categorical',
                    'dimensions': var.dimensions if hasattr(var, 'dimensions') else []
                }
                for var in model.variables
            ],
            'connections': [
                {
                    'source_variables': conn.source_variables if hasattr(conn, 'source_variables') else [],
                    'target_variables': conn.target_variables if hasattr(conn, 'target_variables') else [],
                    'connection_type': conn.connection_type.value if hasattr(conn, 'connection_type') else 'directed'
                }
                for conn in model.connections
            ],
            'parameters': [
                {
                    'name': param.name,
                    'value': param.value,
                    'param_type': getattr(param, 'param_type', 'constant')
                }
                for param in model.parameters
            ],
            'equations': [str(eq) for eq in (model.equations if hasattr(model, 'equations') else [])],
            'time_specification': self._serialize_time_spec(model.time_specification) if hasattr(model, 'time_specification') and model.time_specification else None,
            'ontology_mappings': self._serialize_ontology_mappings(model.ontology_mappings) if hasattr(model, 'ontology_mappings') else []
        }
        
        # Add embedded JSON data for complete round-trip
        lines.append("/* MODEL_DATA: " + json.dumps(model_data, separators=(',', ':')) + " */")
        lines.append("")
        
        # Add individual variable, connection, and parameter comments for parsing
        lines.append("// Variables:")
        for var in model.variables:
            lines.append(f"// Variable: {var.name} ({var.var_type.value if hasattr(var, 'var_type') else 'unknown'})")
        
        lines.append("// Connections:")
        for conn in model.connections:
            sources = ','.join(conn.source_variables) if hasattr(conn, 'source_variables') else 'unknown'
            targets = ','.join(conn.target_variables) if hasattr(conn, 'target_variables') else 'unknown'
            conn_type = conn.connection_type.value if hasattr(conn, 'connection_type') else 'directed'
            lines.append(f"// Connection: {sources} --{conn_type}--> {targets}")
        
        lines.append("// Parameters:")
        for param in model.parameters:
            lines.append(f"// Parameter: {param.name} = {param.value}")
        
        return '\n'.join(lines)
    
    def _serialize_time_spec(self, time_spec) -> Dict[str, Any]:
        """Serialize TimeSpecification object to dict."""
        if not time_spec or not hasattr(time_spec, '__dict__'):
            return {}
        
        return {
            'time_type': getattr(time_spec, 'time_type', 'Static'),
            'discretization': getattr(time_spec, 'discretization', None),
            'horizon': getattr(time_spec, 'horizon', None),
            'step_size': getattr(time_spec, 'step_size', None)
        }
    
    def _serialize_ontology_mappings(self, mappings) -> List[Dict[str, Any]]:
        """Serialize ontology mappings to list of dicts."""
        if not mappings:
            return []
        
        result = []
        for mapping in mappings:
            if hasattr(mapping, '__dict__'):
                result.append({
                    'variable_name': getattr(mapping, 'variable_name', ''),
                    'ontology_term': getattr(mapping, 'ontology_term', ''),
                    'description': getattr(mapping, 'description', None)
                })
            else:
                result.append(str(mapping))
        return result 