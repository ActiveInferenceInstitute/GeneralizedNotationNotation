%%% GNN (Generalized Notation Notation) Z Notation Specification
%%% This file provides a formal Z specification of GNN models, enabling
%%% rigorous mathematical analysis and formal verification of properties

%% Basic types and sets

[IDENTIFIER, TEXT]

%% Version specification
VERSION ::= major ‚ü®‚ü®‚Ñï‚ÇÅ‚ü©‚ü© √ó minor ‚ü®‚ü®‚Ñï‚ü©‚ü© √ó patch ‚ü®‚ü®‚Ñï‚ü©‚ü©

%% Data types supported in GNN
DATA_TYPE ::= categorical | continuous | binary | integer | float | complex

%% Variable types in Active Inference
VARIABLE_TYPE ::= hidden_state‚ü®‚ü®‚Ñï‚ü©‚ü© | observation‚ü®‚ü®‚Ñï‚ü©‚ü© | action‚ü®‚ü®‚Ñï‚ü©‚ü© | policy‚ü®‚ü®‚Ñï‚ü©‚ü©

%% Connection types
CONNECTION_TYPE ::= directed | undirected | conditional | bidirectional

%% Processing flags schema
ProcessingFlags
    strict_validation : ùîπ
    allow_experimental : ùîπ
    enable_optimizations : ùîπ
    debug_mode : ùîπ
    verbose_logging : ùîπ

%% Default processing flags
default_flags : ProcessingFlags
default_flags = (true, false, true, false, false)

%% Dimension specification
Dimensions == seq ‚Ñï‚ÇÅ
dimension_constraint : Dimensions ‚Üí ùîπ
‚àÄ dims : Dimensions ‚Ä¢ dimension_constraint(dims) ‚ü∫ dims ‚â† ‚ü®‚ü© ‚àß (‚àÄ d : ran dims ‚Ä¢ d > 0)

%% Variable definition schema
Variable
    name : IDENTIFIER
    var_type : VARIABLE_TYPE
    dimensions : Dimensions
    data_type : DATA_TYPE
    description : TEXT

    dimension_constraint(dimensions)

%% Valid variable naming convention
valid_variable_name : IDENTIFIER ‚Üí ùîπ
‚àÄ id : IDENTIFIER ‚Ä¢ valid_variable_name(id) ‚ü∫
    (‚àÉ n : ‚Ñï ‚Ä¢ id = "s_f" ^ (show n)) ‚à®
    (‚àÉ n : ‚Ñï ‚Ä¢ id = "o_m" ^ (show n)) ‚à®
    (‚àÉ n : ‚Ñï ‚Ä¢ id = "u_c" ^ (show n)) ‚à®
    (‚àÉ n : ‚Ñï ‚Ä¢ id = "pi_c" ^ (show n)) ‚à®
    (‚àÉ suffix : TEXT ‚Ä¢ id = "A_" ^ suffix) ‚à®
    (‚àÉ suffix : TEXT ‚Ä¢ id = "B_" ^ suffix) ‚à®
    (‚àÉ suffix : TEXT ‚Ä¢ id = "C_" ^ suffix) ‚à®
    (‚àÉ suffix : TEXT ‚Ä¢ id = "D_" ^ suffix)

%% Well-formed variable
WellFormedVariable
    Variable
    valid_variable_name(name)

%% Connection between variables
Connection
    source_vars : ‚Ñô‚ÇÅ IDENTIFIER
    target_vars : ‚Ñô‚ÇÅ IDENTIFIER
    conn_type : CONNECTION_TYPE
    symbol : TEXT
    description : TEXT
    weight : ‚Ñù

    symbol ‚àà {">", "->", "-", "|", "<->"}
    (conn_type = directed ‚üπ symbol ‚àà {">", "->"}) ‚àß
    (conn_type = undirected ‚üπ symbol = "-") ‚àß
    (conn_type = conditional ‚üπ symbol = "|") ‚àß
    (conn_type = bidirectional ‚üπ symbol = "<->")

%% Mathematical constraints
CONSTRAINT ::= stochastic | non_negative | symmetric | orthogonal | unitary | normalized

%% Matrix representation
Matrix == seq (seq ‚Ñù)

%% Stochastic matrix constraint
is_stochastic : Matrix ‚Üí ùîπ
‚àÄ m : Matrix ‚Ä¢ is_stochastic(m) ‚ü∫
    m ‚â† ‚ü®‚ü© ‚àß (‚àÄ row : ran m ‚Ä¢ row ‚â† ‚ü®‚ü©) ‚àß
    (‚àÄ row : ran m ‚Ä¢ (‚àë·µ¢ (ran row)) = 1) ‚àß
    (‚àÄ row : ran m ‚Ä¢ ‚àÄ val : ran row ‚Ä¢ val ‚â• 0)

%% Non-negative matrix constraint
is_non_negative : Matrix ‚Üí ùîπ
‚àÄ m : Matrix ‚Ä¢ is_non_negative(m) ‚ü∫
    ‚àÄ row : ran m ‚Ä¢ ‚àÄ val : ran row ‚Ä¢ val ‚â• 0

%% Symmetric matrix constraint
is_symmetric : Matrix ‚Üí ùîπ
‚àÄ m : Matrix ‚Ä¢ is_symmetric(m) ‚ü∫
    #m = #(head m) ‚àß (‚àÄ i, j : 1..#m ‚Ä¢ m(i)(j) = m(j)(i))

%% Parameter values
PARAMETER_VALUE ::= scalar‚ü®‚ü®‚Ñù‚ü©‚ü© | vector‚ü®‚ü®seq ‚Ñù‚ü©‚ü© | matrix‚ü®‚ü®Matrix‚ü©‚ü© | tuple‚ü®‚ü®seq PARAMETER_VALUE‚ü©‚ü©

%% Parameter assignment
ParameterAssignment
    param_name : IDENTIFIER
    value : PARAMETER_VALUE
    constraints : ‚Ñô CONSTRAINT
    param_description : TEXT

%% Mathematical equation
Equation
    latex_expr : TEXT
    plaintext : TEXT
    variables : ‚Ñô IDENTIFIER
    eq_description : TEXT

%% Time configuration
TimeConfiguration
    time_type : {static, dynamic}
    discretization : {discrete_time, continuous_time}
    horizon : ‚Ñï‚ÇÅ
    time_step : ‚Ñù‚Çä

    time_type = static ‚üπ horizon = 1
    time_type = dynamic ‚üπ horizon > 1

%% Ontology mapping
OntologyMapping
    variable : IDENTIFIER
    ontology_term : IDENTIFIER
    namespace : TEXT
    confidence : ‚Ñù

    0 ‚â§ confidence ‚â§ 1
    namespace = "ActInfOntology"

%% State space definition
StateSpace
    factors : seq Variable
    joint_dimension : ‚Ñï‚ÇÅ
    state_description : TEXT

    factors ‚â† ‚ü®‚ü©
    ‚àÄ v : ran factors ‚Ä¢ ‚àÉ n : ‚Ñï ‚Ä¢ v.var_type = hidden_state(n)
    joint_dimension = ‚àè·µ¢ (Œª v : ran factors ‚Ä¢ ‚àè‚±º (ran v.dimensions))

%% Observation space definition
ObservationSpace
    modalities : seq Variable
    obs_joint_dimension : ‚Ñï‚ÇÅ
    obs_description : TEXT

    modalities ‚â† ‚ü®‚ü©
    ‚àÄ v : ran modalities ‚Ä¢ ‚àÉ n : ‚Ñï ‚Ä¢ v.var_type = observation(n)
    obs_joint_dimension = ‚àè·µ¢ (Œª v : ran modalities ‚Ä¢ ‚àè‚±º (ran v.dimensions))

%% Action space definition
ActionSpace
    controls : seq Variable
    action_joint_dimension : ‚Ñï‚ÇÅ
    action_description : TEXT

    ‚àÄ v : ran controls ‚Ä¢ ‚àÉ n : ‚Ñï ‚Ä¢ v.var_type = action(n) ‚à® v.var_type = policy(n)
    action_joint_dimension = ‚àè·µ¢ (Œª v : ran controls ‚Ä¢ ‚àè‚±º (ran v.dimensions))

%% Likelihood matrix A: P(o|s)
LikelihoodMatrix
    A_name : IDENTIFIER
    A_dimensions : Dimensions  
    A_values : Matrix
    A_constraints : ‚Ñô CONSTRAINT
    A_description : TEXT

    A_name = "A"
    stochastic ‚àà A_constraints ‚àß non_negative ‚àà A_constraints
    is_stochastic(A_values) ‚àß is_non_negative(A_values)
    #A_dimensions = 2

%% Transition matrix B: P(s'|s,u)
TransitionMatrix
    B_name : IDENTIFIER
    B_dimensions : Dimensions
    B_values : Matrix
    B_constraints : ‚Ñô CONSTRAINT
    B_description : TEXT

    B_name = "B"
    stochastic ‚àà B_constraints ‚àß non_negative ‚àà B_constraints
    is_stochastic(B_values) ‚àß is_non_negative(B_values)
    #B_dimensions ‚â• 2

%% Preference vector C: log preferences
PreferenceVector
    C_name : IDENTIFIER
    C_dimensions : Dimensions
    C_values : seq ‚Ñù
    C_description : TEXT

    C_name = "C"
    #C_dimensions = 1

%% Prior vector D: initial state distribution
PriorVector
    D_name : IDENTIFIER
    D_dimensions : Dimensions
    D_values : seq ‚Ñù
    D_constraints : ‚Ñô CONSTRAINT
    D_description : TEXT

    D_name = "D"
    stochastic ‚àà D_constraints ‚àß non_negative ‚àà D_constraints
    (‚àë·µ¢ (ran D_values)) = 1 ‚àß (‚àÄ val : ran D_values ‚Ä¢ val ‚â• 0)
    #D_dimensions = 1

%% Active Inference model structure
ActiveInferenceModel
    state_space : StateSpace
    observation_space : ObservationSpace
    action_space : ActionSpace
    likelihood_matrices : seq LikelihoodMatrix
    transition_matrices : seq TransitionMatrix
    preference_vectors : seq PreferenceVector
    prior_vectors : seq PriorVector
    time_horizon : ‚Ñï‚ÇÅ
    ai_description : TEXT

    likelihood_matrices ‚â† ‚ü®‚ü©
    transition_matrices ‚â† ‚ü®‚ü©
    prior_vectors ‚â† ‚ü®‚ü©

%% Validation levels
VALIDATION_LEVEL ::= basic | standard | strict | research

%% Validation result
ValidationResult
    is_valid : ùîπ
    errors : seq TEXT
    warnings : seq TEXT
    suggestions : seq TEXT
    metadata : IDENTIFIER ‚Ü£ TEXT

%% Complete GNN model specification
GNNModel
    gnn_section : TEXT
    version : VERSION
    processing_flags : ProcessingFlags
    model_name : TEXT
    model_annotation : TEXT
    variables : seq WellFormedVariable
    connections : seq Connection
    ai_model : ActiveInferenceModel
    equations : seq Equation
    time_config : TimeConfiguration
    initial_params : seq ParameterAssignment
    model_params : seq ParameterAssignment
    ontology_mappings : seq OntologyMapping
    footer : TEXT

    gnn_section = "GNN"
    variables ‚â† ‚ü®‚ü©
    model_name ‚â† ""
    model_annotation ‚â† ""

%% Well-formed GNN model
WellFormedGNNModel
    GNNModel

    %% Variable name uniqueness
    (‚àÄ v1, v2 : ran variables ‚Ä¢ v1.name = v2.name ‚üπ v1 = v2)
    
    %% Connection validity
    (‚àÄ conn : ran connections ‚Ä¢ 
        conn.source_vars ‚äÜ {v : ran variables ‚Ä¢ v.name} ‚àß
        conn.target_vars ‚äÜ {v : ran variables ‚Ä¢ v.name})
    
    %% Ontology mapping validity
    (‚àÄ om : ran ontology_mappings ‚Ä¢ 
        om.variable ‚àà {v : ran variables ‚Ä¢ v.name})

%% Model validation function
validate_model : GNNModel √ó VALIDATION_LEVEL ‚Üí ValidationResult

%% Free energy calculation
calculate_free_energy : ActiveInferenceModel √ó (‚Ñï ‚Ü£ ‚Ñù) √ó (‚Ñï ‚Ü£ ‚Ñù) ‚Üí ‚Ñù

%% Model composition operation
compose_models : GNNModel √ó GNNModel ‚Üí GNNModel

%% Tensor product of models
tensor_product : ActiveInferenceModel √ó ActiveInferenceModel ‚Üí ActiveInferenceModel

%% Model morphism
ModelMorphism
    source : ActiveInferenceModel
    target : ActiveInferenceModel
    state_map : ‚Ñï ‚Ü£ ‚Ñï
    obs_map : ‚Ñï ‚Ü£ ‚Ñï
    action_map : ‚Ñï ‚Ü£ ‚Ñï

    dom state_map = 1..source.state_space.joint_dimension
    ran state_map ‚äÜ 1..target.state_space.joint_dimension
    dom obs_map = 1..source.observation_space.obs_joint_dimension
    ran obs_map ‚äÜ 1..target.observation_space.obs_joint_dimension

%% Identity morphism
identity_morphism : ActiveInferenceModel ‚Üí ModelMorphism
‚àÄ model : ActiveInferenceModel ‚Ä¢
    identity_morphism(model) = 
        (model, model, id(1..model.state_space.joint_dimension),
         id(1..model.observation_space.obs_joint_dimension),
         id(1..model.action_space.action_joint_dimension))

%% Morphism composition
compose_morphisms : ModelMorphism √ó ModelMorphism ‚Üí ModelMorphism

%% Categorical structure axioms
‚àÄ f : ModelMorphism ‚Ä¢ compose_morphisms(f, identity_morphism(f.source)) = f
‚àÄ f : ModelMorphism ‚Ä¢ compose_morphisms(identity_morphism(f.target), f) = f
‚àÄ f, g, h : ModelMorphism ‚Ä¢ 
    f.target = g.source ‚àß g.target = h.source ‚üπ
    compose_morphisms(compose_morphisms(h, g), f) = 
    compose_morphisms(h, compose_morphisms(g, f))

%% Coherence conditions for Active Inference
coherent_likelihood_transition : ActiveInferenceModel ‚Üí ùîπ
‚àÄ model : ActiveInferenceModel ‚Ä¢
    coherent_likelihood_transition(model) ‚ü∫
    (‚àÄ A : ran model.likelihood_matrices, B : ran model.transition_matrices ‚Ä¢
        %% Dimensions are compatible
        true) %% Simplified for brevity

%% Expected free energy functional
expected_free_energy : ActiveInferenceModel √ó (‚Ñï ‚Ü£ ‚Ñù) √ó (‚Ñï ‚Ü£ ‚Ñù) ‚Üí ‚Ñù

%% Complexity term (KL divergence)
complexity_term : (‚Ñï ‚Ü£ ‚Ñù) √ó (‚Ñï ‚Ü£ ‚Ñù) ‚Üí ‚Ñù
‚àÄ beliefs, priors : ‚Ñï ‚Ü£ ‚Ñù ‚Ä¢
    complexity_term(beliefs, priors) = 
    ‚àë·µ¢ (dom beliefs ‚à© dom priors) (Œª s : ‚Ñï ‚Ä¢ 
        beliefs(s) * log(beliefs(s) / priors(s)))

%% Expected cost term
expected_cost : ActiveInferenceModel √ó (‚Ñï ‚Ü£ ‚Ñù) √ó (‚Ñï ‚Ü£ ‚Ñù) √ó (‚Ñï ‚Ü£ ‚Ñù) ‚Üí ‚Ñù

%% Free energy minimization theorem
theorem free_energy_minimization
‚àÄ model : ActiveInferenceModel, policy : ‚Ñï ‚Ü£ ‚Ñù ‚Ä¢
    ‚àÉ optimal_beliefs : ‚Ñï ‚Ü£ ‚Ñù ‚Ä¢
        ‚àÄ other_beliefs : ‚Ñï ‚Ü£ ‚Ñù ‚Ä¢
            expected_free_energy(model, optimal_beliefs, policy) ‚â§
            expected_free_energy(model, other_beliefs, policy)

%% Model consistency theorem
theorem model_consistency
‚àÄ model : WellFormedGNNModel ‚Ä¢
    coherent_likelihood_transition(model.ai_model) ‚àß
    (‚àÄ v : ran model.variables ‚Ä¢ valid_variable_name(v.name))

%% Composition preserves well-formedness theorem
theorem composition_preserves_wellformedness
‚àÄ m1, m2 : WellFormedGNNModel ‚Ä¢
    let composed = compose_models(m1, m2) ‚Ä¢
        composed ‚àà WellFormedGNNModel

%% Export format specifications
JSON_EXPORT ::= json_format‚ü®‚ü®TEXT‚ü©‚ü©
XML_EXPORT ::= xml_format‚ü®‚ü®TEXT‚ü©‚ü©
YAML_EXPORT ::= yaml_format‚ü®‚ü®TEXT‚ü©‚ü©

%% Export function
export_model : GNNModel √ó {json, xml, yaml} ‚Üí TEXT

%% Model collection
ModelCollection
    models : seq WellFormedGNNModel
    collection_name : TEXT
    collection_description : TEXT

    models ‚â† ‚ü®‚ü©

%% Batch processing
batch_validate : ModelCollection √ó VALIDATION_LEVEL ‚Üí seq ValidationResult

%% Performance metrics
PerformanceMetrics
    parse_time : ‚Ñù‚Çä
    validation_time : ‚Ñù‚Çä
    export_time : ‚Ñù‚Çä
    memory_usage : ‚Ñï
    model_complexity : ‚Ñï

%% Complexity estimation
estimate_complexity : GNNModel ‚Üí ‚Ñï
‚àÄ model : GNNModel ‚Ä¢
    estimate_complexity(model) = 
    model.ai_model.state_space.joint_dimension *
    model.ai_model.observation_space.obs_joint_dimension *
    model.time_config.horizon 