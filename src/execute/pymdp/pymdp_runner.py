#!/usr/bin/env python3
"""
PyMDP script execution module for the GNN Processing Pipeline.

This module provides functions to execute PyMDP scripts that were
generated by the GNN rendering step (9_render.py).
"""

import logging
import os
import subprocess
import sys
from pathlib import Path
from typing import List, Optional, Union, Dict, Any, Tuple

logger = logging.getLogger(__name__)

def find_pymdp_scripts(
    base_dir: Union[str, Path], 
    recursive: bool = True
) -> List[Path]:
    """
    Find PyMDP scripts in the specified directory.
    
    Args:
        base_dir: Directory to search for PyMDP scripts
        recursive: Whether to search recursively in subdirectories
        
    Returns:
        List of paths to PyMDP script files
    """
    base_path = Path(base_dir)
    if not base_path.exists():
        logger.warning(f"Directory not found: {base_path}")
        return []
    
    # Look for Python files
    py_files = list(base_path.glob("**/*.py" if recursive else "*.py"))
    
    # Filter to only include PyMDP scripts (typically with _pymdp.py suffix)
    pymdp_files = [f for f in py_files if "_pymdp.py" in f.name]
    
    logger.info(f"Found {len(pymdp_files)} PyMDP scripts in {base_path}")
    
    return pymdp_files

def execute_pymdp_script(
    script_path: Path, 
    verbose: bool = False
) -> bool:
    """
    Execute a single PyMDP script.
    
    Args:
        script_path: Path to the PyMDP script
        verbose: Whether to enable verbose output
        
    Returns:
        bool: True if execution was successful, False otherwise
    """
    if not script_path.exists():
        logger.error(f"Script file not found: {script_path}")
        return False
    
    logger.info(f"Executing PyMDP script: {script_path}")
    
    try:
        # Use the current Python interpreter to run the script
        python_executable = sys.executable
        cmd = [python_executable, str(script_path)]
        logger.debug(f"Running command: {' '.join(cmd)}")
        
        # Execute the Python script
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            check=False
        )
        
        # Process the execution result
        if result.returncode == 0:
            logger.info(f"Script executed successfully: {script_path.name}")
            if verbose:
                logger.debug(f"Output from {script_path.name}:\n{result.stdout}")
            return True
        else:
            logger.error(f"Script execution failed with return code {result.returncode}: {script_path.name}")
            logger.error(f"Error output:\n{result.stderr}")
            return False
    except Exception as e:
        logger.error(f"Error executing script {script_path.name}: {e}")
        return False

def run_pymdp_scripts(
    pipeline_output_dir: Union[str, Path],
    recursive_search: bool = True,
    verbose: bool = False
) -> bool:
    """
    Find and run all PyMDP scripts in the designated output directory.
    
    Args:
        pipeline_output_dir: Main pipeline output directory
        recursive_search: Whether to search recursively for scripts
        verbose: Whether to enable verbose output
        
    Returns:
        bool: True if all scripts executed successfully, False if any failed
    """
    # Construct the path to the PyMDP scripts
    pymdp_dir = Path(pipeline_output_dir) / "gnn_rendered_simulators" / "pymdp"
    
    logger.info(f"Looking for PyMDP scripts in: {pymdp_dir}")
    
    # Find all PyMDP scripts
    script_files = find_pymdp_scripts(pymdp_dir, recursive_search)
    
    if not script_files:
        logger.info("No PyMDP scripts found")
        return True  # Not an error, just nothing to do
    
    # Execute each script
    success_count = 0
    failure_count = 0
    
    for script_file in script_files:
        if execute_pymdp_script(script_file, verbose):
            success_count += 1
        else:
            failure_count += 1
    
    # Report execution results
    total_count = success_count + failure_count
    logger.info(f"PyMDP script execution summary: {success_count} succeeded, {failure_count} failed, {total_count} total")
    
    # Consider the overall run successful only if all scripts succeeded
    return failure_count == 0

if __name__ == "__main__":
    # Setup logging for standalone execution
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        stream=sys.stdout
    )
    
    # Parse command-line arguments for standalone execution
    import argparse
    parser = argparse.ArgumentParser(description="Execute PyMDP scripts generated by the GNN rendering step")
    parser.add_argument("--output-dir", type=Path, default="../output",
                       help="Main pipeline output directory")
    parser.add_argument("--recursive", action=argparse.BooleanOptionalAction, default=True,
                       help="Recursively search for scripts in the output directory")
    parser.add_argument("--verbose", action=argparse.BooleanOptionalAction, default=False,
                       help="Enable verbose output")
    
    args = parser.parse_args()
    
    # Enable verbose logging if requested
    if args.verbose:
        logger.setLevel(logging.DEBUG)
    
    # Run the scripts
    success = run_pymdp_scripts(
        pipeline_output_dir=args.output_dir,
        recursive_search=args.recursive,
        verbose=args.verbose
    )
    
    # Exit with appropriate status code
    sys.exit(0 if success else 1) 