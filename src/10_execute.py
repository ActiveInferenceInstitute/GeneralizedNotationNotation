"""
GNN Processing Pipeline - Step 10: Execute Rendered Simulators

This script orchestrates the execution of rendered GNN simulators,
primarily focusing on PyMDP scripts generated by Step 9.

Usage:
    python 10_execute.py [options]
    (Typically called by main.py)
    
Options:
    Same as main.py (passes arguments through, especially output_dir and verbose)
"""

import sys
from pathlib import Path
import logging
import argparse
import os # For LOG_LEVEL in standalone

# Logger for this pipeline step
logger = logging.getLogger(__name__) # GNN_Pipeline.10_execute or __main__

# Attempt to import the runner function from the execute module
try:
    # If 10_execute.py is in src/ and pymdp_runner.py is in src/execute/
    from execute import pymdp_runner 
except ImportError:
    # Fallback if path issues, try to adjust sys.path
    # This assumes 10_execute.py is in src/
    sys.path.insert(0, str(Path(__file__).resolve().parent))
    try:
        from execute import pymdp_runner
    except ImportError as e:
        logger.error(f"Error: Could not import pymdp_runner from execute module: {e}")
        logger.error("Ensure src/execute/pymdp_runner.py exists and src/ is discoverable.")
        pymdp_runner = None # Ensure it exists for later checks

def main(args: argparse.Namespace) -> int:
    """Main function for the GNN model execution step."""
    # Logger level for this script's logger (__name__) should be set by main.py
    # based on args.verbose, or by standalone __main__ block.

    logger.info(f"▶️ Starting Step 10: Execute Rendered Simulators ({Path(__file__).name})")
    if args.verbose:
        logger.debug(f"  Pipeline arguments received: {args}")

    if not pymdp_runner or not hasattr(pymdp_runner, 'run_pymdp_scripts'):
        logger.error("❌ PyMDP runner module or function not loaded. Cannot proceed with execution step.")
        return 1 # Indicate failure

    logger.info("  Executing PyMDP rendered scripts...")
    
    # Key arguments for the runner:
    # - args.output_dir: This is the main pipeline output directory.
    #   The runner will construct the path to <output_dir>/gnn_rendered_simulators/pymdp/ from this.
    # - verbose: To control verbosity of the runner itself.
    # The runner now handles recursive search internally by default.
    
    try:
        success = pymdp_runner.run_pymdp_scripts(
            pipeline_output_dir=args.output_dir,
            # recursive_search=args.recursive, # Removed, runner is always recursive now
            verbose=args.verbose
        )
        
        if success:
            logger.info("✅ All found PyMDP scripts executed successfully or no scripts were found to run.")
            logger.info(f"✅ Step 10: Execute Rendered Simulators ({Path(__file__).name}) - COMPLETED")
            return 0 # Indicate success
        else:
            logger.error("❌ Some PyMDP scripts failed during execution.")
            logger.error(f"❌ Step 10: Execute Rendered Simulators ({Path(__file__).name}) - FAILED")
            return 1 # Indicate failure
            
    except Exception as e:
        logger.error(f"❌ An unexpected error occurred during the execution step: {e}", exc_info=args.verbose)
        logger.error(f"❌ Step 10: Execute Rendered Simulators ({Path(__file__).name}) - FAILED CRITICALLY")
        return 1 # Indicate critical failure of the step itself

if __name__ == '__main__':
    # Basic configuration for running this script standalone
    log_level_str = os.environ.get("LOG_LEVEL", "INFO").upper()
    log_level = getattr(logging, log_level_str, logging.INFO)
    logging.basicConfig(
        level=log_level,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )

    # Create a dummy args object mimicking what main.py would provide
    parser = argparse.ArgumentParser(description="GNN Pipeline - Step 10: Execute Rendered Simulators (Standalone)")
    # Default output_dir for standalone: ../output (relative to src/ where this script is)
    script_dir = Path(__file__).resolve().parent
    default_pipeline_output_dir = script_dir.parent / "output"

    parser.add_argument("--output-dir", default=str(default_pipeline_output_dir),
                        help=f"Main pipeline output directory (default: {default_pipeline_output_dir})")
    parser.add_argument("--recursive", action="store_true", default=True,
                        help="Recursively search for PyMDP scripts in their base output folder. (Note: Runner is now always recursive, this arg is for pipeline compatibility)")
    parser.add_argument("--verbose", action="store_true",
                        help="Enable verbose output for this script and the runner.")
    # Add any other args from main.py that this script's main() or its callees might expect
    # For example, target_dir is usually there, but not directly used by this step.
    parser.add_argument("--target-dir", default="not_used_by_this_step", help="Placeholder for target-dir.")

    parsed_args = parser.parse_args()

    # Update log level if --verbose is used in standalone mode, after basicConfig
    if parsed_args.verbose:
        logging.getLogger().setLevel(logging.DEBUG) # Set root logger level
        # Ensure this script's logger also gets DEBUG if it was already created
        logger.setLevel(logging.DEBUG)
        if pymdp_runner:
            logging.getLogger(pymdp_runner.__name__).setLevel(logging.DEBUG)
        logger.debug("Verbose logging enabled for standalone run of 10_execute.py.")

    sys.exit(main(parsed_args)) 