# .cursorrules - Rules for AI Code Assistant (Cursor) - GeneralizedNotationNotation (GNN) Project

## Project Overview and Context
GeneralizedNotationNotation (GNN) is a text-based language for standardizing Active Inference generative models. The project enables model specification, validation, visualization, translation to executable code for simulation environments (PyMDP, RxInfer.jl), categorical diagram representation (DisCoPy), and LLM-enhanced analysis.

## Overall AI Behavior & Persona
- Act as an expert Active Inference researcher and Python developer with deep knowledge of GNN specifications
- Be professional, scientifically rigorous, modular, concise, elegant, and thoughtful
- Prioritize the user's direct instructions in the <user_query>
- When in doubt, ask clarifying questions rather than making risky assumptions, but prefer to find answers via tools if possible
- Express chains of thought and rationale, especially for complex decisions involving GNN syntax or Active Inference concepts
- Identify and use all programming best practices thoughtfully, with special attention to scientific reproducibility
- **NEVER create dummy, mock, placeholder, or stub implementations - all code must be fully functional**

## GNN Domain Knowledge and Standards

### GNN File Structure Understanding
- **GNN Files**: Markdown-based (.md) with specific sections:
  - `GNNVersionAndFlags`: Version specification and processing flags
  - `ModelName`: Descriptive model identifier
  - `ModelAnnotation`: Free-text explanation of model purpose and features
  - `StateSpaceBlock`: Variable definitions with dimensions/types (s_fX[dims,type])
  - `Connections`: Directed/undirected edges showing dependencies (>, -, ->)
  - `InitialParameterization`: Starting values, matrices (A, B, C, D), priors
  - `Equations`: LaTeX-rendered mathematical relationships
  - `Time`: Temporal settings (Dynamic/Static, DiscreteTime, ModelTimeHorizon)
  - `ActInfOntologyAnnotation`: Mapping to Active Inference Ontology terms
  - `Footer` and `Signature`: Provenance information

### GNN Syntax and Punctuation
- **Variables**: Use underscore for subscripts (X_2), caret for superscripts (X^Y)
- **Dimensions**: Square brackets for array dimensions [2,3] = 2x3 matrix
- **Causality**: `>` for directed edges (X>Y), `-` for undirected (X-Y)
- **Operations**: Standard math operators (+, -, *, /, |)
- **Grouping**: Parentheses (), exact values {1}, indexing/dimensions [2,3]
- **Comments**: Triple hashtags (###) for inline comments
- **Probability**: Conditional probability notation P(X|Y) using pipe |

## Pipeline Architecture & Implementation Paradigm

### Core Pipeline Orchestration
- **Main Orchestrator**: `src/main.py` dynamically discovers and executes numbered pipeline scripts
- **Script Discovery**: Uses glob patterns to find `*_*.py` files, sorts by number and basename
- **Execution Model**: Each script runs as subprocess with centralized argument passing
- **Virtual Environment**: Automatic detection and use of project virtual environment
- **Dependency Validation**: Comprehensive dependency checking before pipeline execution
- **Performance Tracking**: Built-in performance monitoring and resource usage tracking

### Pipeline Steps (Dynamically Discovered, 1-14)
Each numbered script corresponds to a specific module folder and implements real functionality:

1. **1_gnn.py** → `src/gnn/` - GNN file discovery, parsing, and basic validation
2. **2_setup.py** → `src/setup/` - Environment setup, virtual environment management, dependency installation (CRITICAL STEP)
3. **3_tests.py** → `src/tests/` - Test suite execution with pytest integration
4. **4_type_checker.py** → `src/type_checker/` - GNN syntax validation and resource estimation
5. **5_export.py** → `src/export/` - Multi-format export (JSON, XML, GraphML, GEXF, Pickle)
6. **6_visualization.py** → `src/visualization/` - Graph visualization and matrix visualization
7. **7_mcp.py** → `src/mcp/` - Model Context Protocol operations and tool registration
8. **8_ontology.py** → `src/ontology/` - Active Inference Ontology processing and validation
9. **9_render.py** → `src/render/` - Code generation for PyMDP, RxInfer simulation environments
10. **10_execute.py** → `src/execute/` - Execute rendered simulation scripts
11. **11_llm.py** → `src/llm/` - LLM-enhanced analysis, model interpretation, and AI assistance
12. **12_website.py** → `src/website/` - Static HTML website generation from pipeline artifacts
13. **13_sapf.py** → `src/sapf/` - SAPF (Sound As Pure Form) audio generation and sonification

### Centralized Infrastructure

#### Utilities (`src/utils/`)
- **EnhancedArgumentParser**: Centralized argument parsing for all pipeline steps
- **PipelineLogger**: Structured logging with correlation contexts and step tracking
- **performance_tracker**: Performance monitoring and resource usage tracking
- **validate_pipeline_dependencies**: Comprehensive dependency validation
- **setup_step_logging**: Standardized logging setup for each pipeline step

#### Pipeline Configuration (`src/pipeline/`)
- **STEP_METADATA**: Centralized metadata for all pipeline steps
- **get_pipeline_config**: Pipeline configuration management
- **get_output_dir_for_script**: Standardized output directory structure
- **execute_pipeline_step**: Centralized step execution with error handling

#### Module Structure Pattern
Each module follows this structure:
```
src/[module_name]/
├── __init__.py          # Module initialization
├── [main_module].py     # Core functionality
├── mcp.py              # MCP integration (if applicable)
└── [additional_files]   # Specialized components
```

### Implementation Standards

#### Script Structure Pattern
Every numbered script follows this pattern:
1. **Import centralized utilities** (`utils`, `pipeline`)
2. **Initialize step-specific logger** via `setup_step_logging`
3. **Import module-specific functionality** from corresponding folder
4. **Define main() function** with centralized argument handling
5. **Use EnhancedArgumentParser** for argument parsing with fallback
6. **Implement proper error handling** with step logging functions
7. **Return appropriate exit codes** (0=success, 1=error, 2=warnings)

#### Argument Parsing Standards
- **Centralized Parsing**: Use `EnhancedArgumentParser.parse_step_arguments()` for all pipeline steps
- **Fallback Handling**: Always provide fallback argument parser for graceful degradation
- **Common Arguments**: All steps support `--target-dir`, `--output-dir`, `--verbose`, `--recursive`
- **Step-Specific Arguments**: Additional arguments based on step functionality (e.g., `--strict`, `--duration`)
- **Path Conversion**: Defensive conversion of string arguments to `pathlib.Path` objects

#### Logging Standards
- **Step Logging Functions**: Use `log_step_start`, `log_step_success`, `log_step_warning`, `log_step_error`
- **Correlation Context**: Each step sets correlation context for traceability
- **Verbosity Control**: Dynamic verbosity adjustment based on arguments
- **Performance Tracking**: Use `performance_tracker.track_operation()` for timed operations

#### Error Handling Standards
- **Graceful Degradation**: Steps continue pipeline unless critical failure occurs
- **Critical vs Non-Critical**: Steps marked as `required=True` halt pipeline on failure
- **Comprehensive Reporting**: All errors logged with context and suggestions
- **Exit Code Conventions**: 0=success, 1=critical error, 2=success with warnings

### Module-Specific Implementation Details

#### GNN Processing (`src/gnn/`)
- **File Discovery**: Recursive and non-recursive GNN file discovery
- **Basic Parsing**: ModelName, StateSpaceBlock, Connections extraction
- **Parameter Extraction**: ModelParameters section parsing with AST evaluation
- **Real Implementation**: Full GNN file structure parsing, no mocks

#### Setup Management (`src/setup/`)
- **Virtual Environment**: Detection, creation, and management
- **Dependency Installation**: Real pip installation with requirements.txt
- **System Validation**: Comprehensive system dependency checking
- **Environment Info**: Detailed environment reporting and validation

#### Type Checking (`src/type_checker/`)
- **Syntax Validation**: Full GNN syntax validation with detailed error reporting
- **Resource Estimation**: Computational resource estimation for models
- **Type Consistency**: Variable type checking and dimension validation
- **Real Validation**: Complete GNN specification compliance checking

#### Export Systems (`src/export/`)
- **Multi-Format Support**: JSON, XML, GraphML, GEXF, Pickle formats
- **Network Graph Export**: NetworkX-based graph format exports
- **Structured Data**: Comprehensive model metadata preservation
- **Real Exporters**: Fully functional format conversion, no stubs

#### Visualization (`src/visualization/`)
- **Graph Visualization**: Model structure visualization with matplotlib/networkx
- **Matrix Visualization**: A, B, C, D matrix heatmaps and visualizations
- **Ontology Visualization**: Active Inference ontology relationship diagrams
- **Real Rendering**: Complete visualization pipeline with multiple output formats

#### Simulation Rendering (`src/render/`)
- **PyMDP Integration**: Full PyMDP agent and environment code generation
- **RxInfer Integration**: Complete RxInfer.jl model translation
- **Template System**: Comprehensive template-based code generation
- **Real Code Generation**: Executable simulation code, not pseudocode

#### Execution Engine (`src/execute/`)
- **Script Execution**: Real Python script execution with subprocess management
- **Result Capture**: Output capture, error handling, and result reporting
- **Multi-Backend**: Support for PyMDP, RxInfer, and custom execution engines
- **Real Execution**: Actual simulation execution with performance monitoring

#### LLM Integration (`src/llm/`)
- **Model Analysis**: AI-powered GNN model interpretation and validation
- **Enhancement Suggestions**: Automated model improvement recommendations
- **Natural Language**: GNN to natural language explanation generation
- **Real AI Integration**: Functional LLM processing, not mock responses

#### Site Generation (`src/site/`)
- **HTML Generation**: Static HTML site generation from pipeline artifacts
- **Report Aggregation**: Comprehensive pipeline summary and results presentation
- **Interactive Elements**: Dynamic content and navigation
- **Real Generation**: Complete HTML site with all pipeline outputs

#### SAPF Audio Generation (`src/sapf/`)
- **Sound As Pure Form**: Audio representation and sonification of GNN models
- **Model Sonification**: Converting mathematical structures to audio patterns
- **Audio Synthesis**: Real-time audio generation and processing
- **Real Audio**: Functional audio generation, not placeholder implementations

### MCP (Model Context Protocol) Integration

#### Universal MCP Pattern
Every applicable module includes `mcp.py` with:
- **Tool Registration**: Module-specific MCP tool definitions
- **Function Exposure**: Key module functions exposed as MCP tools
- **Standardized Interface**: Consistent MCP API across all modules
- **Real Integration**: Functional MCP tools, not placeholder implementations

#### MCP System Architecture
- **Central Registry**: `src/mcp/` contains core MCP implementation
- **Module Integration**: Each module's `mcp.py` registers with central system
- **Tool Discovery**: Automatic tool discovery and registration
- **API Consistency**: Standardized request/response patterns

### Quality Assurance Standards

#### Implementation Requirements
- **No Mocks or Stubs**: All implementations must be fully functional
- **Real Data Processing**: Use actual GNN files and real computation
- **Complete Pipelines**: End-to-end functionality from input to output
- **Scientific Accuracy**: Mathematically correct Active Inference implementations

#### Testing Integration
- **Pytest Framework**: Comprehensive test suite with real GNN file testing
- **Integration Tests**: Full pipeline testing with actual data
- **Performance Tests**: Resource usage and timing validation
- **Regression Tests**: Ensure changes don't break existing functionality

#### Documentation Standards
- **Comprehensive Docstrings**: Full documentation for all functions and classes
- **Type Hints**: Complete type annotations throughout codebase
- **Usage Examples**: Real examples using actual GNN files
- **API Documentation**: Generated from docstrings and type hints

### Development Guidelines

#### Code Organization
- **Module Separation**: Clear separation between pipeline steps and core modules
- **Import Hierarchy**: Centralized utilities → pipeline config → module-specific
- **Dependency Management**: Explicit dependency declarations and validation
- **Path Management**: Consistent path handling with pathlib.Path

#### Error Handling Philosophy
- **Fail Fast**: Early detection of configuration and dependency issues
- **Informative Errors**: Clear error messages with actionable suggestions
- **Graceful Recovery**: Attempt to continue pipeline when possible
- **Comprehensive Logging**: Full audit trail of all operations

#### Performance Considerations
- **Resource Monitoring**: Track memory usage, execution time, and system resources
- **Parallel Processing**: Use parallel operations when appropriate and safe
- **Caching**: Cache parsed results and expensive computations
- **Optimization**: Profile and optimize critical paths

### Advanced Features

#### Extensibility Architecture
- **Plugin System**: Support for custom pipeline steps and modules
- **Backend Flexibility**: Multiple simulation backends (PyMDP, RxInfer, JAX)
- **Format Extension**: Easy addition of new export formats
- **Tool Integration**: MCP-based tool ecosystem for external integrations

#### Scientific Reproducibility
- **Deterministic Behavior**: Consistent outputs for identical inputs
- **Version Control**: Full provenance tracking and version management
- **Environment Capture**: Complete environment specification and reproduction
- **Audit Trails**: Comprehensive logging of all processing steps

### Updated Module Naming Conventions

#### Current Module Structure (Post-Renaming)
- **Core Modules**: `gnn/`, `type_checker/`, `export/`, `visualization/`, `render/`, `execute/`, `llm/`, `website/`, `sapf/`
- **Infrastructure**: `utils/`, `pipeline/`, `mcp/`, `ontology/`, `setup/`, `tests/`
- **Pipeline Scripts**: `1_gnn.py`, `2_setup.py`, `3_tests.py`, `4_type_checker.py`, `5_export.py`, `6_visualization.py`, `7_mcp.py`, `8_ontology.py`, `9_render.py`, `10_execute.py`, `11_llm.py`, `12_website.py`, `13_sapf.py`

#### Output Directory Structure
- **Type Checking**: `output/type_check/` (renamed from `gnn_type_check/`)
- **GNN Processing**: `output/gnn_processing_step/`
- **Setup Artifacts**: `output/setup_artifacts/`
- **Test Reports**: `output/test_reports/`
- **Exports**: `output/gnn_exports/`
- **Visualizations**: `output/visualization/`
- **MCP Processing**: `output/mcp_processing_step/`
- **Ontology Processing**: `output/ontology_processing/`
- **Rendered Simulators**: `output/gnn_rendered_simulators/`
- **Execution Results**: `output/execution_results/`
- **LLM Processing**: `output/llm_processing_step/`
- **SAPF Processing**: `output/sapf_processing_step/`
- **Website Generation**: `output/website/`
- **Pipeline Logs**: `output/logs/`

**Critical Implementation Philosophy**: This project implements a comprehensive scientific computing pipeline with real, functional components at every level. Every module, function, and pipeline step must provide genuine functionality - there are no mock implementations, stub functions, or placeholder code. The architecture supports the full Active Inference modeling lifecycle from specification through simulation, with rigorous scientific validation and reproducibility standards. 