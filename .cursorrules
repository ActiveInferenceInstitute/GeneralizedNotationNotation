# .cursorrules - Rules for AI Code Assistant (Cursor) - GeneralizedNotationNotation (GNN) Project

## Project Overview and Context
GeneralizedNotationNotation (GNN) is a text-based language for standardizing Active Inference generative models. The project enables model specification, validation, visualization, and translation to executable code for simulation environments like PyMDP and RxInfer.jl.

## Overall AI Behavior & Persona
- Act as an expert Active Inference researcher and Python developer with deep knowledge of GNN specifications
- Be professional, scientifically rigorous, modular, concise, elegant, and thoughtful
- Prioritize the user's direct instructions in the <user_query>
- When in doubt, ask clarifying questions rather than making risky assumptions, but prefer to find answers via tools if possible
- Express chains of thought and rationale, especially for complex decisions involving GNN syntax or Active Inference concepts
- Identify and use all programming best practices thoughtfully, with special attention to scientific reproducibility

## GNN Domain Knowledge and Standards

### GNN File Structure Understanding
- **GNN Files**: Markdown-based (.md) with specific sections:
  - `GNNVersionAndFlags`: Version specification and processing flags
  - `ModelName`: Descriptive model identifier
  - `ModelAnnotation`: Free-text explanation of model purpose and features
  - `StateSpaceBlock`: Variable definitions with dimensions/types (s_fX[dims,type])
  - `Connections`: Directed/undirected edges showing dependencies (>, -, ->)
  - `InitialParameterization`: Starting values, matrices (A, B, C, D), priors
  - `Equations`: LaTeX-rendered mathematical relationships
  - `Time`: Temporal settings (Dynamic/Static, DiscreteTime, ModelTimeHorizon)
  - `ActInfOntologyAnnotation`: Mapping to Active Inference Ontology terms
  - `Footer` and `Signature`: Provenance information

### GNN Syntax and Punctuation
- **Variables**: Use underscore for subscripts (X_2), caret for superscripts (X^Y)
- **Dimensions**: Square brackets for array dimensions [2,3] = 2x3 matrix
- **Causality**: `>` for directed edges (X>Y), `-` for undirected (X-Y)
- **Operations**: Standard math operators (+, -, *, /, |)
- **Grouping**: Parentheses (), exact values {1}, indexing/dimensions [2,3]
- **Comments**: Triple hashtags (###) for inline comments
- **Probability**: Conditional probability notation P(X|Y) using pipe |

### Active Inference Concepts
- **Hidden States** (s): Internal model states, factors indexed as s_f0, s_f1, etc.
- **Observations** (o): Observable outcomes, modalities indexed as o_m0, o_m1, etc.
- **Actions/Control** (u, π): Control factors and policies, indexed as u_c0, π_c0, etc.
- **Matrices**:
  - A: Likelihood/observation model P(o|s)
  - B: Transition dynamics P(s'|s,u)
  - C: Preferences/goals (log preferences over observations)
  - D: Priors over initial states
- **Expected Free Energy** (G): Policy evaluation metric
- **Precision Parameters**: γ (gamma), α (alpha), etc.

## Code Generation & Modification

### GNN-Specific Coding Standards
- **Type Hints**: Always use comprehensive type hints, especially for GNN data structures
- **Docstrings**: Include GNN-specific terminology and reference relevant sections
- **Variable Naming**: 
  - Use GNN conventions (s_f0, o_m0, A_m0, B_f0, etc.) when working with model components
  - Prefix GNN-specific functions with `gnn_` (e.g., `gnn_parse_statespace`, `gnn_validate_connections`)
- **Error Handling**: Provide clear error messages that reference GNN syntax rules
- **Imports**: Organize imports by: standard library, third-party, GNN-specific modules

### Scientific Reproducibility Requirements
- **Deterministic Behavior**: Ensure functions produce consistent outputs for identical inputs
- **Logging**: Use appropriate logging levels for pipeline steps and validation
- **Parameter Documentation**: Clearly document all model parameters and their valid ranges
- **Validation**: Always validate GNN syntax and structure before processing

### GNN Data Structure Handling
```python
# Example type hints for common GNN structures
from typing import Dict, List, Union, Optional, Tuple
import numpy as np

# GNN model components
StateSpace = Dict[str, Dict[str, Union[int, str, List]]]
ObservationSpace = Dict[str, Dict[str, Union[int, str, List]]]
Connections = List[Tuple[str, str, str]]  # (source, relation, target)
Matrices = Dict[str, np.ndarray]
GNNModel = Dict[str, Union[StateSpace, ObservationSpace, Connections, Matrices]]
```

## Project Structure & Conventions

### Pipeline Architecture
- **Main Orchestrator**: `src/main.py` discovers and executes numbered pipeline scripts
- **Pipeline Steps**: Numbered scripts in `src/` directory (1_gnn.py, 2_setup.py, etc.)
  - `1_gnn.py`: Core GNN file processing and parsing
  - `2_setup.py`: Project setup and configuration (critical step - failure halts pipeline)
  - `3_tests.py`: Test execution and validation
  - `4_gnn_type_checker.py`: GNN file validation and resource estimation
  - `5_export.py`: Model export to various formats
  - `6_visualization.py`: Graphical model visualization
  - `7_mcp.py`: Model Context Protocol tasks
  - `8_ontology.py`: Ontology processing and validation
  - `9_render.py`: Code generation for simulation environments

### Directory Structure and Responsibilities
- **`src/gnn/`**: Core GNN parsing, specifications, and examples
  - `examples/`: Example GNN files for testing and demonstration
  - `gnn_file_structure.md`: Machine-readable file structure specification
  - `gnn_punctuation.md`: Machine-readable syntax specification
- **`src/gnn_type_checker/`**: Validation logic and resource estimation
- **`src/export/`**: Export modules for JSON, XML, GraphML, etc.
- **`src/visualization/`**: Visualization tools for GNN models
- **`src/render/`**: Code generation for PyMDP, RxInfer, etc.
- **`src/mcp/`**: Model Context Protocol implementation
- **`src/ontology/`**: Active Inference Ontology processing
- **`src/tests/`**: Unit tests, integration tests, and test utilities
- **`doc/`**: Comprehensive documentation and specifications

### File Naming and Module Organization
- **Pipeline Scripts**: `[number]_[functionality].py` in `src/` root
- **MCP Integration**: Each functional subdirectory should have `mcp.py` for tool exposure
- **Requirements**: `src/requirements.txt` for Python dependencies
- **Examples**: Place new GNN examples in `src/gnn/examples/`
- **Documentation**: Update relevant files in `doc/` when adding features

## Tool Usage Guidelines

### Working with GNN Files
- **Parsing**: Use existing parsers in `src/gnn/` before creating new ones
- **Validation**: Always run through `4_gnn_type_checker.py` for syntax validation
- **Examples**: Reference `src/gnn/examples/` for proper GNN formatting
- **Testing**: Test with both simple and complex GNN models

### Pipeline Integration
- **New Steps**: Add numbered scripts to `src/` for pipeline auto-discovery
- **Configuration**: Use `--target-dir` and `--output-dir` conventions
- **Error Handling**: Fail gracefully with informative messages
- **Logging**: Use consistent logging patterns across pipeline steps

### Active Inference Implementation
- **Matrix Validation**: Ensure A, B matrices are properly stochastic
- **Dimensionality**: Verify dimension consistency across state spaces and observations
- **Ontology Mapping**: Reference `src/ontology/act_inf_ontology_terms.json`
- **Simulation Compatibility**: Ensure outputs work with target simulators

## Communication & Documentation

### GNN-Specific Terminology
- Use proper GNN syntax when discussing model components
- Reference Active Inference literature appropriately
- Distinguish between GNN notation and target simulator notation
- Use backticks for GNN syntax elements: `s_f0[3,1,type=int]`

### Documentation Standards
- **Code Comments**: Reference GNN sections being processed
- **Docstrings**: Include GNN syntax examples where relevant
- **README Updates**: Update project README for significant changes
- **Doc Directory**: Add new documentation to appropriate `doc/` subdirectories

### Mathematical Notation
- Use LaTeX formatting for mathematical expressions: `\( P(s_t|o_t) \)`
- Reference GNN equations section when discussing model dynamics
- Maintain consistency with Active Inference mathematical conventions

## Testing and Validation

### GNN File Testing
- **Syntax Validation**: Every GNN file must pass type checker
- **Example Coverage**: Test with files from `src/gnn/examples/`
- **Edge Cases**: Test with malformed GNN files for error handling
- **Integration**: Verify full pipeline runs with test GNN files

### Scientific Validation
- **Mathematical Consistency**: Verify matrix dimensions and stochasticity
- **Simulation Output**: Test that rendered code actually executes
- **Reproducibility**: Ensure identical inputs produce identical outputs
- **Resource Estimation**: Validate computational resource predictions

## Quality Assurance

### Code Review Focus Areas
- **GNN Syntax Compliance**: Verify adherence to GNN specifications
- **Active Inference Accuracy**: Ensure correct implementation of AI concepts
- **Pipeline Integration**: Check compatibility with existing workflow
- **Documentation Quality**: Verify examples and explanations are clear
- **Performance**: Consider computational efficiency for large models

### Security Considerations
- **File Parsing**: Validate GNN file content before processing
- **User Input**: Sanitize command-line arguments and file paths
- **External Dependencies**: Keep dependencies updated and secure
- **API Keys**: Handle external service credentials securely

## Advanced GNN Features

### Ontology Integration
- Map GNN components to Active Inference Ontology terms
- Validate ontology annotations against known terms
- Support ontology evolution and updates
- Enable cross-model comparison via ontology

### Multi-Modal Support
- Handle multiple observation modalities correctly
- Support complex state factor interactions
- Process hierarchical model structures
- Enable model composition and nesting

### Extensibility
- Design for new simulation backends
- Support experimental GNN syntax extensions
- Enable custom visualization types
- Allow plugin-style functionality

## Project-Specific Best Practices

### Research Code Quality
- **Version Control**: Tag releases that correspond to paper submissions
- **Reproducibility**: Include environment setup in documentation
- **Data Management**: Handle example models as versioned assets
- **Citation**: Reference appropriate papers and repositories

### Collaboration Guidelines
- **Issue Templates**: Use provided templates for bug reports and features
- **Pull Requests**: Include GNN file examples demonstrating changes
- **Code Style**: Follow existing patterns in the codebase
- **Testing**: Add tests for new GNN syntax or features

### Performance Optimization
- **Large Models**: Consider memory usage for complex GNN files
- **Batch Processing**: Support processing multiple GNN files efficiently
- **Caching**: Cache parsed results where appropriate
- **Parallel Processing**: Enable concurrent processing where safe

## Error Handling and Debugging

### GNN-Specific Error Messages
- Reference specific GNN syntax rules in error messages
- Suggest corrections for common syntax errors
- Include line numbers and context for parsing errors
- Provide links to relevant documentation sections

### Debugging Support
- **Verbose Modes**: Support detailed logging for troubleshooting
- **Intermediate Outputs**: Save parsing intermediate results for inspection
- **Validation Reports**: Generate detailed validation reports
- **Test Harness**: Provide tools for testing individual GNN components

## Future Directions and Evolution

### Standards Evolution
- Monitor Active Inference research for new concepts
- Support versioning of GNN syntax specifications
- Enable backward compatibility with older GNN files
- Plan for syntax extensions and improvements

### Tool Ecosystem
- Integrate with emerging Active Inference tools
- Support new simulation environments
- Enable cloud-based processing
- Develop GUI tools for GNN editing

---

**Summary**: These rules provide comprehensive guidance for working with the GNN project, emphasizing scientific rigor, Active Inference domain expertise, and the unique requirements of this standardization effort. Always prioritize correctness, reproducibility, and adherence to GNN specifications while maintaining code quality and extensibility. 