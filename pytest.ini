[pytest]
# Ignore documentation examples and virtual environment directories during test collection
norecursedirs = doc .venv venv env build dist
# Keep default test discovery behaviour
python_files = test_*.py *_test.py
[tool:pytest]
# Pytest configuration for GNN Pipeline Testing
# This configuration helps avoid plugin conflicts and improves test discovery

# Test discovery
testpaths = src/tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Disable problematic plugins that can cause dependency conflicts
addopts =
    --strict-config
    --tb=short
    --disable-warnings
    -p no:randomly
    -p no:sugar
    -p no:cacheprovider
    -p no:stepwise
    --maxfail=10
    --durations=10

# Markers for test categorization
markers =
    fast: Fast tests that run quickly
    slow: Slow tests that may take significant time
    integration: Integration tests across modules
    unit: Unit tests for individual functions
    pipeline: Pipeline infrastructure tests
    core: Core module tests
    utilities: Utility function tests
    validation: Validation and type checking tests
    performance: Performance and benchmarking tests
    specialized: Specialized module tests (audio, visualization, etc.)
    reporting: Report generation tests
    safe_to_fail: Tests that can fail gracefully without breaking the pipeline
    mcp: Model Context Protocol tests
    audio: Audio generation and processing tests
    visualization: Visualization and plotting tests
    ontology: Ontology processing tests
    render: Code generation and rendering tests
    execute: Simulation execution tests
    llm: Large Language Model integration tests
    website: Website generation tests
    export: Multi-format export tests
    security: Security and access control tests
    research: Research and experimental features
    ml_integration: Machine learning integration tests
    advanced_visualization: Advanced visualization tests
    comprehensive: Comprehensive API and integration tests
    main_orchestrator: Main pipeline orchestration tests
    core: Core module tests
    fast: Fast tests that run quickly
    slow: Slow tests that may take significant time
    unit: Unit tests for individual functions
    integration: Integration tests across modules

# Minimum version requirements
minversion = 6.0

# Timeout settings (per-test)
timeout = 10
timeout_method = thread
asyncio_mode = auto

# Coverage settings (disabled to prevent database issues)
# --cov = src
# --cov-report = term-missing
# --cov-report = html:output/coverage_html
# --cov-fail-under = 50

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Performance settings
cache_dir = .pytest_cache
collect_ignore = ["setup.py", "conftest.py"]

# Disable plugins that may cause issues
disable_plugins = 
    randomly
    sugar
    benchmark