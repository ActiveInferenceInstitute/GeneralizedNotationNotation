# =============================================================================
# GENERALIZED NOTATION NOTATION (GNN) - Pytest Configuration
# =============================================================================
# Comprehensive pytest configuration for the GNN pipeline testing framework
# Last Updated: October 1, 2025
# Pytest Version: >= 7.0.0
# =============================================================================

[tool:pytest.ini_options]

# =============================================================================
# TEST DISCOVERY AND COLLECTION
# =============================================================================

# Primary test directories (following the established pattern)
testpaths = [
    "src/tests",
    "tests"
]

# Test file patterns (comprehensive discovery)
python_files = [
    "test_*.py",
    "*_test.py",
    "tests_*.py",
    "*_tests.py"
]

# Test class and function patterns
python_classes = [
    "Test*",
    "*Tests",
    "*TestCase"
]

python_functions = [
    "test_*",
    "Test_*"
]

# Directories to ignore during collection
norecursedirs = [
    ".venv",
    "venv",
    "env",
    "ENV",
    "__pycache__",
    ".pytest_cache",
    "node_modules",
    ".git",
    "build",
    "dist",
    "*.egg-info",
    "htmlcov",
    "coverage",
    "docs/_build",
    "output",
    "cache",
    "temp",
    "tmp"
]

# Files to ignore during collection
collect_ignore = [
    "setup.py",
    "conftest.py",
    "__init__.py"
]

# =============================================================================
# TEST EXECUTION SETTINGS
# =============================================================================

# Core pytest options for consistent behavior
addopts = [
    # Strict mode for better error detection
    "--strict-markers",
    "--strict-config",

    # Output formatting
    "--tb=short",
    "--durations=10",
    "--durations-min=1.0",

    # Test control
    "--maxfail=10",
    "--disable-warnings",

    # Performance and reliability
    "-p no:randomly",
    "-p no:sugar",
    "-p no:cacheprovider",
    "-p no:stepwise",

    # Parallel execution (safe defaults)
    "--numprocesses=auto",
    "--dist=loadscope"
]

# Minimum pytest version requirement
minversion = "7.0"

# =============================================================================
# TEST TIMEOUTS AND PERFORMANCE
# =============================================================================

# Global timeout settings
timeout = 300  # 5 minutes default timeout
timeout_method = "thread"

# Asyncio configuration for async tests
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# =============================================================================
# TEST MARKERS AND CATEGORIZATION
# =============================================================================
# Comprehensive marker system for test organization and selective execution

markers = [
    # Speed-based markers
    "fast: Fast tests that complete in under 1 second",
    "slow: Slow tests that may take significant time (minutes)",
    "medium: Medium-duration tests (1-30 seconds)",

    # Test type markers
    "unit: Unit tests for individual functions and methods",
    "integration: Integration tests across modules and components",
    "e2e: End-to-end tests of complete workflows",
    "pipeline: Pipeline infrastructure and orchestration tests",

    # Module-specific markers
    "core: Core module functionality tests",
    "utilities: Utility function and helper tests",
    "validation: Validation and type checking tests",
    "performance: Performance and benchmarking tests",
    "specialized: Specialized module tests (audio, visualization, etc.)",
    "reporting: Report generation and output tests",

    # Execution environment markers
    "requires_gpu: Tests that require GPU acceleration",
    "requires_network: Tests that require network connectivity",
    "requires_external: Tests that require external services",
    "requires_large_data: Tests that require large datasets",

    # Quality assurance markers
    "smoke: Critical smoke tests for basic functionality",
    "regression: Tests for known issues and edge cases",
    "security: Security and access control tests",

    # Development workflow markers
    "wip: Work in progress tests (may be unstable)",
    "experimental: Experimental features under development",
    "deprecated: Tests for deprecated functionality"
]

# =============================================================================
# COVERAGE CONFIGURATION
# =============================================================================
# Coverage settings for comprehensive code coverage analysis

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/docs/*",
    "*/examples/*",
    "*/templates/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "if TYPE_CHECKING:",
    "from typing import TYPE_CHECKING"
]

# Coverage targets (fail if below these thresholds)
fail_under = 95

# =============================================================================
# LOGGING AND OUTPUT CONFIGURATION
# =============================================================================

# Enhanced logging for better test debugging
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Log file output for CI/CD integration
log_file = "output/test_logs/pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

# =============================================================================
# PERFORMANCE AND PARALLELIZATION
# =============================================================================

# Cache settings for improved performance
cache_dir = ".pytest_cache"

# Parallel execution settings (safe defaults)
numprocesses = "auto"  # Auto-detect based on CPU cores
dist = "loadscope"     # Distribute tests by file scope

# Memory and resource management
faulthandler_timeout = 300

# =============================================================================
# PLUGIN CONFIGURATION
# =============================================================================

# Disable potentially problematic plugins
disable_plugins = [
    "randomly",     # Random test ordering (can cause flaky tests)
    "sugar",        # Fancy output (can interfere with CI parsing)
    "benchmark",    # Benchmark plugin (enable only when needed)
    "stepwise"      # Stepwise execution (can interfere with parallelization)
]

# =============================================================================
# TEST ENVIRONMENT SETUP
# =============================================================================

# Environment variables for tests
env = [
    "PYTHONPATH=src",
    "PYTEST_DISABLE_PLUGIN_AUTOLOAD=1",
    "PYTEST_CURRENT_TEST=test_discovery"
]

# Filter warnings during test execution
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
    "ignore::FutureWarning"
]

# =============================================================================
# CI/CD INTEGRATION SETTINGS
# =============================================================================

# Settings for continuous integration environments
[tool:pytest.ini_options.env]
CI = "1"
PYTEST_XDIST_WORKER = "auto"
PYTEST_DISABLE_PLUGIN_AUTOLOAD = "1"

# =============================================================================
# DEVELOPMENT AND DEBUGGING
# =============================================================================

# Development mode settings (enable for local development)
[tool:pytest.ini_options.dev]
addopts = [
    "--verbose",
    "--capture=no",
    "--pdb",
    "--durations=0",
    "--exitfirst"
]

# =============================================================================
# USAGE EXAMPLES
# =============================================================================
#
# Run all tests:
#   pytest
#
# Run only fast tests:
#   pytest -m fast
#
# Run integration tests:
#   pytest -m integration
#
# Run with coverage:
#   pytest --cov=src --cov-report=html
#
# Run specific module tests:
#   pytest src/tests/test_gnn.py -v
#
# Run performance tests:
#   pytest -m performance --durations=0
#
# Debug failing tests:
#   pytest -xvs --pdb
#
# See test execution time breakdown:
#   pytest --durations=10 --durations-min=1.0
# =============================================================================