{
  "generated_from": "/home/trim/Documents/GitHub/GeneralizedNotationNotation/src",
  "count": 315,
  "entries": [
    {
      "file": "src/0_template.py",
      "module": "0_template",
      "functions": [
        {
          "name": "process_template_standardized_wrapper",
          "lineno": 110,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose",
            "simulate_error"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized template processing function.\n\nArgs:\n    target_dir: Directory containing files to process\n    output_dir: Output directory for template results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    simulate_error: Whether to simulate an error for testing\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "main",
          "lineno": 196,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main template processing function."
        },
        {
          "name": "setup_step_logging",
          "lineno": 72,
          "args": [
            "name",
            "args"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_start",
          "lineno": 73,
          "args": [
            "logger",
            "msg"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_success",
          "lineno": 74,
          "args": [
            "logger",
            "msg"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_error",
          "lineno": 75,
          "args": [
            "logger",
            "msg"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_warning",
          "lineno": 76,
          "args": [
            "logger",
            "msg"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "process_template_standardized",
          "lineno": 93,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "generate_correlation_id",
          "lineno": 96,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "safe_template_execution",
          "lineno": 100,
          "args": [
            "logger",
            "correlation_id"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "demonstrate_utility_patterns",
          "lineno": 107,
          "args": [
            "context",
            "logger"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "dummy_context",
          "lineno": 103,
          "args": [],
          "returns": null,
          "decorators": [
            "contextmanager"
          ],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/10_ontology.py",
      "module": "10_ontology",
      "functions": [
        {
          "name": "process_ontology_standardized",
          "lineno": 60,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized ontology processing function.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Output directory for ontology results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "main",
          "lineno": 140,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/11_render.py",
      "module": "11_render",
      "functions": [
        {
          "name": "process_render_standardized",
          "lineno": 103,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized render processing function.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Output directory for render results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "main",
          "lineno": 267,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main render processing function."
        },
        {
          "name": "generate_pymdp_code",
          "lineno": 61,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "generate_rxinfer_code",
          "lineno": 67,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "generate_rxinfer_fallback_code",
          "lineno": 73,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "generate_activeinference_jl_code",
          "lineno": 79,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "generate_activeinference_jl_fallback_code",
          "lineno": 85,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "generate_discopy_code",
          "lineno": 91,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "generate_discopy_fallback_code",
          "lineno": 97,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/12_execute.py",
      "module": "12_execute",
      "functions": [
        {
          "name": "generate_correlation_id",
          "lineno": 288,
          "args": [],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a correlation ID for tracking execution."
        },
        {
          "name": "main",
          "lineno": 294,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main execute processing function with comprehensive safety patterns."
        },
        {
          "name": "duration_seconds",
          "lineno": 63,
          "args": [
            "self"
          ],
          "returns": "float",
          "decorators": [
            "property"
          ],
          "doc": ""
        },
        {
          "name": "add_attempt",
          "lineno": 81,
          "args": [
            "self",
            "attempt"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Add an execution attempt to the context."
        },
        {
          "name": "total_attempts",
          "lineno": 86,
          "args": [
            "self"
          ],
          "returns": "int",
          "decorators": [
            "property"
          ],
          "doc": ""
        },
        {
          "name": "successful_attempts",
          "lineno": 90,
          "args": [
            "self"
          ],
          "returns": "int",
          "decorators": [
            "property"
          ],
          "doc": ""
        },
        {
          "name": "last_attempt",
          "lineno": 94,
          "args": [
            "self"
          ],
          "returns": "Optional[ExecutionAttempt]",
          "decorators": [
            "property"
          ],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 101,
          "args": [
            "self",
            "logger"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "classify_error",
          "lineno": 110,
          "args": [
            "self",
            "error_message",
            "exit_code"
          ],
          "returns": "ExecutionErrorType",
          "decorators": [],
          "doc": "Classify error type based on error message and exit code."
        },
        {
          "name": "get_recovery_suggestion",
          "lineno": 133,
          "args": [
            "self",
            "error_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get recovery suggestion based on error type."
        },
        {
          "name": "execution_safety_context",
          "lineno": 149,
          "args": [
            "self",
            "context"
          ],
          "returns": null,
          "decorators": [
            "contextmanager"
          ],
          "doc": "Context manager for safe execution with cleanup."
        },
        {
          "name": "execute_with_retry",
          "lineno": 173,
          "args": [
            "self",
            "context"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Execute with retry logic."
        },
        {
          "name": "_execute_single_attempt",
          "lineno": 223,
          "args": [
            "self",
            "context",
            "attempt"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Execute a single attempt with comprehensive monitoring."
        },
        {
          "name": "_run_subprocess",
          "lineno": 264,
          "args": [
            "self",
            "context"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Run subprocess with monitoring."
        }
      ],
      "classes": [
        {
          "name": "ExecutionErrorType",
          "lineno": 37,
          "bases": [
            "Enum"
          ],
          "doc": "Classification of execution errors for better handling and recovery.",
          "methods": []
        },
        {
          "name": "ExecutionAttempt",
          "lineno": 51,
          "bases": [],
          "doc": "Track individual execution attempts with detailed metadata.",
          "methods": [
            {
              "name": "duration_seconds",
              "lineno": 63,
              "args": [
                "self"
              ],
              "returns": "float",
              "decorators": [
                "property"
              ],
              "doc": ""
            }
          ]
        },
        {
          "name": "ExecutionContext",
          "lineno": 70,
          "bases": [],
          "doc": "Execution context with safety features.",
          "methods": [
            {
              "name": "add_attempt",
              "lineno": 81,
              "args": [
                "self",
                "attempt"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Add an execution attempt to the context."
            },
            {
              "name": "total_attempts",
              "lineno": 86,
              "args": [
                "self"
              ],
              "returns": "int",
              "decorators": [
                "property"
              ],
              "doc": ""
            },
            {
              "name": "successful_attempts",
              "lineno": 90,
              "args": [
                "self"
              ],
              "returns": "int",
              "decorators": [
                "property"
              ],
              "doc": ""
            },
            {
              "name": "last_attempt",
              "lineno": 94,
              "args": [
                "self"
              ],
              "returns": "Optional[ExecutionAttempt]",
              "decorators": [
                "property"
              ],
              "doc": ""
            }
          ]
        },
        {
          "name": "ExecutionManager",
          "lineno": 98,
          "bases": [],
          "doc": "Manages execution with comprehensive safety patterns.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 101,
              "args": [
                "self",
                "logger"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "classify_error",
              "lineno": 110,
              "args": [
                "self",
                "error_message",
                "exit_code"
              ],
              "returns": "ExecutionErrorType",
              "decorators": [],
              "doc": "Classify error type based on error message and exit code."
            },
            {
              "name": "get_recovery_suggestion",
              "lineno": 133,
              "args": [
                "self",
                "error_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Get recovery suggestion based on error type."
            },
            {
              "name": "execution_safety_context",
              "lineno": 149,
              "args": [
                "self",
                "context"
              ],
              "returns": null,
              "decorators": [
                "contextmanager"
              ],
              "doc": "Context manager for safe execution with cleanup."
            },
            {
              "name": "execute_with_retry",
              "lineno": 173,
              "args": [
                "self",
                "context"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Execute with retry logic."
            },
            {
              "name": "_execute_single_attempt",
              "lineno": 223,
              "args": [
                "self",
                "context",
                "attempt"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Execute a single attempt with comprehensive monitoring."
            },
            {
              "name": "_run_subprocess",
              "lineno": 264,
              "args": [
                "self",
                "context"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Run subprocess with monitoring."
            }
          ]
        }
      ]
    },
    {
      "file": "src/13_llm.py",
      "module": "13_llm",
      "functions": [
        {
          "name": "process_llm_standardized",
          "lineno": 47,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized LLM processing function.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Output directory for LLM results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "main",
          "lineno": 131,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main LLM processing function."
        }
      ],
      "classes": []
    },
    {
      "file": "src/14_ml_integration.py",
      "module": "14_ml_integration",
      "functions": [
        {
          "name": "process_ml_integration_standardized",
          "lineno": 47,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized ML integration processing function.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Output directory for ML integration results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "main",
          "lineno": 125,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main ML integration processing function."
        }
      ],
      "classes": []
    },
    {
      "file": "src/15_audio.py",
      "module": "15_audio",
      "functions": [
        {
          "name": "process_audio_standardized",
          "lineno": 47,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized audio processing function.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Output directory for audio results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "main",
          "lineno": 131,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main audio processing function."
        }
      ],
      "classes": []
    },
    {
      "file": "src/16_analysis.py",
      "module": "16_analysis",
      "functions": [
        {
          "name": "process_analysis_standardized",
          "lineno": 46,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized analysis processing function.\n\nArgs:\n    target_dir: Directory containing GNN files to analyze\n    output_dir: Output directory for analysis results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "main",
          "lineno": 124,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main analysis processing function."
        }
      ],
      "classes": []
    },
    {
      "file": "src/17_integration.py",
      "module": "17_integration",
      "functions": [
        {
          "name": "process_integration_standardized",
          "lineno": 47,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized integration processing function.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Output directory for integration results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "main",
          "lineno": 125,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main integration processing function."
        }
      ],
      "classes": []
    },
    {
      "file": "src/18_security.py",
      "module": "18_security",
      "functions": [
        {
          "name": "process_security_standardized",
          "lineno": 47,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized security processing function.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Output directory for security results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "main",
          "lineno": 125,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main security processing function."
        }
      ],
      "classes": []
    },
    {
      "file": "src/19_research.py",
      "module": "19_research",
      "functions": [
        {
          "name": "process_research_standardized",
          "lineno": 47,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized research processing function.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Output directory for research results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "main",
          "lineno": 125,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main research processing function."
        }
      ],
      "classes": []
    },
    {
      "file": "src/1_setup.py",
      "module": "1_setup",
      "functions": [
        {
          "name": "install_uv_if_needed",
          "lineno": 51,
          "args": [
            "logger"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Install UV if it's not available."
        },
        {
          "name": "process_setup_standardized",
          "lineno": 128,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized setup processing function.\n\nArgs:\n    target_dir: Directory containing files to process\n    output_dir: Directory to write output files\n    logger: Logger instance for logging\n    recursive: Whether to process subdirectories recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional keyword arguments\n    \nReturns:\n    True if setup was successful, False otherwise"
        },
        {
          "name": "main",
          "lineno": 207,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_system_info",
          "lineno": 104,
          "args": [
            "logger"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "check_uv_availability",
          "lineno": 108,
          "args": [
            "logger"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "setup_uv_environment",
          "lineno": 112,
          "args": [
            "project_root",
            "logger"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "install_optional_dependencies",
          "lineno": 116,
          "args": [
            "project_root",
            "logger",
            "package_groups"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "validate_uv_setup",
          "lineno": 120,
          "args": [
            "project_root",
            "logger"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "create_project_structure",
          "lineno": 124,
          "args": [
            "output_dir",
            "logger"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/20_website.py",
      "module": "20_website",
      "functions": [
        {
          "name": "process_website_standardized",
          "lineno": 47,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized website generation function.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Output directory for website files\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "main",
          "lineno": 129,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main website generation function."
        }
      ],
      "classes": []
    },
    {
      "file": "src/21_report.py",
      "module": "21_report",
      "functions": [
        {
          "name": "process_report_standardized",
          "lineno": 47,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized report generation function.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Output directory for report files\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "main",
          "lineno": 125,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main report generation function."
        }
      ],
      "classes": []
    },
    {
      "file": "src/22_mcp.py",
      "module": "22_mcp",
      "functions": [
        {
          "name": "process_mcp_standardized",
          "lineno": 47,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized MCP processing function.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Output directory for MCP results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "main",
          "lineno": 129,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main MCP processing function."
        }
      ],
      "classes": []
    },
    {
      "file": "src/2_tests.py",
      "module": "2_tests",
      "functions": [
        {
          "name": "apply_pathlib_patch",
          "lineno": 61,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Apply patch for Python 3.13 pathlib recursion issue."
        },
        {
          "name": "log_resolved_paths_and_args",
          "lineno": 98,
          "args": [
            "args",
            "logger"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Log resolved paths and arguments with validation."
        },
        {
          "name": "ensure_output_dir",
          "lineno": 117,
          "args": [
            "output_dir",
            "logger"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Ensure output directory exists with error handling."
        },
        {
          "name": "ensure_test_dir_exists",
          "lineno": 137,
          "args": [
            "logger"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "ensure_dependencies",
          "lineno": 147,
          "args": [
            "logger"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Check dependencies using the correct Python environment."
        },
        {
          "name": "parse_enhanced_arguments",
          "lineno": 177,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Parse arguments with error handling and validation."
        },
        {
          "name": "discover_test_files",
          "lineno": 240,
          "args": [
            "target_dir"
          ],
          "returns": "List[Path]",
          "decorators": [],
          "doc": "Discover test files in the target directory.\n\nThis function recursively searches for files matching the pattern \"test_*.py\".\n\nArgs:\n    target_dir: Directory to search for test files (defaults to src/tests)\n    \nReturns:\n    List of Path objects for test files."
        },
        {
          "name": "process_tests_standardized",
          "lineno": 262,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized test processing function.\n\nArgs:\n    target_dir: Directory containing files to process\n    output_dir: Directory to write output files\n    logger: Logger instance for logging\n    recursive: Whether to process subdirectories recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional keyword arguments\n    \nReturns:\n    True if tests passed, False otherwise"
        },
        {
          "name": "validate_test_syntax",
          "lineno": 375,
          "args": [
            "test_files"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Validate syntax of test files.\n\nArgs:\n    test_files: List of test file paths\n    \nReturns:\n    List of syntax error messages"
        },
        {
          "name": "execute_test_suite",
          "lineno": 400,
          "args": [
            "test_files",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Execute the test suite with proper error handling.\n\nArgs:\n    test_files: List of test file paths\n    verbose: Whether to enable verbose output\n    \nReturns:\n    Dictionary with test execution results"
        },
        {
          "name": "generate_test_report",
          "lineno": 484,
          "args": [
            "test_results",
            "syntax_errors"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate comprehensive test report.\n\nArgs:\n    test_results: Test execution results\n    syntax_errors: List of syntax errors\n    \nReturns:\n    Comprehensive test report"
        },
        {
          "name": "main",
          "lineno": 516,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "create_test_runner",
          "lineno": 55,
          "args": [
            "args",
            "logger"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Fallback test runner creation."
        },
        {
          "name": "_patched_tail",
          "lineno": 72,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/3_gnn.py",
      "module": "3_gnn",
      "functions": [
        {
          "name": "main",
          "lineno": 26,
          "args": [],
          "returns": "int",
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/4_model_registry.py",
      "module": "4_model_registry",
      "functions": [
        {
          "name": "process_model_registry_standardized",
          "lineno": 53,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized model registry processing function.\n\nArgs:\n    target_dir: Directory containing GNN files to register\n    output_dir: Output directory for registry data\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "register_model_fallback",
          "lineno": 185,
          "args": [
            "gnn_file",
            "output_dir"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Fallback implementation for model registration when registry module is not available.\n\nArgs:\n    gnn_file: Path to GNN file\n    output_dir: Output directory\n    \nReturns:\n    True if registration succeeded, False otherwise"
        },
        {
          "name": "extract_model_name",
          "lineno": 233,
          "args": [
            "content"
          ],
          "returns": "Optional[str]",
          "decorators": [],
          "doc": "Extract model name from GNN content.\n\nArgs:\n    content: GNN file content\n    \nReturns:\n    Model name if found, None otherwise"
        }
      ],
      "classes": []
    },
    {
      "file": "src/5_type_checker.py",
      "module": "5_type_checker",
      "functions": [
        {
          "name": "_run_type_check",
          "lineno": 42,
          "args": [
            "target_dir",
            "output_dir",
            "logger"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "main",
          "lineno": 194,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/6_validation.py",
      "module": "6_validation",
      "functions": [
        {
          "name": "process_validation_standardized",
          "lineno": 67,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized validation processing function.\n\nArgs:\n    target_dir: Directory containing GNN files to validate\n    output_dir: Output directory for validation results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "main",
          "lineno": 260,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main validation processing function."
        }
      ],
      "classes": []
    },
    {
      "file": "src/7_export.py",
      "module": "7_export",
      "functions": [
        {
          "name": "process_export_standardized",
          "lineno": 82,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized export processing function.\n\nArgs:\n    target_dir: Directory containing GNN files to export\n    output_dir: Output directory for export results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "main",
          "lineno": 252,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main export processing function."
        },
        {
          "name": "export_to_json",
          "lineno": 59,
          "args": [
            "model_data",
            "output_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "export_to_xml",
          "lineno": 63,
          "args": [
            "model_data",
            "output_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "export_to_graphml",
          "lineno": 67,
          "args": [
            "model_data",
            "output_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "export_to_gexf",
          "lineno": 71,
          "args": [
            "model_data",
            "output_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "export_to_pickle",
          "lineno": 75,
          "args": [
            "model_data",
            "output_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "export_gnn_model",
          "lineno": 79,
          "args": [
            "model_data",
            "output_dir",
            "formats"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/8_visualization.py",
      "module": "8_visualization",
      "functions": [
        {
          "name": "process_visualization_standardized",
          "lineno": 79,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized visualization processing function.\n\nArgs:\n    target_dir: Directory containing GNN files to visualize\n    output_dir: Output directory for visualization results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "main",
          "lineno": 270,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main visualization processing function."
        },
        {
          "name": "process_visualization",
          "lineno": 62,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "process_matrix_visualization",
          "lineno": 65,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "generate_visualizations",
          "lineno": 68,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 72,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 76,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "MatrixVisualizer",
          "lineno": 71,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "__init__",
              "lineno": 72,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "GNNVisualizer",
          "lineno": 75,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "__init__",
              "lineno": 76,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/9_advanced_viz.py",
      "module": "9_advanced_viz",
      "functions": [
        {
          "name": "process_advanced_viz_standardized",
          "lineno": 510,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized advanced visualization processing with comprehensive safety patterns."
        },
        {
          "name": "_save_results",
          "lineno": 707,
          "args": [
            "results",
            "output_dir",
            "logger",
            "correlation_id"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Save visualization results safely."
        },
        {
          "name": "generate_correlation_id",
          "lineno": 727,
          "args": [],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a correlation ID for tracking."
        },
        {
          "name": "duration_seconds",
          "lineno": 80,
          "args": [
            "self"
          ],
          "returns": "float",
          "decorators": [
            "property"
          ],
          "doc": ""
        },
        {
          "name": "to_dict",
          "lineno": 105,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Convert to dictionary for JSON serialization."
        },
        {
          "name": "__init__",
          "lineno": 144,
          "args": [
            "self",
            "logger",
            "correlation_id"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "safe_processing_context",
          "lineno": 149,
          "args": [
            "self",
            "file_name"
          ],
          "returns": null,
          "decorators": [
            "contextmanager"
          ],
          "doc": "Context manager for safe processing operations."
        },
        {
          "name": "create_robust_fallback_visualization",
          "lineno": 160,
          "args": [
            "self",
            "content",
            "file_name",
            "output_dir",
            "viz_type",
            "export_formats",
            "error_message"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Create comprehensive fallback visualizations."
        },
        {
          "name": "generate_fallback_html_visualization",
          "lineno": 227,
          "args": [
            "self",
            "content",
            "model_name",
            "error_message"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate comprehensive fallback HTML visualization."
        },
        {
          "name": "extract_fallback_visualization_data",
          "lineno": 450,
          "args": [
            "self",
            "content",
            "error_message"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Extract basic visualization data from content (fallback mode)."
        }
      ],
      "classes": [
        {
          "name": "AdvancedVisualizationAttempt",
          "lineno": 69,
          "bases": [],
          "doc": "Track individual advanced visualization attempts.",
          "methods": [
            {
              "name": "duration_seconds",
              "lineno": 80,
              "args": [
                "self"
              ],
              "returns": "float",
              "decorators": [
                "property"
              ],
              "doc": ""
            }
          ]
        },
        {
          "name": "AdvancedVisualizationResults",
          "lineno": 87,
          "bases": [],
          "doc": "Comprehensive advanced visualization results.",
          "methods": [
            {
              "name": "to_dict",
              "lineno": 105,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Convert to dictionary for JSON serialization."
            }
          ]
        },
        {
          "name": "SafeAdvancedVisualizationManager",
          "lineno": 141,
          "bases": [],
          "doc": "Manages advanced visualization with comprehensive safety patterns.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 144,
              "args": [
                "self",
                "logger",
                "correlation_id"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "safe_processing_context",
              "lineno": 149,
              "args": [
                "self",
                "file_name"
              ],
              "returns": null,
              "decorators": [
                "contextmanager"
              ],
              "doc": "Context manager for safe processing operations."
            },
            {
              "name": "create_robust_fallback_visualization",
              "lineno": 160,
              "args": [
                "self",
                "content",
                "file_name",
                "output_dir",
                "viz_type",
                "export_formats",
                "error_message"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Create comprehensive fallback visualizations."
            },
            {
              "name": "generate_fallback_html_visualization",
              "lineno": 227,
              "args": [
                "self",
                "content",
                "model_name",
                "error_message"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate comprehensive fallback HTML visualization."
            },
            {
              "name": "extract_fallback_visualization_data",
              "lineno": 450,
              "args": [
                "self",
                "content",
                "error_message"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Extract basic visualization data from content (fallback mode)."
            }
          ]
        }
      ]
    },
    {
      "file": "src/__init__.py",
      "module": "__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/advanced_visualization/__init__.py",
      "module": "advanced_visualization.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/advanced_visualization/dashboard.py",
      "module": "advanced_visualization.dashboard",
      "functions": [
        {
          "name": "generate_dashboard",
          "lineno": 549,
          "args": [
            "content",
            "model_name",
            "output_dir",
            "strict_validation"
          ],
          "returns": "Optional[Path]",
          "decorators": [],
          "doc": "Generate a comprehensive dashboard for a GNN model.\n\nThis is a standalone function that wraps the DashboardGenerator class\nfor direct module-level imports.\n\nArgs:\n    content: GNN file content as string\n    model_name: Name of the model\n    output_dir: Output directory for generated files\n    strict_validation: Whether to use strict validation during parsing\n    \nReturns:\n    Path to the generated dashboard file, or None if generation failed"
        },
        {
          "name": "__init__",
          "lineno": 22,
          "args": [
            "self",
            "strict_validation"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the dashboard generator.\n\nArgs:\n    strict_validation: Whether to use strict validation during parsing"
        },
        {
          "name": "generate_dashboard",
          "lineno": 32,
          "args": [
            "self",
            "content",
            "model_name",
            "output_dir"
          ],
          "returns": "Optional[Path]",
          "decorators": [],
          "doc": "Generate a comprehensive dashboard for a GNN model.\n\nArgs:\n    content: GNN file content as string\n    model_name: Name of the model\n    output_dir: Output directory for generated files\n    \nReturns:\n    Path to the generated dashboard file, or None if generation failed"
        },
        {
          "name": "_generate_dashboard_html",
          "lineno": 73,
          "args": [
            "self",
            "extracted_data",
            "model_name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate comprehensive dashboard HTML.\n\nArgs:\n    extracted_data: Extracted visualization data\n    model_name: Name of the model\n    \nReturns:\n    HTML content for the dashboard"
        }
      ],
      "classes": [
        {
          "name": "DashboardGenerator",
          "lineno": 17,
          "bases": [],
          "doc": "Generates comprehensive dashboards for GNN models.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 22,
              "args": [
                "self",
                "strict_validation"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the dashboard generator.\n\nArgs:\n    strict_validation: Whether to use strict validation during parsing"
            },
            {
              "name": "generate_dashboard",
              "lineno": 32,
              "args": [
                "self",
                "content",
                "model_name",
                "output_dir"
              ],
              "returns": "Optional[Path]",
              "decorators": [],
              "doc": "Generate a comprehensive dashboard for a GNN model.\n\nArgs:\n    content: GNN file content as string\n    model_name: Name of the model\n    output_dir: Output directory for generated files\n    \nReturns:\n    Path to the generated dashboard file, or None if generation failed"
            },
            {
              "name": "_generate_dashboard_html",
              "lineno": 73,
              "args": [
                "self",
                "extracted_data",
                "model_name"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate comprehensive dashboard HTML.\n\nArgs:\n    extracted_data: Extracted visualization data\n    model_name: Name of the model\n    \nReturns:\n    HTML content for the dashboard"
            }
          ]
        }
      ]
    },
    {
      "file": "src/advanced_visualization/data_extractor.py",
      "module": "advanced_visualization.data_extractor",
      "functions": [
        {
          "name": "extract_visualization_data",
          "lineno": 270,
          "args": [
            "target_dir",
            "output_dir"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Extract visualization data from GNN files in the target directory.\n\nArgs:\n    target_dir: Directory containing GNN files\n    output_dir: Directory to save extracted data\n    **kwargs: Additional arguments\n    \nReturns:\n    Dictionary with extraction results"
        },
        {
          "name": "__init__",
          "lineno": 22,
          "args": [
            "self",
            "strict_validation"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the data extractor with the GNN parsing system.\n\nArgs:\n    strict_validation: Whether to use strict validation during parsing"
        },
        {
          "name": "extract_from_file",
          "lineno": 31,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Extract visualization data from a GNN file.\n\nArgs:\n    file_path: Path to the GNN file\n    \nReturns:\n    Dictionary containing extracted visualization data"
        },
        {
          "name": "extract_from_content",
          "lineno": 71,
          "args": [
            "self",
            "content",
            "format_hint"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Extract visualization data from GNN content string.\n\nArgs:\n    content: GNN file content as string\n    format_hint: Optional format hint for parsing\n    \nReturns:\n    Dictionary containing extracted visualization data"
        },
        {
          "name": "_extract_from_model",
          "lineno": 117,
          "args": [
            "self",
            "model"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Extract visualization data from a parsed GNN model.\n\nArgs:\n    model: Parsed GNN model (GNNInternalRepresentation)\n    \nReturns:\n    Dictionary containing extracted visualization data"
        },
        {
          "name": "get_model_statistics",
          "lineno": 217,
          "args": [
            "self",
            "extracted_data"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate statistics from extracted visualization data.\n\nArgs:\n    extracted_data: Data extracted by extract_from_file or extract_from_content\n    \nReturns:\n    Dictionary containing model statistics"
        }
      ],
      "classes": [
        {
          "name": "VisualizationDataExtractor",
          "lineno": 17,
          "bases": [],
          "doc": "Extracts visualization data from GNN files using the comprehensive parsing system.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 22,
              "args": [
                "self",
                "strict_validation"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the data extractor with the GNN parsing system.\n\nArgs:\n    strict_validation: Whether to use strict validation during parsing"
            },
            {
              "name": "extract_from_file",
              "lineno": 31,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Extract visualization data from a GNN file.\n\nArgs:\n    file_path: Path to the GNN file\n    \nReturns:\n    Dictionary containing extracted visualization data"
            },
            {
              "name": "extract_from_content",
              "lineno": 71,
              "args": [
                "self",
                "content",
                "format_hint"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Extract visualization data from GNN content string.\n\nArgs:\n    content: GNN file content as string\n    format_hint: Optional format hint for parsing\n    \nReturns:\n    Dictionary containing extracted visualization data"
            },
            {
              "name": "_extract_from_model",
              "lineno": 117,
              "args": [
                "self",
                "model"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Extract visualization data from a parsed GNN model.\n\nArgs:\n    model: Parsed GNN model (GNNInternalRepresentation)\n    \nReturns:\n    Dictionary containing extracted visualization data"
            },
            {
              "name": "get_model_statistics",
              "lineno": 217,
              "args": [
                "self",
                "extracted_data"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Generate statistics from extracted visualization data.\n\nArgs:\n    extracted_data: Data extracted by extract_from_file or extract_from_content\n    \nReturns:\n    Dictionary containing model statistics"
            }
          ]
        }
      ]
    },
    {
      "file": "src/advanced_visualization/html_generator.py",
      "module": "advanced_visualization.html_generator",
      "functions": [
        {
          "name": "__init__",
          "lineno": 19,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the HTML generator."
        },
        {
          "name": "generate_advanced_visualization",
          "lineno": 23,
          "args": [
            "self",
            "extracted_data",
            "model_name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a comprehensive HTML visualization for a GNN model.\n\nArgs:\n    extracted_data: Data extracted from GNN file\n    model_name: Name of the model\n    \nReturns:\n    HTML content as string"
        },
        {
          "name": "_generate_error_page",
          "lineno": 468,
          "args": [
            "self",
            "model_name",
            "errors"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate an error page when visualization data extraction fails.\n\nArgs:\n    model_name: Name of the model\n    errors: List of error messages\n    \nReturns:\n    HTML content for error page"
        }
      ],
      "classes": [
        {
          "name": "HTMLVisualizationGenerator",
          "lineno": 14,
          "bases": [],
          "doc": "Generates rich HTML visualizations from GNN model data.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 19,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the HTML generator."
            },
            {
              "name": "generate_advanced_visualization",
              "lineno": 23,
              "args": [
                "self",
                "extracted_data",
                "model_name"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate a comprehensive HTML visualization for a GNN model.\n\nArgs:\n    extracted_data: Data extracted from GNN file\n    model_name: Name of the model\n    \nReturns:\n    HTML content as string"
            },
            {
              "name": "_generate_error_page",
              "lineno": 468,
              "args": [
                "self",
                "model_name",
                "errors"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate an error page when visualization data extraction fails.\n\nArgs:\n    model_name: Name of the model\n    errors: List of error messages\n    \nReturns:\n    HTML content for error page"
            }
          ]
        }
      ]
    },
    {
      "file": "src/advanced_visualization/visualizer.py",
      "module": "advanced_visualization.visualizer",
      "functions": [
        {
          "name": "visualizer",
          "lineno": 14,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Advanced visualization function for GNN models."
        },
        {
          "name": "dashboard",
          "lineno": 47,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Create an interactive dashboard for GNN analysis."
        },
        {
          "name": "create_visualization_from_data",
          "lineno": 78,
          "args": [
            "data"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Create a visualization from data."
        },
        {
          "name": "create_dashboard_section",
          "lineno": 95,
          "args": [
            "data"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Create a dashboard section from data."
        },
        {
          "name": "create_network_visualization",
          "lineno": 110,
          "args": [
            "data"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Create a network visualization."
        },
        {
          "name": "create_timeline_visualization",
          "lineno": 135,
          "args": [
            "data"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Create a timeline visualization."
        },
        {
          "name": "create_heatmap_visualization",
          "lineno": 156,
          "args": [
            "data"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Create a heatmap visualization."
        },
        {
          "name": "create_default_visualization",
          "lineno": 177,
          "args": [
            "data"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Create a default visualization."
        }
      ],
      "classes": []
    },
    {
      "file": "src/analysis/__init__.py",
      "module": "analysis.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/analysis/analyzer.py",
      "module": "analysis.analyzer",
      "functions": [
        {
          "name": "perform_statistical_analysis",
          "lineno": 12,
          "args": [
            "file_path",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Perform comprehensive statistical analysis on a GNN file."
        },
        {
          "name": "extract_variables_for_analysis",
          "lineno": 53,
          "args": [
            "content"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract variables for statistical analysis."
        },
        {
          "name": "extract_connections_for_analysis",
          "lineno": 76,
          "args": [
            "content"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract connections for statistical analysis."
        },
        {
          "name": "extract_sections_for_analysis",
          "lineno": 99,
          "args": [
            "content"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract sections for statistical analysis."
        },
        {
          "name": "calculate_variable_statistics",
          "lineno": 119,
          "args": [
            "variables"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Calculate statistics for variables."
        },
        {
          "name": "calculate_connection_statistics",
          "lineno": 138,
          "args": [
            "connections"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Calculate statistics for connections."
        },
        {
          "name": "calculate_section_statistics",
          "lineno": 151,
          "args": [
            "sections"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Calculate statistics for sections."
        },
        {
          "name": "count_type_distribution",
          "lineno": 164,
          "args": [
            "variables"
          ],
          "returns": "Dict[str, int]",
          "decorators": [],
          "doc": "Count distribution of variable types."
        },
        {
          "name": "build_connectivity_matrix",
          "lineno": 172,
          "args": [
            "connections"
          ],
          "returns": "Dict[str, List[str]]",
          "decorators": [],
          "doc": "Build connectivity matrix from connections."
        },
        {
          "name": "analyze_distributions",
          "lineno": 183,
          "args": [
            "variables",
            "connections"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze distributions of model elements."
        },
        {
          "name": "calculate_correlations",
          "lineno": 224,
          "args": [
            "variables",
            "connections"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Calculate correlations between model elements."
        },
        {
          "name": "calculate_cyclomatic_complexity",
          "lineno": 250,
          "args": [
            "variables",
            "connections"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Calculate cyclomatic complexity of the model."
        },
        {
          "name": "calculate_cognitive_complexity",
          "lineno": 254,
          "args": [
            "variables",
            "connections"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Calculate cognitive complexity of the model."
        },
        {
          "name": "calculate_structural_complexity",
          "lineno": 271,
          "args": [
            "variables",
            "connections"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Calculate structural complexity of the model."
        },
        {
          "name": "calculate_complexity_metrics",
          "lineno": 288,
          "args": [
            "file_path",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Calculate comprehensive complexity metrics for a GNN file."
        },
        {
          "name": "calculate_maintainability_index",
          "lineno": 313,
          "args": [
            "content",
            "variables",
            "connections"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Calculate maintainability index."
        },
        {
          "name": "calculate_technical_debt",
          "lineno": 326,
          "args": [
            "content",
            "variables",
            "connections"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Calculate technical debt score."
        },
        {
          "name": "run_performance_benchmarks",
          "lineno": 343,
          "args": [
            "file_path",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Run performance benchmarks on a GNN file."
        },
        {
          "name": "perform_model_comparisons",
          "lineno": 368,
          "args": [
            "statistical_analyses",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Perform comparisons between multiple models."
        },
        {
          "name": "generate_analysis_summary",
          "lineno": 421,
          "args": [
            "results"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a summary report of analysis results."
        }
      ],
      "classes": []
    },
    {
      "file": "src/analysis/mcp.py",
      "error": "parse_error: invalid syntax (<unknown>, line 15)"
    },
    {
      "file": "src/analysis/processor.py",
      "module": "analysis.processor",
      "functions": [
        {
          "name": "process_analysis",
          "lineno": 21,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process GNN files with comprehensive analysis.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Directory to save results\n    verbose: Enable verbose output\n    **kwargs: Additional arguments\n    \nReturns:\n    True if processing successful, False otherwise"
        },
        {
          "name": "convert_numpy_types",
          "lineno": 120,
          "args": [
            "obj"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Convert numpy types to native Python types for JSON serialization."
        }
      ],
      "classes": []
    },
    {
      "file": "src/audio/__init__.py",
      "module": "audio.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/audio/analyzer.py",
      "module": "audio.analyzer",
      "functions": [
        {
          "name": "get_module_info",
          "lineno": 13,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get comprehensive information about the audio module and its capabilities."
        },
        {
          "name": "get_audio_generation_options",
          "lineno": 52,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get audio generation options and capabilities."
        },
        {
          "name": "process_gnn_to_audio",
          "lineno": 67,
          "args": [
            "gnn_content",
            "model_name",
            "output_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Process GNN content to audio.\n\nArgs:\n    gnn_content: GNN file content\n    model_name: Name of the model\n    output_dir: Output directory for audio files\n    \nReturns:\n    Dictionary with processing results"
        },
        {
          "name": "convert_gnn_to_sapf",
          "lineno": 118,
          "args": [
            "gnn_content",
            "output_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Convert GNN content to SAPF format.\n\nArgs:\n    gnn_content: GNN file content\n    output_dir: Output directory for SAPF files\n    \nReturns:\n    Dictionary with conversion results"
        },
        {
          "name": "generate_audio_from_sapf",
          "lineno": 168,
          "args": [
            "sapf_config",
            "output_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate audio from SAPF configuration.\n\nArgs:\n    sapf_config: SAPF configuration dictionary\n    output_dir: Output directory for audio files\n    \nReturns:\n    Dictionary with generation results"
        },
        {
          "name": "validate_sapf_code",
          "lineno": 209,
          "args": [
            "sapf_code"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate SAPF code.\n\nArgs:\n    sapf_code: SAPF code string to validate\n    \nReturns:\n    Dictionary with validation results"
        }
      ],
      "classes": []
    },
    {
      "file": "src/audio/classes.py",
      "module": "audio.classes",
      "functions": [
        {
          "name": "__init__",
          "lineno": 16,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the audio generator."
        },
        {
          "name": "generate_audio",
          "lineno": 21,
          "args": [
            "self",
            "model_data"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Generate audio from model data."
        },
        {
          "name": "analyze_audio",
          "lineno": 78,
          "args": [
            "self",
            "audio_file"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Analyze audio characteristics."
        },
        {
          "name": "__init__",
          "lineno": 98,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "process_gnn_content",
          "lineno": 102,
          "args": [
            "self",
            "gnn_content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Process GNN content for audio generation."
        },
        {
          "name": "generate_audio",
          "lineno": 122,
          "args": [
            "self",
            "model_data",
            "output_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate audio from model data."
        }
      ],
      "classes": [
        {
          "name": "AudioGenerator",
          "lineno": 13,
          "bases": [],
          "doc": "Generates audio from GNN models.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 16,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the audio generator."
            },
            {
              "name": "generate_audio",
              "lineno": 21,
              "args": [
                "self",
                "model_data"
              ],
              "returns": "dict",
              "decorators": [],
              "doc": "Generate audio from model data."
            },
            {
              "name": "analyze_audio",
              "lineno": 78,
              "args": [
                "self",
                "audio_file"
              ],
              "returns": "dict",
              "decorators": [],
              "doc": "Analyze audio characteristics."
            }
          ]
        },
        {
          "name": "SAPFGNNProcessor",
          "lineno": 95,
          "bases": [],
          "doc": "SAPF (Sonification and Audio Processing Framework) GNN Processor.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 98,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "process_gnn_content",
              "lineno": 102,
              "args": [
                "self",
                "gnn_content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Process GNN content for audio generation."
            },
            {
              "name": "generate_audio",
              "lineno": 122,
              "args": [
                "self",
                "model_data",
                "output_dir"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Generate audio from model data."
            }
          ]
        }
      ]
    },
    {
      "file": "src/audio/generator.py",
      "module": "audio.generator",
      "functions": [
        {
          "name": "generate_tonal_representation",
          "lineno": 12,
          "args": [
            "variables",
            "connections"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Generate tonal audio representation of the model."
        },
        {
          "name": "generate_rhythmic_representation",
          "lineno": 34,
          "args": [
            "variables",
            "connections"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Generate rhythmic audio representation of the model."
        },
        {
          "name": "generate_ambient_representation",
          "lineno": 56,
          "args": [
            "variables",
            "connections"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Generate ambient audio representation of the model."
        },
        {
          "name": "generate_sonification_audio",
          "lineno": 84,
          "args": [
            "dynamics"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Generate sonification audio from model dynamics."
        },
        {
          "name": "generate_oscillator_audio",
          "lineno": 111,
          "args": [
            "frequency",
            "duration",
            "oscillator_type",
            "sample_rate"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Generate oscillator audio.\n\nArgs:\n    frequency: Frequency in Hz\n    duration: Duration in seconds\n    oscillator_type: Type of oscillator ('sine', 'square', 'sawtooth', 'triangle', 'noise')\n    sample_rate: Sample rate in Hz\n    \nReturns:\n    Audio array"
        },
        {
          "name": "apply_envelope",
          "lineno": 142,
          "args": [
            "audio",
            "envelope_type"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Apply envelope to audio.\n\nArgs:\n    audio: Audio array\n    envelope_type: Type of envelope ('ADSR', 'AR', 'ASR', 'AD', 'custom')\n    \nReturns:\n    Audio array with envelope applied"
        },
        {
          "name": "mix_audio_channels",
          "lineno": 163,
          "args": [
            "channels",
            "mix_mode"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Mix multiple audio channels.\n\nArgs:\n    channels: List of audio arrays\n    mix_mode: Mixing mode ('add', 'average', 'max')\n    \nReturns:\n    Mixed audio array"
        },
        {
          "name": "__init__",
          "lineno": 210,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "generate_synthetic_audio",
          "lineno": 215,
          "args": [
            "self",
            "config"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Generate synthetic audio based on configuration."
        },
        {
          "name": "apply_envelope",
          "lineno": 247,
          "args": [
            "self",
            "audio",
            "envelope_type"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Apply envelope to audio."
        }
      ],
      "classes": [
        {
          "name": "SyntheticAudioGenerator",
          "lineno": 207,
          "bases": [],
          "doc": "Synthetic Audio Generator for creating artificial sounds.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 210,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "generate_synthetic_audio",
              "lineno": 215,
              "args": [
                "self",
                "config"
              ],
              "returns": "np.ndarray",
              "decorators": [],
              "doc": "Generate synthetic audio based on configuration."
            },
            {
              "name": "apply_envelope",
              "lineno": 247,
              "args": [
                "self",
                "audio",
                "envelope_type"
              ],
              "returns": "np.ndarray",
              "decorators": [],
              "doc": "Apply envelope to audio."
            }
          ]
        }
      ]
    },
    {
      "file": "src/audio/mcp.py",
      "module": "audio.mcp",
      "functions": [
        {
          "name": "process_audio_mcp",
          "lineno": 19,
          "args": [
            "target_directory",
            "output_directory",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Process audio for GNN files. Exposed via MCP.\n\nArgs:\n    target_directory: Directory containing GNN files to process\n    output_directory: Directory to save results\n    verbose: Enable verbose output\n    \nReturns:\n    Dictionary with operation status and results."
        },
        {
          "name": "register_tools",
          "lineno": 51,
          "args": [
            "mcp_instance"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register audio utility tools with the MCP."
        }
      ],
      "classes": []
    },
    {
      "file": "src/audio/processor.py",
      "module": "audio.processor",
      "functions": [
        {
          "name": "process_audio",
          "lineno": 23,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process GNN files with audio generation and sonification.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Directory to save results\n    verbose: Enable verbose output\n    **kwargs: Additional arguments\n    \nReturns:\n    True if processing successful, False otherwise"
        },
        {
          "name": "generate_audio_from_gnn",
          "lineno": 116,
          "args": [
            "file_path",
            "output_dir",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate audio from a GNN model.\n\nArgs:\n    file_path: Path to the GNN file\n    output_dir: Directory to save audio files\n    verbose: Enable verbose output\n    \nReturns:\n    Dictionary containing audio generation results"
        },
        {
          "name": "extract_variables_for_audio",
          "lineno": 169,
          "args": [
            "content"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract variables from GNN content for audio generation."
        },
        {
          "name": "extract_connections_for_audio",
          "lineno": 191,
          "args": [
            "content"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract connections from GNN content for audio generation."
        },
        {
          "name": "save_audio_file",
          "lineno": 213,
          "args": [
            "audio",
            "file_path",
            "sample_rate"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Save audio data to file."
        },
        {
          "name": "write_basic_wav",
          "lineno": 222,
          "args": [
            "audio",
            "file_path",
            "sample_rate"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Write basic WAV file without external dependencies."
        },
        {
          "name": "create_sonification",
          "lineno": 247,
          "args": [
            "file_path",
            "output_dir",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Create sonification of the GNN model."
        },
        {
          "name": "extract_model_dynamics",
          "lineno": 272,
          "args": [
            "content"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract model dynamics for sonification."
        },
        {
          "name": "analyze_audio_characteristics",
          "lineno": 295,
          "args": [
            "audio_result",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze characteristics of generated audio."
        },
        {
          "name": "generate_audio_summary",
          "lineno": 352,
          "args": [
            "results"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a markdown summary of audio processing results."
        }
      ],
      "classes": []
    },
    {
      "file": "src/audio/sapf/__init__.py",
      "module": "audio.sapf.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/audio/sapf/audio_generators.py",
      "module": "audio.sapf.audio_generators",
      "functions": [
        {
          "name": "generate_oscillator_audio",
          "lineno": 490,
          "args": [
            "frequency",
            "amplitude",
            "duration",
            "sample_rate",
            "osc_type"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Generate oscillator audio.\n\nArgs:\n    frequency: Oscillator frequency in Hz\n    amplitude: Amplitude (0.0 to 1.0)\n    duration: Duration in seconds\n    sample_rate: Sample rate in Hz\n    osc_type: Oscillator type ('sine', 'saw', 'square')\n    \nReturns:\n    Audio samples as numpy array"
        },
        {
          "name": "apply_envelope",
          "lineno": 518,
          "args": [
            "audio",
            "attack",
            "decay",
            "sustain",
            "release",
            "sample_rate"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Apply ADSR envelope to audio.\n\nArgs:\n    audio: Input audio samples\n    attack: Attack time in seconds\n    decay: Decay time in seconds  \n    sustain: Sustain level (0.0 to 1.0)\n    release: Release time in seconds\n    sample_rate: Sample rate in Hz\n    \nReturns:\n    Audio with envelope applied"
        },
        {
          "name": "mix_audio_channels",
          "lineno": 559,
          "args": [
            "audio_list",
            "weights"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Mix multiple audio channels together.\n\nArgs:\n    audio_list: List of audio arrays to mix\n    weights: Optional list of mixing weights\n    \nReturns:\n    Mixed audio"
        },
        {
          "name": "__init__",
          "lineno": 27,
          "args": [
            "self",
            "sample_rate"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "generate_from_sapf",
          "lineno": 31,
          "args": [
            "self",
            "sapf_code",
            "output_file",
            "duration",
            "create_visualization"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate audio file from SAPF code analysis with optional waveform visualization.\n\nArgs:\n    sapf_code: SAPF code to analyze and convert\n    output_file: Output audio file path\n    duration: Audio duration in seconds\n    create_visualization: Whether to create waveform and spectrum visualizations\n    \nReturns:\n    True if successful"
        },
        {
          "name": "_analyze_sapf_code",
          "lineno": 63,
          "args": [
            "self",
            "sapf_code"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze SAPF code to extract audio generation parameters.\n\nArgs:\n    sapf_code: SAPF code to analyze\n    \nReturns:\n    Dictionary of audio parameters"
        },
        {
          "name": "_generate_audio",
          "lineno": 235,
          "args": [
            "self",
            "params",
            "duration"
          ],
          "returns": "List[int]",
          "decorators": [],
          "doc": "Generate audio data based on parameters.\n\nArgs:\n    params: Audio generation parameters\n    duration: Audio duration in seconds\n    \nReturns:\n    List of 16-bit audio samples"
        },
        {
          "name": "_generate_oscillator",
          "lineno": 291,
          "args": [
            "self",
            "frequency",
            "amplitude",
            "osc_type",
            "samples"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Generate oscillator audio."
        },
        {
          "name": "_generate_lfo",
          "lineno": 306,
          "args": [
            "self",
            "frequency",
            "amount",
            "samples"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Generate LFO (Low Frequency Oscillator) modulation."
        },
        {
          "name": "_apply_lowpass_filter",
          "lineno": 311,
          "args": [
            "self",
            "audio",
            "cutoff"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Apply simple lowpass filter (basic implementation)."
        },
        {
          "name": "_generate_envelope",
          "lineno": 325,
          "args": [
            "self",
            "env_params",
            "samples"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Generate ADSR envelope."
        },
        {
          "name": "_write_wav_file",
          "lineno": 357,
          "args": [
            "self",
            "audio_data",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Write audio data to WAV file."
        },
        {
          "name": "_create_waveform_visualizations",
          "lineno": 376,
          "args": [
            "self",
            "audio_data",
            "output_file",
            "audio_params"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Create comprehensive waveform and frequency visualizations.\n\nArgs:\n    audio_data: Generated audio data\n    output_file: Base output file path for naming visualizations\n    audio_params: Audio parameters for visualization context"
        }
      ],
      "classes": [
        {
          "name": "SyntheticAudioGenerator",
          "lineno": 22,
          "bases": [],
          "doc": "Generates synthetic audio based on SAPF code analysis.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 27,
              "args": [
                "self",
                "sample_rate"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "generate_from_sapf",
              "lineno": 31,
              "args": [
                "self",
                "sapf_code",
                "output_file",
                "duration",
                "create_visualization"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Generate audio file from SAPF code analysis with optional waveform visualization.\n\nArgs:\n    sapf_code: SAPF code to analyze and convert\n    output_file: Output audio file path\n    duration: Audio duration in seconds\n    create_visualization: Whether to create waveform and spectrum visualizations\n    \nReturns:\n    True if successful"
            },
            {
              "name": "_analyze_sapf_code",
              "lineno": 63,
              "args": [
                "self",
                "sapf_code"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Analyze SAPF code to extract audio generation parameters.\n\nArgs:\n    sapf_code: SAPF code to analyze\n    \nReturns:\n    Dictionary of audio parameters"
            },
            {
              "name": "_generate_audio",
              "lineno": 235,
              "args": [
                "self",
                "params",
                "duration"
              ],
              "returns": "List[int]",
              "decorators": [],
              "doc": "Generate audio data based on parameters.\n\nArgs:\n    params: Audio generation parameters\n    duration: Audio duration in seconds\n    \nReturns:\n    List of 16-bit audio samples"
            },
            {
              "name": "_generate_oscillator",
              "lineno": 291,
              "args": [
                "self",
                "frequency",
                "amplitude",
                "osc_type",
                "samples"
              ],
              "returns": "np.ndarray",
              "decorators": [],
              "doc": "Generate oscillator audio."
            },
            {
              "name": "_generate_lfo",
              "lineno": 306,
              "args": [
                "self",
                "frequency",
                "amount",
                "samples"
              ],
              "returns": "np.ndarray",
              "decorators": [],
              "doc": "Generate LFO (Low Frequency Oscillator) modulation."
            },
            {
              "name": "_apply_lowpass_filter",
              "lineno": 311,
              "args": [
                "self",
                "audio",
                "cutoff"
              ],
              "returns": "np.ndarray",
              "decorators": [],
              "doc": "Apply simple lowpass filter (basic implementation)."
            },
            {
              "name": "_generate_envelope",
              "lineno": 325,
              "args": [
                "self",
                "env_params",
                "samples"
              ],
              "returns": "np.ndarray",
              "decorators": [],
              "doc": "Generate ADSR envelope."
            },
            {
              "name": "_write_wav_file",
              "lineno": 357,
              "args": [
                "self",
                "audio_data",
                "output_file"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Write audio data to WAV file."
            },
            {
              "name": "_create_waveform_visualizations",
              "lineno": 376,
              "args": [
                "self",
                "audio_data",
                "output_file",
                "audio_params"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Create comprehensive waveform and frequency visualizations.\n\nArgs:\n    audio_data: Generated audio data\n    output_file: Base output file path for naming visualizations\n    audio_params: Audio parameters for visualization context"
            }
          ]
        }
      ]
    },
    {
      "file": "src/audio/sapf/generator.py",
      "module": "audio.sapf.generator",
      "functions": [
        {
          "name": "generate_sapf_audio",
          "lineno": 13,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate SAPF (Sound As Pure Form) audio from GNN models.\n\nArgs:\n    target_dir: Directory containing GNN files to generate audio for\n    output_dir: Output directory for results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional audio generation options (e.g., duration)\n    \nReturns:\n    True if audio generation succeeded, False otherwise"
        }
      ],
      "classes": []
    },
    {
      "file": "src/audio/sapf/processor.py",
      "module": "audio.sapf.processor",
      "functions": [
        {
          "name": "process_gnn_to_audio",
          "lineno": 14,
          "args": [
            "gnn_content",
            "model_name",
            "output_dir",
            "duration",
            "validate_only"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Process GNN content to audio using SAPF.\n\nArgs:\n    gnn_content: GNN file content\n    model_name: Name of the model\n    output_dir: Output directory\n    duration: Audio duration in seconds\n    validate_only: Only validate, don't generate audio\n    \nReturns:\n    Dictionary with processing results"
        },
        {
          "name": "generate_sapf_audio",
          "lineno": 72,
          "args": [
            "sapf_code",
            "output_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Generate audio from SAPF code.\n\nArgs:\n    sapf_code: SAPF code string\n    output_path: Output file path\n    **kwargs: Additional arguments\n    \nReturns:\n    Dictionary with generation results"
        },
        {
          "name": "create_sapf_visualization",
          "lineno": 99,
          "args": [
            "sapf_code",
            "output_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Create visualization from SAPF code.\n\nArgs:\n    sapf_code: SAPF code string\n    output_path: Output file path (optional)\n    \nReturns:\n    Dictionary with visualization results"
        },
        {
          "name": "generate_sapf_report",
          "lineno": 161,
          "args": [
            "sapf_results",
            "output_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Generate report from SAPF results.\n\nArgs:\n    sapf_results: SAPF processing results\n    output_path: Output file path (optional)\n    \nReturns:\n    Dictionary with report results"
        }
      ],
      "classes": []
    },
    {
      "file": "src/audio/sapf/sapf_gnn_processor.py",
      "module": "audio.sapf.sapf_gnn_processor",
      "functions": [
        {
          "name": "convert_gnn_to_sapf",
          "lineno": 574,
          "args": [
            "gnn_content",
            "model_name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN content to SAPF code.\n\nArgs:\n    gnn_content: Raw GNN file content\n    model_name: Name of the model\n    \nReturns:\n    Generated SAPF code"
        },
        {
          "name": "validate_sapf_code",
          "lineno": 589,
          "args": [
            "sapf_code"
          ],
          "returns": "Tuple[bool, List[str]]",
          "decorators": [],
          "doc": "Validate SAPF code for basic syntax issues.\n\nArgs:\n    sapf_code: SAPF code to validate\n    \nReturns:\n    Tuple of (is_valid, list_of_issues)"
        },
        {
          "name": "generate_audio_from_sapf",
          "lineno": 626,
          "args": [
            "sapf_code",
            "output_file",
            "duration"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate audio file from SAPF code (using Python synthesis).\n\nArgs:\n    sapf_code: SAPF code to execute\n    output_file: Output audio file path\n    duration: Audio duration in seconds\n    \nReturns:\n    True if successful"
        },
        {
          "name": "__init__",
          "lineno": 22,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_gnn_sections",
          "lineno": 27,
          "args": [
            "self",
            "gnn_content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse GNN content into structured sections.\n\nArgs:\n    gnn_content: Raw GNN file content\n    \nReturns:\n    Dictionary containing parsed sections"
        },
        {
          "name": "_parse_state_space",
          "lineno": 82,
          "args": [
            "self",
            "content"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Parse StateSpaceBlock content including matrices, states, observations, and policies."
        },
        {
          "name": "_parse_connections",
          "lineno": 142,
          "args": [
            "self",
            "content"
          ],
          "returns": "List[Dict[str, str]]",
          "decorators": [],
          "doc": "Parse Connections content."
        },
        {
          "name": "_parse_parameters",
          "lineno": 164,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse InitialParameterization content."
        },
        {
          "name": "_parse_matrix",
          "lineno": 184,
          "args": [
            "self",
            "matrix_str"
          ],
          "returns": "List[List[float]]",
          "decorators": [],
          "doc": "Parse matrix string into numerical array."
        },
        {
          "name": "_parse_time_config",
          "lineno": 205,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse Time configuration."
        },
        {
          "name": "convert_to_sapf",
          "lineno": 221,
          "args": [
            "self",
            "gnn_sections",
            "model_name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert parsed GNN sections to SAPF code.\n\nArgs:\n    gnn_sections: Parsed GNN sections\n    model_name: Name of the model\n    \nReturns:\n    Generated SAPF code"
        },
        {
          "name": "_get_complexity_level",
          "lineno": 313,
          "args": [
            "self",
            "gnn_sections"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Determine complexity level based on model characteristics."
        },
        {
          "name": "_get_model_signature",
          "lineno": 328,
          "args": [
            "self",
            "model_name",
            "gnn_sections"
          ],
          "returns": "int",
          "decorators": [],
          "doc": "Generate a unique signature for each model based on name and structure."
        },
        {
          "name": "_get_model_scale",
          "lineno": 343,
          "args": [
            "self",
            "model_name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get musical scale based on model name for tonal differentiation."
        },
        {
          "name": "_get_model_tempo",
          "lineno": 361,
          "args": [
            "self",
            "complexity"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Get tempo multiplier based on complexity."
        },
        {
          "name": "_get_model_reverb",
          "lineno": 370,
          "args": [
            "self",
            "model_name"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Get reverb amount based on model characteristics."
        },
        {
          "name": "_generate_state_oscillators",
          "lineno": 381,
          "args": [
            "self",
            "state_space",
            "base_freq"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Generate SAPF code for state space oscillators."
        },
        {
          "name": "_generate_connection_routing",
          "lineno": 471,
          "args": [
            "self",
            "connections"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Generate SAPF code for connection routing."
        },
        {
          "name": "_generate_matrix_processing",
          "lineno": 502,
          "args": [
            "self",
            "params"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Generate SAPF code for matrix-based processing."
        },
        {
          "name": "_generate_temporal_structure",
          "lineno": 543,
          "args": [
            "self",
            "time_config"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Generate SAPF code for temporal structure."
        }
      ],
      "classes": [
        {
          "name": "SAPFGNNProcessor",
          "lineno": 17,
          "bases": [],
          "doc": "Main processor for converting GNN models to SAPF audio representations.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 22,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_gnn_sections",
              "lineno": 27,
              "args": [
                "self",
                "gnn_content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Parse GNN content into structured sections.\n\nArgs:\n    gnn_content: Raw GNN file content\n    \nReturns:\n    Dictionary containing parsed sections"
            },
            {
              "name": "_parse_state_space",
              "lineno": 82,
              "args": [
                "self",
                "content"
              ],
              "returns": "List[Dict[str, Any]]",
              "decorators": [],
              "doc": "Parse StateSpaceBlock content including matrices, states, observations, and policies."
            },
            {
              "name": "_parse_connections",
              "lineno": 142,
              "args": [
                "self",
                "content"
              ],
              "returns": "List[Dict[str, str]]",
              "decorators": [],
              "doc": "Parse Connections content."
            },
            {
              "name": "_parse_parameters",
              "lineno": 164,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Parse InitialParameterization content."
            },
            {
              "name": "_parse_matrix",
              "lineno": 184,
              "args": [
                "self",
                "matrix_str"
              ],
              "returns": "List[List[float]]",
              "decorators": [],
              "doc": "Parse matrix string into numerical array."
            },
            {
              "name": "_parse_time_config",
              "lineno": 205,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Parse Time configuration."
            },
            {
              "name": "convert_to_sapf",
              "lineno": 221,
              "args": [
                "self",
                "gnn_sections",
                "model_name"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert parsed GNN sections to SAPF code.\n\nArgs:\n    gnn_sections: Parsed GNN sections\n    model_name: Name of the model\n    \nReturns:\n    Generated SAPF code"
            },
            {
              "name": "_get_complexity_level",
              "lineno": 313,
              "args": [
                "self",
                "gnn_sections"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Determine complexity level based on model characteristics."
            },
            {
              "name": "_get_model_signature",
              "lineno": 328,
              "args": [
                "self",
                "model_name",
                "gnn_sections"
              ],
              "returns": "int",
              "decorators": [],
              "doc": "Generate a unique signature for each model based on name and structure."
            },
            {
              "name": "_get_model_scale",
              "lineno": 343,
              "args": [
                "self",
                "model_name"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Get musical scale based on model name for tonal differentiation."
            },
            {
              "name": "_get_model_tempo",
              "lineno": 361,
              "args": [
                "self",
                "complexity"
              ],
              "returns": "float",
              "decorators": [],
              "doc": "Get tempo multiplier based on complexity."
            },
            {
              "name": "_get_model_reverb",
              "lineno": 370,
              "args": [
                "self",
                "model_name"
              ],
              "returns": "float",
              "decorators": [],
              "doc": "Get reverb amount based on model characteristics."
            },
            {
              "name": "_generate_state_oscillators",
              "lineno": 381,
              "args": [
                "self",
                "state_space",
                "base_freq"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Generate SAPF code for state space oscillators."
            },
            {
              "name": "_generate_connection_routing",
              "lineno": 471,
              "args": [
                "self",
                "connections"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Generate SAPF code for connection routing."
            },
            {
              "name": "_generate_matrix_processing",
              "lineno": 502,
              "args": [
                "self",
                "params"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Generate SAPF code for matrix-based processing."
            },
            {
              "name": "_generate_temporal_structure",
              "lineno": 543,
              "args": [
                "self",
                "time_config"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Generate SAPF code for temporal structure."
            }
          ]
        }
      ]
    },
    {
      "file": "src/audio/sapf/utils.py",
      "module": "audio.sapf.utils",
      "functions": [
        {
          "name": "get_module_info",
          "lineno": 13,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Get comprehensive information about the SAPF module and its capabilities.\n\nReturns:\n    Dictionary with module information"
        },
        {
          "name": "get_audio_generation_options",
          "lineno": 59,
          "args": [],
          "returns": "dict",
          "decorators": [],
          "doc": "Get audio generation options and capabilities.\n\nReturns:\n    Dictionary with audio generation options"
        },
        {
          "name": "register_tools",
          "lineno": 78,
          "args": [],
          "returns": "bool",
          "decorators": [],
          "doc": "Register SAPF tools with the MCP server.\n\nReturns:\n    True if tools registered successfully"
        }
      ],
      "classes": []
    },
    {
      "file": "src/core.py",
      "module": "core",
      "functions": [
        {
          "name": "get_module_info",
          "lineno": 6,
          "args": [],
          "returns": "dict[str, object]",
          "decorators": [],
          "doc": "Get information about the core module."
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/__init__.py",
      "module": "execute.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/execute/activeinference_jl/__init__.py",
      "module": "execute.activeinference_jl.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/execute/activeinference_jl/activeinference_runner.py",
      "module": "execute.activeinference_jl.activeinference_runner",
      "functions": [
        {
          "name": "is_julia_available",
          "lineno": 27,
          "args": [],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if Julia is available in the system path.\n\nReturns:\n    bool: True if Julia is available, False otherwise"
        },
        {
          "name": "setup_julia_environment",
          "lineno": 79,
          "args": [
            "project_dir",
            "force_setup",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Setup Julia environment using the comprehensive setup script.\n\nArgs:\n    project_dir: Path to the ActiveInference.jl project directory\n    force_setup: Whether to force reinstall all packages\n    verbose: Whether to enable verbose setup output\n    \nReturns:\n    bool: True if setup was successful, False otherwise"
        },
        {
          "name": "_fallback_environment_setup",
          "lineno": 154,
          "args": [
            "project_dir"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Fallback environment setup using basic Pkg.instantiate().\n\nArgs:\n    project_dir: Path to the ActiveInference.jl project directory\n    \nReturns:\n    bool: True if fallback setup was successful, False otherwise"
        },
        {
          "name": "_validate_package",
          "lineno": 209,
          "args": [
            "project_dir",
            "package_name"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate that a package can be loaded.\n\nArgs:\n    project_dir: Path to the Julia project directory\n    package_name: Name of the package to validate\n    \nReturns:\n    bool: True if package loads successfully, False otherwise"
        },
        {
          "name": "get_environment_status",
          "lineno": 234,
          "args": [
            "project_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get detailed status of the Julia environment.\n\nArgs:\n    project_dir: Path to the Julia project directory\n    \nReturns:\n    Dict containing environment status information"
        },
        {
          "name": "execute_activeinference_script",
          "lineno": 273,
          "args": [
            "script_path",
            "verbose",
            "output_dir",
            "setup_environment"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Execute a single ActiveInference.jl script with enhanced environmental setup.\n\nArgs:\n    script_path: Path to the ActiveInference.jl script\n    verbose: Whether to enable verbose output\n    output_dir: Optional output directory for results\n    setup_environment: Whether to setup/validate environment before execution\n    \nReturns:\n    bool: True if execution was successful, False otherwise"
        },
        {
          "name": "find_activeinference_scripts",
          "lineno": 383,
          "args": [
            "search_dir",
            "recursive",
            "include_patterns"
          ],
          "returns": "List[Path]",
          "decorators": [],
          "doc": "Find ActiveInference.jl scripts in a directory.\n\nArgs:\n    search_dir: Directory to search for scripts\n    recursive: Whether to search recursively\n    include_patterns: Patterns to match (default: [\"*.jl\"])\n    \nReturns:\n    List of script paths found"
        },
        {
          "name": "run_activeinference_analysis",
          "lineno": 431,
          "args": [
            "rendered_simulators_dir",
            "execution_output_dir",
            "recursive_search",
            "verbose",
            "analysis_type",
            "force_setup"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Find and run ActiveInference.jl analysis scripts on rendered models with robust environment setup.\n\nArgs:\n    rendered_simulators_dir: Directory containing rendered simulators (target_dir from executor)\n    execution_output_dir: Specific directory for ActiveInference.jl execution outputs (optional)\n    recursive_search: Whether to search recursively for scripts\n    verbose: Whether to enable verbose output\n    analysis_type: Type of analysis to run ('basic', 'comprehensive', 'all')\n    force_setup: Whether to force environment reinstallation\n    \nReturns:\n    bool: True if analysis completed successfully, False if any failed"
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/discopy/__init__.py",
      "module": "execute.discopy.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/execute/discopy/discopy_executor.py",
      "module": "execute.discopy.discopy_executor",
      "functions": [
        {
          "name": "run_discopy_analysis",
          "lineno": 247,
          "args": [
            "rendered_simulators_dir",
            "execution_output_dir",
            "recursive_search",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Find and analyze all DisCoPy outputs in the designated directory.\n\nArgs:\n    rendered_simulators_dir: Directory containing rendered simulators (target_dir from executor)\n    execution_output_dir: Specific directory for DisCoPy execution outputs (optional)\n    recursive_search: Whether to search recursively for outputs\n    verbose: Whether to enable verbose output\n    \nReturns:\n    bool: True if analysis completed successfully, False if any failed"
        },
        {
          "name": "__init__",
          "lineno": 42,
          "args": [
            "self",
            "verbose"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the DisCoPy executor.\n\nArgs:\n    verbose: Enable verbose logging"
        },
        {
          "name": "validate_diagram",
          "lineno": 53,
          "args": [
            "self",
            "diagram_path"
          ],
          "returns": "Tuple[bool, str]",
          "decorators": [],
          "doc": "Validate that a DisCoPy diagram file exists and is accessible.\n\nArgs:\n    diagram_path: Path to the diagram file\n    \nReturns:\n    Tuple of (success: bool, message: str)"
        },
        {
          "name": "analyze_jax_output",
          "lineno": 81,
          "args": [
            "self",
            "jax_output_path"
          ],
          "returns": "Tuple[bool, str, Dict[str, Any]]",
          "decorators": [],
          "doc": "Analyze a JAX evaluation output file.\n\nArgs:\n    jax_output_path: Path to the JAX evaluation output\n    \nReturns:\n    Tuple of (success: bool, message: str, analysis: Dict)"
        },
        {
          "name": "execute_directory",
          "lineno": 124,
          "args": [
            "self",
            "target_dir",
            "output_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Execute validation and analysis on all DisCoPy outputs in a directory.\n\nArgs:\n    target_dir: Directory containing rendered DisCoPy outputs\n    output_dir: Directory for execution results\n    \nReturns:\n    Dictionary with execution results"
        }
      ],
      "classes": [
        {
          "name": "DisCoPyExecutor",
          "lineno": 37,
          "bases": [],
          "doc": "DisCoPy Executor for validating and analyzing rendered DisCoPy diagrams.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 42,
              "args": [
                "self",
                "verbose"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the DisCoPy executor.\n\nArgs:\n    verbose: Enable verbose logging"
            },
            {
              "name": "validate_diagram",
              "lineno": 53,
              "args": [
                "self",
                "diagram_path"
              ],
              "returns": "Tuple[bool, str]",
              "decorators": [],
              "doc": "Validate that a DisCoPy diagram file exists and is accessible.\n\nArgs:\n    diagram_path: Path to the diagram file\n    \nReturns:\n    Tuple of (success: bool, message: str)"
            },
            {
              "name": "analyze_jax_output",
              "lineno": 81,
              "args": [
                "self",
                "jax_output_path"
              ],
              "returns": "Tuple[bool, str, Dict[str, Any]]",
              "decorators": [],
              "doc": "Analyze a JAX evaluation output file.\n\nArgs:\n    jax_output_path: Path to the JAX evaluation output\n    \nReturns:\n    Tuple of (success: bool, message: str, analysis: Dict)"
            },
            {
              "name": "execute_directory",
              "lineno": 124,
              "args": [
                "self",
                "target_dir",
                "output_dir"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Execute validation and analysis on all DisCoPy outputs in a directory.\n\nArgs:\n    target_dir: Directory containing rendered DisCoPy outputs\n    output_dir: Directory for execution results\n    \nReturns:\n    Dictionary with execution results"
            }
          ]
        }
      ]
    },
    {
      "file": "src/execute/executor.py",
      "module": "execute.executor",
      "functions": [
        {
          "name": "get_available_hardware",
          "lineno": 64,
          "args": [],
          "returns": "list[str]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "execute_gnn_model",
          "lineno": 294,
          "args": [
            "model_path",
            "execution_type",
            "options"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Convenience function to execute a GNN model.\n\nArgs:\n    model_path: Path to the GNN model or rendered script\n    execution_type: Type of execution\n    options: Additional execution options\n\nReturns:\n    Dictionary with execution results"
        },
        {
          "name": "run_simulation",
          "lineno": 311,
          "args": [
            "simulation_config"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Convenience function to run a simulation.\n\nArgs:\n    simulation_config: Configuration dictionary for the simulation\n\nReturns:\n    Dictionary with simulation results"
        },
        {
          "name": "generate_execution_report",
          "lineno": 325,
          "args": [
            "execution_log",
            "output_file"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convenience function to generate an execution report.\n\nArgs:\n    execution_log: List of execution results\n    output_file: Path for the output report file\n\nReturns:\n    Path to the generated report"
        },
        {
          "name": "execute_rendered_simulators",
          "lineno": 342,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Execute rendered simulator scripts with enhanced error handling and dependency checking.\nFramework outputs are organized in separate subdirectories.\n\nArgs:\n    target_dir: Directory containing rendered simulator scripts\n    output_dir: Output directory for results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional execution options\n    \nReturns:\n    True if execution succeeded, False otherwise"
        },
        {
          "name": "__init__",
          "lineno": 77,
          "args": [
            "self",
            "output_dir"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the GNN executor.\n\nArgs:\n    output_dir: Directory for execution outputs"
        },
        {
          "name": "execute_gnn_model",
          "lineno": 92,
          "args": [
            "self",
            "model_path",
            "execution_type",
            "options"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Execute a GNN model with the specified execution type.\n\nArgs:\n    model_path: Path to the GNN model or rendered script\n    execution_type: Type of execution (pymdp, rxinfer, discopy, etc.)\n    options: Additional execution options\n\nReturns:\n    Dictionary with execution results"
        },
        {
          "name": "run_simulation",
          "lineno": 141,
          "args": [
            "self",
            "simulation_config"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Run a simulation based on configuration.\n\nArgs:\n    simulation_config: Configuration dictionary for the simulation\n\nReturns:\n    Dictionary with simulation results"
        },
        {
          "name": "generate_execution_report",
          "lineno": 171,
          "args": [
            "self",
            "output_file"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate an execution report from the execution log.\n\nArgs:\n    output_file: Path for the output report file\n\nReturns:\n    Path to the generated report"
        },
        {
          "name": "_execute_pymdp_script",
          "lineno": 200,
          "args": [
            "self",
            "script_path",
            "options"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Execute a PyMDP script."
        },
        {
          "name": "_execute_rxinfer_config",
          "lineno": 223,
          "args": [
            "self",
            "config_path",
            "options"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Execute an RxInfer.jl configuration."
        },
        {
          "name": "_execute_discopy_diagram",
          "lineno": 247,
          "args": [
            "self",
            "diagram_path",
            "options"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Execute a DisCoPy diagram."
        },
        {
          "name": "_execute_jax_script",
          "lineno": 270,
          "args": [
            "self",
            "script_path",
            "options"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Execute a JAX script."
        }
      ],
      "classes": [
        {
          "name": "GNNExecutor",
          "lineno": 72,
          "bases": [],
          "doc": "Main executor for GNN model simulations and scripts.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 77,
              "args": [
                "self",
                "output_dir"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the GNN executor.\n\nArgs:\n    output_dir: Directory for execution outputs"
            },
            {
              "name": "execute_gnn_model",
              "lineno": 92,
              "args": [
                "self",
                "model_path",
                "execution_type",
                "options"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Execute a GNN model with the specified execution type.\n\nArgs:\n    model_path: Path to the GNN model or rendered script\n    execution_type: Type of execution (pymdp, rxinfer, discopy, etc.)\n    options: Additional execution options\n\nReturns:\n    Dictionary with execution results"
            },
            {
              "name": "run_simulation",
              "lineno": 141,
              "args": [
                "self",
                "simulation_config"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Run a simulation based on configuration.\n\nArgs:\n    simulation_config: Configuration dictionary for the simulation\n\nReturns:\n    Dictionary with simulation results"
            },
            {
              "name": "generate_execution_report",
              "lineno": 171,
              "args": [
                "self",
                "output_file"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate an execution report from the execution log.\n\nArgs:\n    output_file: Path for the output report file\n\nReturns:\n    Path to the generated report"
            },
            {
              "name": "_execute_pymdp_script",
              "lineno": 200,
              "args": [
                "self",
                "script_path",
                "options"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Execute a PyMDP script."
            },
            {
              "name": "_execute_rxinfer_config",
              "lineno": 223,
              "args": [
                "self",
                "config_path",
                "options"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Execute an RxInfer.jl configuration."
            },
            {
              "name": "_execute_discopy_diagram",
              "lineno": 247,
              "args": [
                "self",
                "diagram_path",
                "options"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Execute a DisCoPy diagram."
            },
            {
              "name": "_execute_jax_script",
              "lineno": 270,
              "args": [
                "self",
                "script_path",
                "options"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Execute a JAX script."
            }
          ]
        }
      ]
    },
    {
      "file": "src/execute/fallback.py",
      "module": "execute.fallback",
      "functions": [
        {
          "name": "validate_execution_environment",
          "lineno": 8,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Fallback execution environment validation.\n\nReturns:\n    Dictionary with validation results"
        },
        {
          "name": "get_execution_health_status",
          "lineno": 17,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Fallback execution health status check.\n\nReturns:\n    Dictionary with health status"
        },
        {
          "name": "log_validation_results",
          "lineno": 26,
          "args": [
            "results",
            "logger"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Fallback validation results logging.\n\nArgs:\n    results: Validation results\n    logger: Logger instance"
        },
        {
          "name": "check_python_environment",
          "lineno": 36,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Fallback Python environment check.\n\nReturns:\n    Dictionary with environment info"
        },
        {
          "name": "check_system_dependencies",
          "lineno": 45,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Fallback system dependencies check.\n\nReturns:\n    Dictionary with dependency info"
        },
        {
          "name": "check_python_packages",
          "lineno": 54,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Fallback Python packages check.\n\nReturns:\n    Dictionary with package info"
        },
        {
          "name": "check_file_system",
          "lineno": 63,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Fallback file system check.\n\nReturns:\n    Dictionary with file system info"
        },
        {
          "name": "analyze_pipeline_error",
          "lineno": 72,
          "args": [
            "error_message",
            "step_name",
            "context"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Fallback pipeline error analysis.\n\nArgs:\n    error_message: Error message\n    step_name: Step name\n    context: Error context\n    \nReturns:\n    Dictionary with error analysis"
        },
        {
          "name": "generate_error_recovery_report",
          "lineno": 86,
          "args": [
            "error_message",
            "output_dir",
            "step_name",
            "context"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Fallback error recovery report generation.\n\nArgs:\n    error_message: Error message\n    output_dir: Output directory\n    step_name: Step name\n    context: Error context\n    \nReturns:\n    Dictionary with report info"
        },
        {
          "name": "get_quick_error_suggestions",
          "lineno": 101,
          "args": [
            "error_message"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Fallback error suggestions.\n\nArgs:\n    error_message: Error message\n    \nReturns:\n    List of suggestions"
        },
        {
          "name": "execute_simulation_from_gnn",
          "lineno": 134,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Fallback simulation execution.\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    Dictionary with error info"
        },
        {
          "name": "execute_pymdp_simulation_from_gnn_impl",
          "lineno": 147,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Fallback PyMDP simulation execution.\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    Dictionary with error info"
        },
        {
          "name": "validate_execution_environment_impl",
          "lineno": 160,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Fallback execution environment validation.\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    Dictionary with error info"
        },
        {
          "name": "__init__",
          "lineno": 117,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 124,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 131,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "ErrorRecoverySystem",
          "lineno": 113,
          "bases": [],
          "doc": "Fallback error recovery system.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 117,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "ExecutionEngine",
          "lineno": 120,
          "bases": [],
          "doc": "Fallback execution engine.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 124,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "PyMdpExecutor",
          "lineno": 127,
          "bases": [],
          "doc": "Fallback PyMDP executor.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 131,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/execute/install_dependencies.py",
      "module": "execute.install_dependencies",
      "functions": [
        {
          "name": "install_python_dependencies",
          "lineno": 12,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Install missing Python dependencies."
        },
        {
          "name": "install_julia_dependencies",
          "lineno": 45,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Install Julia dependencies for ActiveInference.jl."
        },
        {
          "name": "verify_installations",
          "lineno": 80,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Verify that all dependencies are properly installed."
        },
        {
          "name": "main",
          "lineno": 108,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main installation function."
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/jax/__init__.py",
      "module": "execute.jax.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/execute/jax/jax_runner.py",
      "module": "execute.jax.jax_runner",
      "functions": [
        {
          "name": "initialize_jax_devices",
          "lineno": 20,
          "args": [],
          "returns": "list",
          "decorators": [],
          "doc": "Initialize and return available JAX devices, falling back to CPU on errors.\n\nThis matches tests expecting a callable that always returns at least one device-like object."
        },
        {
          "name": "is_jax_available",
          "lineno": 35,
          "args": [],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if JAX is importable and print device info."
        },
        {
          "name": "find_jax_scripts",
          "lineno": 66,
          "args": [
            "base_dir",
            "recursive"
          ],
          "returns": "List[Path]",
          "decorators": [],
          "doc": "Find JAX scripts in the specified directory."
        },
        {
          "name": "execute_jax_script",
          "lineno": 75,
          "args": [
            "script_path",
            "verbose",
            "device"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Execute a single JAX script with enhanced dependency checking and error handling."
        },
        {
          "name": "run_jax_scripts",
          "lineno": 149,
          "args": [
            "rendered_simulators_dir",
            "execution_output_dir",
            "recursive_search",
            "verbose",
            "device"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Find and run JAX scripts on rendered models."
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/legacy.py",
      "module": "execute.legacy",
      "functions": [
        {
          "name": "execute_pymdp_simulation_from_gnn",
          "lineno": 12,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Execute PyMDP simulation from GNN specification (legacy function).\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    Execution results"
        },
        {
          "name": "validator",
          "lineno": 30,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Legacy function name for execution environment validation.\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    Validation results"
        },
        {
          "name": "pymdp",
          "lineno": 48,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Legacy function name for PyMDP execution.\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    PyMDP execution results"
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/mcp.py",
      "module": "execute.mcp",
      "functions": [
        {
          "name": "process_execute_mcp",
          "lineno": 19,
          "args": [
            "target_directory",
            "output_directory",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Process execute for GNN files. Exposed via MCP.\n\nArgs:\n    target_directory: Directory containing GNN files to process\n    output_directory: Directory to save results\n    verbose: Enable verbose output\n    \nReturns:\n    Dictionary with operation status and results."
        },
        {
          "name": "register_tools",
          "lineno": 51,
          "args": [
            "mcp_instance"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register execute utility tools with the MCP."
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/processor.py",
      "module": "execute.processor",
      "functions": [
        {
          "name": "process_execute",
          "lineno": 21,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process execute for GNN files.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Directory to save results\n    verbose: Enable verbose output\n    **kwargs: Additional arguments\n    \nReturns:\n    True if processing successful, False otherwise"
        },
        {
          "name": "execute_simulation_from_gnn",
          "lineno": 96,
          "args": [
            "gnn_file",
            "output_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Execute simulation from GNN file.\n\nArgs:\n    gnn_file: Path to GNN file\n    output_dir: Output directory\n    \nReturns:\n    Dictionary with execution results"
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/pymdp/__init__.py",
      "module": "execute.pymdp.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/execute/pymdp/context.py",
      "module": "execute.pymdp.context",
      "functions": [
        {
          "name": "create_enhanced_pymdp_context",
          "lineno": 15,
          "args": [
            "gnn_spec",
            "output_dir",
            "correlation_id",
            "config_overrides"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Create enhanced PyMDP execution context.\n\nArgs:\n    gnn_spec: GNN specification dictionary\n    output_dir: Output directory for results\n    correlation_id: Correlation ID for tracking\n    config_overrides: Optional configuration overrides\n    \nReturns:\n    Dictionary with enhanced context"
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/pymdp/execute_pymdp.py",
      "module": "execute.pymdp.execute_pymdp",
      "functions": [
        {
          "name": "execute_pymdp_simulation",
          "lineno": 27,
          "args": [
            "gnn_spec",
            "output_dir",
            "num_episodes",
            "verbose"
          ],
          "returns": "Tuple[bool, Dict[str, Any]]",
          "decorators": [],
          "doc": "Execute PyMDP simulation configured from GNN specification.\n\nThis is the main pipeline interface for PyMDP simulation execution.\n\nArgs:\n    gnn_spec: Parsed GNN specification dictionary\n    output_dir: Directory for simulation outputs\n    num_episodes: Number of simulation episodes to run\n    verbose: Enable verbose logging\n    \nReturns:\n    Tuple of (success, results) where results contains output paths and metrics"
        },
        {
          "name": "execute_from_gnn_file",
          "lineno": 129,
          "args": [
            "gnn_file",
            "output_dir",
            "num_episodes",
            "verbose"
          ],
          "returns": "Tuple[bool, Dict[str, Any]]",
          "decorators": [],
          "doc": "Execute PyMDP simulation from GNN file.\n\nArgs:\n    gnn_file: Path to GNN file\n    output_dir: Output directory\n    num_episodes: Number of episodes\n    verbose: Enable verbose output\n    \nReturns:\n    Tuple of (success, results)"
        },
        {
          "name": "batch_execute_pymdp",
          "lineno": 182,
          "args": [
            "gnn_specs",
            "base_output_dir",
            "num_episodes",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Execute multiple PyMDP simulations in batch.\n\nArgs:\n    gnn_specs: List of GNN specifications\n    base_output_dir: Base output directory\n    num_episodes: Episodes per simulation\n    verbose: Enable verbose output\n    \nReturns:\n    Dictionary with batch execution results"
        },
        {
          "name": "execute_pymdp_step",
          "lineno": 263,
          "args": [
            "target_dir",
            "output_dir",
            "num_episodes",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Execute PyMDP step in pipeline.\n\nArgs:\n    target_dir: Directory containing GNN files\n    output_dir: Output directory\n    num_episodes: Episodes per simulation\n    verbose: Enable verbose output\n    \nReturns:\n    True if successful, False otherwise"
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/pymdp/executor.py",
      "module": "execute.pymdp.executor",
      "functions": [
        {
          "name": "execute_pymdp_simulation_from_gnn",
          "lineno": 29,
          "args": [
            "gnn_spec",
            "output_dir",
            "config_overrides",
            "correlation_id"
          ],
          "returns": "Tuple[bool, Dict[str, Any]]",
          "decorators": [],
          "doc": "Execute PyMDP simulation from GNN specification.\n\nArgs:\n    gnn_spec: GNN specification dictionary\n    output_dir: Output directory for results\n    config_overrides: Optional configuration overrides\n    correlation_id: Correlation ID for tracking\n    \nReturns:\n    Tuple of (success, results)"
        },
        {
          "name": "execute_pymdp_simulation",
          "lineno": 69,
          "args": [
            "gnn_spec",
            "output_dir",
            "correlation_id"
          ],
          "returns": "Tuple[bool, Dict[str, Any]]",
          "decorators": [],
          "doc": "Execute PyMDP simulation.\n\nArgs:\n    gnn_spec: GNN specification dictionary\n    output_dir: Output directory for results\n    correlation_id: Correlation ID for tracking\n    \nReturns:\n    Tuple of (success, results)"
        },
        {
          "name": "execute_pymdp_scripts",
          "lineno": 129,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Execute PyMDP scripts (legacy compatibility function).\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    Execution results"
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/pymdp/pymdp_runner.py",
      "module": "execute.pymdp.pymdp_runner",
      "functions": [
        {
          "name": "validate_and_clean_pymdp_script",
          "lineno": 23,
          "args": [
            "script_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate and clean PyMDP script for syntax errors.\n\nArgs:\n    script_path: Path to the PyMDP script to validate\n    \nReturns:\n    bool: True if script is valid or was successfully cleaned, False otherwise"
        },
        {
          "name": "execute_pymdp_script_with_outputs",
          "lineno": 78,
          "args": [
            "script_path",
            "output_dir",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Execute a single PyMDP script with comprehensive output capture and analysis.\n\nArgs:\n    script_path: Path to the PyMDP script\n    output_dir: Directory to save execution outputs\n    verbose: Whether to enable verbose output\n    \nReturns:\n    Dict containing execution results, logs, and analysis data"
        },
        {
          "name": "generate_pymdp_analysis",
          "lineno": 215,
          "args": [
            "script_path",
            "stdout_content",
            "output_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate analysis artifacts from PyMDP script execution.\n\nArgs:\n    script_path: Path to the executed script\n    stdout_content: Captured stdout from script execution\n    output_dir: Directory to save analysis outputs\n    \nReturns:\n    Dictionary containing analysis results"
        },
        {
          "name": "create_matrix_visualizations",
          "lineno": 268,
          "args": [
            "stdout_content",
            "output_dir",
            "script_name"
          ],
          "returns": "int",
          "decorators": [],
          "doc": "Create visualizations of PyMDP matrices from stdout content.\n\nReturns:\n    Number of visualizations created"
        },
        {
          "name": "generate_simulation_trace",
          "lineno": 342,
          "args": [
            "stdout_content",
            "output_dir",
            "script_name"
          ],
          "returns": "Optional[Path]",
          "decorators": [],
          "doc": "Generate a simulation trace file from PyMDP execution output.\n\nReturns:\n    Path to generated trace file, or None if generation failed"
        },
        {
          "name": "run_pymdp_scripts",
          "lineno": 384,
          "args": [
            "rendered_simulators_dir",
            "execution_output_dir",
            "recursive_search",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Find and run PyMDP scripts on rendered models with comprehensive output generation.\n\nArgs:\n    rendered_simulators_dir: Directory containing rendered simulators (target_dir from executor)\n    execution_output_dir: Directory for PyMDP execution outputs\n    recursive_search: Whether to search recursively for scripts\n    verbose: Whether to enable verbose output\n    \nReturns:\n    bool: True if all scripts executed successfully, False if any failed"
        },
        {
          "name": "create_execution_report",
          "lineno": 470,
          "args": [
            "output_dir",
            "execution_results",
            "success_count",
            "failure_count",
            "total_count"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Create a comprehensive PyMDP execution report."
        },
        {
          "name": "create_empty_execution_report",
          "lineno": 524,
          "args": [
            "output_dir"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Create an empty execution report when no scripts are found."
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/pymdp/pymdp_simulation.py",
      "module": "execute.pymdp.pymdp_simulation",
      "functions": [
        {
          "name": "create_pymdp_simulation_from_gnn",
          "lineno": 672,
          "args": [
            "gnn_config"
          ],
          "returns": "PyMDPSimulation",
          "decorators": [],
          "doc": "Factory function to create PyMDP simulation from GNN configuration.\n\nArgs:\n    gnn_config: Parsed GNN POMDP specification\n    \nReturns:\n    Configured PyMDPSimulation instance"
        },
        {
          "name": "run_pymdp_simulation_from_gnn",
          "lineno": 685,
          "args": [
            "gnn_config",
            "output_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Complete function to run PyMDP simulation from GNN config.\n\nArgs:\n    gnn_config: Parsed GNN POMDP specification\n    output_dir: Directory to save results\n    \nReturns:\n    Simulation results dictionary"
        },
        {
          "name": "__init__",
          "lineno": 62,
          "args": [
            "self",
            "gnn_config"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize PyMDP simulation with optional GNN configuration.\n\nArgs:\n    gnn_config: Dictionary containing parsed GNN POMDP parameters\n               Expected structure:\n               {\n                   'states': List[str],  # e.g., ['location_0', 'location_1', ...]\n                   'actions': List[str], # e.g., ['move_up', 'move_down', ...]\n                   'observations': List[str], # e.g., ['obs_location_0', ...]\n                   'model_name': str,\n                   'parameters': Dict[str, Any]\n               }"
        },
        {
          "name": "_initialize_parameters",
          "lineno": 92,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize simulation parameters from GNN config or defaults."
        },
        {
          "name": "create_pymdp_model_from_gnn",
          "lineno": 127,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Create PyMDP model matrices using extracted GNN matrices from InitialParameterization.\n\nThis method specifically uses the A, B, C, D, E matrices extracted from the GNN file's\nInitialParameterization section for authentic simulation.\n\nReturns:\n    tuple: (agent, model_matrices) with PyMDP Agent and matrix dict"
        },
        {
          "name": "_process_gnn_A_matrix",
          "lineno": 220,
          "args": [
            "self",
            "gnn_A"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Process GNN A matrix into PyMDP format."
        },
        {
          "name": "_process_gnn_B_matrix",
          "lineno": 251,
          "args": [
            "self",
            "gnn_B"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Process GNN B matrix into PyMDP format."
        },
        {
          "name": "_process_gnn_C_vector",
          "lineno": 288,
          "args": [
            "self",
            "gnn_C"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Process GNN C vector into PyMDP format."
        },
        {
          "name": "_process_gnn_D_vector",
          "lineno": 322,
          "args": [
            "self",
            "gnn_D"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Process GNN D vector into PyMDP format."
        },
        {
          "name": "create_pymdp_model",
          "lineno": 359,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Create PyMDP model matrices using authentic PyMDP methods.\n\nThis function constructs the complete POMDP generative model (A, B, C, D)\nusing real PyMDP utilities, configured from GNN specifications.\n\nReturns:\n    tuple: (agent, model_matrices) with PyMDP Agent and matrix dict"
        },
        {
          "name": "_create_observation_model",
          "lineno": 414,
          "args": [
            "self"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Create observation likelihood matrix A."
        },
        {
          "name": "_create_transition_model",
          "lineno": 428,
          "args": [
            "self"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Create transition dynamics matrix B."
        },
        {
          "name": "_create_preference_model",
          "lineno": 469,
          "args": [
            "self"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Create preference vector C."
        },
        {
          "name": "_create_prior_beliefs",
          "lineno": 482,
          "args": [
            "self"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Create prior belief vector D."
        },
        {
          "name": "_generate_policies",
          "lineno": 495,
          "args": [
            "self"
          ],
          "returns": "List[List[int]]",
          "decorators": [],
          "doc": "Generate policy space for planning."
        },
        {
          "name": "run_simulation",
          "lineno": 505,
          "args": [
            "self",
            "output_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Run the complete PyMDP simulation.\n\nArgs:\n    output_dir: Directory to save results\n    \nReturns:\n    Dictionary containing simulation results and metrics"
        },
        {
          "name": "_analyze_results",
          "lineno": 577,
          "args": [
            "self",
            "duration"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze simulation results and compute metrics."
        },
        {
          "name": "_save_results",
          "lineno": 625,
          "args": [
            "self",
            "output_dir"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Save comprehensive simulation results."
        },
        {
          "name": "get_summary",
          "lineno": 656,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get concise simulation summary."
        }
      ],
      "classes": [
        {
          "name": "PyMDPSimulation",
          "lineno": 53,
          "bases": [],
          "doc": "PyMDP Active Inference simulation configured from GNN specifications.\n\nThis class creates and runs authentic PyMDP simulations using parameters\nextracted from GNN POMDP specifications. It supports both GNN-configured\nand default parameter modes.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 62,
              "args": [
                "self",
                "gnn_config"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize PyMDP simulation with optional GNN configuration.\n\nArgs:\n    gnn_config: Dictionary containing parsed GNN POMDP parameters\n               Expected structure:\n               {\n                   'states': List[str],  # e.g., ['location_0', 'location_1', ...]\n                   'actions': List[str], # e.g., ['move_up', 'move_down', ...]\n                   'observations': List[str], # e.g., ['obs_location_0', ...]\n                   'model_name': str,\n                   'parameters': Dict[str, Any]\n               }"
            },
            {
              "name": "_initialize_parameters",
              "lineno": 92,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize simulation parameters from GNN config or defaults."
            },
            {
              "name": "create_pymdp_model_from_gnn",
              "lineno": 127,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Create PyMDP model matrices using extracted GNN matrices from InitialParameterization.\n\nThis method specifically uses the A, B, C, D, E matrices extracted from the GNN file's\nInitialParameterization section for authentic simulation.\n\nReturns:\n    tuple: (agent, model_matrices) with PyMDP Agent and matrix dict"
            },
            {
              "name": "_process_gnn_A_matrix",
              "lineno": 220,
              "args": [
                "self",
                "gnn_A"
              ],
              "returns": "np.ndarray",
              "decorators": [],
              "doc": "Process GNN A matrix into PyMDP format."
            },
            {
              "name": "_process_gnn_B_matrix",
              "lineno": 251,
              "args": [
                "self",
                "gnn_B"
              ],
              "returns": "np.ndarray",
              "decorators": [],
              "doc": "Process GNN B matrix into PyMDP format."
            },
            {
              "name": "_process_gnn_C_vector",
              "lineno": 288,
              "args": [
                "self",
                "gnn_C"
              ],
              "returns": "np.ndarray",
              "decorators": [],
              "doc": "Process GNN C vector into PyMDP format."
            },
            {
              "name": "_process_gnn_D_vector",
              "lineno": 322,
              "args": [
                "self",
                "gnn_D"
              ],
              "returns": "np.ndarray",
              "decorators": [],
              "doc": "Process GNN D vector into PyMDP format."
            },
            {
              "name": "create_pymdp_model",
              "lineno": 359,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Create PyMDP model matrices using authentic PyMDP methods.\n\nThis function constructs the complete POMDP generative model (A, B, C, D)\nusing real PyMDP utilities, configured from GNN specifications.\n\nReturns:\n    tuple: (agent, model_matrices) with PyMDP Agent and matrix dict"
            },
            {
              "name": "_create_observation_model",
              "lineno": 414,
              "args": [
                "self"
              ],
              "returns": "np.ndarray",
              "decorators": [],
              "doc": "Create observation likelihood matrix A."
            },
            {
              "name": "_create_transition_model",
              "lineno": 428,
              "args": [
                "self"
              ],
              "returns": "np.ndarray",
              "decorators": [],
              "doc": "Create transition dynamics matrix B."
            },
            {
              "name": "_create_preference_model",
              "lineno": 469,
              "args": [
                "self"
              ],
              "returns": "np.ndarray",
              "decorators": [],
              "doc": "Create preference vector C."
            },
            {
              "name": "_create_prior_beliefs",
              "lineno": 482,
              "args": [
                "self"
              ],
              "returns": "np.ndarray",
              "decorators": [],
              "doc": "Create prior belief vector D."
            },
            {
              "name": "_generate_policies",
              "lineno": 495,
              "args": [
                "self"
              ],
              "returns": "List[List[int]]",
              "decorators": [],
              "doc": "Generate policy space for planning."
            },
            {
              "name": "run_simulation",
              "lineno": 505,
              "args": [
                "self",
                "output_dir"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Run the complete PyMDP simulation.\n\nArgs:\n    output_dir: Directory to save results\n    \nReturns:\n    Dictionary containing simulation results and metrics"
            },
            {
              "name": "_analyze_results",
              "lineno": 577,
              "args": [
                "self",
                "duration"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Analyze simulation results and compute metrics."
            },
            {
              "name": "_save_results",
              "lineno": 625,
              "args": [
                "self",
                "output_dir"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Save comprehensive simulation results."
            },
            {
              "name": "get_summary",
              "lineno": 656,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Get concise simulation summary."
            }
          ]
        }
      ]
    },
    {
      "file": "src/execute/pymdp/pymdp_utils.py",
      "module": "execute.pymdp.pymdp_utils",
      "functions": [
        {
          "name": "convert_numpy_for_json",
          "lineno": 27,
          "args": [
            "obj"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Recursively convert numpy types to Python native types for JSON serialization.\n\nArgs:\n    obj: Object that may contain numpy types\n    \nReturns:\n    Object with numpy types converted to JSON-serializable types"
        },
        {
          "name": "safe_json_dump",
          "lineno": 57,
          "args": [
            "data",
            "file_path",
            "indent"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Safely dump data to JSON file with numpy type conversion.\n\nArgs:\n    data: Data to serialize\n    file_path: Path to save JSON file\n    indent: JSON indentation level\n    \nReturns:\n    True if successful, False otherwise"
        },
        {
          "name": "safe_pickle_dump",
          "lineno": 87,
          "args": [
            "data",
            "file_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Safely dump data to pickle file.\n\nArgs:\n    data: Data to serialize\n    file_path: Path to save pickle file\n    \nReturns:\n    True if successful, False otherwise"
        },
        {
          "name": "validate_trace_data",
          "lineno": 113,
          "args": [
            "trace"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate trace data structure.\n\nArgs:\n    trace: Trace dictionary to validate\n    \nReturns:\n    True if valid, False otherwise"
        },
        {
          "name": "clean_trace_for_serialization",
          "lineno": 145,
          "args": [
            "trace"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Clean trace data for JSON serialization.\n\nArgs:\n    trace: Raw trace data\n    \nReturns:\n    Cleaned trace data ready for JSON serialization"
        },
        {
          "name": "save_simulation_results",
          "lineno": 176,
          "args": [
            "traces",
            "metrics",
            "config",
            "model_matrices",
            "output_dir"
          ],
          "returns": "Dict[str, bool]",
          "decorators": [],
          "doc": "Save all simulation results with proper error handling.\n\nArgs:\n    traces: List of episode traces\n    metrics: Performance metrics\n    config: Simulation configuration\n    model_matrices: PyMDP model matrices (optional)\n    output_dir: Output directory\n    \nReturns:\n    Dictionary indicating success/failure of each save operation"
        },
        {
          "name": "calculate_episode_statistics",
          "lineno": 216,
          "args": [
            "trace"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Calculate statistics for a single episode.\n\nArgs:\n    trace: Episode trace data\n    \nReturns:\n    Dictionary of episode statistics"
        },
        {
          "name": "generate_simulation_summary",
          "lineno": 268,
          "args": [
            "all_traces",
            "performance_metrics"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate a comprehensive simulation summary.\n\nArgs:\n    all_traces: List of all episode traces\n    performance_metrics: Performance metrics dictionary\n    \nReturns:\n    Summary dictionary"
        },
        {
          "name": "format_duration",
          "lineno": 311,
          "args": [
            "seconds"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Format duration in seconds to human-readable string.\n\nArgs:\n    seconds: Duration in seconds\n    \nReturns:\n    Formatted duration string"
        },
        {
          "name": "create_output_directory_with_timestamp",
          "lineno": 331,
          "args": [
            "base_dir",
            "prefix"
          ],
          "returns": "Path",
          "decorators": [],
          "doc": "Create output directory with timestamp.\n\nArgs:\n    base_dir: Base directory for output\n    prefix: Prefix for directory name\n    \nReturns:\n    Path to created directory"
        },
        {
          "name": "parse_gnn_matrix_string",
          "lineno": 352,
          "args": [
            "matrix_str"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Parse matrix string from GNN initial parameterization format.\n\nArgs:\n    matrix_str: String representation of matrix from GNN file\n    \nReturns:\n    Numpy array representation of the matrix"
        },
        {
          "name": "parse_gnn_vector_string",
          "lineno": 399,
          "args": [
            "vector_str"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Parse vector string from GNN initial parameterization format.\n\nArgs:\n    vector_str: String representation of vector from GNN file\n    \nReturns:\n    Numpy array representation of the vector"
        },
        {
          "name": "extract_gnn_dimensions",
          "lineno": 430,
          "args": [
            "gnn_spec"
          ],
          "returns": "Dict[str, int]",
          "decorators": [],
          "doc": "Extract POMDP dimensions from GNN specification.\n\nArgs:\n    gnn_spec: Parsed GNN specification\n    \nReturns:\n    Dictionary containing extracted dimensions"
        },
        {
          "name": "validate_gnn_pomdp_structure",
          "lineno": 474,
          "args": [
            "gnn_spec"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate that GNN specification contains valid POMDP structure.\n\nArgs:\n    gnn_spec: Parsed GNN specification\n    \nReturns:\n    Validation result dictionary"
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/pymdp/pymdp_visualizer.py",
      "module": "execute.pymdp.pymdp_visualizer",
      "functions": [
        {
          "name": "create_visualizer",
          "lineno": 263,
          "args": [
            "config"
          ],
          "returns": "PyMDPVisualizer",
          "decorators": [],
          "doc": "Factory function to create PyMDPVisualizer from configuration.\n\nArgs:\n    config: Configuration dictionary with visualization parameters\n    \nReturns:\n    Configured PyMDPVisualizer instance"
        },
        {
          "name": "save_all_visualizations",
          "lineno": 281,
          "args": [
            "simulation_results",
            "output_dir",
            "config"
          ],
          "returns": "Dict[str, Path]",
          "decorators": [],
          "doc": "Generate and save all visualizations for simulation results.\n\nArgs:\n    simulation_results: Results from PyMDP simulation\n    output_dir: Directory to save visualizations\n    config: Optional visualization configuration\n    \nReturns:\n    Dictionary mapping visualization names to saved file paths"
        },
        {
          "name": "__init__",
          "lineno": 42,
          "args": [
            "self",
            "grid_size",
            "figsize",
            "style",
            "save_dir"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize PyMDP visualizer with configuration from GNN specifications.\n\nArgs:\n    grid_size: Size of discrete state space (default: auto-detect from config)\n    figsize: Default figure size for plots\n    style: Matplotlib style to use\n    save_dir: Directory to save visualizations"
        },
        {
          "name": "visualize_discrete_states",
          "lineno": 78,
          "args": [
            "self",
            "states",
            "num_states",
            "title"
          ],
          "returns": "Optional[Any]",
          "decorators": [],
          "doc": "Visualize sequence of discrete states over time.\n\nArgs:\n    states: List of discrete state indices\n    num_states: Total number of possible states\n    title: Plot title\n    \nReturns:\n    matplotlib Figure object or None if matplotlib not available"
        },
        {
          "name": "visualize_belief_evolution",
          "lineno": 122,
          "args": [
            "self",
            "beliefs",
            "title"
          ],
          "returns": "Optional[Any]",
          "decorators": [],
          "doc": "Visualize evolution of belief distributions over time.\n\nArgs:\n    beliefs: List of belief distributions (probability vectors)\n    title: Plot title\n    \nReturns:\n    matplotlib Figure object or None if matplotlib not available"
        },
        {
          "name": "visualize_performance_metrics",
          "lineno": 165,
          "args": [
            "self",
            "metrics",
            "title"
          ],
          "returns": "Optional[Any]",
          "decorators": [],
          "doc": "Visualize various performance metrics from simulation.\n\nArgs:\n    metrics: Dictionary containing performance metrics\n    title: Plot title\n    \nReturns:\n    matplotlib Figure object or None if matplotlib not available"
        },
        {
          "name": "save_all_plots",
          "lineno": 229,
          "args": [
            "self",
            "output_dir"
          ],
          "returns": "Dict[str, Path]",
          "decorators": [],
          "doc": "Save all generated plots to files.\n\nArgs:\n    output_dir: Directory to save plots (overrides default)\n    \nReturns:\n    Dictionary mapping plot names to saved file paths"
        },
        {
          "name": "close_all_plots",
          "lineno": 255,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Close all matplotlib figures to free memory."
        }
      ],
      "classes": [
        {
          "name": "PyMDPVisualizer",
          "lineno": 39,
          "bases": [],
          "doc": "Visualization utilities for PyMDP simulation",
          "methods": [
            {
              "name": "__init__",
              "lineno": 42,
              "args": [
                "self",
                "grid_size",
                "figsize",
                "style",
                "save_dir"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize PyMDP visualizer with configuration from GNN specifications.\n\nArgs:\n    grid_size: Size of discrete state space (default: auto-detect from config)\n    figsize: Default figure size for plots\n    style: Matplotlib style to use\n    save_dir: Directory to save visualizations"
            },
            {
              "name": "visualize_discrete_states",
              "lineno": 78,
              "args": [
                "self",
                "states",
                "num_states",
                "title"
              ],
              "returns": "Optional[Any]",
              "decorators": [],
              "doc": "Visualize sequence of discrete states over time.\n\nArgs:\n    states: List of discrete state indices\n    num_states: Total number of possible states\n    title: Plot title\n    \nReturns:\n    matplotlib Figure object or None if matplotlib not available"
            },
            {
              "name": "visualize_belief_evolution",
              "lineno": 122,
              "args": [
                "self",
                "beliefs",
                "title"
              ],
              "returns": "Optional[Any]",
              "decorators": [],
              "doc": "Visualize evolution of belief distributions over time.\n\nArgs:\n    beliefs: List of belief distributions (probability vectors)\n    title: Plot title\n    \nReturns:\n    matplotlib Figure object or None if matplotlib not available"
            },
            {
              "name": "visualize_performance_metrics",
              "lineno": 165,
              "args": [
                "self",
                "metrics",
                "title"
              ],
              "returns": "Optional[Any]",
              "decorators": [],
              "doc": "Visualize various performance metrics from simulation.\n\nArgs:\n    metrics: Dictionary containing performance metrics\n    title: Plot title\n    \nReturns:\n    matplotlib Figure object or None if matplotlib not available"
            },
            {
              "name": "save_all_plots",
              "lineno": 229,
              "args": [
                "self",
                "output_dir"
              ],
              "returns": "Dict[str, Path]",
              "decorators": [],
              "doc": "Save all generated plots to files.\n\nArgs:\n    output_dir: Directory to save plots (overrides default)\n    \nReturns:\n    Dictionary mapping plot names to saved file paths"
            },
            {
              "name": "close_all_plots",
              "lineno": 255,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Close all matplotlib figures to free memory."
            }
          ]
        }
      ]
    },
    {
      "file": "src/execute/pymdp/test_integration.py",
      "module": "execute.pymdp.test_integration",
      "functions": [
        {
          "name": "test_gnn_parsing",
          "lineno": 36,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test GNN file parsing and parameter extraction."
        },
        {
          "name": "test_pymdp_renderer",
          "lineno": 67,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test PyMDP renderer configuration extraction."
        },
        {
          "name": "test_pymdp_simulation",
          "lineno": 93,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test PyMDP simulation with GNN-derived parameters."
        },
        {
          "name": "test_full_integration",
          "lineno": 136,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test full GNN-to-PyMDP integration pipeline."
        },
        {
          "name": "main",
          "lineno": 171,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Run all integration tests."
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/pymdp/test_pymdp_utils.py",
      "module": "execute.pymdp.test_pymdp_utils",
      "functions": [
        {
          "name": "test_numpy_serialization",
          "lineno": 23,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test numpy type serialization functionality."
        },
        {
          "name": "test_gnn_parsing",
          "lineno": 90,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test GNN parsing utilities."
        },
        {
          "name": "test_integration",
          "lineno": 156,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test full integration with simulated data."
        },
        {
          "name": "main",
          "lineno": 227,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Run all tests."
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/pymdp/test_pymdp_visualizer.py",
      "module": "execute.pymdp.test_pymdp_visualizer",
      "functions": [
        {
          "name": "test_visualizer_creation",
          "lineno": 14,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test PyMDP visualizer creation."
        },
        {
          "name": "test_discrete_state_visualization",
          "lineno": 42,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test discrete state visualization."
        },
        {
          "name": "test_belief_visualization",
          "lineno": 80,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test belief evolution visualization."
        },
        {
          "name": "test_performance_metrics",
          "lineno": 117,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test performance metrics visualization."
        },
        {
          "name": "test_action_visualization",
          "lineno": 154,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test action sequence visualization."
        },
        {
          "name": "test_observation_visualization",
          "lineno": 189,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test observation sequence visualization."
        },
        {
          "name": "test_episode_summary",
          "lineno": 224,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test episode summary visualization."
        },
        {
          "name": "test_comprehensive_visualization",
          "lineno": 269,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test comprehensive visualization generation."
        },
        {
          "name": "main",
          "lineno": 333,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Run all visualization tests."
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/pymdp/test_simulation.py",
      "module": "execute.pymdp.test_simulation",
      "functions": [
        {
          "name": "setUp",
          "lineno": 35,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Set up test environment."
        },
        {
          "name": "test_simulation_creation_with_gnn_config",
          "lineno": 67,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test creating PyMDP simulation from GNN configuration."
        },
        {
          "name": "test_simulation_creation_with_minimal_config",
          "lineno": 79,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test creating PyMDP simulation with minimal configuration."
        },
        {
          "name": "test_simulation_run",
          "lineno": 91,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test running a complete simulation."
        },
        {
          "name": "test_matrix_construction",
          "lineno": 107,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test that PyMDP matrices are properly constructed."
        },
        {
          "name": "test_serialization",
          "lineno": 134,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test that simulation results can be serialized."
        },
        {
          "name": "test_visualization_creation",
          "lineno": 155,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test that visualizations can be created."
        },
        {
          "name": "test_gnn_parameter_integration",
          "lineno": 181,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test that GNN parameters are properly integrated."
        },
        {
          "name": "tearDown",
          "lineno": 208,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Clean up test environment."
        },
        {
          "name": "test_numpy_conversion",
          "lineno": 216,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test numpy to JSON conversion utilities."
        }
      ],
      "classes": [
        {
          "name": "TestPyMDPSimulation",
          "lineno": 32,
          "bases": [
            "unittest.TestCase"
          ],
          "doc": "Test PyMDP simulation functionality with GNN integration.",
          "methods": [
            {
              "name": "setUp",
              "lineno": 35,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Set up test environment."
            },
            {
              "name": "test_simulation_creation_with_gnn_config",
              "lineno": 67,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test creating PyMDP simulation from GNN configuration."
            },
            {
              "name": "test_simulation_creation_with_minimal_config",
              "lineno": 79,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test creating PyMDP simulation with minimal configuration."
            },
            {
              "name": "test_simulation_run",
              "lineno": 91,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test running a complete simulation."
            },
            {
              "name": "test_matrix_construction",
              "lineno": 107,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test that PyMDP matrices are properly constructed."
            },
            {
              "name": "test_serialization",
              "lineno": 134,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test that simulation results can be serialized."
            },
            {
              "name": "test_visualization_creation",
              "lineno": 155,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test that visualizations can be created."
            },
            {
              "name": "test_gnn_parameter_integration",
              "lineno": 181,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test that GNN parameters are properly integrated."
            },
            {
              "name": "tearDown",
              "lineno": 208,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Clean up test environment."
            }
          ]
        },
        {
          "name": "TestPyMDPUtils",
          "lineno": 213,
          "bases": [
            "unittest.TestCase"
          ],
          "doc": "Test PyMDP utility functions.",
          "methods": [
            {
              "name": "test_numpy_conversion",
              "lineno": 216,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test numpy to JSON conversion utilities."
            }
          ]
        }
      ]
    },
    {
      "file": "src/execute/pymdp/test_visualization.py",
      "module": "execute.pymdp.test_visualization",
      "functions": [
        {
          "name": "create_test_data",
          "lineno": 31,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Create test simulation data for visualization testing."
        },
        {
          "name": "test_visualizer",
          "lineno": 82,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test the PyMDPVisualizer with synthetic data."
        },
        {
          "name": "test_pipeline_integration",
          "lineno": 151,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test integration with pipeline configuration."
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/pymdp/validator.py",
      "module": "execute.pymdp.validator",
      "functions": [
        {
          "name": "validate_pymdp_environment",
          "lineno": 14,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate PyMDP execution environment and dependencies.\n\nReturns:\n    Dictionary with validation results and health status"
        },
        {
          "name": "get_pymdp_health_status",
          "lineno": 99,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get PyMDP health status and environment information.\n\nReturns:\n    Dictionary with health status information"
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/rxinfer/__init__.py",
      "module": "execute.rxinfer.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/execute/rxinfer/rxinfer_runner.py",
      "module": "execute.rxinfer.rxinfer_runner",
      "functions": [
        {
          "name": "is_julia_available",
          "lineno": 18,
          "args": [],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if Julia is available in the system path.\n\nReturns:\n    bool: True if Julia is available, False otherwise"
        },
        {
          "name": "find_rxinfer_scripts",
          "lineno": 45,
          "args": [
            "base_dir",
            "recursive"
          ],
          "returns": "List[Path]",
          "decorators": [],
          "doc": "Find RxInfer.jl scripts in the specified directory.\n\nArgs:\n    base_dir: Directory to search for RxInfer.jl scripts\n    recursive: Whether to search recursively in subdirectories\n    \nReturns:\n    List of paths to RxInfer.jl script files"
        },
        {
          "name": "execute_rxinfer_script",
          "lineno": 76,
          "args": [
            "script_path",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Execute a single RxInfer.jl script.\n\nArgs:\n    script_path: Path to the RxInfer.jl script or TOML configuration\n    verbose: Whether to enable verbose output\n    \nReturns:\n    bool: True if execution was successful, False otherwise"
        },
        {
          "name": "run_rxinfer_scripts",
          "lineno": 149,
          "args": [
            "rendered_simulators_dir",
            "execution_output_dir",
            "recursive_search",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Find and run all RxInfer.jl scripts in the designated directory.\n\nArgs:\n    rendered_simulators_dir: Directory containing rendered simulators (target_dir from executor)\n    execution_output_dir: Specific directory for RxInfer execution outputs (optional)\n    recursive_search: Whether to search recursively for scripts\n    verbose: Whether to enable verbose output\n    \nReturns:\n    bool: True if all scripts executed successfully, False if any failed"
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/test_execution.py",
      "module": "execute.test_execution",
      "functions": [
        {
          "name": "test_dependency_checking",
          "lineno": 23,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test dependency checking for all execution environments."
        },
        {
          "name": "test_script_validation",
          "lineno": 54,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test script validation and cleanup."
        },
        {
          "name": "test_execution_components",
          "lineno": 69,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test individual execution components."
        },
        {
          "name": "test_full_execution",
          "lineno": 90,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test the full execution pipeline."
        },
        {
          "name": "main",
          "lineno": 109,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main test function."
        }
      ],
      "classes": []
    },
    {
      "file": "src/execute/validator.py",
      "module": "execute.validator",
      "functions": [
        {
          "name": "check_python_environment",
          "lineno": 50,
          "args": [],
          "returns": "ValidationResult",
          "decorators": [],
          "doc": "Validate Python environment and version."
        },
        {
          "name": "check_system_resources",
          "lineno": 87,
          "args": [],
          "returns": "List[ValidationResult]",
          "decorators": [],
          "doc": "Validate system resources (memory, disk, CPU)."
        },
        {
          "name": "check_dependencies",
          "lineno": 178,
          "args": [],
          "returns": "List[ValidationResult]",
          "decorators": [],
          "doc": "Check for required Python packages."
        },
        {
          "name": "check_file_permissions",
          "lineno": 237,
          "args": [],
          "returns": "List[ValidationResult]",
          "decorators": [],
          "doc": "Check file system permissions for execution."
        },
        {
          "name": "check_network_connectivity",
          "lineno": 301,
          "args": [],
          "returns": "ValidationResult",
          "decorators": [],
          "doc": "Check basic network connectivity (optional)."
        },
        {
          "name": "validate_execution_environment",
          "lineno": 322,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Perform comprehensive execution environment validation."
        },
        {
          "name": "log_validation_results",
          "lineno": 376,
          "args": [
            "validation_results",
            "logger"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Log validation results in a structured format."
        },
        {
          "name": "add_result",
          "lineno": 37,
          "args": [
            "self",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Add a validation result."
        },
        {
          "name": "get_failed_components",
          "lineno": 42,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get list of failed components."
        },
        {
          "name": "get_warnings",
          "lineno": 46,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get list of components with warnings."
        }
      ],
      "classes": [
        {
          "name": "ValidationResult",
          "lineno": 21,
          "bases": [],
          "doc": "Results of environment validation.",
          "methods": []
        },
        {
          "name": "EnvironmentValidation",
          "lineno": 30,
          "bases": [],
          "doc": "Complete environment validation results.",
          "methods": [
            {
              "name": "add_result",
              "lineno": 37,
              "args": [
                "self",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Add a validation result."
            },
            {
              "name": "get_failed_components",
              "lineno": 42,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get list of failed components."
            },
            {
              "name": "get_warnings",
              "lineno": 46,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get list of components with warnings."
            }
          ]
        }
      ]
    },
    {
      "file": "src/export/__init__.py",
      "module": "export.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/export/core.py",
      "module": "export.core",
      "functions": [
        {
          "name": "export_gnn_files",
          "lineno": 25,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Export GNN files to multiple formats.\n\nArgs:\n    target_dir: Directory containing GNN files to export\n    output_dir: Output directory for results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional export options\n    \nReturns:\n    True if export succeeded, False otherwise"
        }
      ],
      "classes": []
    },
    {
      "file": "src/export/format_exporters.py",
      "module": "export.format_exporters",
      "functions": [
        {
          "name": "_ensure_path",
          "lineno": 41,
          "args": [
            "path_str"
          ],
          "returns": "Path",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_strip_comments_from_multiline_str",
          "lineno": 44,
          "args": [
            "m_str"
          ],
          "returns": "str",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_parse_matrix_string",
          "lineno": 48,
          "args": [
            "matrix_str"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Safely parses a string representation of a matrix after stripping comments."
        },
        {
          "name": "_parse_free_text_section",
          "lineno": 101,
          "args": [
            "section_content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_parse_key_value_section",
          "lineno": 104,
          "args": [
            "section_content"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_parse_state_line",
          "lineno": 114,
          "args": [
            "line"
          ],
          "returns": "Optional[dict]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_parse_transition_line",
          "lineno": 126,
          "args": [
            "line"
          ],
          "returns": "Optional[dict]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_parse_list_items_section",
          "lineno": 143,
          "args": [
            "content",
            "parser"
          ],
          "returns": "list",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_parse_initial_parameterization_section",
          "lineno": 151,
          "args": [
            "section_content"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_gnn_model_to_dict",
          "lineno": 173,
          "args": [
            "gnn_file_path_str"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_pretty_print_xml",
          "lineno": 188,
          "args": [
            "element"
          ],
          "returns": "str",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_dict_to_xml",
          "lineno": 193,
          "args": [
            "tag",
            "d"
          ],
          "returns": "ET.Element",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "export_to_json_gnn",
          "lineno": 209,
          "args": [
            "gnn_model",
            "output_file_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Exports the GNN model dictionary to a JSON file."
        },
        {
          "name": "export_to_xml_gnn",
          "lineno": 221,
          "args": [
            "gnn_model",
            "output_file_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Exports the GNN model dictionary to an XML file."
        },
        {
          "name": "export_to_python_pickle",
          "lineno": 239,
          "args": [
            "gnn_model",
            "output_file_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serializes the GNN model dictionary to a Python pickle file."
        },
        {
          "name": "_build_networkx_graph",
          "lineno": 251,
          "args": [
            "gnn_model"
          ],
          "returns": "'Optional[nx.DiGraph]'",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "export_to_gexf",
          "lineno": 289,
          "args": [
            "gnn_model",
            "output_file_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Exports the GNN model graph to a GEXF file."
        },
        {
          "name": "export_to_graphml",
          "lineno": 305,
          "args": [
            "gnn_model",
            "output_file_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Exports the GNN model graph to a GraphML file."
        },
        {
          "name": "export_to_json_adjacency_list",
          "lineno": 321,
          "args": [
            "gnn_model",
            "output_file_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Exports the GNN model graph to a JSON adjacency list format."
        },
        {
          "name": "export_to_plaintext_summary",
          "lineno": 339,
          "args": [
            "gnn_model",
            "output_file_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Exports a human-readable plain text summary of the GNN model."
        },
        {
          "name": "export_to_plaintext_dsl",
          "lineno": 361,
          "args": [
            "gnn_model",
            "output_file_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Exports the GNN model back to a DSL-like format using the raw sections."
        },
        {
          "name": "clean_variable_list_str",
          "lineno": 131,
          "args": [
            "s"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "convert_structure",
          "lineno": 80,
          "args": [
            "item"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/export/formatters.py",
      "module": "export.formatters",
      "functions": [
        {
          "name": "export_to_json",
          "lineno": 15,
          "args": [
            "parsed_content",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Export parsed content to JSON format."
        },
        {
          "name": "export_to_xml",
          "lineno": 24,
          "args": [
            "parsed_content",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Export parsed content to XML format."
        },
        {
          "name": "export_to_graphml",
          "lineno": 62,
          "args": [
            "parsed_content",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Export parsed content to GraphML format."
        },
        {
          "name": "export_to_gexf",
          "lineno": 113,
          "args": [
            "parsed_content",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Export parsed content to GEXF format."
        },
        {
          "name": "export_to_pickle",
          "lineno": 160,
          "args": [
            "parsed_content",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Export parsed content to pickle format."
        },
        {
          "name": "export_to_json_gnn",
          "lineno": 169,
          "args": [
            "model_data",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Export GNN model data to JSON format."
        },
        {
          "name": "export_to_xml_gnn",
          "lineno": 178,
          "args": [
            "model_data",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Export GNN model data to XML format."
        },
        {
          "name": "export_to_python_pickle",
          "lineno": 227,
          "args": [
            "model_data",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Export GNN model data to Python pickle format."
        },
        {
          "name": "export_to_plaintext_summary",
          "lineno": 236,
          "args": [
            "model_data",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Export GNN model data to plaintext summary format."
        },
        {
          "name": "export_to_plaintext_dsl",
          "lineno": 270,
          "args": [
            "model_data",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Export GNN model data to plaintext DSL format."
        }
      ],
      "classes": []
    },
    {
      "file": "src/export/mcp.py",
      "module": "export.mcp",
      "functions": [
        {
          "name": "generate_exports_mcp",
          "lineno": 19,
          "args": [
            "target_directory",
            "output_directory",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate exports in multiple formats for GNN files. Exposed via MCP.\n\nArgs:\n    target_directory: Directory containing GNN files to export\n    output_directory: Directory to save exports\n    verbose: Enable verbose output\n    \nReturns:\n    Dictionary with operation status and export results."
        },
        {
          "name": "export_single_gnn_file_mcp",
          "lineno": 50,
          "args": [
            "gnn_file_path",
            "output_directory"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Export a single GNN file to multiple formats. Exposed via MCP.\n\nArgs:\n    gnn_file_path: Path to the GNN file to export\n    output_directory: Directory to save exports\n    \nReturns:\n    Dictionary with export results."
        },
        {
          "name": "register_tools",
          "lineno": 80,
          "args": [
            "mcp_instance"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register export utility tools with the MCP."
        }
      ],
      "classes": []
    },
    {
      "file": "src/export/processor.py",
      "module": "export.processor",
      "functions": [
        {
          "name": "generate_exports",
          "lineno": 20,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate exports in multiple formats for GNN files.\n\nArgs:\n    target_dir: Directory containing GNN files to export\n    output_dir: Directory to save exports\n    verbose: Enable verbose output\n    \nReturns:\n    True if exports generated successfully, False otherwise"
        },
        {
          "name": "export_single_gnn_file",
          "lineno": 77,
          "args": [
            "gnn_file",
            "exports_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Export a single GNN file to multiple formats.\n\nArgs:\n    gnn_file: Path to the GNN file to export\n    exports_dir: Directory to save exports\n    \nReturns:\n    Dictionary with export results"
        },
        {
          "name": "parse_gnn_content",
          "lineno": 132,
          "args": [
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse GNN content into structured data.\n\nArgs:\n    content: Raw GNN file content\n    \nReturns:\n    Dictionary with parsed GNN data"
        },
        {
          "name": "export_model",
          "lineno": 194,
          "args": [
            "model_data",
            "output_dir",
            "formats"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Export model data to multiple formats.\n\nArgs:\n    model_data: Model data to export\n    output_dir: Output directory\n    formats: List of formats to export (default: all)\n    \nReturns:\n    Dictionary with export results"
        },
        {
          "name": "_gnn_model_to_dict",
          "lineno": 261,
          "args": [
            "gnn_content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Convert GNN content to dictionary format.\n\nArgs:\n    gnn_content: Raw GNN content\n    \nReturns:\n    Dictionary representation of GNN model"
        },
        {
          "name": "export_gnn_model",
          "lineno": 295,
          "args": [
            "model_data",
            "output_dir",
            "formats"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Export GNN model to multiple formats.\n\nArgs:\n    model_data: GNN model data\n    output_dir: Output directory\n    formats: List of formats to export\n    \nReturns:\n    Dictionary with export results"
        }
      ],
      "classes": []
    },
    {
      "file": "src/export/utils.py",
      "module": "export.utils",
      "functions": [
        {
          "name": "get_module_info",
          "lineno": 10,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get comprehensive information about the export module and its capabilities."
        },
        {
          "name": "get_supported_formats",
          "lineno": 57,
          "args": [],
          "returns": "Dict[str, List[str]]",
          "decorators": [],
          "doc": "Get information about supported export formats."
        }
      ],
      "classes": []
    },
    {
      "file": "src/gnn/__init__.py",
      "module": "gnn.__init__",
      "functions": [
        {
          "name": "process_gnn",
          "lineno": 37,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "validate_gnn_file",
          "lineno": 40,
          "args": [
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "validate_gnn",
          "lineno": 46,
          "args": [
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/gnn/core_processor.py",
      "module": "gnn.core_processor",
      "functions": [
        {
          "name": "process_gnn_directory",
          "lineno": 138,
          "args": [
            "target_dir",
            "output_dir",
            "recursive"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Public wrapper expected by tests to process a directory of GNN files.\n\nExecutes discovery and validation phases and writes minimal results when output_dir is provided."
        },
        {
          "name": "process_gnn_directory_lightweight",
          "lineno": 163,
          "args": [
            "target_dir"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Very lightweight processing returning a mapping of file path to status, expected by tests."
        },
        {
          "name": "create_processor",
          "lineno": 301,
          "args": [
            "logger"
          ],
          "returns": "GNNProcessor",
          "decorators": [],
          "doc": "Create a configured GNN processor."
        },
        {
          "name": "log_phase",
          "lineno": 59,
          "args": [
            "self",
            "phase",
            "message"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Log processing phase details."
        },
        {
          "name": "get_processing_time",
          "lineno": 65,
          "args": [
            "self"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Get total processing time."
        },
        {
          "name": "get_phase_duration",
          "lineno": 69,
          "args": [
            "self",
            "phase"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Get duration for a specific phase."
        },
        {
          "name": "__init__",
          "lineno": 84,
          "args": [
            "self",
            "logger"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "process",
          "lineno": 95,
          "args": [
            "self",
            "context"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Execute the complete GNN processing pipeline.\n\nArgs:\n    context: Comprehensive processing context\n\nReturns:\n    bool: Whether processing was successful"
        },
        {
          "name": "_execute_discovery_phase",
          "lineno": 168,
          "args": [
            "self",
            "context"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Execute file discovery phase."
        },
        {
          "name": "_execute_validation_phase",
          "lineno": 193,
          "args": [
            "self",
            "context"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Execute validation phase."
        },
        {
          "name": "_execute_round_trip_phase",
          "lineno": 224,
          "args": [
            "self",
            "context"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Execute round-trip testing phase."
        },
        {
          "name": "_execute_cross_format_phase",
          "lineno": 258,
          "args": [
            "self",
            "context"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Execute cross-format validation phase."
        },
        {
          "name": "_execute_reporting_phase",
          "lineno": 281,
          "args": [
            "self",
            "context"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Execute reporting phase."
        }
      ],
      "classes": [
        {
          "name": "ProcessingPhase",
          "lineno": 28,
          "bases": [
            "Enum"
          ],
          "doc": "Enumeration of processing phases.",
          "methods": []
        },
        {
          "name": "ProcessingContext",
          "lineno": 38,
          "bases": [],
          "doc": "Comprehensive context for GNN processing pipeline.",
          "methods": [
            {
              "name": "log_phase",
              "lineno": 59,
              "args": [
                "self",
                "phase",
                "message"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Log processing phase details."
            },
            {
              "name": "get_processing_time",
              "lineno": 65,
              "args": [
                "self"
              ],
              "returns": "float",
              "decorators": [],
              "doc": "Get total processing time."
            },
            {
              "name": "get_phase_duration",
              "lineno": 69,
              "args": [
                "self",
                "phase"
              ],
              "returns": "float",
              "decorators": [],
              "doc": "Get duration for a specific phase."
            }
          ]
        },
        {
          "name": "GNNProcessor",
          "lineno": 76,
          "bases": [],
          "doc": "Orchestrates the entire GNN processing pipeline.\n\nThis class coordinates file discovery, validation, testing,\nand reporting in a structured, extensible manner.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 84,
              "args": [
                "self",
                "logger"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "process",
              "lineno": 95,
              "args": [
                "self",
                "context"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Execute the complete GNN processing pipeline.\n\nArgs:\n    context: Comprehensive processing context\n\nReturns:\n    bool: Whether processing was successful"
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/cross_format.py",
      "module": "gnn.cross_format",
      "functions": [
        {
          "name": "__init__",
          "lineno": 28,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "configure",
          "lineno": 31,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "validate",
          "lineno": 34,
          "args": [
            "self",
            "files"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "CrossFormatValidationStrategy",
          "lineno": 27,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "__init__",
              "lineno": 28,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "configure",
              "lineno": 31,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "validate",
              "lineno": 34,
              "args": [
                "self",
                "files"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/cross_format_validator.py",
      "module": "gnn.cross_format_validator",
      "functions": [
        {
          "name": "validate_cross_format_consistency",
          "lineno": 497,
          "args": [
            "gnn_content",
            "enable_round_trip"
          ],
          "returns": "CrossFormatValidationResult",
          "decorators": [],
          "doc": "Enhanced convenience function for cross-format validation."
        },
        {
          "name": "validate_schema_consistency",
          "lineno": 504,
          "args": [],
          "returns": "CrossFormatValidationResult",
          "decorators": [],
          "doc": "Enhanced convenience function for schema consistency validation."
        },
        {
          "name": "add_format_issue",
          "lineno": 46,
          "args": [
            "self",
            "format_name",
            "issue"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Add a format-specific issue."
        },
        {
          "name": "get_consistency_rate",
          "lineno": 52,
          "args": [
            "self"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Get overall consistency rate across formats."
        },
        {
          "name": "__init__",
          "lineno": 64,
          "args": [
            "self",
            "gnn_module_path",
            "enable_round_trip_testing"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_initialize_validators",
          "lineno": 87,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize enhanced validators for different schema formats."
        },
        {
          "name": "validate_cross_format_consistency",
          "lineno": 145,
          "args": [
            "self",
            "gnn_content",
            "source_format"
          ],
          "returns": "CrossFormatValidationResult",
          "decorators": [],
          "doc": "Enhanced cross-format validation with comprehensive analysis."
        },
        {
          "name": "_analyze_format_consistency",
          "lineno": 206,
          "args": [
            "self",
            "format_results",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Enhanced analysis of consistency between formats."
        },
        {
          "name": "_analyze_semantic_checksums",
          "lineno": 240,
          "args": [
            "self",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Analyze semantic checksums for consistency."
        },
        {
          "name": "_test_round_trip_compatibility",
          "lineno": 270,
          "args": [
            "self",
            "gnn_content",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test round-trip compatibility between formats."
        },
        {
          "name": "_find_common_error_patterns",
          "lineno": 307,
          "args": [
            "self",
            "format_results"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Find common error patterns across formats."
        },
        {
          "name": "_normalize_error_message",
          "lineno": 323,
          "args": [
            "self",
            "error"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Normalize error message for pattern matching."
        },
        {
          "name": "_generate_enhanced_metadata",
          "lineno": 340,
          "args": [
            "self",
            "format_results",
            "result"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate comprehensive metadata for the validation result."
        },
        {
          "name": "_create_temp_file",
          "lineno": 369,
          "args": [
            "self",
            "content",
            "format_hint"
          ],
          "returns": "Path",
          "decorators": [],
          "doc": "Create temporary file with appropriate extension for format testing."
        },
        {
          "name": "validate_schema_definitions_consistency",
          "lineno": 394,
          "args": [
            "self"
          ],
          "returns": "CrossFormatValidationResult",
          "decorators": [],
          "doc": "Enhanced validation of schema definition files consistency."
        },
        {
          "name": "_validate_enhanced_schema_structure_consistency",
          "lineno": 449,
          "args": [
            "self",
            "schemas",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Enhanced validation of structural consistency between schema formats."
        }
      ],
      "classes": [
        {
          "name": "CrossFormatValidationResult",
          "lineno": 31,
          "bases": [],
          "doc": "Enhanced results from cross-format validation with comprehensive metrics.",
          "methods": [
            {
              "name": "add_format_issue",
              "lineno": 46,
              "args": [
                "self",
                "format_name",
                "issue"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Add a format-specific issue."
            },
            {
              "name": "get_consistency_rate",
              "lineno": 52,
              "args": [
                "self"
              ],
              "returns": "float",
              "decorators": [],
              "doc": "Get overall consistency rate across formats."
            }
          ]
        },
        {
          "name": "CrossFormatValidator",
          "lineno": 61,
          "bases": [],
          "doc": "Enhanced validator for cross-format consistency with comprehensive testing support.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 64,
              "args": [
                "self",
                "gnn_module_path",
                "enable_round_trip_testing"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_initialize_validators",
              "lineno": 87,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize enhanced validators for different schema formats."
            },
            {
              "name": "validate_cross_format_consistency",
              "lineno": 145,
              "args": [
                "self",
                "gnn_content",
                "source_format"
              ],
              "returns": "CrossFormatValidationResult",
              "decorators": [],
              "doc": "Enhanced cross-format validation with comprehensive analysis."
            },
            {
              "name": "_analyze_format_consistency",
              "lineno": 206,
              "args": [
                "self",
                "format_results",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Enhanced analysis of consistency between formats."
            },
            {
              "name": "_analyze_semantic_checksums",
              "lineno": 240,
              "args": [
                "self",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Analyze semantic checksums for consistency."
            },
            {
              "name": "_test_round_trip_compatibility",
              "lineno": 270,
              "args": [
                "self",
                "gnn_content",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test round-trip compatibility between formats."
            },
            {
              "name": "_find_common_error_patterns",
              "lineno": 307,
              "args": [
                "self",
                "format_results"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Find common error patterns across formats."
            },
            {
              "name": "_normalize_error_message",
              "lineno": 323,
              "args": [
                "self",
                "error"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Normalize error message for pattern matching."
            },
            {
              "name": "_generate_enhanced_metadata",
              "lineno": 340,
              "args": [
                "self",
                "format_results",
                "result"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Generate comprehensive metadata for the validation result."
            },
            {
              "name": "_create_temp_file",
              "lineno": 369,
              "args": [
                "self",
                "content",
                "format_hint"
              ],
              "returns": "Path",
              "decorators": [],
              "doc": "Create temporary file with appropriate extension for format testing."
            },
            {
              "name": "validate_schema_definitions_consistency",
              "lineno": 394,
              "args": [
                "self"
              ],
              "returns": "CrossFormatValidationResult",
              "decorators": [],
              "doc": "Enhanced validation of schema definition files consistency."
            },
            {
              "name": "_validate_enhanced_schema_structure_consistency",
              "lineno": 449,
              "args": [
                "self",
                "schemas",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Enhanced validation of structural consistency between schema formats."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/discovery.py",
      "module": "gnn.discovery",
      "functions": [
        {
          "name": "__init__",
          "lineno": 36,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "configure",
          "lineno": 48,
          "args": [
            "self",
            "target_extensions"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Configure discovery parameters."
        },
        {
          "name": "discover",
          "lineno": 53,
          "args": [
            "self",
            "target_dir"
          ],
          "returns": "List[Path]",
          "decorators": [],
          "doc": "Discover GNN files in target directory.\n\nArgs:\n    target_dir: Directory to search\n    \nReturns:\n    List of discovered file paths"
        },
        {
          "name": "_analyze_file_content",
          "lineno": 87,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Analyze file content for GNN indicators.\n\nArgs:\n    file_path: Path to analyze\n    \nReturns:\n    bool: Whether file appears to be a GNN file"
        }
      ],
      "classes": [
        {
          "name": "DiscoveryResult",
          "lineno": 19,
          "bases": [],
          "doc": "Result of file discovery operation.",
          "methods": []
        },
        {
          "name": "FileDiscoveryStrategy",
          "lineno": 28,
          "bases": [],
          "doc": "Intelligent file discovery strategy for GNN models.\n\nPerforms content-aware discovery and basic analysis\nto identify potential GNN files.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 36,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "configure",
              "lineno": 48,
              "args": [
                "self",
                "target_extensions"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Configure discovery parameters."
            },
            {
              "name": "discover",
              "lineno": 53,
              "args": [
                "self",
                "target_dir"
              ],
              "returns": "List[Path]",
              "decorators": [],
              "doc": "Discover GNN files in target directory.\n\nArgs:\n    target_dir: Directory to search\n    \nReturns:\n    List of discovered file paths"
            },
            {
              "name": "_analyze_file_content",
              "lineno": 87,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Analyze file content for GNN indicators.\n\nArgs:\n    file_path: Path to analyze\n    \nReturns:\n    bool: Whether file appears to be a GNN file"
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/documentation/__init__.py",
      "module": "gnn.documentation.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/gnn/formal_specs/__init__.py",
      "module": "gnn.formal_specs.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/gnn/grammars/__init__.py",
      "module": "gnn.grammars.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/gnn/mcp.py",
      "module": "gnn.mcp",
      "functions": [
        {
          "name": "get_gnn_documentation",
          "lineno": 48,
          "args": [
            "doc_name"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Retrieve content of a GNN documentation or schema file.\n\nArgs:\n    doc_name: Name of the GNN document to retrieve. \n              Allowed values: \"file_structure\", \"punctuation\", \"schema_json\", \"schema_yaml\", \"grammar\".\n    \nReturns:\n    Dictionary containing document content or an error."
        },
        {
          "name": "validate_gnn_content",
          "lineno": 104,
          "args": [
            "content",
            "validation_level",
            "enable_round_trip",
            "format_hint"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Enhanced validation of GNN content with comprehensive testing capabilities.\n\nArgs:\n    content: GNN file content as string\n    validation_level: Validation strictness level\n    enable_round_trip: Whether to enable round-trip testing\n    format_hint: Optional format hint for content detection\n    \nReturns:\n    Dictionary containing enhanced validation results"
        },
        {
          "name": "parse_gnn_content",
          "lineno": 181,
          "args": [
            "content",
            "format_hint",
            "enhanced_validation"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse GNN content with enhanced multi-format support.\n\nArgs:\n    content: GNN file content as string\n    format_hint: Format hint for parsing (markdown, json, xml, yaml, etc.)\n    enhanced_validation: Whether to use enhanced parsing capabilities\n    \nReturns:\n    Dictionary containing parsed GNN model structure"
        },
        {
          "name": "validate_cross_format_consistency_content",
          "lineno": 259,
          "args": [
            "content",
            "source_format",
            "enable_round_trip"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate cross-format consistency for GNN content.\n\nArgs:\n    content: GNN file content as string\n    source_format: Source format of the content\n    enable_round_trip: Whether to enable round-trip testing\n    \nReturns:\n    Dictionary containing cross-format validation results"
        },
        {
          "name": "validate_schema_definitions_consistency",
          "lineno": 318,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate consistency between GNN schema definition files.\n\nReturns:\n    Dictionary containing schema consistency validation results"
        },
        {
          "name": "process_gnn_directory",
          "lineno": 354,
          "args": [
            "target_dir",
            "output_dir",
            "recursive",
            "verbose",
            "validation_level",
            "enable_round_trip"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Process a directory of GNN files with enhanced validation and testing.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Output directory for results\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    validation_level: Validation level (basic, standard, strict, research, round_trip)\n    enable_round_trip: Whether to enable round-trip testing\n    \nReturns:\n    Dictionary containing processing results"
        },
        {
          "name": "run_round_trip_tests",
          "lineno": 420,
          "args": [
            "target_dir",
            "output_dir",
            "reference_file",
            "test_subset",
            "enable_parallel"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Run comprehensive round-trip tests on GNN files.\n\nArgs:\n    target_dir: Directory containing GNN files\n    output_dir: Output directory for test results\n    reference_file: Optional specific reference file\n    test_subset: Optional list of formats to test\n    enable_parallel: Whether to enable parallel testing\n    \nReturns:\n    Dictionary containing round-trip test results"
        },
        {
          "name": "validate_directory_cross_format_consistency",
          "lineno": 483,
          "args": [
            "target_dir",
            "output_dir",
            "files_to_test",
            "include_binary"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate cross-format consistency for files in a directory.\n\nArgs:\n    target_dir: Directory containing GNN files to test\n    output_dir: Output directory for validation results\n    files_to_test: Optional list of specific files to test\n    include_binary: Whether to include binary formats in validation\n    \nReturns:\n    Dictionary containing cross-format validation results"
        },
        {
          "name": "get_gnn_schema_info",
          "lineno": 542,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get comprehensive information about the GNN schema.\n\nReturns:\n    Dictionary containing schema metadata and structure information"
        },
        {
          "name": "get_gnn_module_info",
          "lineno": 584,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get comprehensive information about the GNN module capabilities.\n\nReturns:\n    Dictionary containing module metadata and feature information"
        },
        {
          "name": "_retrieve_gnn_doc_resource",
          "lineno": 624,
          "args": [
            "uri"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Retrieve GNN documentation resource by URI.\nExample URI: gnn://documentation/file_structure"
        },
        {
          "name": "register_tools",
          "lineno": 654,
          "args": [
            "mcp_instance"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register comprehensive GNN tools and resources with the MCP."
        }
      ],
      "classes": []
    },
    {
      "file": "src/gnn/multi_format_processor.py",
      "module": "gnn.multi_format_processor",
      "functions": [
        {
          "name": "process_gnn_multi_format",
          "lineno": 21,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Discover, parse, and serialize GNN models to all supported formats.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Base output directory (step-specific directory will be created)\n    logger: Logger instance\n    recursive: Whether to recurse into subdirectories\n    verbose: Enable verbose logs\n\nReturns:\n    True on success, False otherwise"
        }
      ],
      "classes": []
    },
    {
      "file": "src/gnn/parser.py",
      "module": "gnn.parser",
      "functions": [
        {
          "name": "parse_gnn_formal",
          "lineno": 190,
          "args": [
            "file_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "validate_gnn_syntax_formal",
          "lineno": 191,
          "args": [
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_parse_tree_visualization",
          "lineno": 192,
          "args": [
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parsers",
          "lineno": 194,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Legacy function for backward compatibility."
        },
        {
          "name": "validate_gnn",
          "lineno": 198,
          "args": [
            "file_path_or_content",
            "validation_level"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate a GNN file or content.\n\nArgs:\n    file_path_or_content: Path to GNN file or content string\n    validation_level: Level of validation to perform\n    **kwargs: Additional validation options\n    \nReturns:\n    Tuple of (is_valid, list_of_errors)"
        },
        {
          "name": "_convert_parse_result_to_parsed_gnn",
          "lineno": 267,
          "args": [
            "parse_result"
          ],
          "returns": "ParsedGNN",
          "decorators": [],
          "doc": "Convert a parse result to a ParsedGNN object."
        },
        {
          "name": "__init__",
          "lineno": 19,
          "args": [
            "self",
            "file_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "add_section",
          "lineno": 29,
          "args": [
            "self",
            "section_name",
            "section_content"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Add a section to the parsed GNN."
        },
        {
          "name": "add_variable",
          "lineno": 36,
          "args": [
            "self",
            "variable_name",
            "variable_type",
            "variable_value"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Add a variable to the parsed GNN."
        },
        {
          "name": "add_connection",
          "lineno": 44,
          "args": [
            "self",
            "source",
            "target",
            "connection_type"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Add a connection to the parsed GNN."
        },
        {
          "name": "add_error",
          "lineno": 52,
          "args": [
            "self",
            "error_message"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Add a parse error."
        },
        {
          "name": "add_warning",
          "lineno": 56,
          "args": [
            "self",
            "warning_message"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Add a parse warning."
        },
        {
          "name": "to_dict",
          "lineno": 60,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Convert to dictionary representation."
        },
        {
          "name": "__init__",
          "lineno": 75,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the GNN parsing system."
        },
        {
          "name": "register_parser",
          "lineno": 80,
          "args": [
            "self",
            "format_name",
            "parser_func"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register a parser for a specific format."
        },
        {
          "name": "register_validator",
          "lineno": 84,
          "args": [
            "self",
            "format_name",
            "validator_func"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register a validator for a specific format."
        },
        {
          "name": "parse_file",
          "lineno": 88,
          "args": [
            "self",
            "file_path",
            "format_name"
          ],
          "returns": "Optional[ParsedGNN]",
          "decorators": [],
          "doc": "Parse a GNN file."
        },
        {
          "name": "_detect_format",
          "lineno": 107,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Detect the format of a GNN file."
        },
        {
          "name": "_basic_parser",
          "lineno": 120,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParsedGNN",
          "decorators": [],
          "doc": "Basic parser for GNN files."
        },
        {
          "name": "__init__",
          "lineno": 171,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the GNN format."
        },
        {
          "name": "__init__",
          "lineno": 180,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_file",
          "lineno": 181,
          "args": [
            "self",
            "file_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_content",
          "lineno": 182,
          "args": [
            "self",
            "content",
            "source_name"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "validate_syntax",
          "lineno": 183,
          "args": [
            "self",
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "visualize_parse_tree",
          "lineno": 184,
          "args": [
            "self",
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 188,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "ValidationLevel",
          "lineno": 10,
          "bases": [
            "Enum"
          ],
          "doc": "Validation levels for GNN files.",
          "methods": []
        },
        {
          "name": "ParsedGNN",
          "lineno": 16,
          "bases": [],
          "doc": "Represents a parsed GNN file.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 19,
              "args": [
                "self",
                "file_path"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "add_section",
              "lineno": 29,
              "args": [
                "self",
                "section_name",
                "section_content"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Add a section to the parsed GNN."
            },
            {
              "name": "add_variable",
              "lineno": 36,
              "args": [
                "self",
                "variable_name",
                "variable_type",
                "variable_value"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Add a variable to the parsed GNN."
            },
            {
              "name": "add_connection",
              "lineno": 44,
              "args": [
                "self",
                "source",
                "target",
                "connection_type"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Add a connection to the parsed GNN."
            },
            {
              "name": "add_error",
              "lineno": 52,
              "args": [
                "self",
                "error_message"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Add a parse error."
            },
            {
              "name": "add_warning",
              "lineno": 56,
              "args": [
                "self",
                "warning_message"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Add a parse warning."
            },
            {
              "name": "to_dict",
              "lineno": 60,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Convert to dictionary representation."
            }
          ]
        },
        {
          "name": "GNNParsingSystem",
          "lineno": 72,
          "bases": [],
          "doc": "System for parsing GNN files.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 75,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the GNN parsing system."
            },
            {
              "name": "register_parser",
              "lineno": 80,
              "args": [
                "self",
                "format_name",
                "parser_func"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Register a parser for a specific format."
            },
            {
              "name": "register_validator",
              "lineno": 84,
              "args": [
                "self",
                "format_name",
                "validator_func"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Register a validator for a specific format."
            },
            {
              "name": "parse_file",
              "lineno": 88,
              "args": [
                "self",
                "file_path",
                "format_name"
              ],
              "returns": "Optional[ParsedGNN]",
              "decorators": [],
              "doc": "Parse a GNN file."
            },
            {
              "name": "_detect_format",
              "lineno": 107,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Detect the format of a GNN file."
            },
            {
              "name": "_basic_parser",
              "lineno": 120,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParsedGNN",
              "decorators": [],
              "doc": "Basic parser for GNN files."
            }
          ]
        },
        {
          "name": "GNNFormat",
          "lineno": 168,
          "bases": [],
          "doc": "Represents a GNN format specification.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 171,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the GNN format."
            }
          ]
        },
        {
          "name": "GNNFormalParser",
          "lineno": 178,
          "bases": [],
          "doc": "Stub class for when Lark is not available.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 180,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_file",
              "lineno": 181,
              "args": [
                "self",
                "file_path"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_content",
              "lineno": 182,
              "args": [
                "self",
                "content",
                "source_name"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "validate_syntax",
              "lineno": 183,
              "args": [
                "self",
                "content"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "visualize_parse_tree",
              "lineno": 184,
              "args": [
                "self",
                "content"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "ParsedGNNFormal",
          "lineno": 186,
          "bases": [],
          "doc": "Stub class for when Lark is not available.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 188,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/__init__.py",
      "module": "gnn.parsers.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/gnn/parsers/alloy_serializer.py",
      "module": "gnn.parsers.alloy_serializer",
      "functions": [
        {
          "name": "__init__",
          "lineno": 11,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "serialize",
          "lineno": 15,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Alloy format with embedded data."
        },
        {
          "name": "_sanitize_alloy_name",
          "lineno": 98,
          "args": [
            "self",
            "name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Sanitize names for Alloy syntax."
        },
        {
          "name": "_map_to_alloy_type",
          "lineno": 107,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to Alloy types."
        }
      ],
      "classes": [
        {
          "name": "AlloySerializer",
          "lineno": 8,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for Alloy model checking language.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 11,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "serialize",
              "lineno": 15,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Alloy format with embedded data."
            },
            {
              "name": "_sanitize_alloy_name",
              "lineno": 98,
              "args": [
                "self",
                "name"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Sanitize names for Alloy syntax."
            },
            {
              "name": "_map_to_alloy_type",
              "lineno": 107,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to Alloy types."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/asn1_serializer.py",
      "module": "gnn.parsers.asn1_serializer",
      "functions": [
        {
          "name": "__init__",
          "lineno": 11,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "serialize",
          "lineno": 15,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to ASN.1 format."
        },
        {
          "name": "_sanitize_asn1_name",
          "lineno": 119,
          "args": [
            "self",
            "name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Sanitize names for ASN.1 syntax."
        },
        {
          "name": "_escape_string",
          "lineno": 130,
          "args": [
            "self",
            "text"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Escape string for ASN.1 format."
        }
      ],
      "classes": [
        {
          "name": "ASN1Serializer",
          "lineno": 8,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for ASN.1 format.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 11,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "serialize",
              "lineno": 15,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to ASN.1 format."
            },
            {
              "name": "_sanitize_asn1_name",
              "lineno": 119,
              "args": [
                "self",
                "name"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Sanitize names for ASN.1 syntax."
            },
            {
              "name": "_escape_string",
              "lineno": 130,
              "args": [
                "self",
                "text"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Escape string for ASN.1 format."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/base_serializer.py",
      "module": "gnn.parsers.base_serializer",
      "functions": [
        {
          "name": "__init__",
          "lineno": 9,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "serialize",
          "lineno": 13,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [
            "abstractmethod"
          ],
          "doc": "Serialize the GNN model to string format."
        },
        {
          "name": "serialize_to_file",
          "lineno": 17,
          "args": [
            "self",
            "model",
            "file_path"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Serialize model to file."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 23,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Serialize TimeSpecification object to dict."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 35,
          "args": [
            "self",
            "mappings"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Serialize ontology mappings to list of dicts."
        },
        {
          "name": "_create_embedded_model_data",
          "lineno": 52,
          "args": [
            "self",
            "model"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Create complete model data dict for embedding in format-specific comments."
        },
        {
          "name": "_get_embedded_comment_prefix",
          "lineno": 100,
          "args": [
            "self",
            "format_name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get the comment prefix for embedding data in different formats."
        },
        {
          "name": "_get_embedded_comment_suffix",
          "lineno": 124,
          "args": [
            "self",
            "format_name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get the comment suffix for embedding data in different formats."
        },
        {
          "name": "_add_embedded_model_data",
          "lineno": 136,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Add embedded model data to serialized content for round-trip fidelity."
        }
      ],
      "classes": [
        {
          "name": "BaseGNNSerializer",
          "lineno": 6,
          "bases": [
            "ABC"
          ],
          "doc": "Base class for all GNN serializers with common utility methods.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 9,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "serialize",
              "lineno": 13,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [
                "abstractmethod"
              ],
              "doc": "Serialize the GNN model to string format."
            },
            {
              "name": "serialize_to_file",
              "lineno": 17,
              "args": [
                "self",
                "model",
                "file_path"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Serialize model to file."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 23,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Serialize TimeSpecification object to dict."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 35,
              "args": [
                "self",
                "mappings"
              ],
              "returns": "List[Dict[str, Any]]",
              "decorators": [],
              "doc": "Serialize ontology mappings to list of dicts."
            },
            {
              "name": "_create_embedded_model_data",
              "lineno": 52,
              "args": [
                "self",
                "model"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Create complete model data dict for embedding in format-specific comments."
            },
            {
              "name": "_get_embedded_comment_prefix",
              "lineno": 100,
              "args": [
                "self",
                "format_name"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Get the comment prefix for embedding data in different formats."
            },
            {
              "name": "_get_embedded_comment_suffix",
              "lineno": 124,
              "args": [
                "self",
                "format_name"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Get the comment suffix for embedding data in different formats."
            },
            {
              "name": "_add_embedded_model_data",
              "lineno": 136,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Add embedded model data to serialized content for round-trip fidelity."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/binary_parser.py",
      "module": "gnn.parsers.binary_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 26,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_supported_extensions",
          "lineno": 29,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_file",
          "lineno": 32,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_string",
          "lineno": 50,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse base64-encoded pickle content from string."
        },
        {
          "name": "_parse_pickle_data",
          "lineno": 62,
          "args": [
            "self",
            "data"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse pickled data into GNN representation with enhanced support."
        },
        {
          "name": "_is_enhanced_gnn_data",
          "lineno": 100,
          "args": [
            "self",
            "data"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if data is from our enhanced GNN serialization format."
        },
        {
          "name": "_reconstruct_model_from_enhanced_data",
          "lineno": 105,
          "args": [
            "self",
            "data"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Reconstruct GNN model from enhanced pickle data for perfect round-trip."
        },
        {
          "name": "_parse_dict_data",
          "lineno": 178,
          "args": [
            "self",
            "data",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse dictionary data."
        },
        {
          "name": "_parse_object_data",
          "lineno": 200,
          "args": [
            "self",
            "obj",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse object data."
        },
        {
          "name": "_parse_variables_list",
          "lineno": 218,
          "args": [
            "self",
            "variables",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse variables from list."
        },
        {
          "name": "_parse_parameters_dict",
          "lineno": 231,
          "args": [
            "self",
            "parameters",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse parameters from dictionary or list."
        },
        {
          "name": "_parse_variable_type",
          "lineno": 258,
          "args": [
            "self",
            "type_str"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": "Parse variable type from string."
        },
        {
          "name": "_parse_data_type",
          "lineno": 272,
          "args": [
            "self",
            "type_str"
          ],
          "returns": "DataType",
          "decorators": [],
          "doc": "Parse data type from string."
        }
      ],
      "classes": [
        {
          "name": "PickleGNNParser",
          "lineno": 23,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for Python pickle binary format with enhanced round-trip support.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 26,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_supported_extensions",
              "lineno": 29,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_file",
              "lineno": 32,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_string",
              "lineno": 50,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse base64-encoded pickle content from string."
            },
            {
              "name": "_parse_pickle_data",
              "lineno": 62,
              "args": [
                "self",
                "data"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse pickled data into GNN representation with enhanced support."
            },
            {
              "name": "_is_enhanced_gnn_data",
              "lineno": 100,
              "args": [
                "self",
                "data"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if data is from our enhanced GNN serialization format."
            },
            {
              "name": "_reconstruct_model_from_enhanced_data",
              "lineno": 105,
              "args": [
                "self",
                "data"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Reconstruct GNN model from enhanced pickle data for perfect round-trip."
            },
            {
              "name": "_parse_dict_data",
              "lineno": 178,
              "args": [
                "self",
                "data",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse dictionary data."
            },
            {
              "name": "_parse_object_data",
              "lineno": 200,
              "args": [
                "self",
                "obj",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse object data."
            },
            {
              "name": "_parse_variables_list",
              "lineno": 218,
              "args": [
                "self",
                "variables",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse variables from list."
            },
            {
              "name": "_parse_parameters_dict",
              "lineno": 231,
              "args": [
                "self",
                "parameters",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse parameters from dictionary or list."
            },
            {
              "name": "_parse_variable_type",
              "lineno": 258,
              "args": [
                "self",
                "type_str"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": "Parse variable type from string."
            },
            {
              "name": "_parse_data_type",
              "lineno": 272,
              "args": [
                "self",
                "type_str"
              ],
              "returns": "DataType",
              "decorators": [],
              "doc": "Parse data type from string."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/binary_serializer.py",
      "module": "gnn.parsers.binary_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 13,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to pickle format with embedded JSON data for round-trip."
        },
        {
          "name": "serialize_to_file",
          "lineno": 60,
          "args": [
            "self",
            "model",
            "file_path"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Serialize directly to binary pickle file."
        },
        {
          "name": "serialize_pickle_direct",
          "lineno": 102,
          "args": [
            "self",
            "model",
            "file_path"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Direct binary pickle serialization."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 106,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 117,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        }
      ],
      "classes": [
        {
          "name": "BinarySerializer",
          "lineno": 10,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for binary formats (Pickle) with enhanced round-trip support.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 13,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to pickle format with embedded JSON data for round-trip."
            },
            {
              "name": "serialize_to_file",
              "lineno": 60,
              "args": [
                "self",
                "model",
                "file_path"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Serialize directly to binary pickle file."
            },
            {
              "name": "serialize_pickle_direct",
              "lineno": 102,
              "args": [
                "self",
                "model",
                "file_path"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Direct binary pickle serialization."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 106,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 117,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/common.py",
      "module": "gnn.parsers.common",
      "functions": [
        {
          "name": "normalize_variable_name",
          "lineno": 516,
          "args": [
            "name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Normalize variable name for consistent reference.\n\nThis function ensures that variable names are treated consistently\nthroughout the codebase, regardless of case or minor variations.\n\nArgs:\n    name: Variable name to normalize\n    \nReturns:\n    Normalized variable name"
        },
        {
          "name": "parse_dimensions",
          "lineno": 543,
          "args": [
            "dim_str"
          ],
          "returns": "List[int]",
          "decorators": [],
          "doc": "Parse dimension string like '[2,3,4]' or '[2,3,type=float]' into list of integers."
        },
        {
          "name": "safe_enum_convert",
          "lineno": 567,
          "args": [
            "enum_class",
            "value",
            "default"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Safely convert string to enum, handling case insensitivity."
        },
        {
          "name": "infer_variable_type",
          "lineno": 596,
          "args": [
            "name"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": "Infer variable type from its name according to Active Inference conventions.\n\nArgs:\n    name: Variable name\n    \nReturns:\n    Inferred variable type"
        },
        {
          "name": "parse_connection_operator",
          "lineno": 657,
          "args": [
            "op"
          ],
          "returns": "ConnectionType",
          "decorators": [],
          "doc": "Parse connection operator string to ConnectionType."
        },
        {
          "name": "__init__",
          "lineno": 31,
          "args": [
            "self",
            "message",
            "line",
            "column",
            "source"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_format_message",
          "lineno": 39,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Format the error message with location information."
        },
        {
          "name": "__post_init__",
          "lineno": 131,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_children",
          "lineno": 135,
          "args": [
            "self"
          ],
          "returns": "List['ASTNode']",
          "decorators": [],
          "doc": "Get all child nodes."
        },
        {
          "name": "accept",
          "lineno": 145,
          "args": [
            "self",
            "visitor"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Accept a visitor for traversal."
        },
        {
          "name": "__post_init__",
          "lineno": 159,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__post_init__",
          "lineno": 172,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__post_init__",
          "lineno": 184,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__post_init__",
          "lineno": 196,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__post_init__",
          "lineno": 208,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__post_init__",
          "lineno": 219,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__post_init__",
          "lineno": 230,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_variables_by_type",
          "lineno": 269,
          "args": [
            "self",
            "var_type"
          ],
          "returns": "List[Variable]",
          "decorators": [],
          "doc": "Get all variables of a specific type."
        },
        {
          "name": "get_variable_by_name",
          "lineno": 273,
          "args": [
            "self",
            "name"
          ],
          "returns": "Optional[Variable]",
          "decorators": [],
          "doc": "Get a variable by name."
        },
        {
          "name": "get_connections_for_variable",
          "lineno": 280,
          "args": [
            "self",
            "variable_name"
          ],
          "returns": "List[Connection]",
          "decorators": [],
          "doc": "Get all connections involving a specific variable."
        },
        {
          "name": "get_parameter_by_name",
          "lineno": 289,
          "args": [
            "self",
            "name"
          ],
          "returns": "Optional[Parameter]",
          "decorators": [],
          "doc": "Get a parameter by name."
        },
        {
          "name": "validate_structure",
          "lineno": 296,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Validate the internal structure and return any issues."
        },
        {
          "name": "to_dict",
          "lineno": 322,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Convert to dictionary representation."
        },
        {
          "name": "visit",
          "lineno": 373,
          "args": [
            "self",
            "node"
          ],
          "returns": "Any",
          "decorators": [
            "abstractmethod"
          ],
          "doc": "Visit an AST node."
        },
        {
          "name": "visit_children",
          "lineno": 377,
          "args": [
            "self",
            "node"
          ],
          "returns": "List[Any]",
          "decorators": [],
          "doc": "Visit all children of a node."
        },
        {
          "name": "__init__",
          "lineno": 384,
          "args": [
            "self",
            "indent"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "visit",
          "lineno": 387,
          "args": [
            "self",
            "node"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Visit and print a node."
        },
        {
          "name": "parse_file",
          "lineno": 411,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "'ParseResult'",
          "decorators": [],
          "doc": "Parse a GNN file and return the result."
        },
        {
          "name": "parse_string",
          "lineno": 415,
          "args": [
            "self",
            "content"
          ],
          "returns": "'ParseResult'",
          "decorators": [],
          "doc": "Parse GNN content from a string."
        },
        {
          "name": "get_supported_extensions",
          "lineno": 419,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get file extensions supported by this parser."
        },
        {
          "name": "serialize",
          "lineno": 426,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Serialize a GNN model to string format."
        },
        {
          "name": "serialize_to_file",
          "lineno": 430,
          "args": [
            "self",
            "model",
            "file_path"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Serialize a GNN model to a file."
        },
        {
          "name": "has_errors",
          "lineno": 449,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if there are any errors."
        },
        {
          "name": "has_warnings",
          "lineno": 453,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if there are any warnings."
        },
        {
          "name": "add_error",
          "lineno": 457,
          "args": [
            "self",
            "error"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Add an error to the result."
        },
        {
          "name": "add_warning",
          "lineno": 462,
          "args": [
            "self",
            "warning"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Add a warning to the result."
        },
        {
          "name": "__init__",
          "lineno": 473,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_file",
          "lineno": 479,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [
            "abstractmethod"
          ],
          "doc": "Parse a GNN file."
        },
        {
          "name": "parse_string",
          "lineno": 484,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [
            "abstractmethod"
          ],
          "doc": "Parse GNN content from string."
        },
        {
          "name": "get_supported_extensions",
          "lineno": 489,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [
            "abstractmethod"
          ],
          "doc": "Get supported file extensions."
        },
        {
          "name": "create_parse_error",
          "lineno": 493,
          "args": [
            "self",
            "message",
            "line",
            "column"
          ],
          "returns": "ParseError",
          "decorators": [],
          "doc": "Create a parse error with location information."
        },
        {
          "name": "create_empty_model",
          "lineno": 504,
          "args": [
            "self",
            "name"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Create an empty GNN model."
        },
        {
          "name": "serialize_obj",
          "lineno": 324,
          "args": [
            "obj"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Helper to serialize objects with enums to dict."
        }
      ],
      "classes": [
        {
          "name": "ParseError",
          "lineno": 28,
          "bases": [
            "Exception"
          ],
          "doc": "Base exception for parsing errors.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 31,
              "args": [
                "self",
                "message",
                "line",
                "column",
                "source"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_format_message",
              "lineno": 39,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Format the error message with location information."
            }
          ]
        },
        {
          "name": "ValidationError",
          "lineno": 50,
          "bases": [
            "Exception"
          ],
          "doc": "Exception for validation errors.",
          "methods": []
        },
        {
          "name": "ValidationWarning",
          "lineno": 54,
          "bases": [
            "Warning"
          ],
          "doc": "Warning for validation issues.",
          "methods": []
        },
        {
          "name": "ConversionError",
          "lineno": 58,
          "bases": [
            "Exception"
          ],
          "doc": "Exception for format conversion errors.",
          "methods": []
        },
        {
          "name": "GNNFormat",
          "lineno": 66,
          "bases": [
            "Enum"
          ],
          "doc": "Enumeration of all supported GNN formats.",
          "methods": []
        },
        {
          "name": "VariableType",
          "lineno": 92,
          "bases": [
            "Enum"
          ],
          "doc": "Types of variables in Active Inference.",
          "methods": []
        },
        {
          "name": "DataType",
          "lineno": 103,
          "bases": [
            "Enum"
          ],
          "doc": "Data types for GNN variables.",
          "methods": []
        },
        {
          "name": "ConnectionType",
          "lineno": 112,
          "bases": [
            "Enum"
          ],
          "doc": "Types of connections between variables.",
          "methods": []
        },
        {
          "name": "ASTNode",
          "lineno": 124,
          "bases": [],
          "doc": "Base class for all AST nodes.",
          "methods": [
            {
              "name": "__post_init__",
              "lineno": 131,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_children",
              "lineno": 135,
              "args": [
                "self"
              ],
              "returns": "List['ASTNode']",
              "decorators": [],
              "doc": "Get all child nodes."
            },
            {
              "name": "accept",
              "lineno": 145,
              "args": [
                "self",
                "visitor"
              ],
              "returns": "Any",
              "decorators": [],
              "doc": "Accept a visitor for traversal."
            }
          ]
        },
        {
          "name": "Variable",
          "lineno": 150,
          "bases": [
            "ASTNode"
          ],
          "doc": "AST node for variable definitions.",
          "methods": [
            {
              "name": "__post_init__",
              "lineno": 159,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "Connection",
          "lineno": 164,
          "bases": [
            "ASTNode"
          ],
          "doc": "AST node for connections between variables.",
          "methods": [
            {
              "name": "__post_init__",
              "lineno": 172,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "Parameter",
          "lineno": 177,
          "bases": [
            "ASTNode"
          ],
          "doc": "AST node for parameter assignments.",
          "methods": [
            {
              "name": "__post_init__",
              "lineno": 184,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "Equation",
          "lineno": 189,
          "bases": [
            "ASTNode"
          ],
          "doc": "AST node for mathematical equations.",
          "methods": [
            {
              "name": "__post_init__",
              "lineno": 196,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "TimeSpecification",
          "lineno": 201,
          "bases": [
            "ASTNode"
          ],
          "doc": "AST node for time configuration.",
          "methods": [
            {
              "name": "__post_init__",
              "lineno": 208,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "OntologyMapping",
          "lineno": 213,
          "bases": [
            "ASTNode"
          ],
          "doc": "AST node for ontology mappings.",
          "methods": [
            {
              "name": "__post_init__",
              "lineno": 219,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "Section",
          "lineno": 224,
          "bases": [
            "ASTNode"
          ],
          "doc": "AST node for GNN sections.",
          "methods": [
            {
              "name": "__post_init__",
              "lineno": 230,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "GNNInternalRepresentation",
          "lineno": 239,
          "bases": [],
          "doc": "Unified internal representation for GNN models across all formats.\n\nThis is the canonical representation that all parsers convert to\nand all serializers convert from.",
          "methods": [
            {
              "name": "get_variables_by_type",
              "lineno": 269,
              "args": [
                "self",
                "var_type"
              ],
              "returns": "List[Variable]",
              "decorators": [],
              "doc": "Get all variables of a specific type."
            },
            {
              "name": "get_variable_by_name",
              "lineno": 273,
              "args": [
                "self",
                "name"
              ],
              "returns": "Optional[Variable]",
              "decorators": [],
              "doc": "Get a variable by name."
            },
            {
              "name": "get_connections_for_variable",
              "lineno": 280,
              "args": [
                "self",
                "variable_name"
              ],
              "returns": "List[Connection]",
              "decorators": [],
              "doc": "Get all connections involving a specific variable."
            },
            {
              "name": "get_parameter_by_name",
              "lineno": 289,
              "args": [
                "self",
                "name"
              ],
              "returns": "Optional[Parameter]",
              "decorators": [],
              "doc": "Get a parameter by name."
            },
            {
              "name": "validate_structure",
              "lineno": 296,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Validate the internal structure and return any issues."
            },
            {
              "name": "to_dict",
              "lineno": 322,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Convert to dictionary representation."
            }
          ]
        },
        {
          "name": "ASTVisitor",
          "lineno": 369,
          "bases": [
            "ABC"
          ],
          "doc": "Abstract base class for AST visitors.",
          "methods": [
            {
              "name": "visit",
              "lineno": 373,
              "args": [
                "self",
                "node"
              ],
              "returns": "Any",
              "decorators": [
                "abstractmethod"
              ],
              "doc": "Visit an AST node."
            },
            {
              "name": "visit_children",
              "lineno": 377,
              "args": [
                "self",
                "node"
              ],
              "returns": "List[Any]",
              "decorators": [],
              "doc": "Visit all children of a node."
            }
          ]
        },
        {
          "name": "PrintVisitor",
          "lineno": 381,
          "bases": [
            "ASTVisitor"
          ],
          "doc": "Visitor that prints the AST structure.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 384,
              "args": [
                "self",
                "indent"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "visit",
              "lineno": 387,
              "args": [
                "self",
                "node"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Visit and print a node."
            }
          ]
        },
        {
          "name": "GNNParser",
          "lineno": 408,
          "bases": [
            "Protocol"
          ],
          "doc": "Protocol defining the interface for GNN parsers.",
          "methods": [
            {
              "name": "parse_file",
              "lineno": 411,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "'ParseResult'",
              "decorators": [],
              "doc": "Parse a GNN file and return the result."
            },
            {
              "name": "parse_string",
              "lineno": 415,
              "args": [
                "self",
                "content"
              ],
              "returns": "'ParseResult'",
              "decorators": [],
              "doc": "Parse GNN content from a string."
            },
            {
              "name": "get_supported_extensions",
              "lineno": 419,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get file extensions supported by this parser."
            }
          ]
        },
        {
          "name": "GNNSerializer",
          "lineno": 423,
          "bases": [
            "Protocol"
          ],
          "doc": "Protocol defining the interface for GNN serializers.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 426,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Serialize a GNN model to string format."
            },
            {
              "name": "serialize_to_file",
              "lineno": 430,
              "args": [
                "self",
                "model",
                "file_path"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Serialize a GNN model to a file."
            }
          ]
        },
        {
          "name": "ParseResult",
          "lineno": 439,
          "bases": [],
          "doc": "Result of parsing a GNN specification.",
          "methods": [
            {
              "name": "has_errors",
              "lineno": 449,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if there are any errors."
            },
            {
              "name": "has_warnings",
              "lineno": 453,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if there are any warnings."
            },
            {
              "name": "add_error",
              "lineno": 457,
              "args": [
                "self",
                "error"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Add an error to the result."
            },
            {
              "name": "add_warning",
              "lineno": 462,
              "args": [
                "self",
                "warning"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Add a warning to the result."
            }
          ]
        },
        {
          "name": "BaseGNNParser",
          "lineno": 470,
          "bases": [
            "ABC"
          ],
          "doc": "Abstract base class for GNN parsers.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 473,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_file",
              "lineno": 479,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [
                "abstractmethod"
              ],
              "doc": "Parse a GNN file."
            },
            {
              "name": "parse_string",
              "lineno": 484,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [
                "abstractmethod"
              ],
              "doc": "Parse GNN content from string."
            },
            {
              "name": "get_supported_extensions",
              "lineno": 489,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [
                "abstractmethod"
              ],
              "doc": "Get supported file extensions."
            },
            {
              "name": "create_parse_error",
              "lineno": 493,
              "args": [
                "self",
                "message",
                "line",
                "column"
              ],
              "returns": "ParseError",
              "decorators": [],
              "doc": "Create a parse error with location information."
            },
            {
              "name": "create_empty_model",
              "lineno": 504,
              "args": [
                "self",
                "name"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Create an empty GNN model."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/converters.py",
      "module": "gnn.parsers.converters",
      "functions": [
        {
          "name": "__init__",
          "lineno": 22,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the format converter."
        },
        {
          "name": "convert",
          "lineno": 26,
          "args": [
            "self",
            "model",
            "from_format",
            "to_format"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Convert a GNN model between formats.\n\nArgs:\n    model: The model to convert\n    from_format: Source format\n    to_format: Target format\n    \nReturns:\n    Converted model\n    \nRaises:\n    ConversionError: If conversion is not supported or fails"
        },
        {
          "name": "register_conversion",
          "lineno": 51,
          "args": [
            "self",
            "from_format",
            "to_format",
            "converter_func"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register a conversion function.\n\nArgs:\n    from_format: Source format\n    to_format: Target format\n    converter_func: Function to perform the conversion"
        },
        {
          "name": "is_supported",
          "lineno": 63,
          "args": [
            "self",
            "from_format",
            "to_format"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if a conversion is supported.\n\nArgs:\n    from_format: Source format\n    to_format: Target format\n    \nReturns:\n    True if conversion is supported"
        }
      ],
      "classes": [
        {
          "name": "ConversionError",
          "lineno": 13,
          "bases": [
            "Exception"
          ],
          "doc": "Raised when format conversion fails.",
          "methods": []
        },
        {
          "name": "FormatConverter",
          "lineno": 17,
          "bases": [],
          "doc": "Converts GNN models between different formats.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 22,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the format converter."
            },
            {
              "name": "convert",
              "lineno": 26,
              "args": [
                "self",
                "model",
                "from_format",
                "to_format"
              ],
              "returns": "Any",
              "decorators": [],
              "doc": "Convert a GNN model between formats.\n\nArgs:\n    model: The model to convert\n    from_format: Source format\n    to_format: Target format\n    \nReturns:\n    Converted model\n    \nRaises:\n    ConversionError: If conversion is not supported or fails"
            },
            {
              "name": "register_conversion",
              "lineno": 51,
              "args": [
                "self",
                "from_format",
                "to_format",
                "converter_func"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Register a conversion function.\n\nArgs:\n    from_format: Source format\n    to_format: Target format\n    converter_func: Function to perform the conversion"
            },
            {
              "name": "is_supported",
              "lineno": 63,
              "args": [
                "self",
                "from_format",
                "to_format"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if a conversion is supported.\n\nArgs:\n    from_format: Source format\n    to_format: Target format\n    \nReturns:\n    True if conversion is supported"
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/coq_parser.py",
      "module": "gnn.parsers.coq_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 27,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the Coq parser."
        },
        {
          "name": "parse_file",
          "lineno": 37,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse a Coq file containing GNN formal specifications."
        },
        {
          "name": "parse_string",
          "lineno": 54,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse Coq content from string."
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 75,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from Coq comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 92,
          "args": [
            "self",
            "embedded_data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data."
        },
        {
          "name": "_parse_coq_content",
          "lineno": 161,
          "args": [
            "self",
            "content"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Parse the main Coq content."
        },
        {
          "name": "_extract_model_name",
          "lineno": 185,
          "args": [
            "self",
            "content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Extract model name from Coq content."
        },
        {
          "name": "_parse_requires",
          "lineno": 193,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse Require Import statements."
        },
        {
          "name": "_parse_parameters",
          "lineno": 205,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse Parameter declarations."
        },
        {
          "name": "_parse_variables",
          "lineno": 224,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse Variable declarations."
        },
        {
          "name": "_parse_definitions",
          "lineno": 246,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse Definition statements."
        },
        {
          "name": "_parse_theorems",
          "lineno": 268,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse Theorem statements as model constraints."
        },
        {
          "name": "_infer_variable_type",
          "lineno": 283,
          "args": [
            "self",
            "name",
            "type_def"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": "Infer GNN variable type from Coq name and type."
        },
        {
          "name": "_infer_data_type",
          "lineno": 307,
          "args": [
            "self",
            "type_def"
          ],
          "returns": "DataType",
          "decorators": [],
          "doc": "Infer data type from Coq type definition."
        },
        {
          "name": "_infer_dimensions",
          "lineno": 322,
          "args": [
            "self",
            "type_def"
          ],
          "returns": "List[int]",
          "decorators": [],
          "doc": "Infer dimensions from Coq type definition."
        },
        {
          "name": "get_supported_extensions",
          "lineno": 332,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get supported file extensions."
        }
      ],
      "classes": [
        {
          "name": "CoqGNNParser",
          "lineno": 24,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for Coq formal verification specifications.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 27,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the Coq parser."
            },
            {
              "name": "parse_file",
              "lineno": 37,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse a Coq file containing GNN formal specifications."
            },
            {
              "name": "parse_string",
              "lineno": 54,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse Coq content from string."
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 75,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from Coq comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 92,
              "args": [
                "self",
                "embedded_data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data."
            },
            {
              "name": "_parse_coq_content",
              "lineno": 161,
              "args": [
                "self",
                "content"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Parse the main Coq content."
            },
            {
              "name": "_extract_model_name",
              "lineno": 185,
              "args": [
                "self",
                "content"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Extract model name from Coq content."
            },
            {
              "name": "_parse_requires",
              "lineno": 193,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse Require Import statements."
            },
            {
              "name": "_parse_parameters",
              "lineno": 205,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse Parameter declarations."
            },
            {
              "name": "_parse_variables",
              "lineno": 224,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse Variable declarations."
            },
            {
              "name": "_parse_definitions",
              "lineno": 246,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse Definition statements."
            },
            {
              "name": "_parse_theorems",
              "lineno": 268,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse Theorem statements as model constraints."
            },
            {
              "name": "_infer_variable_type",
              "lineno": 283,
              "args": [
                "self",
                "name",
                "type_def"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": "Infer GNN variable type from Coq name and type."
            },
            {
              "name": "_infer_data_type",
              "lineno": 307,
              "args": [
                "self",
                "type_def"
              ],
              "returns": "DataType",
              "decorators": [],
              "doc": "Infer data type from Coq type definition."
            },
            {
              "name": "_infer_dimensions",
              "lineno": 322,
              "args": [
                "self",
                "type_def"
              ],
              "returns": "List[int]",
              "decorators": [],
              "doc": "Infer dimensions from Coq type definition."
            },
            {
              "name": "get_supported_extensions",
              "lineno": 332,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get supported file extensions."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/coq_serializer.py",
      "module": "gnn.parsers.coq_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 11,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Coq format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 78,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 89,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "_map_to_coq_type",
          "lineno": 102,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to Coq types."
        }
      ],
      "classes": [
        {
          "name": "CoqSerializer",
          "lineno": 8,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for Coq format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 11,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Coq format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 78,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 89,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            },
            {
              "name": "_map_to_coq_type",
              "lineno": 102,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to Coq types."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/functional_parser.py",
      "module": "gnn.parsers.functional_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 25,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_supported_extensions",
          "lineno": 32,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_file",
          "lineno": 35,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_string",
          "lineno": 45,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 115,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from Haskell comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 133,
          "args": [
            "self",
            "embedded_data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data."
        },
        {
          "name": "_parse_haskell_dimensions",
          "lineno": 202,
          "args": [
            "self",
            "data_def"
          ],
          "returns": "List[int]",
          "decorators": [],
          "doc": "Parse dimensions from Haskell data definition."
        },
        {
          "name": "_infer_haskell_data_type",
          "lineno": 207,
          "args": [
            "self",
            "data_def"
          ],
          "returns": "DataType",
          "decorators": [],
          "doc": "Infer data type from Haskell data definition."
        },
        {
          "name": "_is_haskell_parameter",
          "lineno": 218,
          "args": [
            "self",
            "func_type",
            "func_body"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if function represents a parameter."
        },
        {
          "name": "_extract_haskell_value",
          "lineno": 224,
          "args": [
            "self",
            "func_body"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Extract value from Haskell function body."
        },
        {
          "name": "_infer_variable_type",
          "lineno": 236,
          "args": [
            "self",
            "name"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": "Infer variable type from name."
        }
      ],
      "classes": [
        {
          "name": "HaskellGNNParser",
          "lineno": 22,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for Haskell functional specifications.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 25,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_supported_extensions",
              "lineno": 32,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_file",
              "lineno": 35,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_string",
              "lineno": 45,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 115,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from Haskell comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 133,
              "args": [
                "self",
                "embedded_data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data."
            },
            {
              "name": "_parse_haskell_dimensions",
              "lineno": 202,
              "args": [
                "self",
                "data_def"
              ],
              "returns": "List[int]",
              "decorators": [],
              "doc": "Parse dimensions from Haskell data definition."
            },
            {
              "name": "_infer_haskell_data_type",
              "lineno": 207,
              "args": [
                "self",
                "data_def"
              ],
              "returns": "DataType",
              "decorators": [],
              "doc": "Infer data type from Haskell data definition."
            },
            {
              "name": "_is_haskell_parameter",
              "lineno": 218,
              "args": [
                "self",
                "func_type",
                "func_body"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if function represents a parameter."
            },
            {
              "name": "_extract_haskell_value",
              "lineno": 224,
              "args": [
                "self",
                "func_body"
              ],
              "returns": "Any",
              "decorators": [],
              "doc": "Extract value from Haskell function body."
            },
            {
              "name": "_infer_variable_type",
              "lineno": 236,
              "args": [
                "self",
                "name"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": "Infer variable type from name."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/functional_serializer.py",
      "module": "gnn.parsers.functional_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 11,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Haskell format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 86,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 97,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "_map_to_haskell_type",
          "lineno": 110,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to Haskell types."
        }
      ],
      "classes": [
        {
          "name": "FunctionalSerializer",
          "lineno": 8,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for functional programming languages.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 11,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Haskell format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 86,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 97,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            },
            {
              "name": "_map_to_haskell_type",
              "lineno": 110,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to Haskell types."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/grammar_parser.py",
      "module": "gnn.parsers.grammar_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 27,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the BNF parser."
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 34,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from BNF comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 49,
          "args": [
            "self",
            "embedded_data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data for perfect round-trip fidelity."
        },
        {
          "name": "parse_file",
          "lineno": 111,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse a BNF file containing GNN grammar specifications."
        },
        {
          "name": "parse_string",
          "lineno": 128,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse BNF content from string."
        },
        {
          "name": "_parse_bnf_content",
          "lineno": 148,
          "args": [
            "self",
            "content"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Parse the main BNF content."
        },
        {
          "name": "_extract_model_name",
          "lineno": 162,
          "args": [
            "self",
            "content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Extract model name from BNF content."
        },
        {
          "name": "_parse_grammar_rules",
          "lineno": 185,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse BNF grammar rules to extract GNN components."
        },
        {
          "name": "_infer_variable_type_from_rule",
          "lineno": 207,
          "args": [
            "self",
            "non_terminal",
            "production"
          ],
          "returns": "Optional[VariableType]",
          "decorators": [],
          "doc": "Infer variable type from grammar rule."
        },
        {
          "name": "_infer_data_type_from_production",
          "lineno": 238,
          "args": [
            "self",
            "production"
          ],
          "returns": "DataType",
          "decorators": [],
          "doc": "Infer data type from production rule."
        },
        {
          "name": "_extract_connections_from_production",
          "lineno": 253,
          "args": [
            "self",
            "non_terminal",
            "production",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Extract connections from production rules."
        },
        {
          "name": "get_supported_extensions",
          "lineno": 271,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get supported file extensions."
        },
        {
          "name": "__init__",
          "lineno": 279,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the EBNF parser."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 288,
          "args": [
            "self",
            "embedded_data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data for perfect round-trip fidelity (EBNF version)."
        },
        {
          "name": "_parse_bnf_content",
          "lineno": 350,
          "args": [
            "self",
            "content"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Parse EBNF content (override parent method)."
        },
        {
          "name": "_parse_ebnf_rules",
          "lineno": 364,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse EBNF rules with extended notation."
        },
        {
          "name": "_process_ebnf_constructs",
          "lineno": 388,
          "args": [
            "self",
            "production"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Process EBNF-specific constructs."
        },
        {
          "name": "_extract_connections_from_ebnf_production",
          "lineno": 404,
          "args": [
            "self",
            "non_terminal",
            "production",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Extract connections from EBNF production rules."
        },
        {
          "name": "get_supported_extensions",
          "lineno": 427,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get supported file extensions."
        }
      ],
      "classes": [
        {
          "name": "BNFParser",
          "lineno": 24,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for BNF grammar specifications with embedded data support.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 27,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the BNF parser."
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 34,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from BNF comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 49,
              "args": [
                "self",
                "embedded_data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data for perfect round-trip fidelity."
            },
            {
              "name": "parse_file",
              "lineno": 111,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse a BNF file containing GNN grammar specifications."
            },
            {
              "name": "parse_string",
              "lineno": 128,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse BNF content from string."
            },
            {
              "name": "_parse_bnf_content",
              "lineno": 148,
              "args": [
                "self",
                "content"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Parse the main BNF content."
            },
            {
              "name": "_extract_model_name",
              "lineno": 162,
              "args": [
                "self",
                "content"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Extract model name from BNF content."
            },
            {
              "name": "_parse_grammar_rules",
              "lineno": 185,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse BNF grammar rules to extract GNN components."
            },
            {
              "name": "_infer_variable_type_from_rule",
              "lineno": 207,
              "args": [
                "self",
                "non_terminal",
                "production"
              ],
              "returns": "Optional[VariableType]",
              "decorators": [],
              "doc": "Infer variable type from grammar rule."
            },
            {
              "name": "_infer_data_type_from_production",
              "lineno": 238,
              "args": [
                "self",
                "production"
              ],
              "returns": "DataType",
              "decorators": [],
              "doc": "Infer data type from production rule."
            },
            {
              "name": "_extract_connections_from_production",
              "lineno": 253,
              "args": [
                "self",
                "non_terminal",
                "production",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Extract connections from production rules."
            },
            {
              "name": "get_supported_extensions",
              "lineno": 271,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get supported file extensions."
            }
          ]
        },
        {
          "name": "EBNFParser",
          "lineno": 276,
          "bases": [
            "BNFParser"
          ],
          "doc": "Parser for EBNF (Extended BNF) grammar specifications with embedded data support.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 279,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the EBNF parser."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 288,
              "args": [
                "self",
                "embedded_data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data for perfect round-trip fidelity (EBNF version)."
            },
            {
              "name": "_parse_bnf_content",
              "lineno": 350,
              "args": [
                "self",
                "content"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Parse EBNF content (override parent method)."
            },
            {
              "name": "_parse_ebnf_rules",
              "lineno": 364,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse EBNF rules with extended notation."
            },
            {
              "name": "_process_ebnf_constructs",
              "lineno": 388,
              "args": [
                "self",
                "production"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Process EBNF-specific constructs."
            },
            {
              "name": "_extract_connections_from_ebnf_production",
              "lineno": 404,
              "args": [
                "self",
                "non_terminal",
                "production",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Extract connections from EBNF production rules."
            },
            {
              "name": "get_supported_extensions",
              "lineno": 427,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get supported file extensions."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/grammar_serializer.py",
      "module": "gnn.parsers.grammar_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 11,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to BNF format with embedded data."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 91,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 102,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        }
      ],
      "classes": [
        {
          "name": "GrammarSerializer",
          "lineno": 8,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for BNF/EBNF grammar format with embedded data support.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 11,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to BNF format with embedded data."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 91,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 102,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/isabelle_parser.py",
      "module": "gnn.parsers.isabelle_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 25,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_supported_extensions",
          "lineno": 33,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get file extensions supported by this parser."
        },
        {
          "name": "parse_file",
          "lineno": 37,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse an Isabelle/HOL file."
        },
        {
          "name": "parse_string",
          "lineno": 48,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse Isabelle/HOL content string."
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 129,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from Isabelle comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 146,
          "args": [
            "self",
            "embedded_data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data."
        },
        {
          "name": "_infer_variable_type",
          "lineno": 215,
          "args": [
            "self",
            "name"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": "Infer variable type from name."
        },
        {
          "name": "_parse_datatype_dimensions",
          "lineno": 229,
          "args": [
            "self",
            "datatype_def"
          ],
          "returns": "List[int]",
          "decorators": [],
          "doc": "Parse dimensions from datatype definition."
        },
        {
          "name": "_infer_data_type",
          "lineno": 240,
          "args": [
            "self",
            "datatype_def"
          ],
          "returns": "DataType",
          "decorators": [],
          "doc": "Infer data type from datatype definition."
        },
        {
          "name": "_is_parameter_definition",
          "lineno": 252,
          "args": [
            "self",
            "body"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if definition body represents a parameter."
        },
        {
          "name": "_extract_parameter_value",
          "lineno": 259,
          "args": [
            "self",
            "body"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Extract parameter value from definition body."
        },
        {
          "name": "_extract_connections",
          "lineno": 271,
          "args": [
            "self",
            "content"
          ],
          "returns": "List[Connection]",
          "decorators": [],
          "doc": "Extract connections from function applications."
        }
      ],
      "classes": [
        {
          "name": "IsabelleParser",
          "lineno": 22,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for Isabelle/HOL theorem proving specifications.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 25,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_supported_extensions",
              "lineno": 33,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get file extensions supported by this parser."
            },
            {
              "name": "parse_file",
              "lineno": 37,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse an Isabelle/HOL file."
            },
            {
              "name": "parse_string",
              "lineno": 48,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse Isabelle/HOL content string."
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 129,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from Isabelle comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 146,
              "args": [
                "self",
                "embedded_data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data."
            },
            {
              "name": "_infer_variable_type",
              "lineno": 215,
              "args": [
                "self",
                "name"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": "Infer variable type from name."
            },
            {
              "name": "_parse_datatype_dimensions",
              "lineno": 229,
              "args": [
                "self",
                "datatype_def"
              ],
              "returns": "List[int]",
              "decorators": [],
              "doc": "Parse dimensions from datatype definition."
            },
            {
              "name": "_infer_data_type",
              "lineno": 240,
              "args": [
                "self",
                "datatype_def"
              ],
              "returns": "DataType",
              "decorators": [],
              "doc": "Infer data type from datatype definition."
            },
            {
              "name": "_is_parameter_definition",
              "lineno": 252,
              "args": [
                "self",
                "body"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if definition body represents a parameter."
            },
            {
              "name": "_extract_parameter_value",
              "lineno": 259,
              "args": [
                "self",
                "body"
              ],
              "returns": "Any",
              "decorators": [],
              "doc": "Extract parameter value from definition body."
            },
            {
              "name": "_extract_connections",
              "lineno": 271,
              "args": [
                "self",
                "content"
              ],
              "returns": "List[Connection]",
              "decorators": [],
              "doc": "Extract connections from function applications."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/isabelle_serializer.py",
      "module": "gnn.parsers.isabelle_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 11,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Isabelle/HOL format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 76,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 87,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "_map_to_isabelle_type",
          "lineno": 100,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to Isabelle types."
        }
      ],
      "classes": [
        {
          "name": "IsabelleSerializer",
          "lineno": 8,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for Isabelle/HOL format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 11,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Isabelle/HOL format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 76,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 87,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            },
            {
              "name": "_map_to_isabelle_type",
              "lineno": 100,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to Isabelle types."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/json_parser.py",
      "module": "gnn.parsers.json_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 29,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the JSON parser."
        },
        {
          "name": "parse_file",
          "lineno": 33,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse a JSON file containing GNN specifications."
        },
        {
          "name": "parse_string",
          "lineno": 59,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse JSON content from string."
        },
        {
          "name": "_parse_json_data",
          "lineno": 94,
          "args": [
            "self",
            "data"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse JSON data into GNN internal representation."
        },
        {
          "name": "_convert_json_to_model",
          "lineno": 109,
          "args": [
            "self",
            "data"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Convert JSON data to GNN internal representation."
        },
        {
          "name": "_parse_variables",
          "lineno": 173,
          "args": [
            "self",
            "variables_data"
          ],
          "returns": "List[Variable]",
          "decorators": [],
          "doc": "Parse variables from JSON data."
        },
        {
          "name": "_parse_connections",
          "lineno": 216,
          "args": [
            "self",
            "connections_data"
          ],
          "returns": "List[Connection]",
          "decorators": [],
          "doc": "Parse connections from JSON data."
        },
        {
          "name": "_parse_parameters",
          "lineno": 249,
          "args": [
            "self",
            "parameters_data"
          ],
          "returns": "List[Parameter]",
          "decorators": [],
          "doc": "Parse parameters from JSON data."
        },
        {
          "name": "_parse_equations",
          "lineno": 275,
          "args": [
            "self",
            "equations_data"
          ],
          "returns": "List[Equation]",
          "decorators": [],
          "doc": "Parse equations from JSON data."
        },
        {
          "name": "_parse_time_specification",
          "lineno": 301,
          "args": [
            "self",
            "time_data"
          ],
          "returns": "Optional[TimeSpecification]",
          "decorators": [],
          "doc": "Parse time specification from JSON data."
        },
        {
          "name": "_parse_ontology_mappings",
          "lineno": 318,
          "args": [
            "self",
            "mappings_data"
          ],
          "returns": "List[OntologyMapping]",
          "decorators": [],
          "doc": "Parse ontology mappings from JSON data."
        },
        {
          "name": "get_supported_extensions",
          "lineno": 342,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get supported file extensions."
        }
      ],
      "classes": [
        {
          "name": "JSONGNNParser",
          "lineno": 26,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for JSON data interchange format.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 29,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the JSON parser."
            },
            {
              "name": "parse_file",
              "lineno": 33,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse a JSON file containing GNN specifications."
            },
            {
              "name": "parse_string",
              "lineno": 59,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse JSON content from string."
            },
            {
              "name": "_parse_json_data",
              "lineno": 94,
              "args": [
                "self",
                "data"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse JSON data into GNN internal representation."
            },
            {
              "name": "_convert_json_to_model",
              "lineno": 109,
              "args": [
                "self",
                "data"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Convert JSON data to GNN internal representation."
            },
            {
              "name": "_parse_variables",
              "lineno": 173,
              "args": [
                "self",
                "variables_data"
              ],
              "returns": "List[Variable]",
              "decorators": [],
              "doc": "Parse variables from JSON data."
            },
            {
              "name": "_parse_connections",
              "lineno": 216,
              "args": [
                "self",
                "connections_data"
              ],
              "returns": "List[Connection]",
              "decorators": [],
              "doc": "Parse connections from JSON data."
            },
            {
              "name": "_parse_parameters",
              "lineno": 249,
              "args": [
                "self",
                "parameters_data"
              ],
              "returns": "List[Parameter]",
              "decorators": [],
              "doc": "Parse parameters from JSON data."
            },
            {
              "name": "_parse_equations",
              "lineno": 275,
              "args": [
                "self",
                "equations_data"
              ],
              "returns": "List[Equation]",
              "decorators": [],
              "doc": "Parse equations from JSON data."
            },
            {
              "name": "_parse_time_specification",
              "lineno": 301,
              "args": [
                "self",
                "time_data"
              ],
              "returns": "Optional[TimeSpecification]",
              "decorators": [],
              "doc": "Parse time specification from JSON data."
            },
            {
              "name": "_parse_ontology_mappings",
              "lineno": 318,
              "args": [
                "self",
                "mappings_data"
              ],
              "returns": "List[OntologyMapping]",
              "decorators": [],
              "doc": "Parse ontology mappings from JSON data."
            },
            {
              "name": "get_supported_extensions",
              "lineno": 342,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get supported file extensions."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/json_serializer.py",
      "module": "gnn.parsers.json_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 10,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to JSON format."
        }
      ],
      "classes": [
        {
          "name": "JSONSerializer",
          "lineno": 7,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for JSON data interchange format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 10,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to JSON format."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/lean_parser.py",
      "module": "gnn.parsers.lean_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 27,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the Lean parser."
        },
        {
          "name": "parse_file",
          "lineno": 36,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse a Lean file containing GNN category theory specifications."
        },
        {
          "name": "parse_string",
          "lineno": 53,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse Lean content from string."
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 74,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from Lean comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 92,
          "args": [
            "self",
            "embedded_data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data."
        },
        {
          "name": "_parse_lean_content",
          "lineno": 161,
          "args": [
            "self",
            "content"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Parse the main Lean content."
        },
        {
          "name": "_extract_model_name",
          "lineno": 185,
          "args": [
            "self",
            "content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Extract model name from Lean content."
        },
        {
          "name": "_parse_imports",
          "lineno": 200,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse import statements to understand dependencies."
        },
        {
          "name": "_parse_structures",
          "lineno": 212,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse Lean structures to extract GNN components."
        },
        {
          "name": "_extract_structure_body",
          "lineno": 226,
          "args": [
            "self",
            "content",
            "start_pos"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Extract the body of a structure definition."
        },
        {
          "name": "_parse_structure_fields",
          "lineno": 253,
          "args": [
            "self",
            "structure_body",
            "model",
            "structure_name"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse fields within a structure as variables."
        },
        {
          "name": "_parse_variables",
          "lineno": 276,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse standalone variable definitions."
        },
        {
          "name": "_infer_variable_type",
          "lineno": 298,
          "args": [
            "self",
            "name",
            "type_def"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": "Infer GNN variable type from Lean name and type."
        },
        {
          "name": "_infer_data_type",
          "lineno": 329,
          "args": [
            "self",
            "type_def"
          ],
          "returns": "DataType",
          "decorators": [],
          "doc": "Infer data type from Lean type definition."
        },
        {
          "name": "get_supported_extensions",
          "lineno": 345,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get supported file extensions."
        }
      ],
      "classes": [
        {
          "name": "LeanGNNParser",
          "lineno": 24,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for Lean category theory specifications.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 27,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the Lean parser."
            },
            {
              "name": "parse_file",
              "lineno": 36,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse a Lean file containing GNN category theory specifications."
            },
            {
              "name": "parse_string",
              "lineno": 53,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse Lean content from string."
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 74,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from Lean comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 92,
              "args": [
                "self",
                "embedded_data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data."
            },
            {
              "name": "_parse_lean_content",
              "lineno": 161,
              "args": [
                "self",
                "content"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Parse the main Lean content."
            },
            {
              "name": "_extract_model_name",
              "lineno": 185,
              "args": [
                "self",
                "content"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Extract model name from Lean content."
            },
            {
              "name": "_parse_imports",
              "lineno": 200,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse import statements to understand dependencies."
            },
            {
              "name": "_parse_structures",
              "lineno": 212,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse Lean structures to extract GNN components."
            },
            {
              "name": "_extract_structure_body",
              "lineno": 226,
              "args": [
                "self",
                "content",
                "start_pos"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Extract the body of a structure definition."
            },
            {
              "name": "_parse_structure_fields",
              "lineno": 253,
              "args": [
                "self",
                "structure_body",
                "model",
                "structure_name"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse fields within a structure as variables."
            },
            {
              "name": "_parse_variables",
              "lineno": 276,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse standalone variable definitions."
            },
            {
              "name": "_infer_variable_type",
              "lineno": 298,
              "args": [
                "self",
                "name",
                "type_def"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": "Infer GNN variable type from Lean name and type."
            },
            {
              "name": "_infer_data_type",
              "lineno": 329,
              "args": [
                "self",
                "type_def"
              ],
              "returns": "DataType",
              "decorators": [],
              "doc": "Infer data type from Lean type definition."
            },
            {
              "name": "get_supported_extensions",
              "lineno": 345,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get supported file extensions."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/lean_serializer.py",
      "module": "gnn.parsers.lean_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 11,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Lean format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 87,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 98,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "_map_to_lean_type",
          "lineno": 111,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to Lean types."
        }
      ],
      "classes": [
        {
          "name": "LeanSerializer",
          "lineno": 8,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for Lean theorem prover format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 11,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Lean format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 87,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 98,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            },
            {
              "name": "_map_to_lean_type",
              "lineno": 111,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to Lean types."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/markdown_parser.py",
      "module": "gnn.parsers.markdown_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 35,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_supported_extensions",
          "lineno": 53,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get supported file extensions."
        },
        {
          "name": "parse_file",
          "lineno": 57,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse a GNN Markdown file."
        },
        {
          "name": "parse_string",
          "lineno": 68,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse GNN Markdown content from string."
        },
        {
          "name": "_split_into_sections",
          "lineno": 105,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, str]",
          "decorators": [],
          "doc": "Split content into named sections based on ## headers."
        },
        {
          "name": "_parse_section",
          "lineno": 135,
          "args": [
            "self",
            "section_name",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse a specific section."
        },
        {
          "name": "_parse_gnn_section",
          "lineno": 144,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse the GNNSection."
        },
        {
          "name": "_parse_version_section",
          "lineno": 149,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse the GNNVersionAndFlags section."
        },
        {
          "name": "_parse_model_name",
          "lineno": 165,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse the ModelName section."
        },
        {
          "name": "_parse_annotation",
          "lineno": 169,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse the ModelAnnotation section."
        },
        {
          "name": "_parse_state_space",
          "lineno": 173,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse the StateSpaceBlock section."
        },
        {
          "name": "_parse_variable_definition",
          "lineno": 187,
          "args": [
            "self",
            "line"
          ],
          "returns": "Optional[Variable]",
          "decorators": [],
          "doc": "Parse a single variable definition line."
        },
        {
          "name": "_parse_data_type",
          "lineno": 235,
          "args": [
            "self",
            "type_str"
          ],
          "returns": "DataType",
          "decorators": [],
          "doc": "Parse data type string."
        },
        {
          "name": "_parse_connections",
          "lineno": 252,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse the Connections section."
        },
        {
          "name": "_parse_connection_definition",
          "lineno": 264,
          "args": [
            "self",
            "line"
          ],
          "returns": "Optional[Connection]",
          "decorators": [],
          "doc": "Parse a single connection definition line."
        },
        {
          "name": "_parse_variable_group",
          "lineno": 313,
          "args": [
            "self",
            "group_str"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Parse a variable group like 'X' or '(X,Y,Z)'."
        },
        {
          "name": "_parse_parameters",
          "lineno": 326,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse the InitialParameterization section."
        },
        {
          "name": "_parse_parameter_assignment",
          "lineno": 385,
          "args": [
            "self",
            "line"
          ],
          "returns": "Optional[Parameter]",
          "decorators": [],
          "doc": "Parse a single parameter assignment line."
        },
        {
          "name": "_parse_parameter_value",
          "lineno": 416,
          "args": [
            "self",
            "value_str"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Parse a parameter value string."
        },
        {
          "name": "_parse_matrix_rows",
          "lineno": 488,
          "args": [
            "self",
            "inner"
          ],
          "returns": "list",
          "decorators": [],
          "doc": "Parse matrix rows, handling nested structures properly."
        },
        {
          "name": "_parse_matrix_row",
          "lineno": 519,
          "args": [
            "self",
            "row"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Parse a single matrix row, handling both simple and nested tuple formats."
        },
        {
          "name": "_has_nested_tuples",
          "lineno": 547,
          "args": [
            "self",
            "row"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if a row contains nested tuples."
        },
        {
          "name": "_extract_tuples",
          "lineno": 563,
          "args": [
            "self",
            "row"
          ],
          "returns": "list",
          "decorators": [],
          "doc": "Extract individual tuples from a nested tuple string."
        },
        {
          "name": "_parse_single_value",
          "lineno": 587,
          "args": [
            "self",
            "value_str"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Parse a single value."
        },
        {
          "name": "_parse_equations",
          "lineno": 613,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse the Equations section."
        },
        {
          "name": "_parse_time",
          "lineno": 658,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse the Time section."
        },
        {
          "name": "_parse_ontology",
          "lineno": 686,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse the ActInfOntologyAnnotation section."
        },
        {
          "name": "_parse_ontology_mapping",
          "lineno": 697,
          "args": [
            "self",
            "line"
          ],
          "returns": "Optional[OntologyMapping]",
          "decorators": [],
          "doc": "Parse a single ontology mapping line."
        },
        {
          "name": "_parse_model_parameters",
          "lineno": 725,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse the ModelParameters section."
        },
        {
          "name": "_parse_footer",
          "lineno": 730,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse the Footer section."
        },
        {
          "name": "_parse_signature",
          "lineno": 734,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse the Signature section."
        },
        {
          "name": "_extract_model_name_fallback",
          "lineno": 738,
          "args": [
            "self",
            "content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Extract model name from content if not found in ModelName section."
        },
        {
          "name": "_post_process_model",
          "lineno": 754,
          "args": [
            "self",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Post-process the parsed model for consistency."
        }
      ],
      "classes": [
        {
          "name": "MarkdownGNNParser",
          "lineno": 27,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for GNN Markdown format.\n\nThis parser handles the standard GNN format as defined in the specification,\nincluding all sections and their contents.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 35,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_supported_extensions",
              "lineno": 53,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get supported file extensions."
            },
            {
              "name": "parse_file",
              "lineno": 57,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse a GNN Markdown file."
            },
            {
              "name": "parse_string",
              "lineno": 68,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse GNN Markdown content from string."
            },
            {
              "name": "_split_into_sections",
              "lineno": 105,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, str]",
              "decorators": [],
              "doc": "Split content into named sections based on ## headers."
            },
            {
              "name": "_parse_section",
              "lineno": 135,
              "args": [
                "self",
                "section_name",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse a specific section."
            },
            {
              "name": "_parse_gnn_section",
              "lineno": 144,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse the GNNSection."
            },
            {
              "name": "_parse_version_section",
              "lineno": 149,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse the GNNVersionAndFlags section."
            },
            {
              "name": "_parse_model_name",
              "lineno": 165,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse the ModelName section."
            },
            {
              "name": "_parse_annotation",
              "lineno": 169,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse the ModelAnnotation section."
            },
            {
              "name": "_parse_state_space",
              "lineno": 173,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse the StateSpaceBlock section."
            },
            {
              "name": "_parse_variable_definition",
              "lineno": 187,
              "args": [
                "self",
                "line"
              ],
              "returns": "Optional[Variable]",
              "decorators": [],
              "doc": "Parse a single variable definition line."
            },
            {
              "name": "_parse_data_type",
              "lineno": 235,
              "args": [
                "self",
                "type_str"
              ],
              "returns": "DataType",
              "decorators": [],
              "doc": "Parse data type string."
            },
            {
              "name": "_parse_connections",
              "lineno": 252,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse the Connections section."
            },
            {
              "name": "_parse_connection_definition",
              "lineno": 264,
              "args": [
                "self",
                "line"
              ],
              "returns": "Optional[Connection]",
              "decorators": [],
              "doc": "Parse a single connection definition line."
            },
            {
              "name": "_parse_variable_group",
              "lineno": 313,
              "args": [
                "self",
                "group_str"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Parse a variable group like 'X' or '(X,Y,Z)'."
            },
            {
              "name": "_parse_parameters",
              "lineno": 326,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse the InitialParameterization section."
            },
            {
              "name": "_parse_parameter_assignment",
              "lineno": 385,
              "args": [
                "self",
                "line"
              ],
              "returns": "Optional[Parameter]",
              "decorators": [],
              "doc": "Parse a single parameter assignment line."
            },
            {
              "name": "_parse_parameter_value",
              "lineno": 416,
              "args": [
                "self",
                "value_str"
              ],
              "returns": "Any",
              "decorators": [],
              "doc": "Parse a parameter value string."
            },
            {
              "name": "_parse_matrix_rows",
              "lineno": 488,
              "args": [
                "self",
                "inner"
              ],
              "returns": "list",
              "decorators": [],
              "doc": "Parse matrix rows, handling nested structures properly."
            },
            {
              "name": "_parse_matrix_row",
              "lineno": 519,
              "args": [
                "self",
                "row"
              ],
              "returns": "Any",
              "decorators": [],
              "doc": "Parse a single matrix row, handling both simple and nested tuple formats."
            },
            {
              "name": "_has_nested_tuples",
              "lineno": 547,
              "args": [
                "self",
                "row"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if a row contains nested tuples."
            },
            {
              "name": "_extract_tuples",
              "lineno": 563,
              "args": [
                "self",
                "row"
              ],
              "returns": "list",
              "decorators": [],
              "doc": "Extract individual tuples from a nested tuple string."
            },
            {
              "name": "_parse_single_value",
              "lineno": 587,
              "args": [
                "self",
                "value_str"
              ],
              "returns": "Any",
              "decorators": [],
              "doc": "Parse a single value."
            },
            {
              "name": "_parse_equations",
              "lineno": 613,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse the Equations section."
            },
            {
              "name": "_parse_time",
              "lineno": 658,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse the Time section."
            },
            {
              "name": "_parse_ontology",
              "lineno": 686,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse the ActInfOntologyAnnotation section."
            },
            {
              "name": "_parse_ontology_mapping",
              "lineno": 697,
              "args": [
                "self",
                "line"
              ],
              "returns": "Optional[OntologyMapping]",
              "decorators": [],
              "doc": "Parse a single ontology mapping line."
            },
            {
              "name": "_parse_model_parameters",
              "lineno": 725,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse the ModelParameters section."
            },
            {
              "name": "_parse_footer",
              "lineno": 730,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse the Footer section."
            },
            {
              "name": "_parse_signature",
              "lineno": 734,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse the Signature section."
            },
            {
              "name": "_extract_model_name_fallback",
              "lineno": 738,
              "args": [
                "self",
                "content"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Extract model name from content if not found in ModelName section."
            },
            {
              "name": "_post_process_model",
              "lineno": 754,
              "args": [
                "self",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Post-process the parsed model for consistency."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/markdown_serializer.py",
      "module": "gnn.parsers.markdown_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 10,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model back to Markdown format."
        }
      ],
      "classes": [
        {
          "name": "MarkdownSerializer",
          "lineno": 7,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for GNN Markdown format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 10,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model back to Markdown format."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/maxima_parser.py",
      "module": "gnn.parsers.maxima_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 24,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 31,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from Maxima comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 44,
          "args": [
            "self",
            "embedded_data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data for perfect round-trip fidelity."
        },
        {
          "name": "get_supported_extensions",
          "lineno": 106,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get file extensions supported by this parser."
        },
        {
          "name": "parse_file",
          "lineno": 110,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse a Maxima file."
        },
        {
          "name": "parse_string",
          "lineno": 121,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse Maxima content string."
        },
        {
          "name": "_extract_model_name",
          "lineno": 198,
          "args": [
            "self",
            "content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Extract model name from comments."
        },
        {
          "name": "_is_matrix_definition",
          "lineno": 213,
          "args": [
            "self",
            "value"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if value is a matrix definition."
        },
        {
          "name": "_parse_matrix_dimensions",
          "lineno": 219,
          "args": [
            "self",
            "matrix_def"
          ],
          "returns": "List[int]",
          "decorators": [],
          "doc": "Parse matrix dimensions from definition."
        },
        {
          "name": "_parse_maxima_value",
          "lineno": 235,
          "args": [
            "self",
            "value"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Parse Maxima value to Python type."
        },
        {
          "name": "_infer_variable_type",
          "lineno": 252,
          "args": [
            "self",
            "name"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": "Infer variable type from name."
        },
        {
          "name": "_extract_function_connections",
          "lineno": 272,
          "args": [
            "self",
            "func_name",
            "args",
            "body"
          ],
          "returns": "List[Connection]",
          "decorators": [],
          "doc": "Extract connections from function dependencies."
        }
      ],
      "classes": [
        {
          "name": "MaximaParser",
          "lineno": 21,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for Maxima symbolic computation specifications with embedded data support.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 24,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 31,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from Maxima comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 44,
              "args": [
                "self",
                "embedded_data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data for perfect round-trip fidelity."
            },
            {
              "name": "get_supported_extensions",
              "lineno": 106,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get file extensions supported by this parser."
            },
            {
              "name": "parse_file",
              "lineno": 110,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse a Maxima file."
            },
            {
              "name": "parse_string",
              "lineno": 121,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse Maxima content string."
            },
            {
              "name": "_extract_model_name",
              "lineno": 198,
              "args": [
                "self",
                "content"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Extract model name from comments."
            },
            {
              "name": "_is_matrix_definition",
              "lineno": 213,
              "args": [
                "self",
                "value"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if value is a matrix definition."
            },
            {
              "name": "_parse_matrix_dimensions",
              "lineno": 219,
              "args": [
                "self",
                "matrix_def"
              ],
              "returns": "List[int]",
              "decorators": [],
              "doc": "Parse matrix dimensions from definition."
            },
            {
              "name": "_parse_maxima_value",
              "lineno": 235,
              "args": [
                "self",
                "value"
              ],
              "returns": "Any",
              "decorators": [],
              "doc": "Parse Maxima value to Python type."
            },
            {
              "name": "_infer_variable_type",
              "lineno": 252,
              "args": [
                "self",
                "name"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": "Infer variable type from name."
            },
            {
              "name": "_extract_function_connections",
              "lineno": 272,
              "args": [
                "self",
                "func_name",
                "args",
                "body"
              ],
              "returns": "List[Connection]",
              "decorators": [],
              "doc": "Extract connections from function dependencies."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/maxima_serializer.py",
      "module": "gnn.parsers.maxima_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 11,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Maxima format with embedded data."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 98,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 109,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        }
      ],
      "classes": [
        {
          "name": "MaximaSerializer",
          "lineno": 8,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for Maxima symbolic computation format with embedded data support.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 11,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Maxima format with embedded data."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 98,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 109,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/pkl_serializer.py",
      "module": "gnn.parsers.pkl_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 11,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to PKL format with embedded model data."
        },
        {
          "name": "_format_pkl_value",
          "lineno": 221,
          "args": [
            "self",
            "value"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Format a value for PKL syntax."
        }
      ],
      "classes": [
        {
          "name": "PKLSerializer",
          "lineno": 8,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Enhanced serializer for Apple PKL configuration format with complete model preservation.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 11,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to PKL format with embedded model data."
            },
            {
              "name": "_format_pkl_value",
              "lineno": 221,
              "args": [
                "self",
                "value"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Format a value for PKL syntax."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/protobuf_parser.py",
      "module": "gnn.parsers.protobuf_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 25,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_supported_extensions",
          "lineno": 29,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_file",
          "lineno": 32,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse Protocol Buffer file."
        },
        {
          "name": "parse_string",
          "lineno": 43,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse Protocol Buffer content string."
        },
        {
          "name": "parse_content",
          "lineno": 47,
          "args": [
            "self",
            "content",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse Protocol Buffer content with enhanced model extraction."
        },
        {
          "name": "_extract_model_name",
          "lineno": 118,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[str]",
          "decorators": [],
          "doc": "Extract model name from protobuf content."
        },
        {
          "name": "_extract_model_annotation",
          "lineno": 142,
          "args": [
            "self",
            "content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Extract model annotation from comments."
        },
        {
          "name": "_parse_variables_enhanced",
          "lineno": 160,
          "args": [
            "self",
            "content"
          ],
          "returns": "List[Variable]",
          "decorators": [],
          "doc": "Parse variables with complete information preservation."
        },
        {
          "name": "_parse_connections_enhanced",
          "lineno": 216,
          "args": [
            "self",
            "content"
          ],
          "returns": "List[Connection]",
          "decorators": [],
          "doc": "Parse connections with complete relationship preservation."
        },
        {
          "name": "_parse_parameters_enhanced",
          "lineno": 260,
          "args": [
            "self",
            "content"
          ],
          "returns": "List[Parameter]",
          "decorators": [],
          "doc": "Parse parameters with complete value preservation."
        },
        {
          "name": "_parse_equations",
          "lineno": 293,
          "args": [
            "self",
            "content"
          ],
          "returns": "List",
          "decorators": [],
          "doc": "Parse equations from protobuf content."
        },
        {
          "name": "_parse_time_specification",
          "lineno": 304,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict]",
          "decorators": [],
          "doc": "Parse time specification from protobuf content."
        },
        {
          "name": "_parse_ontology_mappings",
          "lineno": 317,
          "args": [
            "self",
            "content"
          ],
          "returns": "List",
          "decorators": [],
          "doc": "Parse ontology mappings from protobuf content."
        },
        {
          "name": "_extract_embedded_model_data",
          "lineno": 331,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from protobuf comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 351,
          "args": [
            "self",
            "data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data for perfect round-trip."
        },
        {
          "name": "_map_protobuf_type_to_variable_type",
          "lineno": 413,
          "args": [
            "self",
            "proto_type"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": "Map protobuf types to GNN variable types."
        },
        {
          "name": "_map_protobuf_type_to_data_type",
          "lineno": 426,
          "args": [
            "self",
            "proto_type"
          ],
          "returns": "DataType",
          "decorators": [],
          "doc": "Map protobuf types to GNN data types."
        },
        {
          "name": "_parse_parameter_value",
          "lineno": 439,
          "args": [
            "self",
            "value_str"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Parse parameter value from string."
        },
        {
          "name": "_validate_model_completeness",
          "lineno": 459,
          "args": [
            "self",
            "model",
            "content"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Validate that the model was completely parsed."
        }
      ],
      "classes": [
        {
          "name": "ProtobufGNNParser",
          "lineno": 22,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Enhanced parser for Protocol Buffer (.proto) files containing GNN models.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 25,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_supported_extensions",
              "lineno": 29,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_file",
              "lineno": 32,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse Protocol Buffer file."
            },
            {
              "name": "parse_string",
              "lineno": 43,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse Protocol Buffer content string."
            },
            {
              "name": "parse_content",
              "lineno": 47,
              "args": [
                "self",
                "content",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse Protocol Buffer content with enhanced model extraction."
            },
            {
              "name": "_extract_model_name",
              "lineno": 118,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[str]",
              "decorators": [],
              "doc": "Extract model name from protobuf content."
            },
            {
              "name": "_extract_model_annotation",
              "lineno": 142,
              "args": [
                "self",
                "content"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Extract model annotation from comments."
            },
            {
              "name": "_parse_variables_enhanced",
              "lineno": 160,
              "args": [
                "self",
                "content"
              ],
              "returns": "List[Variable]",
              "decorators": [],
              "doc": "Parse variables with complete information preservation."
            },
            {
              "name": "_parse_connections_enhanced",
              "lineno": 216,
              "args": [
                "self",
                "content"
              ],
              "returns": "List[Connection]",
              "decorators": [],
              "doc": "Parse connections with complete relationship preservation."
            },
            {
              "name": "_parse_parameters_enhanced",
              "lineno": 260,
              "args": [
                "self",
                "content"
              ],
              "returns": "List[Parameter]",
              "decorators": [],
              "doc": "Parse parameters with complete value preservation."
            },
            {
              "name": "_parse_equations",
              "lineno": 293,
              "args": [
                "self",
                "content"
              ],
              "returns": "List",
              "decorators": [],
              "doc": "Parse equations from protobuf content."
            },
            {
              "name": "_parse_time_specification",
              "lineno": 304,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict]",
              "decorators": [],
              "doc": "Parse time specification from protobuf content."
            },
            {
              "name": "_parse_ontology_mappings",
              "lineno": 317,
              "args": [
                "self",
                "content"
              ],
              "returns": "List",
              "decorators": [],
              "doc": "Parse ontology mappings from protobuf content."
            },
            {
              "name": "_extract_embedded_model_data",
              "lineno": 331,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from protobuf comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 351,
              "args": [
                "self",
                "data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data for perfect round-trip."
            },
            {
              "name": "_map_protobuf_type_to_variable_type",
              "lineno": 413,
              "args": [
                "self",
                "proto_type"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": "Map protobuf types to GNN variable types."
            },
            {
              "name": "_map_protobuf_type_to_data_type",
              "lineno": 426,
              "args": [
                "self",
                "proto_type"
              ],
              "returns": "DataType",
              "decorators": [],
              "doc": "Map protobuf types to GNN data types."
            },
            {
              "name": "_parse_parameter_value",
              "lineno": 439,
              "args": [
                "self",
                "value_str"
              ],
              "returns": "Any",
              "decorators": [],
              "doc": "Parse parameter value from string."
            },
            {
              "name": "_validate_model_completeness",
              "lineno": 459,
              "args": [
                "self",
                "model",
                "content"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Validate that the model was completely parsed."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/protobuf_serializer.py",
      "module": "gnn.parsers.protobuf_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 11,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Protocol Buffers format with embedded model data."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 149,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Serialize TimeSpecification object to dict."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 161,
          "args": [
            "self",
            "mappings"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Serialize ontology mappings to list of dicts."
        }
      ],
      "classes": [
        {
          "name": "ProtobufSerializer",
          "lineno": 8,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Enhanced serializer for Protocol Buffers format with complete model preservation.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 11,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Protocol Buffers format with embedded model data."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 149,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Serialize TimeSpecification object to dict."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 161,
              "args": [
                "self",
                "mappings"
              ],
              "returns": "List[Dict[str, Any]]",
              "decorators": [],
              "doc": "Serialize ontology mappings to list of dicts."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/python_parser.py",
      "module": "gnn.parsers.python_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 28,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the Python parser."
        },
        {
          "name": "parse_file",
          "lineno": 35,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse a Python file containing GNN implementations."
        },
        {
          "name": "parse_string",
          "lineno": 52,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse Python content from string."
        },
        {
          "name": "_parse_python_content",
          "lineno": 73,
          "args": [
            "self",
            "content"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Parse the main Python content."
        },
        {
          "name": "_parse_ast",
          "lineno": 83,
          "args": [
            "self",
            "tree",
            "content"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Parse using AST analysis."
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 101,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from Python comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 120,
          "args": [
            "self",
            "embedded_data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data."
        },
        {
          "name": "_parse_regex",
          "lineno": 189,
          "args": [
            "self",
            "content"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Fallback regex parsing."
        },
        {
          "name": "_extract_model_name_ast",
          "lineno": 206,
          "args": [
            "self",
            "tree"
          ],
          "returns": "Optional[str]",
          "decorators": [],
          "doc": "Extract model name from AST."
        },
        {
          "name": "_extract_model_name_regex",
          "lineno": 231,
          "args": [
            "self",
            "content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Extract model name using regex."
        },
        {
          "name": "_parse_imports_ast",
          "lineno": 245,
          "args": [
            "self",
            "tree",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse imports from AST."
        },
        {
          "name": "_parse_imports_regex",
          "lineno": 271,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse imports using regex."
        },
        {
          "name": "_parse_classes_ast",
          "lineno": 285,
          "args": [
            "self",
            "tree",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse class definitions from AST."
        },
        {
          "name": "_parse_class_ast",
          "lineno": 291,
          "args": [
            "self",
            "class_node",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse a single class definition."
        },
        {
          "name": "_parse_method_ast",
          "lineno": 302,
          "args": [
            "self",
            "method_node",
            "model",
            "class_name"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse method to extract variables and connections."
        },
        {
          "name": "_parse_assignment_ast",
          "lineno": 312,
          "args": [
            "self",
            "assign_node",
            "model",
            "context"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse assignment to extract variables."
        },
        {
          "name": "_parse_class_assignment_ast",
          "lineno": 337,
          "args": [
            "self",
            "assign_node",
            "model",
            "class_name"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse class-level assignments."
        },
        {
          "name": "_parse_functions_ast",
          "lineno": 342,
          "args": [
            "self",
            "tree",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse standalone function definitions."
        },
        {
          "name": "_is_top_level_function",
          "lineno": 351,
          "args": [
            "self",
            "func_node",
            "tree"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if function is at module level (not in a class)."
        },
        {
          "name": "_parse_classes_regex",
          "lineno": 359,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse classes using regex."
        },
        {
          "name": "_extract_variables_from_text",
          "lineno": 372,
          "args": [
            "self",
            "text",
            "model",
            "context"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Extract variables from text using heuristics."
        },
        {
          "name": "_infer_variable_type_from_name",
          "lineno": 405,
          "args": [
            "self",
            "name"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": "Infer variable type from name."
        },
        {
          "name": "_infer_data_type_from_assignment",
          "lineno": 428,
          "args": [
            "self",
            "assign_node"
          ],
          "returns": "DataType",
          "decorators": [],
          "doc": "Infer data type from assignment AST."
        },
        {
          "name": "_infer_dimensions_from_assignment",
          "lineno": 450,
          "args": [
            "self",
            "assign_node"
          ],
          "returns": "List[int]",
          "decorators": [],
          "doc": "Infer dimensions from assignment."
        },
        {
          "name": "get_supported_extensions",
          "lineno": 469,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get supported file extensions."
        }
      ],
      "classes": [
        {
          "name": "PythonGNNParser",
          "lineno": 25,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for Python geometric/neural implementations.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 28,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the Python parser."
            },
            {
              "name": "parse_file",
              "lineno": 35,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse a Python file containing GNN implementations."
            },
            {
              "name": "parse_string",
              "lineno": 52,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse Python content from string."
            },
            {
              "name": "_parse_python_content",
              "lineno": 73,
              "args": [
                "self",
                "content"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Parse the main Python content."
            },
            {
              "name": "_parse_ast",
              "lineno": 83,
              "args": [
                "self",
                "tree",
                "content"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Parse using AST analysis."
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 101,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from Python comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 120,
              "args": [
                "self",
                "embedded_data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data."
            },
            {
              "name": "_parse_regex",
              "lineno": 189,
              "args": [
                "self",
                "content"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Fallback regex parsing."
            },
            {
              "name": "_extract_model_name_ast",
              "lineno": 206,
              "args": [
                "self",
                "tree"
              ],
              "returns": "Optional[str]",
              "decorators": [],
              "doc": "Extract model name from AST."
            },
            {
              "name": "_extract_model_name_regex",
              "lineno": 231,
              "args": [
                "self",
                "content"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Extract model name using regex."
            },
            {
              "name": "_parse_imports_ast",
              "lineno": 245,
              "args": [
                "self",
                "tree",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse imports from AST."
            },
            {
              "name": "_parse_imports_regex",
              "lineno": 271,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse imports using regex."
            },
            {
              "name": "_parse_classes_ast",
              "lineno": 285,
              "args": [
                "self",
                "tree",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse class definitions from AST."
            },
            {
              "name": "_parse_class_ast",
              "lineno": 291,
              "args": [
                "self",
                "class_node",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse a single class definition."
            },
            {
              "name": "_parse_method_ast",
              "lineno": 302,
              "args": [
                "self",
                "method_node",
                "model",
                "class_name"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse method to extract variables and connections."
            },
            {
              "name": "_parse_assignment_ast",
              "lineno": 312,
              "args": [
                "self",
                "assign_node",
                "model",
                "context"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse assignment to extract variables."
            },
            {
              "name": "_parse_class_assignment_ast",
              "lineno": 337,
              "args": [
                "self",
                "assign_node",
                "model",
                "class_name"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse class-level assignments."
            },
            {
              "name": "_parse_functions_ast",
              "lineno": 342,
              "args": [
                "self",
                "tree",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse standalone function definitions."
            },
            {
              "name": "_is_top_level_function",
              "lineno": 351,
              "args": [
                "self",
                "func_node",
                "tree"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if function is at module level (not in a class)."
            },
            {
              "name": "_parse_classes_regex",
              "lineno": 359,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse classes using regex."
            },
            {
              "name": "_extract_variables_from_text",
              "lineno": 372,
              "args": [
                "self",
                "text",
                "model",
                "context"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Extract variables from text using heuristics."
            },
            {
              "name": "_infer_variable_type_from_name",
              "lineno": 405,
              "args": [
                "self",
                "name"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": "Infer variable type from name."
            },
            {
              "name": "_infer_data_type_from_assignment",
              "lineno": 428,
              "args": [
                "self",
                "assign_node"
              ],
              "returns": "DataType",
              "decorators": [],
              "doc": "Infer data type from assignment AST."
            },
            {
              "name": "_infer_dimensions_from_assignment",
              "lineno": 450,
              "args": [
                "self",
                "assign_node"
              ],
              "returns": "List[int]",
              "decorators": [],
              "doc": "Infer dimensions from assignment."
            },
            {
              "name": "get_supported_extensions",
              "lineno": 469,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get supported file extensions."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/python_serializer.py",
      "module": "gnn.parsers.python_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 11,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Python format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 102,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 113,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        }
      ],
      "classes": [
        {
          "name": "PythonSerializer",
          "lineno": 8,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for Python format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 11,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Python format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 102,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 113,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/scala_parser.py",
      "module": "gnn.parsers.scala_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 37,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_supported_extensions",
          "lineno": 56,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get supported file extensions."
        },
        {
          "name": "parse_file",
          "lineno": 60,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse a Scala GNN file."
        },
        {
          "name": "parse_string",
          "lineno": 71,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse Scala GNN content from string."
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 109,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from Scala comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 127,
          "args": [
            "self",
            "embedded_data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data."
        },
        {
          "name": "_extract_model_name",
          "lineno": 196,
          "args": [
            "self",
            "content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Extract model name from package, object, or class definitions."
        },
        {
          "name": "_parse_scala_constructs",
          "lineno": 215,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse general Scala constructs for variables and types."
        },
        {
          "name": "_parse_case_class",
          "lineno": 242,
          "args": [
            "self",
            "line"
          ],
          "returns": "Optional[Variable]",
          "decorators": [],
          "doc": "Parse a case class definition as a variable."
        },
        {
          "name": "_parse_val_definition",
          "lineno": 274,
          "args": [
            "self",
            "line"
          ],
          "returns": "Optional[Variable]",
          "decorators": [],
          "doc": "Parse a val definition as a variable."
        },
        {
          "name": "_parse_type_alias",
          "lineno": 310,
          "args": [
            "self",
            "line",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse a type alias definition."
        },
        {
          "name": "_parse_active_inference_components",
          "lineno": 324,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse Active Inference specific components."
        },
        {
          "name": "_process_ai_component",
          "lineno": 333,
          "args": [
            "self",
            "component_type",
            "params_str",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Process a specific Active Inference component."
        },
        {
          "name": "_parse_state_space_scala",
          "lineno": 349,
          "args": [
            "self",
            "params_str",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse StateSpace definition from Scala."
        },
        {
          "name": "_parse_observation_space_scala",
          "lineno": 367,
          "args": [
            "self",
            "params_str",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse ObservationSpace definition from Scala."
        },
        {
          "name": "_parse_action_space_scala",
          "lineno": 385,
          "args": [
            "self",
            "params_str",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse ActionSpace definition from Scala."
        },
        {
          "name": "_parse_ai_mapping",
          "lineno": 403,
          "args": [
            "self",
            "mapping_type",
            "params_str",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse Active Inference mapping (A, B, C, D matrices)."
        },
        {
          "name": "_parse_categorical_structures",
          "lineno": 414,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse categorical theory structures from Scala code."
        },
        {
          "name": "_parse_equations_from_scala",
          "lineno": 440,
          "args": [
            "self",
            "content",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse mathematical equations from Scala comments and definitions."
        },
        {
          "name": "_contains_equation",
          "lineno": 471,
          "args": [
            "self",
            "text"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if text contains mathematical equations."
        },
        {
          "name": "_extract_dimensions_from_params",
          "lineno": 476,
          "args": [
            "self",
            "params_str"
          ],
          "returns": "List[int]",
          "decorators": [],
          "doc": "Extract dimensions from case class parameters."
        },
        {
          "name": "_extract_dimensions_from_type",
          "lineno": 490,
          "args": [
            "self",
            "type_str"
          ],
          "returns": "List[int]",
          "decorators": [],
          "doc": "Extract dimensions from Scala type information."
        },
        {
          "name": "_scala_type_to_data_type",
          "lineno": 509,
          "args": [
            "self",
            "type_str"
          ],
          "returns": "DataType",
          "decorators": [],
          "doc": "Convert Scala type to GNN DataType."
        },
        {
          "name": "_is_ai_related_name",
          "lineno": 526,
          "args": [
            "self",
            "name"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if a name is related to Active Inference."
        }
      ],
      "classes": [
        {
          "name": "ScalaGNNParser",
          "lineno": 28,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for Scala categorical GNN specifications.\n\nThis parser extracts Active Inference model information from Scala code\nthat uses category theory constructs like functors, natural transformations,\nand monads.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 37,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_supported_extensions",
              "lineno": 56,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get supported file extensions."
            },
            {
              "name": "parse_file",
              "lineno": 60,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse a Scala GNN file."
            },
            {
              "name": "parse_string",
              "lineno": 71,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse Scala GNN content from string."
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 109,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from Scala comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 127,
              "args": [
                "self",
                "embedded_data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data."
            },
            {
              "name": "_extract_model_name",
              "lineno": 196,
              "args": [
                "self",
                "content"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Extract model name from package, object, or class definitions."
            },
            {
              "name": "_parse_scala_constructs",
              "lineno": 215,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse general Scala constructs for variables and types."
            },
            {
              "name": "_parse_case_class",
              "lineno": 242,
              "args": [
                "self",
                "line"
              ],
              "returns": "Optional[Variable]",
              "decorators": [],
              "doc": "Parse a case class definition as a variable."
            },
            {
              "name": "_parse_val_definition",
              "lineno": 274,
              "args": [
                "self",
                "line"
              ],
              "returns": "Optional[Variable]",
              "decorators": [],
              "doc": "Parse a val definition as a variable."
            },
            {
              "name": "_parse_type_alias",
              "lineno": 310,
              "args": [
                "self",
                "line",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse a type alias definition."
            },
            {
              "name": "_parse_active_inference_components",
              "lineno": 324,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse Active Inference specific components."
            },
            {
              "name": "_process_ai_component",
              "lineno": 333,
              "args": [
                "self",
                "component_type",
                "params_str",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Process a specific Active Inference component."
            },
            {
              "name": "_parse_state_space_scala",
              "lineno": 349,
              "args": [
                "self",
                "params_str",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse StateSpace definition from Scala."
            },
            {
              "name": "_parse_observation_space_scala",
              "lineno": 367,
              "args": [
                "self",
                "params_str",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse ObservationSpace definition from Scala."
            },
            {
              "name": "_parse_action_space_scala",
              "lineno": 385,
              "args": [
                "self",
                "params_str",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse ActionSpace definition from Scala."
            },
            {
              "name": "_parse_ai_mapping",
              "lineno": 403,
              "args": [
                "self",
                "mapping_type",
                "params_str",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse Active Inference mapping (A, B, C, D matrices)."
            },
            {
              "name": "_parse_categorical_structures",
              "lineno": 414,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse categorical theory structures from Scala code."
            },
            {
              "name": "_parse_equations_from_scala",
              "lineno": 440,
              "args": [
                "self",
                "content",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse mathematical equations from Scala comments and definitions."
            },
            {
              "name": "_contains_equation",
              "lineno": 471,
              "args": [
                "self",
                "text"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if text contains mathematical equations."
            },
            {
              "name": "_extract_dimensions_from_params",
              "lineno": 476,
              "args": [
                "self",
                "params_str"
              ],
              "returns": "List[int]",
              "decorators": [],
              "doc": "Extract dimensions from case class parameters."
            },
            {
              "name": "_extract_dimensions_from_type",
              "lineno": 490,
              "args": [
                "self",
                "type_str"
              ],
              "returns": "List[int]",
              "decorators": [],
              "doc": "Extract dimensions from Scala type information."
            },
            {
              "name": "_scala_type_to_data_type",
              "lineno": 509,
              "args": [
                "self",
                "type_str"
              ],
              "returns": "DataType",
              "decorators": [],
              "doc": "Convert Scala type to GNN DataType."
            },
            {
              "name": "_is_ai_related_name",
              "lineno": 526,
              "args": [
                "self",
                "name"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if a name is related to Active Inference."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/scala_serializer.py",
      "module": "gnn.parsers.scala_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 11,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Scala categorical format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 91,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 102,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "_map_variable_type",
          "lineno": 115,
          "args": [
            "self",
            "var"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN variable types to Scala types."
        }
      ],
      "classes": [
        {
          "name": "ScalaSerializer",
          "lineno": 8,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for Scala categorical specifications.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 11,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Scala categorical format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 91,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 102,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            },
            {
              "name": "_map_variable_type",
              "lineno": 115,
              "args": [
                "self",
                "var"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN variable types to Scala types."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/schema_parser.py",
      "module": "gnn.parsers.schema_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 25,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 28,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from schema comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 48,
          "args": [
            "self",
            "data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data for perfect round-trip."
        },
        {
          "name": "_parse_enum_value",
          "lineno": 107,
          "args": [
            "self",
            "enum_class",
            "value_str"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse enum value from string."
        },
        {
          "name": "get_supported_extensions",
          "lineno": 119,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_file",
          "lineno": 122,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_string",
          "lineno": 133,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_xml_element",
          "lineno": 148,
          "args": [
            "self",
            "root"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_map_xsd_type",
          "lineno": 179,
          "args": [
            "self",
            "xsd_type"
          ],
          "returns": "DataType",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_infer_variable_type",
          "lineno": 191,
          "args": [
            "self",
            "name"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 203,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 209,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from schema comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 230,
          "args": [
            "self",
            "data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data for perfect round-trip."
        },
        {
          "name": "_parse_enum_value",
          "lineno": 289,
          "args": [
            "self",
            "enum_class",
            "value_str"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse enum value from string."
        },
        {
          "name": "get_supported_extensions",
          "lineno": 301,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_file",
          "lineno": 304,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_string",
          "lineno": 314,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_parse_asn1_dimensions",
          "lineno": 356,
          "args": [
            "self",
            "type_def"
          ],
          "returns": "List[int]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_map_asn1_type",
          "lineno": 363,
          "args": [
            "self",
            "type_def"
          ],
          "returns": "DataType",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_infer_variable_type",
          "lineno": 377,
          "args": [
            "self",
            "name"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 391,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 398,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from schema comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 418,
          "args": [
            "self",
            "data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data for perfect round-trip."
        },
        {
          "name": "_parse_enum_value",
          "lineno": 478,
          "args": [
            "self",
            "enum_class",
            "value_str"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse enum value from string."
        },
        {
          "name": "get_supported_extensions",
          "lineno": 490,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_file",
          "lineno": 493,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_string",
          "lineno": 503,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_is_variable_property",
          "lineno": 583,
          "args": [
            "self",
            "name",
            "type_str"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Determine if a property represents a variable."
        },
        {
          "name": "_parse_pkl_dimensions",
          "lineno": 589,
          "args": [
            "self",
            "type_str"
          ],
          "returns": "List[int]",
          "decorators": [],
          "doc": "Parse dimensions from PKL type definition."
        },
        {
          "name": "_map_pkl_type",
          "lineno": 597,
          "args": [
            "self",
            "type_str"
          ],
          "returns": "DataType",
          "decorators": [],
          "doc": "Map PKL types to GNN data types."
        },
        {
          "name": "_parse_pkl_variable_entry",
          "lineno": 611,
          "args": [
            "self",
            "key",
            "value"
          ],
          "returns": "Optional[Variable]",
          "decorators": [],
          "doc": "Parse a PKL variable entry."
        },
        {
          "name": "_infer_variable_type",
          "lineno": 626,
          "args": [
            "self",
            "name"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": "Infer variable type from name."
        },
        {
          "name": "parse_content",
          "lineno": 640,
          "args": [
            "self",
            "content",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse PKL content with enhanced model extraction."
        },
        {
          "name": "_extract_pkl_model_name",
          "lineno": 706,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[str]",
          "decorators": [],
          "doc": "Extract model name from PKL content."
        },
        {
          "name": "_extract_pkl_annotation",
          "lineno": 725,
          "args": [
            "self",
            "content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Extract model annotation from PKL comments."
        },
        {
          "name": "_parse_pkl_variables_enhanced",
          "lineno": 748,
          "args": [
            "self",
            "content"
          ],
          "returns": "List[Variable]",
          "decorators": [],
          "doc": "Parse variables with complete information preservation."
        },
        {
          "name": "_parse_pkl_connections_enhanced",
          "lineno": 784,
          "args": [
            "self",
            "content"
          ],
          "returns": "List[Connection]",
          "decorators": [],
          "doc": "Parse connections with complete relationship preservation."
        },
        {
          "name": "_parse_pkl_parameters_enhanced",
          "lineno": 815,
          "args": [
            "self",
            "content"
          ],
          "returns": "List[Parameter]",
          "decorators": [],
          "doc": "Parse parameters with complete value preservation."
        },
        {
          "name": "_parse_pkl_equations",
          "lineno": 849,
          "args": [
            "self",
            "content"
          ],
          "returns": "List",
          "decorators": [],
          "doc": "Parse equations from PKL content."
        },
        {
          "name": "_parse_pkl_time_specification",
          "lineno": 860,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict]",
          "decorators": [],
          "doc": "Parse time specification from PKL content."
        },
        {
          "name": "_parse_pkl_ontology_mappings",
          "lineno": 868,
          "args": [
            "self",
            "content"
          ],
          "returns": "List",
          "decorators": [],
          "doc": "Parse ontology mappings from PKL content."
        },
        {
          "name": "_extract_pkl_embedded_data",
          "lineno": 881,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from PKL comments."
        },
        {
          "name": "_apply_embedded_data_to_model",
          "lineno": 903,
          "args": [
            "self",
            "model",
            "data"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Apply embedded data to enhance the model."
        },
        {
          "name": "_map_pkl_type_to_variable_type",
          "lineno": 927,
          "args": [
            "self",
            "pkl_type"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": "Map PKL types to GNN variable types."
        },
        {
          "name": "_map_pkl_type_to_data_type",
          "lineno": 939,
          "args": [
            "self",
            "pkl_type"
          ],
          "returns": "DataType",
          "decorators": [],
          "doc": "Map PKL types to GNN data types."
        },
        {
          "name": "_parse_pkl_value",
          "lineno": 951,
          "args": [
            "self",
            "value_str"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Parse PKL value from string."
        },
        {
          "name": "_validate_pkl_model_completeness",
          "lineno": 974,
          "args": [
            "self",
            "model",
            "content"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Validate that the PKL model was completely parsed."
        },
        {
          "name": "__init__",
          "lineno": 990,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_supported_extensions",
          "lineno": 995,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 998,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from Alloy comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 1011,
          "args": [
            "self",
            "embedded_data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data for perfect round-trip fidelity."
        },
        {
          "name": "parse_file",
          "lineno": 1073,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_string",
          "lineno": 1083,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_infer_variable_type",
          "lineno": 1121,
          "args": [
            "self",
            "name"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 1133,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_supported_extensions",
          "lineno": 1138,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 1141,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from Z notation comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 1156,
          "args": [
            "self",
            "embedded_data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data for perfect round-trip fidelity."
        },
        {
          "name": "parse_file",
          "lineno": 1218,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_string",
          "lineno": 1228,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_map_z_type",
          "lineno": 1266,
          "args": [
            "self",
            "z_type"
          ],
          "returns": "DataType",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_infer_variable_type",
          "lineno": 1276,
          "args": [
            "self",
            "name"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "XSDParser",
          "lineno": 22,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for XML Schema Definition (XSD) files.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 25,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 28,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from schema comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 48,
              "args": [
                "self",
                "data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data for perfect round-trip."
            },
            {
              "name": "_parse_enum_value",
              "lineno": 107,
              "args": [
                "self",
                "enum_class",
                "value_str"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse enum value from string."
            },
            {
              "name": "get_supported_extensions",
              "lineno": 119,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_file",
              "lineno": 122,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_string",
              "lineno": 133,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_xml_element",
              "lineno": 148,
              "args": [
                "self",
                "root"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_map_xsd_type",
              "lineno": 179,
              "args": [
                "self",
                "xsd_type"
              ],
              "returns": "DataType",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_infer_variable_type",
              "lineno": 191,
              "args": [
                "self",
                "name"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "ASN1Parser",
          "lineno": 200,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for ASN.1 schema definition files.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 203,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 209,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from schema comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 230,
              "args": [
                "self",
                "data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data for perfect round-trip."
            },
            {
              "name": "_parse_enum_value",
              "lineno": 289,
              "args": [
                "self",
                "enum_class",
                "value_str"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse enum value from string."
            },
            {
              "name": "get_supported_extensions",
              "lineno": 301,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_file",
              "lineno": 304,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_string",
              "lineno": 314,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_parse_asn1_dimensions",
              "lineno": 356,
              "args": [
                "self",
                "type_def"
              ],
              "returns": "List[int]",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_map_asn1_type",
              "lineno": 363,
              "args": [
                "self",
                "type_def"
              ],
              "returns": "DataType",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_infer_variable_type",
              "lineno": 377,
              "args": [
                "self",
                "name"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "PKLParser",
          "lineno": 388,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for Apple PKL configuration files.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 391,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 398,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from schema comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 418,
              "args": [
                "self",
                "data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data for perfect round-trip."
            },
            {
              "name": "_parse_enum_value",
              "lineno": 478,
              "args": [
                "self",
                "enum_class",
                "value_str"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse enum value from string."
            },
            {
              "name": "get_supported_extensions",
              "lineno": 490,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_file",
              "lineno": 493,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_string",
              "lineno": 503,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_is_variable_property",
              "lineno": 583,
              "args": [
                "self",
                "name",
                "type_str"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Determine if a property represents a variable."
            },
            {
              "name": "_parse_pkl_dimensions",
              "lineno": 589,
              "args": [
                "self",
                "type_str"
              ],
              "returns": "List[int]",
              "decorators": [],
              "doc": "Parse dimensions from PKL type definition."
            },
            {
              "name": "_map_pkl_type",
              "lineno": 597,
              "args": [
                "self",
                "type_str"
              ],
              "returns": "DataType",
              "decorators": [],
              "doc": "Map PKL types to GNN data types."
            },
            {
              "name": "_parse_pkl_variable_entry",
              "lineno": 611,
              "args": [
                "self",
                "key",
                "value"
              ],
              "returns": "Optional[Variable]",
              "decorators": [],
              "doc": "Parse a PKL variable entry."
            },
            {
              "name": "_infer_variable_type",
              "lineno": 626,
              "args": [
                "self",
                "name"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": "Infer variable type from name."
            },
            {
              "name": "parse_content",
              "lineno": 640,
              "args": [
                "self",
                "content",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse PKL content with enhanced model extraction."
            },
            {
              "name": "_extract_pkl_model_name",
              "lineno": 706,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[str]",
              "decorators": [],
              "doc": "Extract model name from PKL content."
            },
            {
              "name": "_extract_pkl_annotation",
              "lineno": 725,
              "args": [
                "self",
                "content"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Extract model annotation from PKL comments."
            },
            {
              "name": "_parse_pkl_variables_enhanced",
              "lineno": 748,
              "args": [
                "self",
                "content"
              ],
              "returns": "List[Variable]",
              "decorators": [],
              "doc": "Parse variables with complete information preservation."
            },
            {
              "name": "_parse_pkl_connections_enhanced",
              "lineno": 784,
              "args": [
                "self",
                "content"
              ],
              "returns": "List[Connection]",
              "decorators": [],
              "doc": "Parse connections with complete relationship preservation."
            },
            {
              "name": "_parse_pkl_parameters_enhanced",
              "lineno": 815,
              "args": [
                "self",
                "content"
              ],
              "returns": "List[Parameter]",
              "decorators": [],
              "doc": "Parse parameters with complete value preservation."
            },
            {
              "name": "_parse_pkl_equations",
              "lineno": 849,
              "args": [
                "self",
                "content"
              ],
              "returns": "List",
              "decorators": [],
              "doc": "Parse equations from PKL content."
            },
            {
              "name": "_parse_pkl_time_specification",
              "lineno": 860,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict]",
              "decorators": [],
              "doc": "Parse time specification from PKL content."
            },
            {
              "name": "_parse_pkl_ontology_mappings",
              "lineno": 868,
              "args": [
                "self",
                "content"
              ],
              "returns": "List",
              "decorators": [],
              "doc": "Parse ontology mappings from PKL content."
            },
            {
              "name": "_extract_pkl_embedded_data",
              "lineno": 881,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from PKL comments."
            },
            {
              "name": "_apply_embedded_data_to_model",
              "lineno": 903,
              "args": [
                "self",
                "model",
                "data"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Apply embedded data to enhance the model."
            },
            {
              "name": "_map_pkl_type_to_variable_type",
              "lineno": 927,
              "args": [
                "self",
                "pkl_type"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": "Map PKL types to GNN variable types."
            },
            {
              "name": "_map_pkl_type_to_data_type",
              "lineno": 939,
              "args": [
                "self",
                "pkl_type"
              ],
              "returns": "DataType",
              "decorators": [],
              "doc": "Map PKL types to GNN data types."
            },
            {
              "name": "_parse_pkl_value",
              "lineno": 951,
              "args": [
                "self",
                "value_str"
              ],
              "returns": "Any",
              "decorators": [],
              "doc": "Parse PKL value from string."
            },
            {
              "name": "_validate_pkl_model_completeness",
              "lineno": 974,
              "args": [
                "self",
                "model",
                "content"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Validate that the PKL model was completely parsed."
            }
          ]
        },
        {
          "name": "AlloyParser",
          "lineno": 987,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for Alloy model specification files with embedded data support.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 990,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_supported_extensions",
              "lineno": 995,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 998,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from Alloy comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 1011,
              "args": [
                "self",
                "embedded_data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data for perfect round-trip fidelity."
            },
            {
              "name": "parse_file",
              "lineno": 1073,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_string",
              "lineno": 1083,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_infer_variable_type",
              "lineno": 1121,
              "args": [
                "self",
                "name"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "ZNotationParser",
          "lineno": 1130,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for Z notation formal specification files with embedded data support.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 1133,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_supported_extensions",
              "lineno": 1138,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 1141,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from Z notation comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 1156,
              "args": [
                "self",
                "embedded_data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data for perfect round-trip fidelity."
            },
            {
              "name": "parse_file",
              "lineno": 1218,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_string",
              "lineno": 1228,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_map_z_type",
              "lineno": 1266,
              "args": [
                "self",
                "z_type"
              ],
              "returns": "DataType",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_infer_variable_type",
              "lineno": 1276,
              "args": [
                "self",
                "name"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/schema_serializer.py",
      "module": "gnn.parsers.schema_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 10,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to generic schema format."
        }
      ],
      "classes": [
        {
          "name": "SchemaSerializer",
          "lineno": 7,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for formal schema languages.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 10,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to generic schema format."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/serializers.py",
      "module": "gnn.parsers.serializers",
      "functions": [
        {
          "name": "serialize",
          "lineno": 34,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Serialize model to string format."
        },
        {
          "name": "serialize_to_file",
          "lineno": 38,
          "args": [
            "self",
            "model",
            "file_path"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Serialize model directly to file."
        },
        {
          "name": "__init__",
          "lineno": 46,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the base serializer."
        },
        {
          "name": "serialize",
          "lineno": 51,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [
            "abstractmethod"
          ],
          "doc": "Serialize model to string format."
        },
        {
          "name": "serialize_to_file",
          "lineno": 55,
          "args": [
            "self",
            "model",
            "file_path"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Serialize model directly to file."
        },
        {
          "name": "serialize",
          "lineno": 65,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model back to Markdown format."
        },
        {
          "name": "serialize",
          "lineno": 159,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to JSON format."
        },
        {
          "name": "serialize",
          "lineno": 167,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to XML format with consistent ordering."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 320,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 331,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "serialize",
          "lineno": 348,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to YAML format."
        },
        {
          "name": "_dict_to_yaml_like",
          "lineno": 419,
          "args": [
            "self",
            "data",
            "indent"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert dict to YAML-like format when PyYAML is not available."
        },
        {
          "name": "serialize",
          "lineno": 445,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Scala categorical format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 526,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 537,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "_map_variable_type",
          "lineno": 550,
          "args": [
            "self",
            "var"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN variable types to Scala types."
        },
        {
          "name": "serialize",
          "lineno": 565,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Protocol Buffers format with embedded model data."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 704,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Serialize TimeSpecification object to dict."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 716,
          "args": [
            "self",
            "mappings"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Serialize ontology mappings to list of dicts."
        },
        {
          "name": "serialize",
          "lineno": 737,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to PKL format with embedded model data."
        },
        {
          "name": "_format_pkl_value",
          "lineno": 948,
          "args": [
            "self",
            "value"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Format a value for PKL syntax."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 967,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Serialize TimeSpecification object to dict."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 979,
          "args": [
            "self",
            "mappings"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Serialize ontology mappings to list of dicts."
        },
        {
          "name": "serialize",
          "lineno": 1000,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to XSD format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 1084,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Serialize TimeSpecification object to dict."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 1096,
          "args": [
            "self",
            "mappings"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Serialize ontology mappings to list of dicts."
        },
        {
          "name": "_map_to_xsd_type",
          "lineno": 1113,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to XSD types."
        },
        {
          "name": "serialize",
          "lineno": 1129,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to ASN.1 format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 1229,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Serialize TimeSpecification object to dict."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 1241,
          "args": [
            "self",
            "mappings"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Serialize ontology mappings to list of dicts."
        },
        {
          "name": "serialize",
          "lineno": 1262,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Lean format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 1339,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 1350,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "_map_to_lean_type",
          "lineno": 1363,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to Lean types."
        },
        {
          "name": "serialize",
          "lineno": 1379,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Coq format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 1447,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 1458,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "_map_to_coq_type",
          "lineno": 1471,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to Coq types."
        },
        {
          "name": "serialize",
          "lineno": 1487,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Python format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 1579,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 1590,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "serialize",
          "lineno": 1607,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to BNF format with embedded data."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 1688,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 1699,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "serialize",
          "lineno": 1716,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Isabelle/HOL format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 1782,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 1793,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "_map_to_isabelle_type",
          "lineno": 1806,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to Isabelle types."
        },
        {
          "name": "serialize",
          "lineno": 1822,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Maxima format with embedded data."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 1910,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 1921,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "serialize",
          "lineno": 1938,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Alloy format with embedded data."
        },
        {
          "name": "_map_to_alloy_type",
          "lineno": 2026,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to Alloy types."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 2038,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 2049,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "serialize",
          "lineno": 2066,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Z notation format with embedded data."
        },
        {
          "name": "_map_to_z_type",
          "lineno": 2147,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to Z notation types."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 2159,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 2170,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "serialize",
          "lineno": 2187,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to generic schema format."
        },
        {
          "name": "__init__",
          "lineno": 2196,
          "args": [
            "self",
            "target_format"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize with target format (tla or agda)."
        },
        {
          "name": "serialize",
          "lineno": 2201,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to temporal logic format."
        },
        {
          "name": "_serialize_tla",
          "lineno": 2208,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to TLA+ format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 2278,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 2289,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "_map_to_tla_type",
          "lineno": 2302,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to TLA+ types."
        },
        {
          "name": "_serialize_agda",
          "lineno": 2314,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Agda format."
        },
        {
          "name": "_map_to_agda_type",
          "lineno": 2396,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to Agda types."
        },
        {
          "name": "__init__",
          "lineno": 2412,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "serialize",
          "lineno": 2419,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Haskell format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 2491,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 2502,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "_map_to_haskell_type",
          "lineno": 2515,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to Haskell types."
        },
        {
          "name": "serialize",
          "lineno": 2531,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to pickle format with embedded JSON data for round-trip."
        },
        {
          "name": "serialize_to_file",
          "lineno": 2580,
          "args": [
            "self",
            "model",
            "file_path"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Serialize model to binary file."
        },
        {
          "name": "serialize_pickle_direct",
          "lineno": 2623,
          "args": [
            "self",
            "model",
            "file_path"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Serialize directly to pickle file without base64 encoding."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 2627,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 2638,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        }
      ],
      "classes": [
        {
          "name": "GNNSerializer",
          "lineno": 31,
          "bases": [
            "Protocol"
          ],
          "doc": "Protocol for all GNN serializers.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 34,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Serialize model to string format."
            },
            {
              "name": "serialize_to_file",
              "lineno": 38,
              "args": [
                "self",
                "model",
                "file_path"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Serialize model directly to file."
            }
          ]
        },
        {
          "name": "BaseGNNSerializer",
          "lineno": 43,
          "bases": [
            "ABC"
          ],
          "doc": "Base class for all GNN serializers.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 46,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the base serializer."
            },
            {
              "name": "serialize",
              "lineno": 51,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [
                "abstractmethod"
              ],
              "doc": "Serialize model to string format."
            },
            {
              "name": "serialize_to_file",
              "lineno": 55,
              "args": [
                "self",
                "model",
                "file_path"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Serialize model directly to file."
            }
          ]
        },
        {
          "name": "MarkdownSerializer",
          "lineno": 62,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for GNN Markdown format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 65,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model back to Markdown format."
            }
          ]
        },
        {
          "name": "JSONSerializer",
          "lineno": 156,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for JSON data interchange format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 159,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to JSON format."
            }
          ]
        },
        {
          "name": "XMLSerializer",
          "lineno": 164,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for XML format with deterministic output.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 167,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to XML format with consistent ordering."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 320,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 331,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            }
          ]
        },
        {
          "name": "YAMLSerializer",
          "lineno": 345,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for YAML configuration format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 348,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to YAML format."
            },
            {
              "name": "_dict_to_yaml_like",
              "lineno": 419,
              "args": [
                "self",
                "data",
                "indent"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert dict to YAML-like format when PyYAML is not available."
            }
          ]
        },
        {
          "name": "ScalaSerializer",
          "lineno": 442,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for Scala categorical specifications.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 445,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Scala categorical format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 526,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 537,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            },
            {
              "name": "_map_variable_type",
              "lineno": 550,
              "args": [
                "self",
                "var"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN variable types to Scala types."
            }
          ]
        },
        {
          "name": "ProtobufSerializer",
          "lineno": 562,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Enhanced serializer for Protocol Buffers format with complete model preservation.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 565,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Protocol Buffers format with embedded model data."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 704,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Serialize TimeSpecification object to dict."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 716,
              "args": [
                "self",
                "mappings"
              ],
              "returns": "List[Dict[str, Any]]",
              "decorators": [],
              "doc": "Serialize ontology mappings to list of dicts."
            }
          ]
        },
        {
          "name": "PKLSerializer",
          "lineno": 734,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Enhanced serializer for Apple PKL configuration format with complete model preservation.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 737,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to PKL format with embedded model data."
            },
            {
              "name": "_format_pkl_value",
              "lineno": 948,
              "args": [
                "self",
                "value"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Format a value for PKL syntax."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 967,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Serialize TimeSpecification object to dict."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 979,
              "args": [
                "self",
                "mappings"
              ],
              "returns": "List[Dict[str, Any]]",
              "decorators": [],
              "doc": "Serialize ontology mappings to list of dicts."
            }
          ]
        },
        {
          "name": "XSDSerializer",
          "lineno": 997,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for XML Schema Definition format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 1000,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to XSD format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 1084,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Serialize TimeSpecification object to dict."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 1096,
              "args": [
                "self",
                "mappings"
              ],
              "returns": "List[Dict[str, Any]]",
              "decorators": [],
              "doc": "Serialize ontology mappings to list of dicts."
            },
            {
              "name": "_map_to_xsd_type",
              "lineno": 1113,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to XSD types."
            }
          ]
        },
        {
          "name": "ASN1Serializer",
          "lineno": 1126,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for ASN.1 format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 1129,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to ASN.1 format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 1229,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Serialize TimeSpecification object to dict."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 1241,
              "args": [
                "self",
                "mappings"
              ],
              "returns": "List[Dict[str, Any]]",
              "decorators": [],
              "doc": "Serialize ontology mappings to list of dicts."
            }
          ]
        },
        {
          "name": "LeanSerializer",
          "lineno": 1259,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for Lean theorem prover format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 1262,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Lean format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 1339,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 1350,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            },
            {
              "name": "_map_to_lean_type",
              "lineno": 1363,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to Lean types."
            }
          ]
        },
        {
          "name": "CoqSerializer",
          "lineno": 1376,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for Coq format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 1379,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Coq format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 1447,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 1458,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            },
            {
              "name": "_map_to_coq_type",
              "lineno": 1471,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to Coq types."
            }
          ]
        },
        {
          "name": "PythonSerializer",
          "lineno": 1484,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for Python format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 1487,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Python format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 1579,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 1590,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            }
          ]
        },
        {
          "name": "GrammarSerializer",
          "lineno": 1604,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for BNF/EBNF grammar format with embedded data support.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 1607,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to BNF format with embedded data."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 1688,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 1699,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            }
          ]
        },
        {
          "name": "IsabelleSerializer",
          "lineno": 1713,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for Isabelle/HOL format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 1716,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Isabelle/HOL format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 1782,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 1793,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            },
            {
              "name": "_map_to_isabelle_type",
              "lineno": 1806,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to Isabelle types."
            }
          ]
        },
        {
          "name": "MaximaSerializer",
          "lineno": 1819,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for Maxima symbolic computation format with embedded data support.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 1822,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Maxima format with embedded data."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 1910,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 1921,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            }
          ]
        },
        {
          "name": "AlloySerializer",
          "lineno": 1935,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for Alloy model checking language.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 1938,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Alloy format with embedded data."
            },
            {
              "name": "_map_to_alloy_type",
              "lineno": 2026,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to Alloy types."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 2038,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 2049,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            }
          ]
        },
        {
          "name": "ZNotationSerializer",
          "lineno": 2063,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for Z notation formal specification language.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 2066,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Z notation format with embedded data."
            },
            {
              "name": "_map_to_z_type",
              "lineno": 2147,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to Z notation types."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 2159,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 2170,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            }
          ]
        },
        {
          "name": "SchemaSerializer",
          "lineno": 2184,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for formal schema languages.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 2187,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to generic schema format."
            }
          ]
        },
        {
          "name": "TemporalSerializer",
          "lineno": 2193,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for temporal logic languages.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 2196,
              "args": [
                "self",
                "target_format"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize with target format (tla or agda)."
            },
            {
              "name": "serialize",
              "lineno": 2201,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to temporal logic format."
            },
            {
              "name": "_serialize_tla",
              "lineno": 2208,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to TLA+ format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 2278,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 2289,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            },
            {
              "name": "_map_to_tla_type",
              "lineno": 2302,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to TLA+ types."
            },
            {
              "name": "_serialize_agda",
              "lineno": 2314,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Agda format."
            },
            {
              "name": "_map_to_agda_type",
              "lineno": 2396,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to Agda types."
            }
          ]
        },
        {
          "name": "AgdaSerializer",
          "lineno": 2409,
          "bases": [
            "TemporalSerializer"
          ],
          "doc": "Serializer specifically for Agda format.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 2412,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "FunctionalSerializer",
          "lineno": 2416,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for functional programming languages.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 2419,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Haskell format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 2491,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 2502,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            },
            {
              "name": "_map_to_haskell_type",
              "lineno": 2515,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to Haskell types."
            }
          ]
        },
        {
          "name": "BinarySerializer",
          "lineno": 2528,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for binary formats (Pickle) with enhanced round-trip support.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 2531,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to pickle format with embedded JSON data for round-trip."
            },
            {
              "name": "serialize_to_file",
              "lineno": 2580,
              "args": [
                "self",
                "model",
                "file_path"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Serialize model to binary file."
            },
            {
              "name": "serialize_pickle_direct",
              "lineno": 2623,
              "args": [
                "self",
                "model",
                "file_path"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Serialize directly to pickle file without base64 encoding."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 2627,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 2638,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/system.py",
      "module": "gnn.parsers.system",
      "functions": [
        {
          "name": "__init__",
          "lineno": 125,
          "args": [
            "self",
            "strict_validation"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the parsing system.\n\nArgs:\n    strict_validation: Whether to perform strict validation"
        },
        {
          "name": "_initialize_parsers",
          "lineno": 141,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize all available parsers."
        },
        {
          "name": "_initialize_serializers",
          "lineno": 149,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize all available serializers."
        },
        {
          "name": "parse_file",
          "lineno": 157,
          "args": [
            "self",
            "file_path",
            "format_hint"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse a GNN file.\n\nArgs:\n    file_path: Path to the file to parse\n    format_hint: Optional format hint\n    \nReturns:\n    ParseResult containing the parsed model"
        },
        {
          "name": "parse_string",
          "lineno": 184,
          "args": [
            "self",
            "content",
            "format"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse GNN content from string.\n\nArgs:\n    content: String content to parse\n    format: Format of the content\n    \nReturns:\n    ParseResult containing the parsed model"
        },
        {
          "name": "convert",
          "lineno": 217,
          "args": [
            "self",
            "model",
            "from_format",
            "to_format"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Convert a model from one format to another.\n\nArgs:\n    model: The model to convert\n    from_format: Source format\n    to_format: Target format\n    \nReturns:\n    Converted model"
        },
        {
          "name": "serialize",
          "lineno": 233,
          "args": [
            "self",
            "model",
            "format"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Serialize a model to string.\n\nArgs:\n    model: The model to serialize\n    format: Target format\n    \nReturns:\n    Serialized string"
        },
        {
          "name": "serialize_to_file",
          "lineno": 256,
          "args": [
            "self",
            "model",
            "file_path",
            "format"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize a model to file.\n\nArgs:\n    model: The model to serialize\n    file_path: Output file path\n    format: Optional format hint"
        },
        {
          "name": "_detect_format",
          "lineno": 281,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "GNNFormat",
          "decorators": [],
          "doc": "Detect format from file extension.\n\nArgs:\n    file_path: Path to the file\n    \nReturns:\n    Detected format"
        },
        {
          "name": "_detect_format_from_content",
          "lineno": 324,
          "args": [
            "self",
            "content"
          ],
          "returns": "GNNFormat",
          "decorators": [],
          "doc": "Detect format from content.\n\nArgs:\n    content: File content\n    \nReturns:\n    Detected format"
        },
        {
          "name": "get_supported_formats",
          "lineno": 353,
          "args": [
            "self"
          ],
          "returns": "List[GNNFormat]",
          "decorators": [],
          "doc": "Get list of supported formats that can be parsed and serialized."
        },
        {
          "name": "get_available_parsers",
          "lineno": 357,
          "args": [
            "self"
          ],
          "returns": "Dict[GNNFormat, str]",
          "decorators": [],
          "doc": "Get available parsers with their descriptions."
        },
        {
          "name": "get_available_serializers",
          "lineno": 362,
          "args": [
            "self"
          ],
          "returns": "Dict[GNNFormat, str]",
          "decorators": [],
          "doc": "Get available serializers with their descriptions."
        }
      ],
      "classes": [
        {
          "name": "GNNParsingSystem",
          "lineno": 117,
          "bases": [],
          "doc": "Unified GNN Parsing System\n\nProvides comprehensive parsing, serialization, and conversion capabilities\nfor all supported GNN specification formats.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 125,
              "args": [
                "self",
                "strict_validation"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the parsing system.\n\nArgs:\n    strict_validation: Whether to perform strict validation"
            },
            {
              "name": "_initialize_parsers",
              "lineno": 141,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize all available parsers."
            },
            {
              "name": "_initialize_serializers",
              "lineno": 149,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize all available serializers."
            },
            {
              "name": "parse_file",
              "lineno": 157,
              "args": [
                "self",
                "file_path",
                "format_hint"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse a GNN file.\n\nArgs:\n    file_path: Path to the file to parse\n    format_hint: Optional format hint\n    \nReturns:\n    ParseResult containing the parsed model"
            },
            {
              "name": "parse_string",
              "lineno": 184,
              "args": [
                "self",
                "content",
                "format"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse GNN content from string.\n\nArgs:\n    content: String content to parse\n    format: Format of the content\n    \nReturns:\n    ParseResult containing the parsed model"
            },
            {
              "name": "convert",
              "lineno": 217,
              "args": [
                "self",
                "model",
                "from_format",
                "to_format"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Convert a model from one format to another.\n\nArgs:\n    model: The model to convert\n    from_format: Source format\n    to_format: Target format\n    \nReturns:\n    Converted model"
            },
            {
              "name": "serialize",
              "lineno": 233,
              "args": [
                "self",
                "model",
                "format"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Serialize a model to string.\n\nArgs:\n    model: The model to serialize\n    format: Target format\n    \nReturns:\n    Serialized string"
            },
            {
              "name": "serialize_to_file",
              "lineno": 256,
              "args": [
                "self",
                "model",
                "file_path",
                "format"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize a model to file.\n\nArgs:\n    model: The model to serialize\n    file_path: Output file path\n    format: Optional format hint"
            },
            {
              "name": "_detect_format",
              "lineno": 281,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "GNNFormat",
              "decorators": [],
              "doc": "Detect format from file extension.\n\nArgs:\n    file_path: Path to the file\n    \nReturns:\n    Detected format"
            },
            {
              "name": "_detect_format_from_content",
              "lineno": 324,
              "args": [
                "self",
                "content"
              ],
              "returns": "GNNFormat",
              "decorators": [],
              "doc": "Detect format from content.\n\nArgs:\n    content: File content\n    \nReturns:\n    Detected format"
            },
            {
              "name": "get_supported_formats",
              "lineno": 353,
              "args": [
                "self"
              ],
              "returns": "List[GNNFormat]",
              "decorators": [],
              "doc": "Get list of supported formats that can be parsed and serialized."
            },
            {
              "name": "get_available_parsers",
              "lineno": 357,
              "args": [
                "self"
              ],
              "returns": "Dict[GNNFormat, str]",
              "decorators": [],
              "doc": "Get available parsers with their descriptions."
            },
            {
              "name": "get_available_serializers",
              "lineno": 362,
              "args": [
                "self"
              ],
              "returns": "Dict[GNNFormat, str]",
              "decorators": [],
              "doc": "Get available serializers with their descriptions."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/temporal_parser.py",
      "module": "gnn.parsers.temporal_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 26,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_supported_extensions",
          "lineno": 34,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_file",
          "lineno": 37,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_string",
          "lineno": 47,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 136,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from TLA+ comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 154,
          "args": [
            "self",
            "embedded_data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data."
        },
        {
          "name": "_extract_tla_connections",
          "lineno": 223,
          "args": [
            "self",
            "op_name",
            "op_def",
            "variables"
          ],
          "returns": "List[Connection]",
          "decorators": [],
          "doc": "Extract variable dependencies from TLA+ operator definition."
        },
        {
          "name": "_infer_variable_type",
          "lineno": 249,
          "args": [
            "self",
            "name"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": "Infer variable type from name."
        },
        {
          "name": "__init__",
          "lineno": 267,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_supported_extensions",
          "lineno": 274,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_file",
          "lineno": 277,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_string",
          "lineno": 287,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 354,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from Agda comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 372,
          "args": [
            "self",
            "embedded_data",
            "result"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse model from embedded JSON data."
        },
        {
          "name": "_parse_agda_dimensions",
          "lineno": 441,
          "args": [
            "self",
            "data_body"
          ],
          "returns": "List[int]",
          "decorators": [],
          "doc": "Parse dimensions from Agda data type body."
        },
        {
          "name": "_infer_agda_data_type",
          "lineno": 450,
          "args": [
            "self",
            "data_body"
          ],
          "returns": "DataType",
          "decorators": [],
          "doc": "Infer data type from Agda data body."
        },
        {
          "name": "_is_agda_parameter",
          "lineno": 461,
          "args": [
            "self",
            "func_type",
            "func_body"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if function definition represents a parameter."
        },
        {
          "name": "_extract_agda_value",
          "lineno": 469,
          "args": [
            "self",
            "func_body"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Extract value from Agda function body."
        },
        {
          "name": "_extract_agda_connections",
          "lineno": 486,
          "args": [
            "self",
            "func_name",
            "func_type",
            "func_body"
          ],
          "returns": "List[Connection]",
          "decorators": [],
          "doc": "Extract dependencies from Agda function."
        },
        {
          "name": "_infer_variable_type",
          "lineno": 507,
          "args": [
            "self",
            "name"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": "Infer variable type from name."
        }
      ],
      "classes": [
        {
          "name": "TLAParser",
          "lineno": 23,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for TLA+ (Temporal Logic of Actions) specifications.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 26,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_supported_extensions",
              "lineno": 34,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_file",
              "lineno": 37,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_string",
              "lineno": 47,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 136,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from TLA+ comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 154,
              "args": [
                "self",
                "embedded_data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data."
            },
            {
              "name": "_extract_tla_connections",
              "lineno": 223,
              "args": [
                "self",
                "op_name",
                "op_def",
                "variables"
              ],
              "returns": "List[Connection]",
              "decorators": [],
              "doc": "Extract variable dependencies from TLA+ operator definition."
            },
            {
              "name": "_infer_variable_type",
              "lineno": 249,
              "args": [
                "self",
                "name"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": "Infer variable type from name."
            }
          ]
        },
        {
          "name": "AgdaParser",
          "lineno": 264,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for Agda dependently typed functional programming language.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 267,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_supported_extensions",
              "lineno": 274,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_file",
              "lineno": 277,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_string",
              "lineno": 287,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 354,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from Agda comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 372,
              "args": [
                "self",
                "embedded_data",
                "result"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse model from embedded JSON data."
            },
            {
              "name": "_parse_agda_dimensions",
              "lineno": 441,
              "args": [
                "self",
                "data_body"
              ],
              "returns": "List[int]",
              "decorators": [],
              "doc": "Parse dimensions from Agda data type body."
            },
            {
              "name": "_infer_agda_data_type",
              "lineno": 450,
              "args": [
                "self",
                "data_body"
              ],
              "returns": "DataType",
              "decorators": [],
              "doc": "Infer data type from Agda data body."
            },
            {
              "name": "_is_agda_parameter",
              "lineno": 461,
              "args": [
                "self",
                "func_type",
                "func_body"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if function definition represents a parameter."
            },
            {
              "name": "_extract_agda_value",
              "lineno": 469,
              "args": [
                "self",
                "func_body"
              ],
              "returns": "Any",
              "decorators": [],
              "doc": "Extract value from Agda function body."
            },
            {
              "name": "_extract_agda_connections",
              "lineno": 486,
              "args": [
                "self",
                "func_name",
                "func_type",
                "func_body"
              ],
              "returns": "List[Connection]",
              "decorators": [],
              "doc": "Extract dependencies from Agda function."
            },
            {
              "name": "_infer_variable_type",
              "lineno": 507,
              "args": [
                "self",
                "name"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": "Infer variable type from name."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/temporal_serializer.py",
      "module": "gnn.parsers.temporal_serializer",
      "functions": [
        {
          "name": "__init__",
          "lineno": 11,
          "args": [
            "self",
            "target_format"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize with target format (tla or agda)."
        },
        {
          "name": "serialize",
          "lineno": 16,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to temporal logic format."
        },
        {
          "name": "_serialize_tla",
          "lineno": 23,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to TLA+ format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 92,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 103,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        },
        {
          "name": "_map_to_tla_type",
          "lineno": 116,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to TLA+ types."
        },
        {
          "name": "_serialize_agda",
          "lineno": 128,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Agda format."
        },
        {
          "name": "_map_to_agda_type",
          "lineno": 189,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to Agda types."
        },
        {
          "name": "__init__",
          "lineno": 205,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 212,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "TemporalSerializer",
          "lineno": 8,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for temporal logic languages.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 11,
              "args": [
                "self",
                "target_format"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize with target format (tla or agda)."
            },
            {
              "name": "serialize",
              "lineno": 16,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to temporal logic format."
            },
            {
              "name": "_serialize_tla",
              "lineno": 23,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to TLA+ format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 92,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 103,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            },
            {
              "name": "_map_to_tla_type",
              "lineno": 116,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to TLA+ types."
            },
            {
              "name": "_serialize_agda",
              "lineno": 128,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Agda format."
            },
            {
              "name": "_map_to_agda_type",
              "lineno": 189,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to Agda types."
            }
          ]
        },
        {
          "name": "TLASerializer",
          "lineno": 202,
          "bases": [
            "TemporalSerializer"
          ],
          "doc": "Specific serializer for TLA+ format.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 205,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "AgdaSerializer",
          "lineno": 209,
          "bases": [
            "TemporalSerializer"
          ],
          "doc": "Specific serializer for Agda format.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 212,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/unified_parser.py",
      "module": "gnn.parsers.unified_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 33,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the unified parser."
        },
        {
          "name": "_initialize_parsers",
          "lineno": 38,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize all format-specific parsers on demand."
        },
        {
          "name": "parse_file",
          "lineno": 43,
          "args": [
            "self",
            "file_path",
            "format_hint"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse a GNN file automatically detecting or using the provided format.\n\nArgs:\n    file_path: Path to the file to parse\n    format_hint: Optional format hint to skip auto-detection\n    \nReturns:\n    ParseResult with the parsed model\n    \nRaises:\n    ParseError: If parsing fails\n    FileNotFoundError: If file doesn't exist"
        },
        {
          "name": "parse_string",
          "lineno": 119,
          "args": [
            "self",
            "content",
            "format"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse GNN content from a string.\n\nArgs:\n    content: String content to parse\n    format: Format of the content\n    \nReturns:\n    ParseResult with the parsed model"
        },
        {
          "name": "_detect_format",
          "lineno": 177,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "GNNFormat",
          "decorators": [],
          "doc": "Detect the format of a file based on extension and content.\n\nArgs:\n    file_path: Path to analyze\n    \nReturns:\n    Detected GNNFormat"
        },
        {
          "name": "_detect_format_from_content",
          "lineno": 230,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "GNNFormat",
          "decorators": [],
          "doc": "Detect format from file content analysis.\n\nArgs:\n    file_path: Path to analyze\n    \nReturns:\n    Detected GNNFormat"
        },
        {
          "name": "_get_parser",
          "lineno": 317,
          "args": [
            "self",
            "format"
          ],
          "returns": "BaseGNNParser",
          "decorators": [],
          "doc": "Get or create a format-specific parser.\n\nArgs:\n    format: Format to get parser for\n    \nReturns:\n    BaseGNNParser for the format\n    \nRaises:\n    ValueError: If format not supported"
        },
        {
          "name": "_get_parser_class",
          "lineno": 348,
          "args": [
            "self",
            "format"
          ],
          "returns": "Type[BaseGNNParser]",
          "decorators": [],
          "doc": "Get the parser class for a specific format.\n\nArgs:\n    format: Format to get parser class for\n    \nReturns:\n    Parser class\n    \nRaises:\n    ParseError: If no parser class is available"
        },
        {
          "name": "get_supported_formats",
          "lineno": 453,
          "args": [
            "self"
          ],
          "returns": "List[GNNFormat]",
          "decorators": [],
          "doc": "Get list of all supported formats."
        },
        {
          "name": "clear_parser_cache",
          "lineno": 457,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Clear the parser cache to free memory."
        }
      ],
      "classes": [
        {
          "name": "UnifiedGNNParser",
          "lineno": 25,
          "bases": [],
          "doc": "Unified parser that can handle all GNN formats.\n\nThis parser automatically detects the format and delegates to the\nappropriate format-specific parser.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 33,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the unified parser."
            },
            {
              "name": "_initialize_parsers",
              "lineno": 38,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize all format-specific parsers on demand."
            },
            {
              "name": "parse_file",
              "lineno": 43,
              "args": [
                "self",
                "file_path",
                "format_hint"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse a GNN file automatically detecting or using the provided format.\n\nArgs:\n    file_path: Path to the file to parse\n    format_hint: Optional format hint to skip auto-detection\n    \nReturns:\n    ParseResult with the parsed model\n    \nRaises:\n    ParseError: If parsing fails\n    FileNotFoundError: If file doesn't exist"
            },
            {
              "name": "parse_string",
              "lineno": 119,
              "args": [
                "self",
                "content",
                "format"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse GNN content from a string.\n\nArgs:\n    content: String content to parse\n    format: Format of the content\n    \nReturns:\n    ParseResult with the parsed model"
            },
            {
              "name": "_detect_format",
              "lineno": 177,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "GNNFormat",
              "decorators": [],
              "doc": "Detect the format of a file based on extension and content.\n\nArgs:\n    file_path: Path to analyze\n    \nReturns:\n    Detected GNNFormat"
            },
            {
              "name": "_detect_format_from_content",
              "lineno": 230,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "GNNFormat",
              "decorators": [],
              "doc": "Detect format from file content analysis.\n\nArgs:\n    file_path: Path to analyze\n    \nReturns:\n    Detected GNNFormat"
            },
            {
              "name": "_get_parser",
              "lineno": 317,
              "args": [
                "self",
                "format"
              ],
              "returns": "BaseGNNParser",
              "decorators": [],
              "doc": "Get or create a format-specific parser.\n\nArgs:\n    format: Format to get parser for\n    \nReturns:\n    BaseGNNParser for the format\n    \nRaises:\n    ValueError: If format not supported"
            },
            {
              "name": "_get_parser_class",
              "lineno": 348,
              "args": [
                "self",
                "format"
              ],
              "returns": "Type[BaseGNNParser]",
              "decorators": [],
              "doc": "Get the parser class for a specific format.\n\nArgs:\n    format: Format to get parser class for\n    \nReturns:\n    Parser class\n    \nRaises:\n    ParseError: If no parser class is available"
            },
            {
              "name": "get_supported_formats",
              "lineno": 453,
              "args": [
                "self"
              ],
              "returns": "List[GNNFormat]",
              "decorators": [],
              "doc": "Get list of all supported formats."
            },
            {
              "name": "clear_parser_cache",
              "lineno": 457,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Clear the parser cache to free memory."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/utils.py",
      "module": "gnn.parsers.utils",
      "functions": [
        {
          "name": "parse_gnn_file",
          "lineno": 13,
          "args": [
            "file_path",
            "format_hint",
            "strict_validation"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse a GNN file using the unified parsing system.\n\nArgs:\n    file_path: Path to the file to parse\n    format_hint: Optional format hint\n    strict_validation: Whether to perform strict validation\n    \nReturns:\n    ParseResult containing the parsed model"
        },
        {
          "name": "convert_gnn_format",
          "lineno": 30,
          "args": [
            "input_file",
            "output_file",
            "target_format"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Convert a GNN file from one format to another.\n\nArgs:\n    input_file: Path to the input file\n    output_file: Path to the output file\n    target_format: Optional target format (detected from extension if not provided)"
        }
      ],
      "classes": []
    },
    {
      "file": "src/gnn/parsers/validators.py",
      "module": "gnn.parsers.validators",
      "functions": [
        {
          "name": "__str__",
          "lineno": 39,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "add_issue",
          "lineno": 51,
          "args": [
            "self",
            "issue"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Add a validation issue."
        },
        {
          "name": "has_errors",
          "lineno": 63,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if there are any errors."
        },
        {
          "name": "has_warnings",
          "lineno": 67,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if there are any warnings."
        },
        {
          "name": "get_summary",
          "lineno": 71,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get a summary of validation results."
        },
        {
          "name": "__init__",
          "lineno": 83,
          "args": [
            "self",
            "strict"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the GNN validator.\n\nArgs:\n    strict: Whether to perform strict validation (warnings become errors)"
        },
        {
          "name": "validate",
          "lineno": 92,
          "args": [
            "self",
            "model"
          ],
          "returns": "ValidationResult",
          "decorators": [],
          "doc": "Validate a GNN model comprehensively.\n\nArgs:\n    model: GNN model to validate\n    \nReturns:\n    ValidationResult with all issues found"
        },
        {
          "name": "_validate_basic_structure",
          "lineno": 124,
          "args": [
            "self",
            "model",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate basic model structure."
        },
        {
          "name": "_validate_variables",
          "lineno": 153,
          "args": [
            "self",
            "model",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate variables in the model."
        },
        {
          "name": "_validate_variable",
          "lineno": 172,
          "args": [
            "self",
            "variable",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate a single variable."
        },
        {
          "name": "_validate_variable_active_inference",
          "lineno": 209,
          "args": [
            "self",
            "variable",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate Active Inference specific variable constraints."
        },
        {
          "name": "_validate_connections",
          "lineno": 255,
          "args": [
            "self",
            "model",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate connections in the model."
        },
        {
          "name": "_validate_connection_active_inference",
          "lineno": 297,
          "args": [
            "self",
            "connection",
            "model",
            "result",
            "index"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate Active Inference specific connection constraints."
        },
        {
          "name": "_validate_parameters",
          "lineno": 338,
          "args": [
            "self",
            "model",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate parameters in the model."
        },
        {
          "name": "_validate_semantics",
          "lineno": 363,
          "args": [
            "self",
            "model",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate semantic consistency of the model."
        },
        {
          "name": "_check_connectivity",
          "lineno": 389,
          "args": [
            "self",
            "model",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Check if the model graph is connected."
        },
        {
          "name": "_validate_active_inference",
          "lineno": 434,
          "args": [
            "self",
            "model",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate Active Inference specific constraints."
        },
        {
          "name": "_validate_pomdp_structure",
          "lineno": 508,
          "args": [
            "self",
            "model",
            "actinf_vars",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate the structure of a POMDP model."
        },
        {
          "name": "_validate_matrix_dimensions",
          "lineno": 568,
          "args": [
            "self",
            "model",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate Active Inference matrix dimension consistency."
        },
        {
          "name": "dfs",
          "lineno": 411,
          "args": [
            "node",
            "component"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "ValidationSeverity",
          "lineno": 24,
          "bases": [
            "Enum"
          ],
          "doc": "Severity levels for validation issues.",
          "methods": []
        },
        {
          "name": "ValidationIssue",
          "lineno": 31,
          "bases": [],
          "doc": "A validation issue found in a GNN model.",
          "methods": [
            {
              "name": "__str__",
              "lineno": 39,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "ValidationResult",
          "lineno": 43,
          "bases": [],
          "doc": "Result of model validation.",
          "methods": [
            {
              "name": "add_issue",
              "lineno": 51,
              "args": [
                "self",
                "issue"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Add a validation issue."
            },
            {
              "name": "has_errors",
              "lineno": 63,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if there are any errors."
            },
            {
              "name": "has_warnings",
              "lineno": 67,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if there are any warnings."
            },
            {
              "name": "get_summary",
              "lineno": 71,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Get a summary of validation results."
            }
          ]
        },
        {
          "name": "GNNValidator",
          "lineno": 80,
          "bases": [],
          "doc": "Comprehensive validator for GNN models.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 83,
              "args": [
                "self",
                "strict"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the GNN validator.\n\nArgs:\n    strict: Whether to perform strict validation (warnings become errors)"
            },
            {
              "name": "validate",
              "lineno": 92,
              "args": [
                "self",
                "model"
              ],
              "returns": "ValidationResult",
              "decorators": [],
              "doc": "Validate a GNN model comprehensively.\n\nArgs:\n    model: GNN model to validate\n    \nReturns:\n    ValidationResult with all issues found"
            },
            {
              "name": "_validate_basic_structure",
              "lineno": 124,
              "args": [
                "self",
                "model",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate basic model structure."
            },
            {
              "name": "_validate_variables",
              "lineno": 153,
              "args": [
                "self",
                "model",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate variables in the model."
            },
            {
              "name": "_validate_variable",
              "lineno": 172,
              "args": [
                "self",
                "variable",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate a single variable."
            },
            {
              "name": "_validate_variable_active_inference",
              "lineno": 209,
              "args": [
                "self",
                "variable",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate Active Inference specific variable constraints."
            },
            {
              "name": "_validate_connections",
              "lineno": 255,
              "args": [
                "self",
                "model",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate connections in the model."
            },
            {
              "name": "_validate_connection_active_inference",
              "lineno": 297,
              "args": [
                "self",
                "connection",
                "model",
                "result",
                "index"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate Active Inference specific connection constraints."
            },
            {
              "name": "_validate_parameters",
              "lineno": 338,
              "args": [
                "self",
                "model",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate parameters in the model."
            },
            {
              "name": "_validate_semantics",
              "lineno": 363,
              "args": [
                "self",
                "model",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate semantic consistency of the model."
            },
            {
              "name": "_check_connectivity",
              "lineno": 389,
              "args": [
                "self",
                "model",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Check if the model graph is connected."
            },
            {
              "name": "_validate_active_inference",
              "lineno": 434,
              "args": [
                "self",
                "model",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate Active Inference specific constraints."
            },
            {
              "name": "_validate_pomdp_structure",
              "lineno": 508,
              "args": [
                "self",
                "model",
                "actinf_vars",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate the structure of a POMDP model."
            },
            {
              "name": "_validate_matrix_dimensions",
              "lineno": 568,
              "args": [
                "self",
                "model",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate Active Inference matrix dimension consistency."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/xml_parser.py",
      "module": "gnn.parsers.xml_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 28,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the XML parser."
        },
        {
          "name": "parse_file",
          "lineno": 32,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse an XML file containing GNN specifications."
        },
        {
          "name": "parse_string",
          "lineno": 69,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse XML content from string."
        },
        {
          "name": "_parse_xml_root",
          "lineno": 111,
          "args": [
            "self",
            "root"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse XML root element."
        },
        {
          "name": "_convert_xml_to_model",
          "lineno": 126,
          "args": [
            "self",
            "root"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Convert XML element to GNN internal representation."
        },
        {
          "name": "_parse_metadata",
          "lineno": 166,
          "args": [
            "self",
            "root",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse metadata from XML."
        },
        {
          "name": "_parse_xml_variables",
          "lineno": 174,
          "args": [
            "self",
            "root",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse variables from XML."
        },
        {
          "name": "_parse_xml_variable",
          "lineno": 190,
          "args": [
            "self",
            "var_elem"
          ],
          "returns": "Optional[Variable]",
          "decorators": [],
          "doc": "Parse a single variable from XML element."
        },
        {
          "name": "_parse_xml_connections",
          "lineno": 237,
          "args": [
            "self",
            "root",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse connections from XML."
        },
        {
          "name": "_parse_xml_connection",
          "lineno": 257,
          "args": [
            "self",
            "conn_elem"
          ],
          "returns": "Optional[Connection]",
          "decorators": [],
          "doc": "Parse a single connection from XML element."
        },
        {
          "name": "_parse_xml_parameters",
          "lineno": 316,
          "args": [
            "self",
            "root",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse parameters from XML."
        },
        {
          "name": "_parse_xml_parameter",
          "lineno": 331,
          "args": [
            "self",
            "param_elem"
          ],
          "returns": "Optional[Parameter]",
          "decorators": [],
          "doc": "Parse a single parameter from XML element."
        },
        {
          "name": "_infer_variable_type_from_name",
          "lineno": 353,
          "args": [
            "self",
            "name"
          ],
          "returns": "VariableType",
          "decorators": [],
          "doc": "Infer variable type from name."
        },
        {
          "name": "_parse_xml_equations",
          "lineno": 368,
          "args": [
            "self",
            "root",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse equations from XML."
        },
        {
          "name": "_parse_xml_equation",
          "lineno": 381,
          "args": [
            "self",
            "eq_elem"
          ],
          "returns": "Optional[Equation]",
          "decorators": [],
          "doc": "Parse a single equation from XML element."
        },
        {
          "name": "_parse_xml_time_specification",
          "lineno": 400,
          "args": [
            "self",
            "root",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse time specification from XML."
        },
        {
          "name": "_parse_xml_ontology_mappings",
          "lineno": 422,
          "args": [
            "self",
            "root",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse ontology mappings from XML."
        },
        {
          "name": "_parse_xml_ontology_mapping",
          "lineno": 436,
          "args": [
            "self",
            "mapping_elem"
          ],
          "returns": "Optional[OntologyMapping]",
          "decorators": [],
          "doc": "Parse a single ontology mapping from XML element."
        },
        {
          "name": "get_supported_extensions",
          "lineno": 456,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get supported file extensions."
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 460,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from XML comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 475,
          "args": [
            "self",
            "embedded_data"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Parse model from embedded JSON data for perfect round-trip fidelity."
        },
        {
          "name": "__init__",
          "lineno": 536,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the PNML parser."
        },
        {
          "name": "_convert_xml_to_model",
          "lineno": 540,
          "args": [
            "self",
            "root"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Convert PNML to GNN internal representation."
        },
        {
          "name": "_parse_pnml_net",
          "lineno": 558,
          "args": [
            "self",
            "net_elem",
            "model"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse a PNML net element."
        },
        {
          "name": "_parse_pnml_place",
          "lineno": 581,
          "args": [
            "self",
            "place_elem"
          ],
          "returns": "Optional[Variable]",
          "decorators": [],
          "doc": "Parse a PNML place as a variable."
        },
        {
          "name": "_parse_pnml_transition",
          "lineno": 599,
          "args": [
            "self",
            "trans_elem"
          ],
          "returns": "Optional[Variable]",
          "decorators": [],
          "doc": "Parse a PNML transition as a variable."
        },
        {
          "name": "_parse_pnml_arc",
          "lineno": 617,
          "args": [
            "self",
            "arc_elem"
          ],
          "returns": "Optional[Connection]",
          "decorators": [],
          "doc": "Parse a PNML arc as a connection."
        },
        {
          "name": "get_supported_extensions",
          "lineno": 632,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get supported file extensions."
        },
        {
          "name": "_extract_embedded_json_data",
          "lineno": 636,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract embedded JSON model data from XML comments."
        },
        {
          "name": "_parse_from_embedded_data",
          "lineno": 651,
          "args": [
            "self",
            "embedded_data"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Parse model from embedded JSON data for perfect round-trip fidelity."
        }
      ],
      "classes": [
        {
          "name": "XMLGNNParser",
          "lineno": 25,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for XML format GNN specifications.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 28,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the XML parser."
            },
            {
              "name": "parse_file",
              "lineno": 32,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse an XML file containing GNN specifications."
            },
            {
              "name": "parse_string",
              "lineno": 69,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse XML content from string."
            },
            {
              "name": "_parse_xml_root",
              "lineno": 111,
              "args": [
                "self",
                "root"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse XML root element."
            },
            {
              "name": "_convert_xml_to_model",
              "lineno": 126,
              "args": [
                "self",
                "root"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Convert XML element to GNN internal representation."
            },
            {
              "name": "_parse_metadata",
              "lineno": 166,
              "args": [
                "self",
                "root",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse metadata from XML."
            },
            {
              "name": "_parse_xml_variables",
              "lineno": 174,
              "args": [
                "self",
                "root",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse variables from XML."
            },
            {
              "name": "_parse_xml_variable",
              "lineno": 190,
              "args": [
                "self",
                "var_elem"
              ],
              "returns": "Optional[Variable]",
              "decorators": [],
              "doc": "Parse a single variable from XML element."
            },
            {
              "name": "_parse_xml_connections",
              "lineno": 237,
              "args": [
                "self",
                "root",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse connections from XML."
            },
            {
              "name": "_parse_xml_connection",
              "lineno": 257,
              "args": [
                "self",
                "conn_elem"
              ],
              "returns": "Optional[Connection]",
              "decorators": [],
              "doc": "Parse a single connection from XML element."
            },
            {
              "name": "_parse_xml_parameters",
              "lineno": 316,
              "args": [
                "self",
                "root",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse parameters from XML."
            },
            {
              "name": "_parse_xml_parameter",
              "lineno": 331,
              "args": [
                "self",
                "param_elem"
              ],
              "returns": "Optional[Parameter]",
              "decorators": [],
              "doc": "Parse a single parameter from XML element."
            },
            {
              "name": "_infer_variable_type_from_name",
              "lineno": 353,
              "args": [
                "self",
                "name"
              ],
              "returns": "VariableType",
              "decorators": [],
              "doc": "Infer variable type from name."
            },
            {
              "name": "_parse_xml_equations",
              "lineno": 368,
              "args": [
                "self",
                "root",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse equations from XML."
            },
            {
              "name": "_parse_xml_equation",
              "lineno": 381,
              "args": [
                "self",
                "eq_elem"
              ],
              "returns": "Optional[Equation]",
              "decorators": [],
              "doc": "Parse a single equation from XML element."
            },
            {
              "name": "_parse_xml_time_specification",
              "lineno": 400,
              "args": [
                "self",
                "root",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse time specification from XML."
            },
            {
              "name": "_parse_xml_ontology_mappings",
              "lineno": 422,
              "args": [
                "self",
                "root",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse ontology mappings from XML."
            },
            {
              "name": "_parse_xml_ontology_mapping",
              "lineno": 436,
              "args": [
                "self",
                "mapping_elem"
              ],
              "returns": "Optional[OntologyMapping]",
              "decorators": [],
              "doc": "Parse a single ontology mapping from XML element."
            },
            {
              "name": "get_supported_extensions",
              "lineno": 456,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get supported file extensions."
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 460,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from XML comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 475,
              "args": [
                "self",
                "embedded_data"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Parse model from embedded JSON data for perfect round-trip fidelity."
            }
          ]
        },
        {
          "name": "PNMLParser",
          "lineno": 533,
          "bases": [
            "XMLGNNParser"
          ],
          "doc": "Parser for PNML (Petri Net Markup Language) format.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 536,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the PNML parser."
            },
            {
              "name": "_convert_xml_to_model",
              "lineno": 540,
              "args": [
                "self",
                "root"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Convert PNML to GNN internal representation."
            },
            {
              "name": "_parse_pnml_net",
              "lineno": 558,
              "args": [
                "self",
                "net_elem",
                "model"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse a PNML net element."
            },
            {
              "name": "_parse_pnml_place",
              "lineno": 581,
              "args": [
                "self",
                "place_elem"
              ],
              "returns": "Optional[Variable]",
              "decorators": [],
              "doc": "Parse a PNML place as a variable."
            },
            {
              "name": "_parse_pnml_transition",
              "lineno": 599,
              "args": [
                "self",
                "trans_elem"
              ],
              "returns": "Optional[Variable]",
              "decorators": [],
              "doc": "Parse a PNML transition as a variable."
            },
            {
              "name": "_parse_pnml_arc",
              "lineno": 617,
              "args": [
                "self",
                "arc_elem"
              ],
              "returns": "Optional[Connection]",
              "decorators": [],
              "doc": "Parse a PNML arc as a connection."
            },
            {
              "name": "get_supported_extensions",
              "lineno": 632,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get supported file extensions."
            },
            {
              "name": "_extract_embedded_json_data",
              "lineno": 636,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Extract embedded JSON model data from XML comments."
            },
            {
              "name": "_parse_from_embedded_data",
              "lineno": 651,
              "args": [
                "self",
                "embedded_data"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Parse model from embedded JSON data for perfect round-trip fidelity."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/xml_serializer.py",
      "module": "gnn.parsers.xml_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 13,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to XML format with consistent ordering."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 165,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 176,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        }
      ],
      "classes": [
        {
          "name": "XMLSerializer",
          "lineno": 10,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for XML format with deterministic output.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 13,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to XML format with consistent ordering."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 165,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 176,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/xsd_serializer.py",
      "module": "gnn.parsers.xsd_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 11,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to XSD format."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 94,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Serialize TimeSpecification object to dict."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 106,
          "args": [
            "self",
            "mappings"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Serialize ontology mappings to list of dicts."
        },
        {
          "name": "_map_to_xsd_type",
          "lineno": 123,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to XSD types."
        }
      ],
      "classes": [
        {
          "name": "XSDSerializer",
          "lineno": 8,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for XML Schema Definition format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 11,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to XSD format."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 94,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Serialize TimeSpecification object to dict."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 106,
              "args": [
                "self",
                "mappings"
              ],
              "returns": "List[Dict[str, Any]]",
              "decorators": [],
              "doc": "Serialize ontology mappings to list of dicts."
            },
            {
              "name": "_map_to_xsd_type",
              "lineno": 123,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to XSD types."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/yaml_parser.py",
      "module": "gnn.parsers.yaml_parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 34,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the YAML parser."
        },
        {
          "name": "parse_file",
          "lineno": 40,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse a YAML file containing GNN specifications."
        },
        {
          "name": "parse_string",
          "lineno": 57,
          "args": [
            "self",
            "content"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse YAML content from string."
        },
        {
          "name": "_fallback_yaml_parse",
          "lineno": 96,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Fallback YAML parser when PyYAML is not available."
        },
        {
          "name": "_parse_yaml_value",
          "lineno": 140,
          "args": [
            "self",
            "value"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Parse a YAML value from string."
        },
        {
          "name": "_parse_yaml_data",
          "lineno": 176,
          "args": [
            "self",
            "data"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Parse YAML data into GNN internal representation."
        },
        {
          "name": "_convert_yaml_to_model",
          "lineno": 191,
          "args": [
            "self",
            "data"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Convert YAML data to GNN internal representation."
        },
        {
          "name": "_parse_yaml_variables",
          "lineno": 269,
          "args": [
            "self",
            "variables_data"
          ],
          "returns": "List[Variable]",
          "decorators": [],
          "doc": "Parse variables from YAML data."
        },
        {
          "name": "_parse_yaml_variable",
          "lineno": 288,
          "args": [
            "self",
            "var_data"
          ],
          "returns": "Optional[Variable]",
          "decorators": [],
          "doc": "Parse a single variable from YAML data."
        },
        {
          "name": "_parse_yaml_variable_dict",
          "lineno": 327,
          "args": [
            "self",
            "name",
            "spec"
          ],
          "returns": "Optional[Variable]",
          "decorators": [],
          "doc": "Parse variable from dictionary format."
        },
        {
          "name": "_parse_variable_string",
          "lineno": 362,
          "args": [
            "self",
            "var_str"
          ],
          "returns": "Optional[Variable]",
          "decorators": [],
          "doc": "Parse variable from string format like 'name[dims],type'."
        },
        {
          "name": "_parse_yaml_connections",
          "lineno": 406,
          "args": [
            "self",
            "connections_data"
          ],
          "returns": "List[Connection]",
          "decorators": [],
          "doc": "Parse connections from YAML data."
        },
        {
          "name": "_parse_yaml_connection",
          "lineno": 417,
          "args": [
            "self",
            "conn_data"
          ],
          "returns": "Optional[Connection]",
          "decorators": [],
          "doc": "Parse a single connection from YAML data."
        },
        {
          "name": "_parse_connection_string",
          "lineno": 458,
          "args": [
            "self",
            "conn_str"
          ],
          "returns": "Optional[Connection]",
          "decorators": [],
          "doc": "Parse connection from string format like 'A>B' or 'A-B'."
        },
        {
          "name": "_parse_yaml_parameters",
          "lineno": 493,
          "args": [
            "self",
            "params_data"
          ],
          "returns": "List[Parameter]",
          "decorators": [],
          "doc": "Parse parameters from YAML data."
        },
        {
          "name": "_parse_yaml_parameter",
          "lineno": 513,
          "args": [
            "self",
            "param_data"
          ],
          "returns": "Optional[Parameter]",
          "decorators": [],
          "doc": "Parse a single parameter from YAML data."
        },
        {
          "name": "_parse_yaml_equations",
          "lineno": 532,
          "args": [
            "self",
            "equations_data"
          ],
          "returns": "List[Equation]",
          "decorators": [],
          "doc": "Parse equations from YAML data."
        },
        {
          "name": "_parse_yaml_equation",
          "lineno": 543,
          "args": [
            "self",
            "eq_data"
          ],
          "returns": "Optional[Equation]",
          "decorators": [],
          "doc": "Parse a single equation from YAML data."
        },
        {
          "name": "_parse_yaml_time_specification",
          "lineno": 571,
          "args": [
            "self",
            "time_data"
          ],
          "returns": "Optional[TimeSpecification]",
          "decorators": [],
          "doc": "Parse time specification from YAML data."
        },
        {
          "name": "_parse_yaml_ontology_mappings",
          "lineno": 596,
          "args": [
            "self",
            "mappings_data"
          ],
          "returns": "List[OntologyMapping]",
          "decorators": [],
          "doc": "Parse ontology mappings from YAML data."
        },
        {
          "name": "_parse_yaml_ontology_mapping",
          "lineno": 616,
          "args": [
            "self",
            "mapping_data"
          ],
          "returns": "Optional[OntologyMapping]",
          "decorators": [],
          "doc": "Parse a single ontology mapping from YAML data."
        },
        {
          "name": "get_supported_extensions",
          "lineno": 633,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get supported file extensions."
        }
      ],
      "classes": [
        {
          "name": "YAMLGNNParser",
          "lineno": 31,
          "bases": [
            "BaseGNNParser"
          ],
          "doc": "Parser for YAML configuration format.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 34,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the YAML parser."
            },
            {
              "name": "parse_file",
              "lineno": 40,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse a YAML file containing GNN specifications."
            },
            {
              "name": "parse_string",
              "lineno": 57,
              "args": [
                "self",
                "content"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse YAML content from string."
            },
            {
              "name": "_fallback_yaml_parse",
              "lineno": 96,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Fallback YAML parser when PyYAML is not available."
            },
            {
              "name": "_parse_yaml_value",
              "lineno": 140,
              "args": [
                "self",
                "value"
              ],
              "returns": "Any",
              "decorators": [],
              "doc": "Parse a YAML value from string."
            },
            {
              "name": "_parse_yaml_data",
              "lineno": 176,
              "args": [
                "self",
                "data"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Parse YAML data into GNN internal representation."
            },
            {
              "name": "_convert_yaml_to_model",
              "lineno": 191,
              "args": [
                "self",
                "data"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Convert YAML data to GNN internal representation."
            },
            {
              "name": "_parse_yaml_variables",
              "lineno": 269,
              "args": [
                "self",
                "variables_data"
              ],
              "returns": "List[Variable]",
              "decorators": [],
              "doc": "Parse variables from YAML data."
            },
            {
              "name": "_parse_yaml_variable",
              "lineno": 288,
              "args": [
                "self",
                "var_data"
              ],
              "returns": "Optional[Variable]",
              "decorators": [],
              "doc": "Parse a single variable from YAML data."
            },
            {
              "name": "_parse_yaml_variable_dict",
              "lineno": 327,
              "args": [
                "self",
                "name",
                "spec"
              ],
              "returns": "Optional[Variable]",
              "decorators": [],
              "doc": "Parse variable from dictionary format."
            },
            {
              "name": "_parse_variable_string",
              "lineno": 362,
              "args": [
                "self",
                "var_str"
              ],
              "returns": "Optional[Variable]",
              "decorators": [],
              "doc": "Parse variable from string format like 'name[dims],type'."
            },
            {
              "name": "_parse_yaml_connections",
              "lineno": 406,
              "args": [
                "self",
                "connections_data"
              ],
              "returns": "List[Connection]",
              "decorators": [],
              "doc": "Parse connections from YAML data."
            },
            {
              "name": "_parse_yaml_connection",
              "lineno": 417,
              "args": [
                "self",
                "conn_data"
              ],
              "returns": "Optional[Connection]",
              "decorators": [],
              "doc": "Parse a single connection from YAML data."
            },
            {
              "name": "_parse_connection_string",
              "lineno": 458,
              "args": [
                "self",
                "conn_str"
              ],
              "returns": "Optional[Connection]",
              "decorators": [],
              "doc": "Parse connection from string format like 'A>B' or 'A-B'."
            },
            {
              "name": "_parse_yaml_parameters",
              "lineno": 493,
              "args": [
                "self",
                "params_data"
              ],
              "returns": "List[Parameter]",
              "decorators": [],
              "doc": "Parse parameters from YAML data."
            },
            {
              "name": "_parse_yaml_parameter",
              "lineno": 513,
              "args": [
                "self",
                "param_data"
              ],
              "returns": "Optional[Parameter]",
              "decorators": [],
              "doc": "Parse a single parameter from YAML data."
            },
            {
              "name": "_parse_yaml_equations",
              "lineno": 532,
              "args": [
                "self",
                "equations_data"
              ],
              "returns": "List[Equation]",
              "decorators": [],
              "doc": "Parse equations from YAML data."
            },
            {
              "name": "_parse_yaml_equation",
              "lineno": 543,
              "args": [
                "self",
                "eq_data"
              ],
              "returns": "Optional[Equation]",
              "decorators": [],
              "doc": "Parse a single equation from YAML data."
            },
            {
              "name": "_parse_yaml_time_specification",
              "lineno": 571,
              "args": [
                "self",
                "time_data"
              ],
              "returns": "Optional[TimeSpecification]",
              "decorators": [],
              "doc": "Parse time specification from YAML data."
            },
            {
              "name": "_parse_yaml_ontology_mappings",
              "lineno": 596,
              "args": [
                "self",
                "mappings_data"
              ],
              "returns": "List[OntologyMapping]",
              "decorators": [],
              "doc": "Parse ontology mappings from YAML data."
            },
            {
              "name": "_parse_yaml_ontology_mapping",
              "lineno": 616,
              "args": [
                "self",
                "mapping_data"
              ],
              "returns": "Optional[OntologyMapping]",
              "decorators": [],
              "doc": "Parse a single ontology mapping from YAML data."
            },
            {
              "name": "get_supported_extensions",
              "lineno": 633,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get supported file extensions."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/yaml_serializer.py",
      "module": "gnn.parsers.yaml_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 14,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to YAML format."
        },
        {
          "name": "_dict_to_yaml_like",
          "lineno": 85,
          "args": [
            "self",
            "data",
            "indent"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert dict to YAML-like format when PyYAML is not available."
        }
      ],
      "classes": [
        {
          "name": "YAMLSerializer",
          "lineno": 11,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for YAML configuration format.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 14,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to YAML format."
            },
            {
              "name": "_dict_to_yaml_like",
              "lineno": 85,
              "args": [
                "self",
                "data",
                "indent"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert dict to YAML-like format when PyYAML is not available."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/parsers/znotation_serializer.py",
      "module": "gnn.parsers.znotation_serializer",
      "functions": [
        {
          "name": "serialize",
          "lineno": 11,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN model to Z notation format with embedded data."
        },
        {
          "name": "_map_to_z_type",
          "lineno": 91,
          "args": [
            "self",
            "data_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Map GNN data types to Z notation types."
        },
        {
          "name": "_serialize_time_spec",
          "lineno": 103,
          "args": [
            "self",
            "time_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize time specification object."
        },
        {
          "name": "_serialize_ontology_mappings",
          "lineno": 114,
          "args": [
            "self",
            "mappings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Serialize ontology mappings."
        }
      ],
      "classes": [
        {
          "name": "ZNotationSerializer",
          "lineno": 8,
          "bases": [
            "BaseGNNSerializer"
          ],
          "doc": "Serializer for Z notation formal specification language.",
          "methods": [
            {
              "name": "serialize",
              "lineno": 11,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN model to Z notation format with embedded data."
            },
            {
              "name": "_map_to_z_type",
              "lineno": 91,
              "args": [
                "self",
                "data_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Map GNN data types to Z notation types."
            },
            {
              "name": "_serialize_time_spec",
              "lineno": 103,
              "args": [
                "self",
                "time_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize time specification object."
            },
            {
              "name": "_serialize_ontology_mappings",
              "lineno": 114,
              "args": [
                "self",
                "mappings"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Serialize ontology mappings."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/processor.py",
      "module": "gnn.processor",
      "functions": [
        {
          "name": "process_gnn_directory_lightweight",
          "lineno": 20,
          "args": [
            "target_dir",
            "output_dir",
            "recursive"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Lightweight GNN directory processing without heavy dependencies.\n\nArgs:\n    target_dir: Directory containing GNN files\n    output_dir: Directory to save results (optional)\n    recursive: Whether to process subdirectories\n    \nReturns:\n    Dictionary with processing results"
        },
        {
          "name": "_extract_sections_lightweight",
          "lineno": 91,
          "args": [
            "content"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Extract sections from GNN content using lightweight parsing."
        },
        {
          "name": "_extract_variables_lightweight",
          "lineno": 105,
          "args": [
            "content"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Extract variables from GNN content using lightweight parsing."
        },
        {
          "name": "discover_gnn_files",
          "lineno": 125,
          "args": [
            "directory",
            "recursive"
          ],
          "returns": "List[Path]",
          "decorators": [],
          "doc": "Discover GNN files in a directory.\n\nArgs:\n    directory: Directory to search\n    recursive: Whether to search subdirectories\n    \nReturns:\n    List of discovered GNN file paths"
        },
        {
          "name": "parse_gnn_file",
          "lineno": 175,
          "args": [
            "file_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse a GNN file and extract basic information.\n\nArgs:\n    file_path: Path to the GNN file\n    \nReturns:\n    Dictionary with parsed information"
        },
        {
          "name": "validate_gnn_structure",
          "lineno": 227,
          "args": [
            "file_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate the structure of a GNN file.\n\nArgs:\n    file_path: Path to the GNN file\n    \nReturns:\n    Dictionary with validation results"
        },
        {
          "name": "process_gnn_directory",
          "lineno": 287,
          "args": [
            "directory",
            "output_dir",
            "recursive",
            "parallel"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Process all GNN files in a directory.\n\nArgs:\n    directory: Directory to process\n    recursive: Whether to process subdirectories\n    parallel: Whether to use parallel processing (not implemented in lightweight version)\n    \nReturns:\n    Dictionary with processing results"
        },
        {
          "name": "generate_gnn_report",
          "lineno": 317,
          "args": [
            "processing_results",
            "output_path"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a report from GNN processing results.\n\nArgs:\n    processing_results: Results from GNN processing\n    output_path: Optional path to save the report\n    \nReturns:\n    Report content as string"
        },
        {
          "name": "get_module_info",
          "lineno": 375,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Get information about the GNN module."
        }
      ],
      "classes": []
    },
    {
      "file": "src/gnn/processors.py",
      "module": "gnn.processors",
      "functions": [
        {
          "name": "_get_testing_modules",
          "lineno": 31,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Lazy import of testing modules to avoid circular dependencies."
        },
        {
          "name": "enhanced_validation_with_gnn_processing",
          "lineno": 65,
          "args": [
            "target_dir",
            "validation_level",
            "enable_round_trip",
            "enable_cross_format",
            "test_subset"
          ],
          "returns": "Tuple[int, Optional[str]]",
          "decorators": [],
          "doc": "Enhanced validation using GNN processing capabilities.\n\nReturns:\n    Tuple of (exit_code, error_message)"
        },
        {
          "name": "process_gnn_folder",
          "lineno": 131,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose",
            "validation_level",
            "enable_round_trip"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Enhanced GNN folder processing with comprehensive validation and testing.\n\nFeatures:\n- Multi-level validation (basic, standard, strict, research, round_trip)\n- Format detection and analysis\n- Performance metrics and detailed reporting\n- Integration with round-trip testing system\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Output directory for results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    validation_level: Validation level (basic, standard, strict, research, round_trip)\n    enable_round_trip: Whether to enable round-trip testing\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "_basic_gnn_processing",
          "lineno": 358,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Fallback basic GNN processing when enhanced testing is not available."
        },
        {
          "name": "_generate_performance_analysis",
          "lineno": 406,
          "args": [
            "report",
            "test_time"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate performance analysis section for reports."
        },
        {
          "name": "_is_gnn_file",
          "lineno": 433,
          "args": [
            "file_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Determine if a file is likely a GNN file based on content analysis."
        },
        {
          "name": "_validate_binary_cross_format",
          "lineno": 464,
          "args": [
            "file_path",
            "cross_validator"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Validate binary files for cross-format consistency."
        },
        {
          "name": "run_gnn_round_trip_tests",
          "lineno": 513,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "reference_file",
            "test_subset",
            "enable_parallel"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Enhanced round-trip tests with performance optimization and detailed reporting.\n\nArgs:\n    target_dir: Directory containing GNN files\n    output_dir: Output directory for test results\n    logger: Logger instance\n    reference_file: Optional specific reference file\n    test_subset: Optional list of formats to test\n    enable_parallel: Whether to enable parallel testing\n    **kwargs: Additional test options\n    \nReturns:\n    True if all tests passed, False otherwise"
        },
        {
          "name": "validate_gnn_cross_format_consistency",
          "lineno": 675,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "files_to_test",
            "include_binary"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Enhanced cross-format consistency validation with comprehensive analysis.\n\nArgs:\n    target_dir: Directory containing GNN files to test\n    output_dir: Output directory for validation results\n    logger: Logger instance\n    files_to_test: Optional list of specific files to test\n    include_binary: Whether to include binary formats in validation\n    **kwargs: Additional validation options\n    \nReturns:\n    True if all validations passed, False otherwise"
        }
      ],
      "classes": []
    },
    {
      "file": "src/gnn/reporting.py",
      "module": "gnn.reporting",
      "functions": [
        {
          "name": "__init__",
          "lineno": 27,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "generate",
          "lineno": 30,
          "args": [
            "self",
            "context",
            "output_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate comprehensive processing report.\n\nArgs:\n    context: Processing context with results\n    output_dir: Directory for report output\n    \nReturns:\n    Dictionary with report metadata and file paths"
        },
        {
          "name": "_compile_report_data",
          "lineno": 83,
          "args": [
            "self",
            "context"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Compile comprehensive report data from processing context."
        },
        {
          "name": "_calculate_validation_success_rate",
          "lineno": 137,
          "args": [
            "self",
            "context"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Calculate validation success rate."
        },
        {
          "name": "_analyze_discovered_files",
          "lineno": 143,
          "args": [
            "self",
            "context"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze discovered files for report."
        },
        {
          "name": "_analyze_validation_results",
          "lineno": 173,
          "args": [
            "self",
            "context"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze validation results for report."
        },
        {
          "name": "_analyze_round_trip_results",
          "lineno": 210,
          "args": [
            "self",
            "round_trip_results"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze round-trip test results."
        },
        {
          "name": "_analyze_cross_format_results",
          "lineno": 230,
          "args": [
            "self",
            "cross_format_results"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze cross-format validation results."
        },
        {
          "name": "_calculate_performance_metrics",
          "lineno": 249,
          "args": [
            "self",
            "context"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Calculate performance metrics for report."
        },
        {
          "name": "_generate_recommendations",
          "lineno": 264,
          "args": [
            "self",
            "context"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Generate recommendations based on processing results."
        },
        {
          "name": "_generate_json_report",
          "lineno": 299,
          "args": [
            "self",
            "report_data",
            "output_file"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Generate detailed JSON report."
        },
        {
          "name": "_generate_markdown_report",
          "lineno": 305,
          "args": [
            "self",
            "report_data",
            "output_file"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Generate human-readable Markdown report."
        },
        {
          "name": "_generate_html_report",
          "lineno": 379,
          "args": [
            "self",
            "report_data",
            "output_file"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Generate web-viewable HTML report."
        },
        {
          "name": "_create_html_template",
          "lineno": 388,
          "args": [
            "self",
            "report_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Create HTML template for report."
        },
        {
          "name": "_generate_html_recommendations",
          "lineno": 451,
          "args": [
            "self",
            "recommendations"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate HTML section for recommendations."
        }
      ],
      "classes": [
        {
          "name": "ReportGenerator",
          "lineno": 19,
          "bases": [],
          "doc": "Comprehensive report generator for GNN processing results.\n\nGenerates detailed reports in multiple formats with performance\nmetrics, validation summaries, and processing insights.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 27,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "generate",
              "lineno": 30,
              "args": [
                "self",
                "context",
                "output_dir"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Generate comprehensive processing report.\n\nArgs:\n    context: Processing context with results\n    output_dir: Directory for report output\n    \nReturns:\n    Dictionary with report metadata and file paths"
            },
            {
              "name": "_compile_report_data",
              "lineno": 83,
              "args": [
                "self",
                "context"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Compile comprehensive report data from processing context."
            },
            {
              "name": "_calculate_validation_success_rate",
              "lineno": 137,
              "args": [
                "self",
                "context"
              ],
              "returns": "float",
              "decorators": [],
              "doc": "Calculate validation success rate."
            },
            {
              "name": "_analyze_discovered_files",
              "lineno": 143,
              "args": [
                "self",
                "context"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Analyze discovered files for report."
            },
            {
              "name": "_analyze_validation_results",
              "lineno": 173,
              "args": [
                "self",
                "context"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Analyze validation results for report."
            },
            {
              "name": "_analyze_round_trip_results",
              "lineno": 210,
              "args": [
                "self",
                "round_trip_results"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Analyze round-trip test results."
            },
            {
              "name": "_analyze_cross_format_results",
              "lineno": 230,
              "args": [
                "self",
                "cross_format_results"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Analyze cross-format validation results."
            },
            {
              "name": "_calculate_performance_metrics",
              "lineno": 249,
              "args": [
                "self",
                "context"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Calculate performance metrics for report."
            },
            {
              "name": "_generate_recommendations",
              "lineno": 264,
              "args": [
                "self",
                "context"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Generate recommendations based on processing results."
            },
            {
              "name": "_generate_json_report",
              "lineno": 299,
              "args": [
                "self",
                "report_data",
                "output_file"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Generate detailed JSON report."
            },
            {
              "name": "_generate_markdown_report",
              "lineno": 305,
              "args": [
                "self",
                "report_data",
                "output_file"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Generate human-readable Markdown report."
            },
            {
              "name": "_generate_html_report",
              "lineno": 379,
              "args": [
                "self",
                "report_data",
                "output_file"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Generate web-viewable HTML report."
            },
            {
              "name": "_create_html_template",
              "lineno": 388,
              "args": [
                "self",
                "report_data"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Create HTML template for report."
            },
            {
              "name": "_generate_html_recommendations",
              "lineno": 451,
              "args": [
                "self",
                "recommendations"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate HTML section for recommendations."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/schema_validator.py",
      "module": "gnn.schema_validator",
      "functions": [
        {
          "name": "validate_gnn_file",
          "lineno": 1319,
          "args": [
            "file_path"
          ],
          "returns": "ValidationResult",
          "decorators": [],
          "doc": "Convenience function to validate a GNN file."
        },
        {
          "name": "__init__",
          "lineno": 73,
          "args": [
            "self",
            "enhanced_validation"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_file",
          "lineno": 82,
          "args": [
            "self",
            "file_path",
            "format_hint"
          ],
          "returns": "ParsedGNN",
          "decorators": [],
          "doc": "Enhanced file parsing with format detection and validation."
        },
        {
          "name": "_detect_file_format",
          "lineno": 107,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Enhanced format detection with content analysis."
        },
        {
          "name": "_detect_format_from_content",
          "lineno": 135,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Detect format from file content analysis."
        },
        {
          "name": "_parse_binary_file",
          "lineno": 164,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ParsedGNN",
          "decorators": [],
          "doc": "Parse binary files (pickle format)."
        },
        {
          "name": "_convert_pickle_to_parsed_gnn",
          "lineno": 192,
          "args": [
            "self",
            "data"
          ],
          "returns": "ParsedGNN",
          "decorators": [],
          "doc": "Convert pickle data to ParsedGNN structure."
        },
        {
          "name": "parse_content",
          "lineno": 230,
          "args": [
            "self",
            "content",
            "source_name",
            "format_hint"
          ],
          "returns": "ParsedGNN",
          "decorators": [],
          "doc": "Enhanced content parsing with format-specific handling."
        },
        {
          "name": "_convert_parse_result_to_parsed_gnn",
          "lineno": 246,
          "args": [
            "self",
            "result",
            "source_format"
          ],
          "returns": "ParsedGNN",
          "decorators": [],
          "doc": "Convert ParseResult to ParsedGNN format."
        },
        {
          "name": "_infer_symbol_from_type",
          "lineno": 294,
          "args": [
            "self",
            "connection_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Infer connection symbol from type."
        },
        {
          "name": "_compute_semantic_checksum",
          "lineno": 304,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Compute semantic checksum for model."
        },
        {
          "name": "_parse_markdown_content",
          "lineno": 317,
          "args": [
            "self",
            "content",
            "source_name"
          ],
          "returns": "ParsedGNN",
          "decorators": [],
          "doc": "Parse GNN content from string (markdown format)."
        },
        {
          "name": "_process_section_content",
          "lineno": 369,
          "args": [
            "self",
            "parsed",
            "section",
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Process content for a specific section."
        },
        {
          "name": "_parse_state_space_block",
          "lineno": 400,
          "args": [
            "self",
            "parsed",
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse StateSpaceBlock section."
        },
        {
          "name": "_parse_connections",
          "lineno": 435,
          "args": [
            "self",
            "parsed",
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse Connections section."
        },
        {
          "name": "_parse_variable_group",
          "lineno": 469,
          "args": [
            "self",
            "group_str"
          ],
          "returns": "Union[str, List[str]]",
          "decorators": [],
          "doc": "Parse a variable group (single variable or parenthesized list)."
        },
        {
          "name": "_get_connection_type",
          "lineno": 481,
          "args": [
            "self",
            "symbol"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Determine connection type from symbol."
        },
        {
          "name": "_parse_parameters",
          "lineno": 492,
          "args": [
            "self",
            "parsed",
            "content",
            "param_type"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse parameter sections."
        },
        {
          "name": "_parse_parameter_value",
          "lineno": 515,
          "args": [
            "self",
            "value_str"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Parse a parameter value string."
        },
        {
          "name": "_parse_matrix_or_tuple",
          "lineno": 542,
          "args": [
            "self",
            "value_str"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Parse matrix or tuple notation with full Active Inference support."
        },
        {
          "name": "_parse_nested_matrix",
          "lineno": 566,
          "args": [
            "self",
            "inner"
          ],
          "returns": "List[List[float]]",
          "decorators": [],
          "doc": "Parse nested matrix structure like ((0.8,0.1),(0.1,0.8))."
        },
        {
          "name": "_parse_array",
          "lineno": 592,
          "args": [
            "self",
            "value_str"
          ],
          "returns": "List[Any]",
          "decorators": [],
          "doc": "Parse array notation [1,2,3] or [[1,2],[3,4]]."
        },
        {
          "name": "_parse_scalar_value",
          "lineno": 624,
          "args": [
            "self",
            "value_str"
          ],
          "returns": "Union[float, int, bool, str]",
          "decorators": [],
          "doc": "Parse a scalar value with proper type conversion."
        },
        {
          "name": "_parse_tuple",
          "lineno": 649,
          "args": [
            "self",
            "value_str"
          ],
          "returns": "Tuple[Any, ...]",
          "decorators": [],
          "doc": "Parse tuple notation with proper type conversion."
        },
        {
          "name": "_parse_equations",
          "lineno": 682,
          "args": [
            "self",
            "parsed",
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse Equations section."
        },
        {
          "name": "_parse_time_config",
          "lineno": 707,
          "args": [
            "self",
            "parsed",
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse Time section."
        },
        {
          "name": "_parse_ontology_mappings",
          "lineno": 721,
          "args": [
            "self",
            "parsed",
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse ActInfOntologyAnnotation section."
        },
        {
          "name": "_parse_signature",
          "lineno": 734,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, str]",
          "decorators": [],
          "doc": "Parse Signature section."
        },
        {
          "name": "__init__",
          "lineno": 748,
          "args": [
            "self",
            "schema_path",
            "use_formal_parser",
            "enable_round_trip_testing",
            "validation_level"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_load_schema",
          "lineno": 784,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Load JSON or YAML schema with robust error handling.\n\nHandles potential recursion and parsing errors by providing fallback mechanisms."
        },
        {
          "name": "validate_file",
          "lineno": 827,
          "args": [
            "self",
            "file_path",
            "validation_level"
          ],
          "returns": "ValidationResult",
          "decorators": [],
          "doc": "Enhanced validation with comprehensive testing capabilities."
        },
        {
          "name": "_detect_file_format",
          "lineno": 915,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Detect file format from extension."
        },
        {
          "name": "_validate_structured_format",
          "lineno": 930,
          "args": [
            "self",
            "content",
            "result",
            "file_format"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate structured formats like JSON, XML, YAML."
        },
        {
          "name": "_validate_binary_file",
          "lineno": 966,
          "args": [
            "self",
            "file_path",
            "result"
          ],
          "returns": "ValidationResult",
          "decorators": [],
          "doc": "Validate binary files (pickle format)."
        },
        {
          "name": "_validate_basic_structure",
          "lineno": 989,
          "args": [
            "self",
            "content",
            "result",
            "file_format"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Enhanced basic validation with format-specific checks."
        },
        {
          "name": "_validate_strict_requirements",
          "lineno": 1008,
          "args": [
            "self",
            "parsed_gnn",
            "content",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate strict requirements for research-grade models."
        },
        {
          "name": "_validate_research_standards",
          "lineno": 1030,
          "args": [
            "self",
            "parsed_gnn",
            "content",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate research-grade standards."
        },
        {
          "name": "_perform_round_trip_validation",
          "lineno": 1055,
          "args": [
            "self",
            "parsed_gnn",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Perform round-trip validation testing."
        },
        {
          "name": "_validate_cross_format_consistency",
          "lineno": 1096,
          "args": [
            "self",
            "content",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate cross-format consistency."
        },
        {
          "name": "_convert_parsed_gnn_to_markdown",
          "lineno": 1111,
          "args": [
            "self",
            "parsed_gnn"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert ParsedGNN back to markdown format."
        },
        {
          "name": "_validate_markdown_structure",
          "lineno": 1162,
          "args": [
            "self",
            "content",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate comprehensive GNN markdown file structure and semantics."
        },
        {
          "name": "_validate_structure",
          "lineno": 1209,
          "args": [
            "self",
            "content",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Legacy method - now delegates to markdown validation."
        },
        {
          "name": "_validate_semantics",
          "lineno": 1213,
          "args": [
            "self",
            "parsed",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate semantic consistency of parsed GNN model."
        },
        {
          "name": "_is_valid_variable_reference",
          "lineno": 1237,
          "args": [
            "self",
            "var"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if variable reference follows GNN conventions."
        },
        {
          "name": "_validate_active_inference_conventions",
          "lineno": 1242,
          "args": [
            "self",
            "parsed",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate Active Inference naming and structure conventions."
        },
        {
          "name": "_validate_mathematical_consistency",
          "lineno": 1270,
          "args": [
            "self",
            "parsed",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate mathematical consistency of parameters and dimensions."
        },
        {
          "name": "_check_stochasticity",
          "lineno": 1298,
          "args": [
            "self",
            "matrix_data",
            "tolerance"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if matrix rows sum to 1 (stochastic constraint)."
        }
      ],
      "classes": [
        {
          "name": "GNNParser",
          "lineno": 54,
          "bases": [],
          "doc": "Enhanced parser for GNN file format with multi-format support.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 73,
              "args": [
                "self",
                "enhanced_validation"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "parse_file",
              "lineno": 82,
              "args": [
                "self",
                "file_path",
                "format_hint"
              ],
              "returns": "ParsedGNN",
              "decorators": [],
              "doc": "Enhanced file parsing with format detection and validation."
            },
            {
              "name": "_detect_file_format",
              "lineno": 107,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Enhanced format detection with content analysis."
            },
            {
              "name": "_detect_format_from_content",
              "lineno": 135,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Detect format from file content analysis."
            },
            {
              "name": "_parse_binary_file",
              "lineno": 164,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ParsedGNN",
              "decorators": [],
              "doc": "Parse binary files (pickle format)."
            },
            {
              "name": "_convert_pickle_to_parsed_gnn",
              "lineno": 192,
              "args": [
                "self",
                "data"
              ],
              "returns": "ParsedGNN",
              "decorators": [],
              "doc": "Convert pickle data to ParsedGNN structure."
            },
            {
              "name": "parse_content",
              "lineno": 230,
              "args": [
                "self",
                "content",
                "source_name",
                "format_hint"
              ],
              "returns": "ParsedGNN",
              "decorators": [],
              "doc": "Enhanced content parsing with format-specific handling."
            },
            {
              "name": "_convert_parse_result_to_parsed_gnn",
              "lineno": 246,
              "args": [
                "self",
                "result",
                "source_format"
              ],
              "returns": "ParsedGNN",
              "decorators": [],
              "doc": "Convert ParseResult to ParsedGNN format."
            },
            {
              "name": "_infer_symbol_from_type",
              "lineno": 294,
              "args": [
                "self",
                "connection_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Infer connection symbol from type."
            },
            {
              "name": "_compute_semantic_checksum",
              "lineno": 304,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Compute semantic checksum for model."
            },
            {
              "name": "_parse_markdown_content",
              "lineno": 317,
              "args": [
                "self",
                "content",
                "source_name"
              ],
              "returns": "ParsedGNN",
              "decorators": [],
              "doc": "Parse GNN content from string (markdown format)."
            },
            {
              "name": "_process_section_content",
              "lineno": 369,
              "args": [
                "self",
                "parsed",
                "section",
                "content"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Process content for a specific section."
            },
            {
              "name": "_parse_state_space_block",
              "lineno": 400,
              "args": [
                "self",
                "parsed",
                "content"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse StateSpaceBlock section."
            },
            {
              "name": "_parse_connections",
              "lineno": 435,
              "args": [
                "self",
                "parsed",
                "content"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse Connections section."
            },
            {
              "name": "_parse_variable_group",
              "lineno": 469,
              "args": [
                "self",
                "group_str"
              ],
              "returns": "Union[str, List[str]]",
              "decorators": [],
              "doc": "Parse a variable group (single variable or parenthesized list)."
            },
            {
              "name": "_get_connection_type",
              "lineno": 481,
              "args": [
                "self",
                "symbol"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Determine connection type from symbol."
            },
            {
              "name": "_parse_parameters",
              "lineno": 492,
              "args": [
                "self",
                "parsed",
                "content",
                "param_type"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse parameter sections."
            },
            {
              "name": "_parse_parameter_value",
              "lineno": 515,
              "args": [
                "self",
                "value_str"
              ],
              "returns": "Any",
              "decorators": [],
              "doc": "Parse a parameter value string."
            },
            {
              "name": "_parse_matrix_or_tuple",
              "lineno": 542,
              "args": [
                "self",
                "value_str"
              ],
              "returns": "Any",
              "decorators": [],
              "doc": "Parse matrix or tuple notation with full Active Inference support."
            },
            {
              "name": "_parse_nested_matrix",
              "lineno": 566,
              "args": [
                "self",
                "inner"
              ],
              "returns": "List[List[float]]",
              "decorators": [],
              "doc": "Parse nested matrix structure like ((0.8,0.1),(0.1,0.8))."
            },
            {
              "name": "_parse_array",
              "lineno": 592,
              "args": [
                "self",
                "value_str"
              ],
              "returns": "List[Any]",
              "decorators": [],
              "doc": "Parse array notation [1,2,3] or [[1,2],[3,4]]."
            },
            {
              "name": "_parse_scalar_value",
              "lineno": 624,
              "args": [
                "self",
                "value_str"
              ],
              "returns": "Union[float, int, bool, str]",
              "decorators": [],
              "doc": "Parse a scalar value with proper type conversion."
            },
            {
              "name": "_parse_tuple",
              "lineno": 649,
              "args": [
                "self",
                "value_str"
              ],
              "returns": "Tuple[Any, ...]",
              "decorators": [],
              "doc": "Parse tuple notation with proper type conversion."
            },
            {
              "name": "_parse_equations",
              "lineno": 682,
              "args": [
                "self",
                "parsed",
                "content"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse Equations section."
            },
            {
              "name": "_parse_time_config",
              "lineno": 707,
              "args": [
                "self",
                "parsed",
                "content"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse Time section."
            },
            {
              "name": "_parse_ontology_mappings",
              "lineno": 721,
              "args": [
                "self",
                "parsed",
                "content"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse ActInfOntologyAnnotation section."
            },
            {
              "name": "_parse_signature",
              "lineno": 734,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, str]",
              "decorators": [],
              "doc": "Parse Signature section."
            }
          ]
        },
        {
          "name": "GNNValidator",
          "lineno": 745,
          "bases": [],
          "doc": "Enhanced validator for GNN files with comprehensive round-trip and cross-format support.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 748,
              "args": [
                "self",
                "schema_path",
                "use_formal_parser",
                "enable_round_trip_testing",
                "validation_level"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_load_schema",
              "lineno": 784,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Load JSON or YAML schema with robust error handling.\n\nHandles potential recursion and parsing errors by providing fallback mechanisms."
            },
            {
              "name": "validate_file",
              "lineno": 827,
              "args": [
                "self",
                "file_path",
                "validation_level"
              ],
              "returns": "ValidationResult",
              "decorators": [],
              "doc": "Enhanced validation with comprehensive testing capabilities."
            },
            {
              "name": "_detect_file_format",
              "lineno": 915,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Detect file format from extension."
            },
            {
              "name": "_validate_structured_format",
              "lineno": 930,
              "args": [
                "self",
                "content",
                "result",
                "file_format"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate structured formats like JSON, XML, YAML."
            },
            {
              "name": "_validate_binary_file",
              "lineno": 966,
              "args": [
                "self",
                "file_path",
                "result"
              ],
              "returns": "ValidationResult",
              "decorators": [],
              "doc": "Validate binary files (pickle format)."
            },
            {
              "name": "_validate_basic_structure",
              "lineno": 989,
              "args": [
                "self",
                "content",
                "result",
                "file_format"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Enhanced basic validation with format-specific checks."
            },
            {
              "name": "_validate_strict_requirements",
              "lineno": 1008,
              "args": [
                "self",
                "parsed_gnn",
                "content",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate strict requirements for research-grade models."
            },
            {
              "name": "_validate_research_standards",
              "lineno": 1030,
              "args": [
                "self",
                "parsed_gnn",
                "content",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate research-grade standards."
            },
            {
              "name": "_perform_round_trip_validation",
              "lineno": 1055,
              "args": [
                "self",
                "parsed_gnn",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Perform round-trip validation testing."
            },
            {
              "name": "_validate_cross_format_consistency",
              "lineno": 1096,
              "args": [
                "self",
                "content",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate cross-format consistency."
            },
            {
              "name": "_convert_parsed_gnn_to_markdown",
              "lineno": 1111,
              "args": [
                "self",
                "parsed_gnn"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert ParsedGNN back to markdown format."
            },
            {
              "name": "_validate_markdown_structure",
              "lineno": 1162,
              "args": [
                "self",
                "content",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate comprehensive GNN markdown file structure and semantics."
            },
            {
              "name": "_validate_structure",
              "lineno": 1209,
              "args": [
                "self",
                "content",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Legacy method - now delegates to markdown validation."
            },
            {
              "name": "_validate_semantics",
              "lineno": 1213,
              "args": [
                "self",
                "parsed",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate semantic consistency of parsed GNN model."
            },
            {
              "name": "_is_valid_variable_reference",
              "lineno": 1237,
              "args": [
                "self",
                "var"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if variable reference follows GNN conventions."
            },
            {
              "name": "_validate_active_inference_conventions",
              "lineno": 1242,
              "args": [
                "self",
                "parsed",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate Active Inference naming and structure conventions."
            },
            {
              "name": "_validate_mathematical_consistency",
              "lineno": 1270,
              "args": [
                "self",
                "parsed",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate mathematical consistency of parameters and dimensions."
            },
            {
              "name": "_check_stochasticity",
              "lineno": 1298,
              "args": [
                "self",
                "matrix_data",
                "tolerance"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if matrix rows sum to 1 (stochastic constraint)."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/schemas/__init__.py",
      "module": "gnn.schemas.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/gnn/simple_validator.py",
      "module": "gnn.simple_validator",
      "functions": [
        {
          "name": "validate_gnn_file",
          "lineno": 136,
          "args": [
            "file_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Convenience function to validate a GNN file.\n\nArgs:\n    file_path: Path to the file to validate\n    \nReturns:\n    Dictionary with validation results"
        },
        {
          "name": "validate_gnn_directory",
          "lineno": 150,
          "args": [
            "directory",
            "recursive"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Convenience function to validate all GNN files in a directory.\n\nArgs:\n    directory: Directory to validate\n    recursive: Whether to search recursively\n    \nReturns:\n    Dictionary with validation results"
        },
        {
          "name": "__init__",
          "lineno": 23,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "validate_file",
          "lineno": 26,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate a GNN file with basic checks.\n\nArgs:\n    file_path: Path to the file to validate\n    \nReturns:\n    Dictionary with validation results"
        },
        {
          "name": "_detect_format",
          "lineno": 76,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Detect file format from extension."
        },
        {
          "name": "validate_directory",
          "lineno": 92,
          "args": [
            "self",
            "directory",
            "recursive"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate all GNN files in a directory.\n\nArgs:\n    directory: Directory to validate\n    recursive: Whether to search recursively\n    \nReturns:\n    Dictionary with validation results"
        }
      ],
      "classes": [
        {
          "name": "SimpleValidator",
          "lineno": 16,
          "bases": [],
          "doc": "Simple validator for GNN files.\n\nThis validator performs basic checks without complex dependencies.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 23,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "validate_file",
              "lineno": 26,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Validate a GNN file with basic checks.\n\nArgs:\n    file_path: Path to the file to validate\n    \nReturns:\n    Dictionary with validation results"
            },
            {
              "name": "_detect_format",
              "lineno": 76,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Detect file format from extension."
            },
            {
              "name": "validate_directory",
              "lineno": 92,
              "args": [
                "self",
                "directory",
                "recursive"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Validate all GNN files in a directory.\n\nArgs:\n    directory: Directory to validate\n    recursive: Whether to search recursively\n    \nReturns:\n    Dictionary with validation results"
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/testing/__init__.py",
      "module": "gnn.testing.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/gnn/testing/performance_benchmarks.py",
      "module": "gnn.testing.performance_benchmarks",
      "functions": [
        {
          "name": "benchmark_gnn_files",
          "lineno": 152,
          "args": [
            "file_paths"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Benchmark multiple GNN files."
        },
        {
          "name": "__init__",
          "lineno": 35,
          "args": [
            "self",
            "test_iterations"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "benchmark_parsing",
          "lineno": 39,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "PerformanceMetrics",
          "decorators": [],
          "doc": "Benchmark GNN file parsing performance."
        },
        {
          "name": "benchmark_validation",
          "lineno": 80,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "PerformanceMetrics",
          "decorators": [],
          "doc": "Benchmark GNN file validation performance."
        },
        {
          "name": "generate_report",
          "lineno": 120,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate performance report."
        }
      ],
      "classes": [
        {
          "name": "PerformanceMetrics",
          "lineno": 20,
          "bases": [],
          "doc": "Performance metrics for GNN operations.",
          "methods": []
        },
        {
          "name": "GNNPerformanceBenchmark",
          "lineno": 32,
          "bases": [],
          "doc": "Performance benchmarking for GNN operations.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 35,
              "args": [
                "self",
                "test_iterations"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "benchmark_parsing",
              "lineno": 39,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "PerformanceMetrics",
              "decorators": [],
              "doc": "Benchmark GNN file parsing performance."
            },
            {
              "name": "benchmark_validation",
              "lineno": 80,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "PerformanceMetrics",
              "decorators": [],
              "doc": "Benchmark GNN file validation performance."
            },
            {
              "name": "generate_report",
              "lineno": 120,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Generate performance report."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/testing/round_trip_strategy.py",
      "module": "gnn.testing.round_trip_strategy",
      "functions": [
        {
          "name": "__init__",
          "lineno": 37,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "configure",
          "lineno": 44,
          "args": [
            "self",
            "test_subset",
            "reference_file",
            "output_dir"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Configure testing parameters."
        },
        {
          "name": "_initialize_tester",
          "lineno": 55,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize round-trip testing components."
        },
        {
          "name": "test",
          "lineno": 65,
          "args": [
            "self",
            "files"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Run round-trip tests on provided files.\n\nArgs:\n    files: List of file paths to test\n    \nReturns:\n    Dictionary with test results and metadata"
        },
        {
          "name": "_test_file_round_trip",
          "lineno": 119,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Test round-trip conversion for a single file."
        },
        {
          "name": "_generate_test_summary",
          "lineno": 157,
          "args": [
            "self",
            "file_results"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate summary statistics from test results."
        },
        {
          "name": "_save_test_results",
          "lineno": 180,
          "args": [
            "self",
            "results"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Save test results to output directory."
        }
      ],
      "classes": [
        {
          "name": "RoundTripResult",
          "lineno": 18,
          "bases": [],
          "doc": "Result of a round-trip test operation.",
          "methods": []
        },
        {
          "name": "RoundTripTestStrategy",
          "lineno": 29,
          "bases": [],
          "doc": "Round-trip testing strategy for GNN models.\n\nTests semantic preservation across format conversions\nand validates model consistency.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 37,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "configure",
              "lineno": 44,
              "args": [
                "self",
                "test_subset",
                "reference_file",
                "output_dir"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Configure testing parameters."
            },
            {
              "name": "_initialize_tester",
              "lineno": 55,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize round-trip testing components."
            },
            {
              "name": "test",
              "lineno": 65,
              "args": [
                "self",
                "files"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Run round-trip tests on provided files.\n\nArgs:\n    files: List of file paths to test\n    \nReturns:\n    Dictionary with test results and metadata"
            },
            {
              "name": "_test_file_round_trip",
              "lineno": 119,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Test round-trip conversion for a single file."
            },
            {
              "name": "_generate_test_summary",
              "lineno": 157,
              "args": [
                "self",
                "file_results"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Generate summary statistics from test results."
            },
            {
              "name": "_save_test_results",
              "lineno": 180,
              "args": [
                "self",
                "results"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Save test results to output directory."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/testing/simple_round_trip_test.py",
      "module": "gnn.testing.simple_round_trip_test",
      "functions": [
        {
          "name": "test_json_round_trip",
          "lineno": 42,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test JSON round-trip conversion with minimal dependencies."
        },
        {
          "name": "test_xml_round_trip",
          "lineno": 129,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test XML round-trip conversion with minimal dependencies."
        },
        {
          "name": "add_error",
          "lineno": 35,
          "args": [
            "self",
            "error"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "add_warning",
          "lineno": 39,
          "args": [
            "self",
            "warning"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "SimpleTestResult",
          "lineno": 28,
          "bases": [],
          "doc": "Simple test result for round-trip testing.",
          "methods": [
            {
              "name": "add_error",
              "lineno": 35,
              "args": [
                "self",
                "error"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "add_warning",
              "lineno": 39,
              "args": [
                "self",
                "warning"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/testing/test_comprehensive.py",
      "module": "gnn.testing.test_comprehensive",
      "functions": [
        {
          "name": "setUp",
          "lineno": 44,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Set up test environment."
        },
        {
          "name": "test_schema_loading",
          "lineno": 140,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test JSON schema loading."
        },
        {
          "name": "test_valid_gnn_validation",
          "lineno": 145,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test validation of valid GNN content."
        },
        {
          "name": "test_invalid_gnn_validation",
          "lineno": 153,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test validation of invalid GNN content."
        },
        {
          "name": "test_missing_required_sections",
          "lineno": 161,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test validation when required sections are missing."
        },
        {
          "name": "test_schema_validator_error_reporting",
          "lineno": 175,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test detailed error reporting from schema validator."
        },
        {
          "name": "_create_temp_file",
          "lineno": 183,
          "args": [
            "self",
            "content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Create temporary file with content."
        },
        {
          "name": "setUp",
          "lineno": 193,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Set up test environment."
        },
        {
          "name": "test_parse_content_basic",
          "lineno": 314,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test basic content parsing."
        },
        {
          "name": "test_parse_variables",
          "lineno": 323,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test variable parsing from StateSpaceBlock."
        },
        {
          "name": "test_parse_connections",
          "lineno": 340,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test connection parsing."
        },
        {
          "name": "test_parse_parameters",
          "lineno": 357,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test parameter parsing."
        },
        {
          "name": "test_parse_equations",
          "lineno": 368,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test equation parsing."
        },
        {
          "name": "test_parse_time_config",
          "lineno": 380,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test time configuration parsing."
        },
        {
          "name": "test_parse_ontology_mappings",
          "lineno": 388,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test ontology mapping parsing."
        },
        {
          "name": "test_parse_model_parameters",
          "lineno": 397,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test model parameter parsing."
        },
        {
          "name": "test_parse_signature",
          "lineno": 405,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test signature parsing."
        },
        {
          "name": "test_parse_file_not_found",
          "lineno": 413,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test parsing non-existent file."
        },
        {
          "name": "test_parse_empty_content",
          "lineno": 418,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test parsing empty content."
        },
        {
          "name": "setUp",
          "lineno": 430,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Set up test environment."
        },
        {
          "name": "test_example_files_exist",
          "lineno": 439,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test that example files exist."
        },
        {
          "name": "test_validate_all_examples",
          "lineno": 447,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test validation of all example files."
        },
        {
          "name": "test_parse_all_examples",
          "lineno": 469,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test parsing of all example files."
        },
        {
          "name": "test_example_consistency",
          "lineno": 495,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test consistency across example files."
        },
        {
          "name": "setUp",
          "lineno": 530,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Set up performance testing."
        },
        {
          "name": "_generate_large_gnn_content",
          "lineno": 541,
          "args": [
            "self",
            "num_variables"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate large GNN content for performance testing."
        },
        {
          "name": "test_parsing_performance",
          "lineno": 586,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test parsing performance with large content."
        },
        {
          "name": "test_validation_performance",
          "lineno": 607,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test validation performance."
        },
        {
          "name": "test_memory_usage_large_files",
          "lineno": 630,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test memory usage with very large files."
        },
        {
          "name": "setUp",
          "lineno": 656,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Set up error handling tests."
        },
        {
          "name": "test_unicode_content",
          "lineno": 664,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test handling of Unicode content."
        },
        {
          "name": "test_malformed_sections",
          "lineno": 705,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test handling of malformed sections."
        },
        {
          "name": "test_extremely_long_lines",
          "lineno": 750,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test handling of extremely long lines."
        },
        {
          "name": "test_empty_sections",
          "lineno": 784,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test handling of empty sections."
        },
        {
          "name": "test_parser_robustness",
          "lineno": 820,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test parser robustness with various edge cases."
        },
        {
          "name": "setUp",
          "lineno": 843,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Set up MCP integration tests."
        },
        {
          "name": "test_get_gnn_documentation",
          "lineno": 848,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test MCP documentation retrieval."
        },
        {
          "name": "test_validate_gnn_content_mcp",
          "lineno": 864,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test MCP validation functionality."
        },
        {
          "name": "test_mcp_error_handling",
          "lineno": 904,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test MCP error handling."
        }
      ],
      "classes": [
        {
          "name": "TestGNNSchemaValidation",
          "lineno": 41,
          "bases": [
            "unittest.TestCase"
          ],
          "doc": "Test schema validation functionality.",
          "methods": [
            {
              "name": "setUp",
              "lineno": 44,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Set up test environment."
            },
            {
              "name": "test_schema_loading",
              "lineno": 140,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test JSON schema loading."
            },
            {
              "name": "test_valid_gnn_validation",
              "lineno": 145,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test validation of valid GNN content."
            },
            {
              "name": "test_invalid_gnn_validation",
              "lineno": 153,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test validation of invalid GNN content."
            },
            {
              "name": "test_missing_required_sections",
              "lineno": 161,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test validation when required sections are missing."
            },
            {
              "name": "test_schema_validator_error_reporting",
              "lineno": 175,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test detailed error reporting from schema validator."
            },
            {
              "name": "_create_temp_file",
              "lineno": 183,
              "args": [
                "self",
                "content"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Create temporary file with content."
            }
          ]
        },
        {
          "name": "TestGNNParser",
          "lineno": 190,
          "bases": [
            "unittest.TestCase"
          ],
          "doc": "Test GNN parser functionality.",
          "methods": [
            {
              "name": "setUp",
              "lineno": 193,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Set up test environment."
            },
            {
              "name": "test_parse_content_basic",
              "lineno": 314,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test basic content parsing."
            },
            {
              "name": "test_parse_variables",
              "lineno": 323,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test variable parsing from StateSpaceBlock."
            },
            {
              "name": "test_parse_connections",
              "lineno": 340,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test connection parsing."
            },
            {
              "name": "test_parse_parameters",
              "lineno": 357,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test parameter parsing."
            },
            {
              "name": "test_parse_equations",
              "lineno": 368,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test equation parsing."
            },
            {
              "name": "test_parse_time_config",
              "lineno": 380,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test time configuration parsing."
            },
            {
              "name": "test_parse_ontology_mappings",
              "lineno": 388,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test ontology mapping parsing."
            },
            {
              "name": "test_parse_model_parameters",
              "lineno": 397,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test model parameter parsing."
            },
            {
              "name": "test_parse_signature",
              "lineno": 405,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test signature parsing."
            },
            {
              "name": "test_parse_file_not_found",
              "lineno": 413,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test parsing non-existent file."
            },
            {
              "name": "test_parse_empty_content",
              "lineno": 418,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test parsing empty content."
            }
          ]
        },
        {
          "name": "TestGNNExampleValidation",
          "lineno": 427,
          "bases": [
            "unittest.TestCase"
          ],
          "doc": "Test validation of all GNN example files.",
          "methods": [
            {
              "name": "setUp",
              "lineno": 430,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Set up test environment."
            },
            {
              "name": "test_example_files_exist",
              "lineno": 439,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test that example files exist."
            },
            {
              "name": "test_validate_all_examples",
              "lineno": 447,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test validation of all example files."
            },
            {
              "name": "test_parse_all_examples",
              "lineno": 469,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test parsing of all example files."
            },
            {
              "name": "test_example_consistency",
              "lineno": 495,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test consistency across example files."
            }
          ]
        },
        {
          "name": "TestGNNPerformance",
          "lineno": 527,
          "bases": [
            "unittest.TestCase"
          ],
          "doc": "Test GNN module performance and memory usage.",
          "methods": [
            {
              "name": "setUp",
              "lineno": 530,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Set up performance testing."
            },
            {
              "name": "_generate_large_gnn_content",
              "lineno": 541,
              "args": [
                "self",
                "num_variables"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate large GNN content for performance testing."
            },
            {
              "name": "test_parsing_performance",
              "lineno": 586,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test parsing performance with large content."
            },
            {
              "name": "test_validation_performance",
              "lineno": 607,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test validation performance."
            },
            {
              "name": "test_memory_usage_large_files",
              "lineno": 630,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test memory usage with very large files."
            }
          ]
        },
        {
          "name": "TestGNNErrorHandling",
          "lineno": 653,
          "bases": [
            "unittest.TestCase"
          ],
          "doc": "Test error handling and edge cases.",
          "methods": [
            {
              "name": "setUp",
              "lineno": 656,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Set up error handling tests."
            },
            {
              "name": "test_unicode_content",
              "lineno": 664,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test handling of Unicode content."
            },
            {
              "name": "test_malformed_sections",
              "lineno": 705,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test handling of malformed sections."
            },
            {
              "name": "test_extremely_long_lines",
              "lineno": 750,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test handling of extremely long lines."
            },
            {
              "name": "test_empty_sections",
              "lineno": 784,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test handling of empty sections."
            },
            {
              "name": "test_parser_robustness",
              "lineno": 820,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test parser robustness with various edge cases."
            }
          ]
        },
        {
          "name": "TestGNNMCPIntegration",
          "lineno": 840,
          "bases": [
            "unittest.TestCase"
          ],
          "doc": "Test MCP (Model Context Protocol) integration.",
          "methods": [
            {
              "name": "setUp",
              "lineno": 843,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Set up MCP integration tests."
            },
            {
              "name": "test_get_gnn_documentation",
              "lineno": 848,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test MCP documentation retrieval."
            },
            {
              "name": "test_validate_gnn_content_mcp",
              "lineno": 864,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test MCP validation functionality."
            },
            {
              "name": "test_mcp_error_handling",
              "lineno": 904,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test MCP error handling."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/testing/test_integration.py",
      "module": "gnn.testing.test_integration",
      "functions": [
        {
          "name": "setup_logging",
          "lineno": 24,
          "args": [
            "verbose"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Set up logging configuration."
        },
        {
          "name": "main",
          "lineno": 35,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main integration test function."
        }
      ],
      "classes": []
    },
    {
      "file": "src/gnn/testing/test_round_trip.py",
      "module": "gnn.testing.test_round_trip",
      "functions": [
        {
          "name": "add_error",
          "lineno": 187,
          "args": [
            "self",
            "error"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "add_warning",
          "lineno": 191,
          "args": [
            "self",
            "warning"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "add_difference",
          "lineno": 194,
          "args": [
            "self",
            "difference"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "add_result",
          "lineno": 204,
          "args": [
            "self",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "total_tests",
          "lineno": 208,
          "args": [
            "self"
          ],
          "returns": "int",
          "decorators": [
            "property"
          ],
          "doc": ""
        },
        {
          "name": "successful_tests",
          "lineno": 212,
          "args": [
            "self"
          ],
          "returns": "int",
          "decorators": [
            "property"
          ],
          "doc": ""
        },
        {
          "name": "failed_tests",
          "lineno": 216,
          "args": [
            "self"
          ],
          "returns": "int",
          "decorators": [
            "property"
          ],
          "doc": ""
        },
        {
          "name": "get_success_rate",
          "lineno": 219,
          "args": [
            "self"
          ],
          "returns": "float",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_format_summary",
          "lineno": 222,
          "args": [
            "self"
          ],
          "returns": "Dict[Any, Dict[str, int]]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 305,
          "args": [
            "self",
            "temp_dir"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the round-trip tester."
        },
        {
          "name": "_create_direct_markdown_parser",
          "lineno": 355,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Create a direct, dependency-free markdown parser for the reference file."
        },
        {
          "name": "_serialize_with_individual_serializer",
          "lineno": 589,
          "args": [
            "self",
            "model",
            "target_format"
          ],
          "returns": "Optional[str]",
          "decorators": [],
          "doc": "Serialize using individual serializer instances without full parsing system."
        },
        {
          "name": "_find_reference_file",
          "lineno": 637,
          "args": [
            "self"
          ],
          "returns": "Path",
          "decorators": [],
          "doc": "Find the reference file using configuration."
        },
        {
          "name": "_determine_test_formats",
          "lineno": 656,
          "args": [
            "self"
          ],
          "returns": "List[GNNFormat]",
          "decorators": [],
          "doc": "Determine which formats to test based on configuration."
        },
        {
          "name": "_print_format_groups",
          "lineno": 803,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Print format groups for organized display."
        },
        {
          "name": "_print_detailed_test_result",
          "lineno": 819,
          "args": [
            "self",
            "test_result",
            "fmt"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Print detailed test result information."
        },
        {
          "name": "run_comprehensive_tests",
          "lineno": 853,
          "args": [
            "self"
          ],
          "returns": "ComprehensiveTestReport",
          "decorators": [],
          "doc": "Run comprehensive round-trip tests for all supported formats."
        },
        {
          "name": "_convert_parsed_gnn_to_parse_result",
          "lineno": 1088,
          "args": [
            "self",
            "parsed_gnn"
          ],
          "returns": "ParseResult",
          "decorators": [],
          "doc": "Convert ParsedGNN to ParseResult for compatibility."
        },
        {
          "name": "_test_round_trip",
          "lineno": 1102,
          "args": [
            "self",
            "reference_model",
            "target_format"
          ],
          "returns": "RoundTripResult",
          "decorators": [],
          "doc": "Test round-trip conversion for a specific format."
        },
        {
          "name": "_compare_models",
          "lineno": 1303,
          "args": [
            "self",
            "original",
            "converted",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Compare two models for semantic equivalence."
        },
        {
          "name": "_compare_variables",
          "lineno": 1333,
          "args": [
            "self",
            "orig_vars",
            "conv_vars",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Compare variable lists."
        },
        {
          "name": "_compare_connections",
          "lineno": 1371,
          "args": [
            "self",
            "orig_conns",
            "conv_conns",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Compare connection lists."
        },
        {
          "name": "_compare_parameters",
          "lineno": 1403,
          "args": [
            "self",
            "orig_params",
            "conv_params",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Compare parameter lists."
        },
        {
          "name": "_compare_equations",
          "lineno": 1425,
          "args": [
            "self",
            "orig_eqs",
            "conv_eqs",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Compare equation lists."
        },
        {
          "name": "_compare_time_specification",
          "lineno": 1430,
          "args": [
            "self",
            "orig_time",
            "conv_time",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Compare time specifications."
        },
        {
          "name": "_compare_ontology_mappings",
          "lineno": 1439,
          "args": [
            "self",
            "orig_mappings",
            "conv_mappings",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Compare ontology mappings."
        },
        {
          "name": "_test_cross_format_consistency",
          "lineno": 1447,
          "args": [
            "self",
            "reference_model",
            "report"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test cross-format consistency validation."
        },
        {
          "name": "_compute_model_checksum",
          "lineno": 1508,
          "args": [
            "self",
            "model"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Compute a semantic checksum for a model."
        },
        {
          "name": "_get_file_extension",
          "lineno": 1533,
          "args": [
            "self",
            "format"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get file extension for a format."
        },
        {
          "name": "generate_report",
          "lineno": 1557,
          "args": [
            "self",
            "report",
            "output_file"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a comprehensive test report."
        },
        {
          "name": "setUp",
          "lineno": 1644,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Set up test environment."
        },
        {
          "name": "test_reference_file_exists",
          "lineno": 1651,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test that the reference file exists and is readable."
        },
        {
          "name": "test_reference_file_validation",
          "lineno": 1656,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test that the reference file validates correctly."
        },
        {
          "name": "test_comprehensive_round_trip",
          "lineno": 1665,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test comprehensive round-trip conversion."
        },
        {
          "name": "test_specific_format_round_trip",
          "lineno": 1687,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Test round-trip for a specific format (JSON)."
        },
        {
          "name": "validate_cross_format_consistency",
          "lineno": 292,
          "args": [
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_file",
          "lineno": 363,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Parse a GNN markdown file directly."
        },
        {
          "name": "parse_content",
          "lineno": 370,
          "args": [
            "self",
            "content"
          ],
          "returns": "GNNInternalRepresentation",
          "decorators": [],
          "doc": "Parse GNN markdown content."
        },
        {
          "name": "_extract_sections",
          "lineno": 418,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, str]",
          "decorators": [],
          "doc": "Extract sections from GNN markdown content."
        },
        {
          "name": "_parse_variables",
          "lineno": 441,
          "args": [
            "self",
            "content"
          ],
          "returns": "List[Any]",
          "decorators": [],
          "doc": "Parse variables from StateSpaceBlock content."
        },
        {
          "name": "_parse_connections",
          "lineno": 503,
          "args": [
            "self",
            "content"
          ],
          "returns": "List[Any]",
          "decorators": [],
          "doc": "Parse connections from Connections content."
        },
        {
          "name": "_parse_parameters",
          "lineno": 527,
          "args": [
            "self",
            "content"
          ],
          "returns": "List[Any]",
          "decorators": [],
          "doc": "Parse parameters from InitialParameterization content."
        },
        {
          "name": "_parse_time_spec",
          "lineno": 549,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, str]",
          "decorators": [],
          "doc": "Parse time specification."
        },
        {
          "name": "_parse_ontology",
          "lineno": 566,
          "args": [
            "self",
            "content"
          ],
          "returns": "List[Any]",
          "decorators": [],
          "doc": "Parse ontology mappings."
        },
        {
          "name": "validate_cross_format_consistency",
          "lineno": 289,
          "args": [
            "self",
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "RoundTripResult",
          "lineno": 173,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "add_error",
              "lineno": 187,
              "args": [
                "self",
                "error"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "add_warning",
              "lineno": 191,
              "args": [
                "self",
                "warning"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "add_difference",
              "lineno": 194,
              "args": [
                "self",
                "difference"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "ComprehensiveTestReport",
          "lineno": 198,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "add_result",
              "lineno": 204,
              "args": [
                "self",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "total_tests",
              "lineno": 208,
              "args": [
                "self"
              ],
              "returns": "int",
              "decorators": [
                "property"
              ],
              "doc": ""
            },
            {
              "name": "successful_tests",
              "lineno": 212,
              "args": [
                "self"
              ],
              "returns": "int",
              "decorators": [
                "property"
              ],
              "doc": ""
            },
            {
              "name": "failed_tests",
              "lineno": 216,
              "args": [
                "self"
              ],
              "returns": "int",
              "decorators": [
                "property"
              ],
              "doc": ""
            },
            {
              "name": "get_success_rate",
              "lineno": 219,
              "args": [
                "self"
              ],
              "returns": "float",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_format_summary",
              "lineno": 222,
              "args": [
                "self"
              ],
              "returns": "Dict[Any, Dict[str, int]]",
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "GNNRoundTripTester",
          "lineno": 302,
          "bases": [],
          "doc": "Comprehensive round-trip testing system for GNN formats.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 305,
              "args": [
                "self",
                "temp_dir"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the round-trip tester."
            },
            {
              "name": "_create_direct_markdown_parser",
              "lineno": 355,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Create a direct, dependency-free markdown parser for the reference file."
            },
            {
              "name": "_serialize_with_individual_serializer",
              "lineno": 589,
              "args": [
                "self",
                "model",
                "target_format"
              ],
              "returns": "Optional[str]",
              "decorators": [],
              "doc": "Serialize using individual serializer instances without full parsing system."
            },
            {
              "name": "_find_reference_file",
              "lineno": 637,
              "args": [
                "self"
              ],
              "returns": "Path",
              "decorators": [],
              "doc": "Find the reference file using configuration."
            },
            {
              "name": "_determine_test_formats",
              "lineno": 656,
              "args": [
                "self"
              ],
              "returns": "List[GNNFormat]",
              "decorators": [],
              "doc": "Determine which formats to test based on configuration."
            },
            {
              "name": "_print_format_groups",
              "lineno": 803,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Print format groups for organized display."
            },
            {
              "name": "_print_detailed_test_result",
              "lineno": 819,
              "args": [
                "self",
                "test_result",
                "fmt"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Print detailed test result information."
            },
            {
              "name": "run_comprehensive_tests",
              "lineno": 853,
              "args": [
                "self"
              ],
              "returns": "ComprehensiveTestReport",
              "decorators": [],
              "doc": "Run comprehensive round-trip tests for all supported formats."
            },
            {
              "name": "_convert_parsed_gnn_to_parse_result",
              "lineno": 1088,
              "args": [
                "self",
                "parsed_gnn"
              ],
              "returns": "ParseResult",
              "decorators": [],
              "doc": "Convert ParsedGNN to ParseResult for compatibility."
            },
            {
              "name": "_test_round_trip",
              "lineno": 1102,
              "args": [
                "self",
                "reference_model",
                "target_format"
              ],
              "returns": "RoundTripResult",
              "decorators": [],
              "doc": "Test round-trip conversion for a specific format."
            },
            {
              "name": "_compare_models",
              "lineno": 1303,
              "args": [
                "self",
                "original",
                "converted",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Compare two models for semantic equivalence."
            },
            {
              "name": "_compare_variables",
              "lineno": 1333,
              "args": [
                "self",
                "orig_vars",
                "conv_vars",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Compare variable lists."
            },
            {
              "name": "_compare_connections",
              "lineno": 1371,
              "args": [
                "self",
                "orig_conns",
                "conv_conns",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Compare connection lists."
            },
            {
              "name": "_compare_parameters",
              "lineno": 1403,
              "args": [
                "self",
                "orig_params",
                "conv_params",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Compare parameter lists."
            },
            {
              "name": "_compare_equations",
              "lineno": 1425,
              "args": [
                "self",
                "orig_eqs",
                "conv_eqs",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Compare equation lists."
            },
            {
              "name": "_compare_time_specification",
              "lineno": 1430,
              "args": [
                "self",
                "orig_time",
                "conv_time",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Compare time specifications."
            },
            {
              "name": "_compare_ontology_mappings",
              "lineno": 1439,
              "args": [
                "self",
                "orig_mappings",
                "conv_mappings",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Compare ontology mappings."
            },
            {
              "name": "_test_cross_format_consistency",
              "lineno": 1447,
              "args": [
                "self",
                "reference_model",
                "report"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test cross-format consistency validation."
            },
            {
              "name": "_compute_model_checksum",
              "lineno": 1508,
              "args": [
                "self",
                "model"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Compute a semantic checksum for a model."
            },
            {
              "name": "_get_file_extension",
              "lineno": 1533,
              "args": [
                "self",
                "format"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Get file extension for a format."
            },
            {
              "name": "generate_report",
              "lineno": 1557,
              "args": [
                "self",
                "report",
                "output_file"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate a comprehensive test report."
            }
          ]
        },
        {
          "name": "TestGNNRoundTrip",
          "lineno": 1641,
          "bases": [
            "unittest.TestCase"
          ],
          "doc": "Unit tests for the round-trip testing system.",
          "methods": [
            {
              "name": "setUp",
              "lineno": 1644,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Set up test environment."
            },
            {
              "name": "test_reference_file_exists",
              "lineno": 1651,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test that the reference file exists and is readable."
            },
            {
              "name": "test_reference_file_validation",
              "lineno": 1656,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test that the reference file validates correctly."
            },
            {
              "name": "test_comprehensive_round_trip",
              "lineno": 1665,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test comprehensive round-trip conversion."
            },
            {
              "name": "test_specific_format_round_trip",
              "lineno": 1687,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Test round-trip for a specific format (JSON)."
            }
          ]
        },
        {
          "name": "DirectMarkdownParser",
          "lineno": 360,
          "bases": [],
          "doc": "A simple, robust markdown parser that doesn't rely on complex validation.",
          "methods": [
            {
              "name": "parse_file",
              "lineno": 363,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Parse a GNN markdown file directly."
            },
            {
              "name": "parse_content",
              "lineno": 370,
              "args": [
                "self",
                "content"
              ],
              "returns": "GNNInternalRepresentation",
              "decorators": [],
              "doc": "Parse GNN markdown content."
            },
            {
              "name": "_extract_sections",
              "lineno": 418,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, str]",
              "decorators": [],
              "doc": "Extract sections from GNN markdown content."
            },
            {
              "name": "_parse_variables",
              "lineno": 441,
              "args": [
                "self",
                "content"
              ],
              "returns": "List[Any]",
              "decorators": [],
              "doc": "Parse variables from StateSpaceBlock content."
            },
            {
              "name": "_parse_connections",
              "lineno": 503,
              "args": [
                "self",
                "content"
              ],
              "returns": "List[Any]",
              "decorators": [],
              "doc": "Parse connections from Connections content."
            },
            {
              "name": "_parse_parameters",
              "lineno": 527,
              "args": [
                "self",
                "content"
              ],
              "returns": "List[Any]",
              "decorators": [],
              "doc": "Parse parameters from InitialParameterization content."
            },
            {
              "name": "_parse_time_spec",
              "lineno": 549,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, str]",
              "decorators": [],
              "doc": "Parse time specification."
            },
            {
              "name": "_parse_ontology",
              "lineno": 566,
              "args": [
                "self",
                "content"
              ],
              "returns": "List[Any]",
              "decorators": [],
              "doc": "Parse ontology mappings."
            }
          ]
        },
        {
          "name": "CrossFormatValidator",
          "lineno": 288,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "validate_cross_format_consistency",
              "lineno": 289,
              "args": [
                "self",
                "content"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/testing/test_xml_parser_only.py",
      "module": "gnn.testing.test_xml_parser_only",
      "functions": [
        {
          "name": "test_xml_parser_only",
          "lineno": 15,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test XML parser with minimal embedded data."
        }
      ],
      "classes": []
    },
    {
      "file": "src/gnn/testing.py",
      "module": "gnn.testing",
      "functions": [
        {
          "name": "__init__",
          "lineno": 37,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "configure",
          "lineno": 44,
          "args": [
            "self",
            "test_subset",
            "reference_file",
            "output_dir"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Configure testing parameters."
        },
        {
          "name": "_initialize_tester",
          "lineno": 55,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize round-trip testing components."
        },
        {
          "name": "test",
          "lineno": 65,
          "args": [
            "self",
            "files"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Run round-trip tests on provided files.\n\nArgs:\n    files: List of file paths to test\n    \nReturns:\n    Dictionary with test results and metadata"
        },
        {
          "name": "_test_file_round_trip",
          "lineno": 119,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Test round-trip conversion for a single file."
        },
        {
          "name": "_generate_test_summary",
          "lineno": 157,
          "args": [
            "self",
            "file_results"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate summary of test results."
        },
        {
          "name": "_save_test_results",
          "lineno": 205,
          "args": [
            "self",
            "results"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Save test results to output directory."
        },
        {
          "name": "_write_summary_report",
          "lineno": 228,
          "args": [
            "self",
            "file",
            "results"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Write human-readable summary report."
        },
        {
          "name": "__init__",
          "lineno": 261,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "configure",
          "lineno": 266,
          "args": [
            "self",
            "output_dir"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Configure validation parameters."
        },
        {
          "name": "_initialize_validator",
          "lineno": 273,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize cross-format validation components."
        },
        {
          "name": "validate",
          "lineno": 283,
          "args": [
            "self",
            "files"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Run cross-format validation on provided files.\n\nArgs:\n    files: List of file paths to validate\n    \nReturns:\n    Dictionary with validation results and metadata"
        },
        {
          "name": "_validate_file_cross_format",
          "lineno": 334,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate cross-format consistency for a single file."
        },
        {
          "name": "_generate_validation_summary",
          "lineno": 360,
          "args": [
            "self",
            "file_results"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate summary of validation results."
        },
        {
          "name": "_save_validation_results",
          "lineno": 397,
          "args": [
            "self",
            "results"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Save validation results to output directory."
        }
      ],
      "classes": [
        {
          "name": "TestResult",
          "lineno": 19,
          "bases": [],
          "doc": "Result of a testing operation.",
          "methods": []
        },
        {
          "name": "RoundTripTestStrategy",
          "lineno": 29,
          "bases": [],
          "doc": "Round-trip testing strategy for GNN models.\n\nTests semantic preservation across format conversions\nand validates model consistency.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 37,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "configure",
              "lineno": 44,
              "args": [
                "self",
                "test_subset",
                "reference_file",
                "output_dir"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Configure testing parameters."
            },
            {
              "name": "_initialize_tester",
              "lineno": 55,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize round-trip testing components."
            },
            {
              "name": "test",
              "lineno": 65,
              "args": [
                "self",
                "files"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Run round-trip tests on provided files.\n\nArgs:\n    files: List of file paths to test\n    \nReturns:\n    Dictionary with test results and metadata"
            },
            {
              "name": "_test_file_round_trip",
              "lineno": 119,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Test round-trip conversion for a single file."
            },
            {
              "name": "_generate_test_summary",
              "lineno": 157,
              "args": [
                "self",
                "file_results"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Generate summary of test results."
            },
            {
              "name": "_save_test_results",
              "lineno": 205,
              "args": [
                "self",
                "results"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Save test results to output directory."
            },
            {
              "name": "_write_summary_report",
              "lineno": 228,
              "args": [
                "self",
                "file",
                "results"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Write human-readable summary report."
            }
          ]
        },
        {
          "name": "CrossFormatValidationStrategy",
          "lineno": 254,
          "bases": [],
          "doc": "Cross-format validation strategy for GNN models.\n\nValidates consistency across different format representations.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 261,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "configure",
              "lineno": 266,
              "args": [
                "self",
                "output_dir"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Configure validation parameters."
            },
            {
              "name": "_initialize_validator",
              "lineno": 273,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize cross-format validation components."
            },
            {
              "name": "validate",
              "lineno": 283,
              "args": [
                "self",
                "files"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Run cross-format validation on provided files.\n\nArgs:\n    files: List of file paths to validate\n    \nReturns:\n    Dictionary with validation results and metadata"
            },
            {
              "name": "_validate_file_cross_format",
              "lineno": 334,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Validate cross-format consistency for a single file."
            },
            {
              "name": "_generate_validation_summary",
              "lineno": 360,
              "args": [
                "self",
                "file_results"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Generate summary of validation results."
            },
            {
              "name": "_save_validation_results",
              "lineno": 397,
              "args": [
                "self",
                "results"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Save validation results to output directory."
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/type_systems/__init__.py",
      "module": "gnn.type_systems.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/gnn/types.py",
      "module": "gnn.types",
      "functions": [
        {
          "name": "__init__",
          "lineno": 18,
          "args": [
            "self",
            "message",
            "line",
            "column",
            "format_context"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "format_message",
          "lineno": 24,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "add_round_trip_result",
          "lineno": 49,
          "args": [
            "self",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_round_trip_success_rate",
          "lineno": 55,
          "args": [
            "self"
          ],
          "returns": "float",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "add_error",
          "lineno": 138,
          "args": [
            "self",
            "error"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "add_warning",
          "lineno": 142,
          "args": [
            "self",
            "warning"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "add_difference",
          "lineno": 171,
          "args": [
            "self",
            "diff"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "add_warning",
          "lineno": 175,
          "args": [
            "self",
            "warning"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "add_error",
          "lineno": 178,
          "args": [
            "self",
            "error"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "add_result",
          "lineno": 195,
          "args": [
            "self",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_success_rate",
          "lineno": 206,
          "args": [
            "self"
          ],
          "returns": "float",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_format_summary",
          "lineno": 209,
          "args": [
            "self"
          ],
          "returns": "Dict[GNNFormat, Dict[str, int]]",
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "ValidationLevel",
          "lineno": 10,
          "bases": [
            "Enum"
          ],
          "doc": "",
          "methods": []
        },
        {
          "name": "GNNSyntaxError",
          "lineno": 17,
          "bases": [
            "Exception"
          ],
          "doc": "",
          "methods": [
            {
              "name": "__init__",
              "lineno": 18,
              "args": [
                "self",
                "message",
                "line",
                "column",
                "format_context"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "format_message",
              "lineno": 24,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "ValidationResult",
          "lineno": 36,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "add_round_trip_result",
              "lineno": 49,
              "args": [
                "self",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_round_trip_success_rate",
              "lineno": 55,
              "args": [
                "self"
              ],
              "returns": "float",
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "GNNVariable",
          "lineno": 62,
          "bases": [],
          "doc": "",
          "methods": []
        },
        {
          "name": "GNNConnection",
          "lineno": 73,
          "bases": [],
          "doc": "",
          "methods": []
        },
        {
          "name": "ParsedGNN",
          "lineno": 84,
          "bases": [],
          "doc": "",
          "methods": []
        },
        {
          "name": "GNNFormat",
          "lineno": 105,
          "bases": [
            "Enum"
          ],
          "doc": "",
          "methods": []
        },
        {
          "name": "ParseResult",
          "lineno": 131,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "add_error",
              "lineno": 138,
              "args": [
                "self",
                "error"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "add_warning",
              "lineno": 142,
              "args": [
                "self",
                "warning"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "GNNInternalRepresentation",
          "lineno": 146,
          "bases": [],
          "doc": "",
          "methods": []
        },
        {
          "name": "RoundTripResult",
          "lineno": 157,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "add_difference",
              "lineno": 171,
              "args": [
                "self",
                "diff"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "add_warning",
              "lineno": 175,
              "args": [
                "self",
                "warning"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "add_error",
              "lineno": 178,
              "args": [
                "self",
                "error"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "ComprehensiveTestReport",
          "lineno": 183,
          "bases": [],
          "doc": "Complete test report for all round-trip tests.",
          "methods": [
            {
              "name": "add_result",
              "lineno": 195,
              "args": [
                "self",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_success_rate",
              "lineno": 206,
              "args": [
                "self"
              ],
              "returns": "float",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_format_summary",
              "lineno": 209,
              "args": [
                "self"
              ],
              "returns": "Dict[GNNFormat, Dict[str, int]]",
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/gnn/validation.py",
      "module": "gnn.validation",
      "functions": [
        {
          "name": "__init__",
          "lineno": 29,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "configure",
          "lineno": 35,
          "args": [
            "self",
            "validation_level",
            "enable_strict_checking"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Configure validation parameters."
        },
        {
          "name": "_initialize_validators",
          "lineno": 46,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize validation components."
        },
        {
          "name": "validate_files",
          "lineno": 60,
          "args": [
            "self",
            "files"
          ],
          "returns": "Dict[Path, ValidationResult]",
          "decorators": [],
          "doc": "Validate multiple files based on configured level.\n\nArgs:\n    files: List of file paths to validate\n    \nReturns:\n    Dictionary mapping file paths to validation results"
        },
        {
          "name": "validate_file",
          "lineno": 102,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ValidationResult",
          "decorators": [],
          "doc": "Validate a single file based on configured level.\n\nArgs:\n    file_path: Path to file to validate\n    \nReturns:\n    ValidationResult with comprehensive validation data"
        },
        {
          "name": "_validate_basic",
          "lineno": 136,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ValidationResult",
          "decorators": [],
          "doc": "Basic validation - file accessibility and format detection."
        },
        {
          "name": "_validate_standard",
          "lineno": 168,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ValidationResult",
          "decorators": [],
          "doc": "Standard validation - structure and basic semantics."
        },
        {
          "name": "_validate_strict",
          "lineno": 179,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ValidationResult",
          "decorators": [],
          "doc": "Strict validation - enhanced semantics and consistency."
        },
        {
          "name": "_validate_research",
          "lineno": 189,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ValidationResult",
          "decorators": [],
          "doc": "Research-grade validation - comprehensive analysis."
        },
        {
          "name": "_validate_round_trip",
          "lineno": 199,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "ValidationResult",
          "decorators": [],
          "doc": "Round-trip validation - semantic preservation testing."
        },
        {
          "name": "_detect_file_format",
          "lineno": 219,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Detect file format from extension and content."
        },
        {
          "name": "_validate_structured_format_basic",
          "lineno": 236,
          "args": [
            "self",
            "file_path",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Basic validation for structured formats (JSON, XML, YAML)."
        },
        {
          "name": "_validate_text_format_basic",
          "lineno": 264,
          "args": [
            "self",
            "file_path",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Basic validation for text formats (Markdown, GNN)."
        },
        {
          "name": "get_validation_summary",
          "lineno": 293,
          "args": [
            "self",
            "results"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get comprehensive validation summary."
        }
      ],
      "classes": [
        {
          "name": "ValidationStrategy",
          "lineno": 21,
          "bases": [],
          "doc": "Comprehensive validation with multiple levels and strategies.\n\nSupports validation levels from basic syntax checking to\nresearch-grade semantic validation with round-trip testing.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 29,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "configure",
              "lineno": 35,
              "args": [
                "self",
                "validation_level",
                "enable_strict_checking"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Configure validation parameters."
            },
            {
              "name": "_initialize_validators",
              "lineno": 46,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize validation components."
            },
            {
              "name": "validate_files",
              "lineno": 60,
              "args": [
                "self",
                "files"
              ],
              "returns": "Dict[Path, ValidationResult]",
              "decorators": [],
              "doc": "Validate multiple files based on configured level.\n\nArgs:\n    files: List of file paths to validate\n    \nReturns:\n    Dictionary mapping file paths to validation results"
            },
            {
              "name": "validate_file",
              "lineno": 102,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ValidationResult",
              "decorators": [],
              "doc": "Validate a single file based on configured level.\n\nArgs:\n    file_path: Path to file to validate\n    \nReturns:\n    ValidationResult with comprehensive validation data"
            },
            {
              "name": "_validate_basic",
              "lineno": 136,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ValidationResult",
              "decorators": [],
              "doc": "Basic validation - file accessibility and format detection."
            },
            {
              "name": "_validate_standard",
              "lineno": 168,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ValidationResult",
              "decorators": [],
              "doc": "Standard validation - structure and basic semantics."
            },
            {
              "name": "_validate_strict",
              "lineno": 179,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ValidationResult",
              "decorators": [],
              "doc": "Strict validation - enhanced semantics and consistency."
            },
            {
              "name": "_validate_research",
              "lineno": 189,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ValidationResult",
              "decorators": [],
              "doc": "Research-grade validation - comprehensive analysis."
            },
            {
              "name": "_validate_round_trip",
              "lineno": 199,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "ValidationResult",
              "decorators": [],
              "doc": "Round-trip validation - semantic preservation testing."
            },
            {
              "name": "_detect_file_format",
              "lineno": 219,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Detect file format from extension and content."
            },
            {
              "name": "_validate_structured_format_basic",
              "lineno": 236,
              "args": [
                "self",
                "file_path",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Basic validation for structured formats (JSON, XML, YAML)."
            },
            {
              "name": "_validate_text_format_basic",
              "lineno": 264,
              "args": [
                "self",
                "file_path",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Basic validation for text formats (Markdown, GNN)."
            },
            {
              "name": "get_validation_summary",
              "lineno": 293,
              "args": [
                "self",
                "results"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Get comprehensive validation summary."
            }
          ]
        }
      ]
    },
    {
      "file": "src/integration/__init__.py",
      "module": "integration.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/integration/mcp.py",
      "error": "parse_error: invalid syntax (<unknown>, line 15)"
    },
    {
      "file": "src/integration/processor.py",
      "module": "integration.processor",
      "functions": [
        {
          "name": "process_integration",
          "lineno": 21,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process integration for GNN files.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Directory to save results\n    verbose: Enable verbose output\n    **kwargs: Additional arguments\n    \nReturns:\n    True if processing successful, False otherwise"
        }
      ],
      "classes": []
    },
    {
      "file": "src/llm/__init__.py",
      "module": "llm.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/llm/analyzer.py",
      "module": "llm.analyzer",
      "functions": [
        {
          "name": "analyze_gnn_file_with_llm",
          "lineno": 17,
          "args": [
            "file_path",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze a GNN file using LLM-enhanced techniques.\n\nArgs:\n    file_path: Path to the GNN file\n    verbose: Enable verbose output\n    \nReturns:\n    Dictionary containing analysis results"
        },
        {
          "name": "extract_variables",
          "lineno": 76,
          "args": [
            "content"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract variables from GNN content."
        },
        {
          "name": "extract_connections",
          "lineno": 98,
          "args": [
            "content"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract connections from GNN content."
        },
        {
          "name": "extract_sections",
          "lineno": 121,
          "args": [
            "content"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract sections from GNN content."
        },
        {
          "name": "perform_semantic_analysis",
          "lineno": 141,
          "args": [
            "content",
            "variables",
            "connections"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Perform semantic analysis of GNN content."
        },
        {
          "name": "calculate_complexity_metrics",
          "lineno": 168,
          "args": [
            "variables",
            "connections"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Calculate complexity metrics for the GNN model."
        },
        {
          "name": "identify_patterns",
          "lineno": 180,
          "args": [
            "content",
            "variables",
            "connections"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Identify patterns and anti-patterns in GNN content."
        }
      ],
      "classes": []
    },
    {
      "file": "src/llm/demo_enhanced_llm.py",
      "module": "llm.demo_enhanced_llm",
      "functions": [
        {
          "name": "demo_backward_compatibility",
          "lineno": 129,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Demonstrate that existing code still works with enhanced system."
        },
        {
          "name": "demo_enhanced_capabilities",
          "lineno": 152,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Demonstrate new capabilities enabled by multi-provider system."
        },
        {
          "name": "demo_processor_modes",
          "lineno": 173,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Demonstrate different processor modes and configurations."
        },
        {
          "name": "demo_real_world_usage",
          "lineno": 203,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Demonstrate real-world usage scenarios."
        },
        {
          "name": "demo_error_handling",
          "lineno": 256,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Demonstrate error handling and fallback mechanisms."
        },
        {
          "name": "main",
          "lineno": 284,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Run all demonstration scenarios."
        }
      ],
      "classes": []
    },
    {
      "file": "src/llm/generator.py",
      "module": "llm.generator",
      "functions": [
        {
          "name": "generate_model_insights",
          "lineno": 9,
          "args": [
            "file_analysis"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate insights about the GNN model."
        },
        {
          "name": "generate_code_suggestions",
          "lineno": 51,
          "args": [
            "file_analysis"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate code suggestions for the GNN model."
        },
        {
          "name": "generate_documentation",
          "lineno": 90,
          "args": [
            "file_analysis"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate documentation for the GNN model."
        },
        {
          "name": "generate_llm_summary",
          "lineno": 162,
          "args": [
            "results"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a summary report of LLM processing results."
        }
      ],
      "classes": []
    },
    {
      "file": "src/llm/llm_operations.py",
      "module": "llm.llm_operations",
      "functions": [
        {
          "name": "construct_prompt",
          "lineno": 442,
          "args": [
            "content_parts",
            "task_description"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convenience function for prompt construction."
        },
        {
          "name": "get_llm_response",
          "lineno": 446,
          "args": [
            "prompt",
            "model",
            "max_tokens"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convenience function for getting LLM response."
        },
        {
          "name": "load_api_key",
          "lineno": 450,
          "args": [],
          "returns": "Optional[str]",
          "decorators": [],
          "doc": "Load API key from environment or return None.\n\nReturns:\n    API key string or None if not available"
        },
        {
          "name": "summarize_gnn",
          "lineno": 464,
          "args": [
            "gnn_content",
            "max_length"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convenience function for GNN summarization."
        },
        {
          "name": "analyze_gnn_structure",
          "lineno": 468,
          "args": [
            "gnn_content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convenience function for GNN structure analysis."
        },
        {
          "name": "generate_questions",
          "lineno": 472,
          "args": [
            "gnn_content",
            "num_questions"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Convenience function for question generation."
        },
        {
          "name": "enhance_gnn",
          "lineno": 476,
          "args": [
            "gnn_content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convenience function for GNN enhancement."
        },
        {
          "name": "validate_gnn",
          "lineno": 480,
          "args": [
            "gnn_content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convenience function for GNN validation."
        },
        {
          "name": "__init__",
          "lineno": 43,
          "args": [
            "self",
            "api_key",
            "use_legacy"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize LLM operations.\n\nArgs:\n    api_key: OpenAI API key (if None, will try to get from env)\n    use_legacy: If True, use legacy OpenAI-only implementation"
        },
        {
          "name": "construct_prompt",
          "lineno": 104,
          "args": [
            "self",
            "content_parts",
            "task_description"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Construct a well-formatted prompt for LLM processing.\n\nArgs:\n    content_parts: List of content pieces to include\n    task_description: Description of the task to perform\n    \nReturns:\n    Formatted prompt string"
        },
        {
          "name": "get_llm_response",
          "lineno": 137,
          "args": [
            "self",
            "prompt",
            "model",
            "max_tokens"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get response from LLM for given prompt.\n\nArgs:\n    prompt: Input prompt for the LLM\n    model: Model to use for generation\n    max_tokens: Maximum tokens in response\n    \nReturns:\n    LLM response or error message"
        },
        {
          "name": "_get_legacy_response",
          "lineno": 179,
          "args": [
            "self",
            "prompt",
            "model",
            "max_tokens"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Legacy OpenAI-only response method."
        },
        {
          "name": "summarize_gnn",
          "lineno": 201,
          "args": [
            "self",
            "gnn_content",
            "max_length"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a summary of GNN content.\n\nArgs:\n    gnn_content: The GNN file content to summarize\n    max_length: Maximum length of summary\n    \nReturns:\n    Summary text"
        },
        {
          "name": "analyze_gnn_structure",
          "lineno": 238,
          "args": [
            "self",
            "gnn_content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Analyze the structure and components of a GNN model.\n\nArgs:\n    gnn_content: The GNN file content to analyze\n    \nReturns:\n    Structured analysis"
        },
        {
          "name": "generate_questions",
          "lineno": 280,
          "args": [
            "self",
            "gnn_content",
            "num_questions"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Generate relevant questions about a GNN model.\n\nArgs:\n    gnn_content: The GNN file content\n    num_questions: Number of questions to generate\n    \nReturns:\n    List of generated questions"
        },
        {
          "name": "_extract_questions_from_response",
          "lineno": 327,
          "args": [
            "self",
            "response",
            "num_questions"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Extract questions from LLM response."
        },
        {
          "name": "enhance_gnn",
          "lineno": 343,
          "args": [
            "self",
            "gnn_content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate enhancement suggestions for a GNN model.\n\nArgs:\n    gnn_content: The GNN file content to enhance\n    \nReturns:\n    Enhancement suggestions"
        },
        {
          "name": "validate_gnn",
          "lineno": 376,
          "args": [
            "self",
            "gnn_content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Validate a GNN model for correctness and completeness.\n\nArgs:\n    gnn_content: The GNN file content to validate\n    \nReturns:\n    Validation results"
        },
        {
          "name": "get_available_providers",
          "lineno": 409,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get list of available LLM providers."
        },
        {
          "name": "get_processor_info",
          "lineno": 419,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get information about the LLM processor."
        }
      ],
      "classes": [
        {
          "name": "LLMOperations",
          "lineno": 35,
          "bases": [],
          "doc": "Main class for LLM operations on GNN content.\n\nThis class now uses the multi-provider LLM system internally but maintains\nthe same interface for backward compatibility.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 43,
              "args": [
                "self",
                "api_key",
                "use_legacy"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize LLM operations.\n\nArgs:\n    api_key: OpenAI API key (if None, will try to get from env)\n    use_legacy: If True, use legacy OpenAI-only implementation"
            },
            {
              "name": "construct_prompt",
              "lineno": 104,
              "args": [
                "self",
                "content_parts",
                "task_description"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Construct a well-formatted prompt for LLM processing.\n\nArgs:\n    content_parts: List of content pieces to include\n    task_description: Description of the task to perform\n    \nReturns:\n    Formatted prompt string"
            },
            {
              "name": "get_llm_response",
              "lineno": 137,
              "args": [
                "self",
                "prompt",
                "model",
                "max_tokens"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Get response from LLM for given prompt.\n\nArgs:\n    prompt: Input prompt for the LLM\n    model: Model to use for generation\n    max_tokens: Maximum tokens in response\n    \nReturns:\n    LLM response or error message"
            },
            {
              "name": "_get_legacy_response",
              "lineno": 179,
              "args": [
                "self",
                "prompt",
                "model",
                "max_tokens"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Legacy OpenAI-only response method."
            },
            {
              "name": "summarize_gnn",
              "lineno": 201,
              "args": [
                "self",
                "gnn_content",
                "max_length"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate a summary of GNN content.\n\nArgs:\n    gnn_content: The GNN file content to summarize\n    max_length: Maximum length of summary\n    \nReturns:\n    Summary text"
            },
            {
              "name": "analyze_gnn_structure",
              "lineno": 238,
              "args": [
                "self",
                "gnn_content"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Analyze the structure and components of a GNN model.\n\nArgs:\n    gnn_content: The GNN file content to analyze\n    \nReturns:\n    Structured analysis"
            },
            {
              "name": "generate_questions",
              "lineno": 280,
              "args": [
                "self",
                "gnn_content",
                "num_questions"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Generate relevant questions about a GNN model.\n\nArgs:\n    gnn_content: The GNN file content\n    num_questions: Number of questions to generate\n    \nReturns:\n    List of generated questions"
            },
            {
              "name": "_extract_questions_from_response",
              "lineno": 327,
              "args": [
                "self",
                "response",
                "num_questions"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Extract questions from LLM response."
            },
            {
              "name": "enhance_gnn",
              "lineno": 343,
              "args": [
                "self",
                "gnn_content"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate enhancement suggestions for a GNN model.\n\nArgs:\n    gnn_content: The GNN file content to enhance\n    \nReturns:\n    Enhancement suggestions"
            },
            {
              "name": "validate_gnn",
              "lineno": 376,
              "args": [
                "self",
                "gnn_content"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Validate a GNN model for correctness and completeness.\n\nArgs:\n    gnn_content: The GNN file content to validate\n    \nReturns:\n    Validation results"
            },
            {
              "name": "get_available_providers",
              "lineno": 409,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get list of available LLM providers."
            },
            {
              "name": "get_processor_info",
              "lineno": 419,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Get information about the LLM processor."
            }
          ]
        }
      ]
    },
    {
      "file": "src/llm/llm_processor.py",
      "module": "llm.llm_processor",
      "functions": [
        {
          "name": "load_api_keys_from_env",
          "lineno": 40,
          "args": [],
          "returns": "Dict[str, str]",
          "decorators": [],
          "doc": "Load API keys from environment variables.\n\nReturns:\n    Dictionary mapping provider names to API keys"
        },
        {
          "name": "get_default_provider_configs",
          "lineno": 87,
          "args": [],
          "returns": "Dict[str, Dict[str, Any]]",
          "decorators": [],
          "doc": "Get default provider configurations from environment variables.\n\nReturns:\n    Dictionary with provider-specific configurations"
        },
        {
          "name": "get_preferred_providers_from_env",
          "lineno": 122,
          "args": [],
          "returns": "List[ProviderType]",
          "decorators": [],
          "doc": "Get preferred provider order from environment variables.\n\nReturns:\n    List of providers in order of preference"
        },
        {
          "name": "get_processor",
          "lineno": 532,
          "args": [],
          "returns": "Optional[LLMProcessor]",
          "decorators": [],
          "doc": "Get the global LLM processor instance."
        },
        {
          "name": "create_gnn_llm_processor",
          "lineno": 751,
          "args": [],
          "returns": "GNNLLMProcessor",
          "decorators": [],
          "doc": "Create a GNN LLM processor with default configuration.\n\nReturns:\n    GNNLLMProcessor instance"
        },
        {
          "name": "analyze_gnn_model",
          "lineno": 794,
          "args": [
            "gnn_content",
            "analysis_type"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze a GNN model using LLM capabilities.\n\nArgs:\n    gnn_content: GNN model content as string\n    analysis_type: Type of analysis to perform\n\nReturns:\n    Dictionary with analysis results"
        },
        {
          "name": "generate_explanation",
          "lineno": 826,
          "args": [
            "gnn_content"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Generate a natural language explanation for a GNN model.\n\nArgs:\n    gnn_content: GNN model content as string\n\nReturns:\n    Dictionary with explanation results"
        },
        {
          "name": "enhance_model",
          "lineno": 848,
          "args": [
            "gnn_content"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Suggest enhancements for a GNN model using LLM.\n\nArgs:\n    gnn_content: GNN model content as string\n\nReturns:\n    Dictionary with enhancement suggestions"
        },
        {
          "name": "__init__",
          "lineno": 159,
          "args": [
            "self",
            "preferred_providers",
            "api_keys",
            "provider_configs"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the LLM processor.\n\nArgs:\n    preferred_providers: List of providers in order of preference\n    api_keys: Dictionary mapping provider names to API keys\n    provider_configs: Provider-specific configuration options"
        },
        {
          "name": "_create_provider",
          "lineno": 215,
          "args": [
            "self",
            "provider_type"
          ],
          "returns": "Optional[BaseLLMProvider]",
          "decorators": [],
          "doc": "Create a provider instance based on type.\n\nArgs:\n    provider_type: The type of provider to create\n    \nReturns:\n    Provider instance or None if creation failed"
        },
        {
          "name": "get_available_providers",
          "lineno": 240,
          "args": [
            "self"
          ],
          "returns": "List[ProviderType]",
          "decorators": [],
          "doc": "Get list of available (initialized) providers."
        },
        {
          "name": "get_provider",
          "lineno": 244,
          "args": [
            "self",
            "provider_type"
          ],
          "returns": "Optional[BaseLLMProvider]",
          "decorators": [],
          "doc": "Get a specific provider instance.\n\nArgs:\n    provider_type: Type of provider to retrieve\n    \nReturns:\n    Provider instance or None if not available"
        },
        {
          "name": "get_best_provider_for_task",
          "lineno": 256,
          "args": [
            "self",
            "analysis_type"
          ],
          "returns": "Optional[BaseLLMProvider]",
          "decorators": [],
          "doc": "Select the best provider for a specific analysis type.\n\nArgs:\n    analysis_type: Type of analysis to perform\n    \nReturns:\n    Best provider for the task or None if no providers available"
        },
        {
          "name": "get_provider_info",
          "lineno": 442,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Dict[str, Any]]",
          "decorators": [],
          "doc": "Get information about all available providers.\n\nReturns:\n    Dictionary with provider information"
        },
        {
          "name": "__init__",
          "lineno": 599,
          "args": [
            "self",
            "base_processor"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the GNN LLM processor.\n\nArgs:\n    base_processor: Base LLM processor to use for operations"
        }
      ],
      "classes": [
        {
          "name": "AnalysisType",
          "lineno": 30,
          "bases": [
            "Enum"
          ],
          "doc": "Types of GNN analysis that can be performed.",
          "methods": []
        },
        {
          "name": "LLMProcessor",
          "lineno": 151,
          "bases": [],
          "doc": "Main LLM processor that coordinates multiple providers for GNN analysis.\n\nProvides a unified interface for accessing different LLM providers with\nautomatic fallback, load balancing, and provider-specific optimizations.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 159,
              "args": [
                "self",
                "preferred_providers",
                "api_keys",
                "provider_configs"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the LLM processor.\n\nArgs:\n    preferred_providers: List of providers in order of preference\n    api_keys: Dictionary mapping provider names to API keys\n    provider_configs: Provider-specific configuration options"
            },
            {
              "name": "_create_provider",
              "lineno": 215,
              "args": [
                "self",
                "provider_type"
              ],
              "returns": "Optional[BaseLLMProvider]",
              "decorators": [],
              "doc": "Create a provider instance based on type.\n\nArgs:\n    provider_type: The type of provider to create\n    \nReturns:\n    Provider instance or None if creation failed"
            },
            {
              "name": "get_available_providers",
              "lineno": 240,
              "args": [
                "self"
              ],
              "returns": "List[ProviderType]",
              "decorators": [],
              "doc": "Get list of available (initialized) providers."
            },
            {
              "name": "get_provider",
              "lineno": 244,
              "args": [
                "self",
                "provider_type"
              ],
              "returns": "Optional[BaseLLMProvider]",
              "decorators": [],
              "doc": "Get a specific provider instance.\n\nArgs:\n    provider_type: Type of provider to retrieve\n    \nReturns:\n    Provider instance or None if not available"
            },
            {
              "name": "get_best_provider_for_task",
              "lineno": 256,
              "args": [
                "self",
                "analysis_type"
              ],
              "returns": "Optional[BaseLLMProvider]",
              "decorators": [],
              "doc": "Select the best provider for a specific analysis type.\n\nArgs:\n    analysis_type: Type of analysis to perform\n    \nReturns:\n    Best provider for the task or None if no providers available"
            },
            {
              "name": "get_provider_info",
              "lineno": 442,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Dict[str, Any]]",
              "decorators": [],
              "doc": "Get information about all available providers.\n\nReturns:\n    Dictionary with provider information"
            }
          ]
        },
        {
          "name": "GNNLLMProcessor",
          "lineno": 590,
          "bases": [],
          "doc": "Specialized LLM processor for GNN model analysis and enhancement.\n\nThis class provides GNN-specific analysis capabilities including\nmodel interpretation, validation, enhancement suggestions, and\nnatural language explanations.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 599,
              "args": [
                "self",
                "base_processor"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the GNN LLM processor.\n\nArgs:\n    base_processor: Base LLM processor to use for operations"
            }
          ]
        }
      ]
    },
    {
      "file": "src/llm/mcp.py",
      "module": "llm.mcp",
      "functions": [
        {
          "name": "process_llm_mcp",
          "lineno": 19,
          "args": [
            "target_directory",
            "output_directory",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Process llm for GNN files. Exposed via MCP.\n\nArgs:\n    target_directory: Directory containing GNN files to process\n    output_directory: Directory to save results\n    verbose: Enable verbose output\n    \nReturns:\n    Dictionary with operation status and results."
        },
        {
          "name": "register_tools",
          "lineno": 51,
          "args": [
            "mcp_instance"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register llm utility tools with the MCP."
        }
      ],
      "classes": []
    },
    {
      "file": "src/llm/processor.py",
      "module": "llm.processor",
      "functions": [
        {
          "name": "process_llm",
          "lineno": 31,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process GNN files with LLM-enhanced analysis.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Directory to save results\n    verbose: Enable verbose output\n    **kwargs: Additional arguments\n    \nReturns:\n    True if processing successful, False otherwise"
        },
        {
          "name": "_run_prompt",
          "lineno": 142,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_run_custom",
          "lineno": 175,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/llm/prompts.py",
      "module": "llm.prompts",
      "functions": [
        {
          "name": "get_prompt",
          "lineno": 349,
          "args": [
            "prompt_type",
            "gnn_content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get a formatted prompt for GNN analysis.\n\nArgs:\n    prompt_type: Type of analysis prompt to retrieve\n    gnn_content: The GNN file content to analyze\n    **kwargs: Additional parameters for prompt formatting\n    \nReturns:\n    Dictionary containing formatted prompt and metadata"
        },
        {
          "name": "get_all_prompt_types",
          "lineno": 374,
          "args": [],
          "returns": "List[PromptType]",
          "decorators": [],
          "doc": "Get all available prompt types."
        },
        {
          "name": "get_prompt_title",
          "lineno": 378,
          "args": [
            "prompt_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get the human-readable title for a prompt type."
        },
        {
          "name": "get_default_prompt_sequence",
          "lineno": 382,
          "args": [],
          "returns": "List[PromptType]",
          "decorators": [],
          "doc": "Get the default sequence of prompts for comprehensive GNN analysis.\n\nReturns:\n    List of prompt types in recommended analysis order"
        }
      ],
      "classes": [
        {
          "name": "PromptType",
          "lineno": 13,
          "bases": [
            "Enum"
          ],
          "doc": "Types of analysis prompts available for GNN processing.",
          "methods": []
        }
      ]
    },
    {
      "file": "src/llm/providers/__init__.py",
      "module": "llm.providers.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/llm/providers/base_provider.py",
      "module": "llm.providers.base_provider",
      "functions": [
        {
          "name": "__init__",
          "lineno": 61,
          "args": [
            "self",
            "api_key"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the provider.\n\nArgs:\n    api_key: API key for the provider\n    **kwargs: Additional provider-specific configuration"
        },
        {
          "name": "provider_type",
          "lineno": 75,
          "args": [
            "self"
          ],
          "returns": "ProviderType",
          "decorators": [
            "property",
            "abstractmethod"
          ],
          "doc": "Return the provider type enum."
        },
        {
          "name": "default_model",
          "lineno": 81,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [
            "property",
            "abstractmethod"
          ],
          "doc": "Return the default model for this provider."
        },
        {
          "name": "available_models",
          "lineno": 87,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [
            "property",
            "abstractmethod"
          ],
          "doc": "Return list of available models for this provider."
        },
        {
          "name": "initialize",
          "lineno": 92,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "doc": "Initialize the provider client.\n\nReturns:\n    True if initialization successful, False otherwise"
        },
        {
          "name": "validate_config",
          "lineno": 102,
          "args": [
            "self",
            "config"
          ],
          "returns": "bool",
          "decorators": [
            "abstractmethod"
          ],
          "doc": "Validate configuration parameters for this provider.\n\nArgs:\n    config: LLM configuration to validate\n    \nReturns:\n    True if configuration is valid, False otherwise"
        },
        {
          "name": "construct_system_prompt",
          "lineno": 150,
          "args": [
            "self",
            "domain_context"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Construct a system prompt with domain-specific context.\n\nArgs:\n    domain_context: Additional context about the domain\n    \nReturns:\n    Formatted system prompt"
        },
        {
          "name": "format_gnn_analysis_prompt",
          "lineno": 171,
          "args": [
            "self",
            "gnn_content",
            "analysis_type"
          ],
          "returns": "List[LLMMessage]",
          "decorators": [],
          "doc": "Format a prompt for GNN analysis.\n\nArgs:\n    gnn_content: The GNN file content to analyze\n    analysis_type: Type of analysis ('summary', 'structure', 'questions', 'general')\n    \nReturns:\n    List of formatted messages"
        },
        {
          "name": "is_initialized",
          "lineno": 233,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if the provider is properly initialized."
        },
        {
          "name": "get_provider_info",
          "lineno": 237,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get information about this provider.\n\nReturns:\n    Dictionary with provider information"
        }
      ],
      "classes": [
        {
          "name": "ProviderType",
          "lineno": 17,
          "bases": [
            "Enum"
          ],
          "doc": "Enumeration of supported LLM providers.",
          "methods": []
        },
        {
          "name": "LLMResponse",
          "lineno": 25,
          "bases": [],
          "doc": "Standardized response format for all LLM providers.",
          "methods": []
        },
        {
          "name": "LLMMessage",
          "lineno": 35,
          "bases": [],
          "doc": "Standardized message format for LLM conversations.",
          "methods": []
        },
        {
          "name": "LLMConfig",
          "lineno": 42,
          "bases": [],
          "doc": "Configuration parameters for LLM requests.",
          "methods": []
        },
        {
          "name": "BaseLLMProvider",
          "lineno": 53,
          "bases": [
            "ABC"
          ],
          "doc": "Abstract base class for LLM providers.\n\nAll provider implementations must inherit from this class and implement\nthe required abstract methods to ensure consistent behavior.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 61,
              "args": [
                "self",
                "api_key"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the provider.\n\nArgs:\n    api_key: API key for the provider\n    **kwargs: Additional provider-specific configuration"
            },
            {
              "name": "provider_type",
              "lineno": 75,
              "args": [
                "self"
              ],
              "returns": "ProviderType",
              "decorators": [
                "property",
                "abstractmethod"
              ],
              "doc": "Return the provider type enum."
            },
            {
              "name": "default_model",
              "lineno": 81,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [
                "property",
                "abstractmethod"
              ],
              "doc": "Return the default model for this provider."
            },
            {
              "name": "available_models",
              "lineno": 87,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [
                "property",
                "abstractmethod"
              ],
              "doc": "Return list of available models for this provider."
            },
            {
              "name": "initialize",
              "lineno": 92,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [
                "abstractmethod"
              ],
              "doc": "Initialize the provider client.\n\nReturns:\n    True if initialization successful, False otherwise"
            },
            {
              "name": "validate_config",
              "lineno": 102,
              "args": [
                "self",
                "config"
              ],
              "returns": "bool",
              "decorators": [
                "abstractmethod"
              ],
              "doc": "Validate configuration parameters for this provider.\n\nArgs:\n    config: LLM configuration to validate\n    \nReturns:\n    True if configuration is valid, False otherwise"
            },
            {
              "name": "construct_system_prompt",
              "lineno": 150,
              "args": [
                "self",
                "domain_context"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Construct a system prompt with domain-specific context.\n\nArgs:\n    domain_context: Additional context about the domain\n    \nReturns:\n    Formatted system prompt"
            },
            {
              "name": "format_gnn_analysis_prompt",
              "lineno": 171,
              "args": [
                "self",
                "gnn_content",
                "analysis_type"
              ],
              "returns": "List[LLMMessage]",
              "decorators": [],
              "doc": "Format a prompt for GNN analysis.\n\nArgs:\n    gnn_content: The GNN file content to analyze\n    analysis_type: Type of analysis ('summary', 'structure', 'questions', 'general')\n    \nReturns:\n    List of formatted messages"
            },
            {
              "name": "is_initialized",
              "lineno": 233,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if the provider is properly initialized."
            },
            {
              "name": "get_provider_info",
              "lineno": 237,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Get information about this provider.\n\nReturns:\n    Dictionary with provider information"
            }
          ]
        }
      ]
    },
    {
      "file": "src/llm/providers/ollama_provider.py",
      "module": "llm.providers.ollama_provider",
      "functions": [
        {
          "name": "__init__",
          "lineno": 47,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "provider_type",
          "lineno": 57,
          "args": [
            "self"
          ],
          "returns": "ProviderType",
          "decorators": [
            "property"
          ],
          "doc": ""
        },
        {
          "name": "default_model",
          "lineno": 61,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [
            "property"
          ],
          "doc": ""
        },
        {
          "name": "available_models",
          "lineno": 65,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [
            "property"
          ],
          "doc": ""
        },
        {
          "name": "initialize",
          "lineno": 68,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "validate_config",
          "lineno": 93,
          "args": [
            "self",
            "config"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_call_cli",
          "lineno": 129,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_call_py",
          "lineno": 161,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_call_cli_once",
          "lineno": 207,
          "args": [],
          "returns": "str",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_iter",
          "lineno": 220,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "OllamaProvider",
          "lineno": 29,
          "bases": [
            "BaseLLMProvider"
          ],
          "doc": "Ollama implementation of the LLM provider interface.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 47,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "provider_type",
              "lineno": 57,
              "args": [
                "self"
              ],
              "returns": "ProviderType",
              "decorators": [
                "property"
              ],
              "doc": ""
            },
            {
              "name": "default_model",
              "lineno": 61,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [
                "property"
              ],
              "doc": ""
            },
            {
              "name": "available_models",
              "lineno": 65,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [
                "property"
              ],
              "doc": ""
            },
            {
              "name": "initialize",
              "lineno": 68,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "validate_config",
              "lineno": 93,
              "args": [
                "self",
                "config"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/llm/providers/openai_provider.py",
      "module": "llm.providers.openai_provider",
      "functions": [
        {
          "name": "__init__",
          "lineno": 39,
          "args": [
            "self",
            "api_key"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize OpenAI provider.\n\nArgs:\n    api_key: OpenAI API key (if None, will try environment variables)\n    **kwargs: Additional OpenAI-specific configuration"
        },
        {
          "name": "provider_type",
          "lineno": 53,
          "args": [
            "self"
          ],
          "returns": "ProviderType",
          "decorators": [
            "property"
          ],
          "doc": "Return the provider type."
        },
        {
          "name": "default_model",
          "lineno": 58,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [
            "property"
          ],
          "doc": "Return the default OpenAI model."
        },
        {
          "name": "available_models",
          "lineno": 63,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [
            "property"
          ],
          "doc": "Return list of available OpenAI models."
        },
        {
          "name": "initialize",
          "lineno": 67,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Initialize the OpenAI client.\n\nReturns:\n    True if initialization successful, False otherwise"
        },
        {
          "name": "validate_config",
          "lineno": 104,
          "args": [
            "self",
            "config"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate OpenAI-specific configuration.\n\nArgs:\n    config: LLM configuration to validate\n    \nReturns:\n    True if configuration is valid, False otherwise"
        },
        {
          "name": "analyze",
          "lineno": 321,
          "args": [
            "self",
            "content",
            "task"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Perform analysis on GNN content."
        },
        {
          "name": "run_async",
          "lineno": 334,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "OpenAIProvider",
          "lineno": 24,
          "bases": [
            "BaseLLMProvider"
          ],
          "doc": "OpenAI implementation of the LLM provider interface.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 39,
              "args": [
                "self",
                "api_key"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize OpenAI provider.\n\nArgs:\n    api_key: OpenAI API key (if None, will try environment variables)\n    **kwargs: Additional OpenAI-specific configuration"
            },
            {
              "name": "provider_type",
              "lineno": 53,
              "args": [
                "self"
              ],
              "returns": "ProviderType",
              "decorators": [
                "property"
              ],
              "doc": "Return the provider type."
            },
            {
              "name": "default_model",
              "lineno": 58,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [
                "property"
              ],
              "doc": "Return the default OpenAI model."
            },
            {
              "name": "available_models",
              "lineno": 63,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [
                "property"
              ],
              "doc": "Return list of available OpenAI models."
            },
            {
              "name": "initialize",
              "lineno": 67,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Initialize the OpenAI client.\n\nReturns:\n    True if initialization successful, False otherwise"
            },
            {
              "name": "validate_config",
              "lineno": 104,
              "args": [
                "self",
                "config"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Validate OpenAI-specific configuration.\n\nArgs:\n    config: LLM configuration to validate\n    \nReturns:\n    True if configuration is valid, False otherwise"
            },
            {
              "name": "analyze",
              "lineno": 321,
              "args": [
                "self",
                "content",
                "task"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Perform analysis on GNN content."
            }
          ]
        }
      ]
    },
    {
      "file": "src/llm/providers/openrouter_provider.py",
      "module": "llm.providers.openrouter_provider",
      "functions": [
        {
          "name": "__init__",
          "lineno": 71,
          "args": [
            "self",
            "api_key"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize OpenRouter provider.\n\nArgs:\n    api_key: OpenRouter API key (if None, will try environment variables)\n    **kwargs: Additional OpenRouter-specific configuration"
        },
        {
          "name": "provider_type",
          "lineno": 88,
          "args": [
            "self"
          ],
          "returns": "ProviderType",
          "decorators": [
            "property"
          ],
          "doc": "Return the provider type."
        },
        {
          "name": "default_model",
          "lineno": 93,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [
            "property"
          ],
          "doc": "Return the default OpenRouter model."
        },
        {
          "name": "available_models",
          "lineno": 98,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [
            "property"
          ],
          "doc": "Return list of available OpenRouter models."
        },
        {
          "name": "initialize",
          "lineno": 102,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Initialize the OpenRouter client.\n\nReturns:\n    True if initialization successful, False otherwise"
        },
        {
          "name": "validate_config",
          "lineno": 147,
          "args": [
            "self",
            "config"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate OpenRouter-specific configuration.\n\nArgs:\n    config: LLM configuration to validate\n    \nReturns:\n    True if configuration is valid, False otherwise"
        },
        {
          "name": "analyze",
          "lineno": 407,
          "args": [
            "self",
            "content",
            "task"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Perform analysis on GNN content."
        },
        {
          "name": "run_async",
          "lineno": 420,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "OpenRouterProvider",
          "lineno": 34,
          "bases": [
            "BaseLLMProvider"
          ],
          "doc": "OpenRouter implementation of the LLM provider interface.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 71,
              "args": [
                "self",
                "api_key"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize OpenRouter provider.\n\nArgs:\n    api_key: OpenRouter API key (if None, will try environment variables)\n    **kwargs: Additional OpenRouter-specific configuration"
            },
            {
              "name": "provider_type",
              "lineno": 88,
              "args": [
                "self"
              ],
              "returns": "ProviderType",
              "decorators": [
                "property"
              ],
              "doc": "Return the provider type."
            },
            {
              "name": "default_model",
              "lineno": 93,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [
                "property"
              ],
              "doc": "Return the default OpenRouter model."
            },
            {
              "name": "available_models",
              "lineno": 98,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [
                "property"
              ],
              "doc": "Return list of available OpenRouter models."
            },
            {
              "name": "initialize",
              "lineno": 102,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Initialize the OpenRouter client.\n\nReturns:\n    True if initialization successful, False otherwise"
            },
            {
              "name": "validate_config",
              "lineno": 147,
              "args": [
                "self",
                "config"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Validate OpenRouter-specific configuration.\n\nArgs:\n    config: LLM configuration to validate\n    \nReturns:\n    True if configuration is valid, False otherwise"
            },
            {
              "name": "analyze",
              "lineno": 407,
              "args": [
                "self",
                "content",
                "task"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Perform analysis on GNN content."
            }
          ]
        }
      ]
    },
    {
      "file": "src/llm/providers/perplexity_provider.py",
      "module": "llm.providers.perplexity_provider",
      "functions": [
        {
          "name": "__init__",
          "lineno": 50,
          "args": [
            "self",
            "api_key"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize Perplexity provider.\n\nArgs:\n    api_key: Perplexity API key (if None, will try environment variables)\n    **kwargs: Additional Perplexity-specific configuration"
        },
        {
          "name": "provider_type",
          "lineno": 63,
          "args": [
            "self"
          ],
          "returns": "ProviderType",
          "decorators": [
            "property"
          ],
          "doc": "Return the provider type."
        },
        {
          "name": "default_model",
          "lineno": 68,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [
            "property"
          ],
          "doc": "Return the default Perplexity model."
        },
        {
          "name": "available_models",
          "lineno": 73,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [
            "property"
          ],
          "doc": "Return list of available Perplexity models."
        },
        {
          "name": "initialize",
          "lineno": 77,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Initialize the Perplexity client.\n\nReturns:\n    True if initialization successful, False otherwise"
        },
        {
          "name": "validate_config",
          "lineno": 121,
          "args": [
            "self",
            "config"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate Perplexity-specific configuration.\n\nArgs:\n    config: LLM configuration to validate\n    \nReturns:\n    True if configuration is valid, False otherwise"
        },
        {
          "name": "is_online_model",
          "lineno": 319,
          "args": [
            "self",
            "model_name"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if a model has online search capabilities.\n\nArgs:\n    model_name: Name of the model to check\n    \nReturns:\n    True if model has online search, False otherwise"
        },
        {
          "name": "construct_search_prompt",
          "lineno": 331,
          "args": [
            "self",
            "query",
            "gnn_context"
          ],
          "returns": "List[LLMMessage]",
          "decorators": [],
          "doc": "Construct a search-optimized prompt for Perplexity.\n\nArgs:\n    query: The search query\n    gnn_context: Optional GNN context for domain-specific search\n    \nReturns:\n    List of formatted messages optimized for search"
        },
        {
          "name": "analyze",
          "lineno": 384,
          "args": [
            "self",
            "content",
            "task"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Perform analysis on GNN content."
        },
        {
          "name": "run_async",
          "lineno": 397,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "PerplexityProvider",
          "lineno": 33,
          "bases": [
            "BaseLLMProvider"
          ],
          "doc": "Perplexity implementation of the LLM provider interface.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 50,
              "args": [
                "self",
                "api_key"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize Perplexity provider.\n\nArgs:\n    api_key: Perplexity API key (if None, will try environment variables)\n    **kwargs: Additional Perplexity-specific configuration"
            },
            {
              "name": "provider_type",
              "lineno": 63,
              "args": [
                "self"
              ],
              "returns": "ProviderType",
              "decorators": [
                "property"
              ],
              "doc": "Return the provider type."
            },
            {
              "name": "default_model",
              "lineno": 68,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [
                "property"
              ],
              "doc": "Return the default Perplexity model."
            },
            {
              "name": "available_models",
              "lineno": 73,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [
                "property"
              ],
              "doc": "Return list of available Perplexity models."
            },
            {
              "name": "initialize",
              "lineno": 77,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Initialize the Perplexity client.\n\nReturns:\n    True if initialization successful, False otherwise"
            },
            {
              "name": "validate_config",
              "lineno": 121,
              "args": [
                "self",
                "config"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Validate Perplexity-specific configuration.\n\nArgs:\n    config: LLM configuration to validate\n    \nReturns:\n    True if configuration is valid, False otherwise"
            },
            {
              "name": "is_online_model",
              "lineno": 319,
              "args": [
                "self",
                "model_name"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if a model has online search capabilities.\n\nArgs:\n    model_name: Name of the model to check\n    \nReturns:\n    True if model has online search, False otherwise"
            },
            {
              "name": "construct_search_prompt",
              "lineno": 331,
              "args": [
                "self",
                "query",
                "gnn_context"
              ],
              "returns": "List[LLMMessage]",
              "decorators": [],
              "doc": "Construct a search-optimized prompt for Perplexity.\n\nArgs:\n    query: The search query\n    gnn_context: Optional GNN context for domain-specific search\n    \nReturns:\n    List of formatted messages optimized for search"
            },
            {
              "name": "analyze",
              "lineno": 384,
              "args": [
                "self",
                "content",
                "task"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Perform analysis on GNN content."
            }
          ]
        }
      ]
    },
    {
      "file": "src/llm/test_llm_system.py",
      "module": "llm.test_llm_system",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/main.py",
      "module": "main",
      "functions": [
        {
          "name": "main",
          "lineno": 88,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main pipeline orchestration function."
        },
        {
          "name": "execute_pipeline_step",
          "lineno": 354,
          "args": [
            "script_name",
            "args",
            "logger"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Execute a single pipeline step."
        },
        {
          "name": "parse_step_list",
          "lineno": 481,
          "args": [
            "step_str"
          ],
          "returns": "List[int]",
          "decorators": [],
          "doc": "Parse comma-separated step list into list of integers."
        },
        {
          "name": "get_environment_info",
          "lineno": 488,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get environment information."
        }
      ],
      "classes": []
    },
    {
      "file": "src/mcp/__init__.py",
      "module": "mcp.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/mcp/cli.py",
      "module": "mcp.cli",
      "functions": [
        {
          "name": "import_mcp",
          "lineno": 27,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Import the MCP module dynamically."
        },
        {
          "name": "list_capabilities",
          "lineno": 44,
          "args": [
            "args"
          ],
          "returns": null,
          "decorators": [],
          "doc": "List all available MCP capabilities."
        },
        {
          "name": "execute_tool",
          "lineno": 106,
          "args": [
            "args"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Execute an MCP tool with the given parameters."
        },
        {
          "name": "get_resource",
          "lineno": 140,
          "args": [
            "args"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Retrieve an MCP resource."
        },
        {
          "name": "get_server_status",
          "lineno": 162,
          "args": [
            "args"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Get detailed server status information."
        },
        {
          "name": "get_tool_info",
          "lineno": 195,
          "args": [
            "args"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Get detailed information about a specific tool."
        },
        {
          "name": "start_server",
          "lineno": 231,
          "args": [
            "args"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Start the MCP server."
        },
        {
          "name": "main",
          "lineno": 253,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main CLI entry point."
        }
      ],
      "classes": []
    },
    {
      "file": "src/mcp/mcp.py",
      "module": "mcp.mcp",
      "functions": [
        {
          "name": "initialize",
          "lineno": 1556,
          "args": [
            "halt_on_missing_sdk",
            "force_proceed_flag"
          ],
          "returns": "Tuple[MCP, bool, bool]",
          "decorators": [],
          "doc": "Initialize the MCP by discovering modules and checking SDK status.\n\nArgs:\n    halt_on_missing_sdk: If True, raises MCPSDKNotFoundError if SDK is missing\n    force_proceed_flag: If True, proceeds even if SDK is missing\n    \nReturns:\n    Tuple of (mcp_instance, sdk_found, all_modules_loaded)\n    \nRaises:\n    MCPSDKNotFoundError: If SDK is missing and halt_on_missing_sdk is True"
        },
        {
          "name": "get_mcp_instance",
          "lineno": 1599,
          "args": [],
          "returns": "MCP",
          "decorators": [],
          "doc": "Get the global MCP instance."
        },
        {
          "name": "list_available_tools",
          "lineno": 1603,
          "args": [],
          "returns": "List[str]",
          "decorators": [],
          "doc": "List all available tool names."
        },
        {
          "name": "list_available_resources",
          "lineno": 1607,
          "args": [],
          "returns": "List[str]",
          "decorators": [],
          "doc": "List all available resource URI templates."
        },
        {
          "name": "get_tool_info",
          "lineno": 1611,
          "args": [
            "tool_name"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Get information about a specific tool."
        },
        {
          "name": "get_resource_info",
          "lineno": 1615,
          "args": [
            "uri_template"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Get information about a specific resource."
        },
        {
          "name": "create_mcp_server",
          "lineno": 1802,
          "args": [
            "mcp_instance"
          ],
          "returns": "MCPServer",
          "decorators": [],
          "doc": "Create a new MCP server instance."
        },
        {
          "name": "start_mcp_server",
          "lineno": 1806,
          "args": [
            "mcp_instance"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Start the MCP server."
        },
        {
          "name": "register_tools",
          "lineno": 1811,
          "args": [],
          "returns": "bool",
          "decorators": [],
          "doc": "Register tools with the global MCP instance."
        },
        {
          "name": "__init__",
          "lineno": 49,
          "args": [
            "self",
            "message",
            "code",
            "data",
            "tool_name",
            "module_name"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 66,
          "args": [
            "self",
            "tool_name",
            "available_tools"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 76,
          "args": [
            "self",
            "uri",
            "available_resources"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 86,
          "args": [
            "self",
            "message",
            "details",
            "tool_name",
            "schema"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 97,
          "args": [
            "self",
            "tool_name",
            "original_exception",
            "execution_time"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 112,
          "args": [
            "self",
            "message",
            "sdk_paths"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 122,
          "args": [
            "self",
            "message",
            "field",
            "tool_name",
            "value"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 133,
          "args": [
            "self",
            "module_name",
            "original_exception"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 146,
          "args": [
            "self",
            "operation",
            "execution_time",
            "threshold"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__post_init__",
          "lineno": 180,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate tool configuration after initialization."
        },
        {
          "name": "get_signature",
          "lineno": 199,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get a unique signature for this tool."
        },
        {
          "name": "__post_init__",
          "lineno": 224,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate resource configuration after initialization."
        },
        {
          "name": "__post_init__",
          "lineno": 259,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Calculate file size and hash if path exists."
        },
        {
          "name": "update_execution_time",
          "lineno": 291,
          "args": [
            "self",
            "execution_time"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Update execution time statistics."
        },
        {
          "name": "update_cache_stats",
          "lineno": 298,
          "args": [
            "self",
            "hit"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Update cache statistics."
        },
        {
          "name": "__init__",
          "lineno": 312,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "check_status",
          "lineno": 322,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if MCP SDK is available with enhanced detection."
        },
        {
          "name": "_check_sdk_health",
          "lineno": 380,
          "args": [
            "self",
            "sdk_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Check the health of the SDK installation."
        },
        {
          "name": "to_dict",
          "lineno": 405,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Convert status to dictionary."
        },
        {
          "name": "__init__",
          "lineno": 434,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the enhanced MCP server."
        },
        {
          "name": "uptime",
          "lineno": 478,
          "args": [
            "self"
          ],
          "returns": "float",
          "decorators": [
            "property"
          ],
          "doc": "Get server uptime in seconds."
        },
        {
          "name": "request_count",
          "lineno": 483,
          "args": [
            "self"
          ],
          "returns": "int",
          "decorators": [
            "property"
          ],
          "doc": "Get total number of requests processed."
        },
        {
          "name": "error_count",
          "lineno": 488,
          "args": [
            "self"
          ],
          "returns": "int",
          "decorators": [
            "property"
          ],
          "doc": "Get total number of errors encountered."
        },
        {
          "name": "performance_metrics",
          "lineno": 493,
          "args": [
            "self"
          ],
          "returns": "MCPPerformanceMetrics",
          "decorators": [
            "property"
          ],
          "doc": "Get performance metrics."
        },
        {
          "name": "discover_modules",
          "lineno": 497,
          "args": [
            "self",
            "force_refresh"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Enhanced module discovery with caching and thread safety.\n\nThis method scans the src/ directory for modules with mcp.py files\nand loads them to register their tools and resources with improved\ncaching, thread safety, and error handling.\n\nArgs:\n    force_refresh: If True, force refresh of module discovery cache\n    \nReturns:\n    bool: True if all modules loaded successfully, False otherwise."
        },
        {
          "name": "_load_module",
          "lineno": 600,
          "args": [
            "self",
            "directory",
            "mcp_file",
            "module_name"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Load a single MCP module with enhanced error handling and performance tracking.\n\nArgs:\n    directory: Directory containing the module\n    mcp_file: Path to the mcp.py file\n    module_name: Optional custom module name\n    \nReturns:\n    bool: True if module loaded successfully"
        },
        {
          "name": "register_tool",
          "lineno": 701,
          "args": [
            "self",
            "name",
            "func",
            "schema",
            "description",
            "module",
            "category",
            "version",
            "tags",
            "examples",
            "deprecated",
            "experimental",
            "timeout",
            "max_concurrent",
            "requires_auth",
            "rate_limit",
            "cache_ttl",
            "input_validation",
            "output_validation"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register a new tool with the MCP server.\n\nArgs:\n    name: Unique name for the tool\n    func: Callable function to execute\n    schema: JSON schema for tool parameters\n    description: Human-readable description\n    module: Module name that provides this tool\n    category: Tool category for organization\n    version: Tool version\n    tags: List of tags for categorization\n    examples: List of example parameter sets\n    deprecated: Whether the tool is deprecated\n    experimental: Whether the tool is experimental\n    timeout: Optional timeout for the tool in seconds\n    max_concurrent: Maximum number of concurrent executions\n    requires_auth: Whether the tool requires authentication\n    rate_limit: Optional rate limit for the tool in requests per second\n    cache_ttl: Optional cache TTL for the tool in seconds\n    input_validation: Whether to validate input parameters\n    output_validation: Whether to validate output results"
        },
        {
          "name": "register_resource",
          "lineno": 759,
          "args": [
            "self",
            "uri_template",
            "retriever",
            "description",
            "module",
            "category",
            "version",
            "mime_type",
            "cacheable",
            "tags",
            "timeout",
            "requires_auth",
            "rate_limit",
            "cache_ttl",
            "compression",
            "encryption"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register a new resource with the MCP server.\n\nArgs:\n    uri_template: URI template for the resource\n    retriever: Function to retrieve resource content\n    description: Human-readable description\n    module: Module name that provides this resource\n    category: Resource category for organization\n    version: Resource version\n    mime_type: MIME type of the resource\n    cacheable: Whether the resource can be cached\n    tags: List of tags for categorization\n    timeout: Optional timeout for the resource in seconds\n    requires_auth: Whether the resource requires authentication\n    rate_limit: Optional rate limit for the resource in requests per second\n    cache_ttl: Optional cache TTL for the resource in seconds\n    compression: Whether the resource is compressed\n    encryption: Whether the resource is encrypted"
        },
        {
          "name": "execute_tool",
          "lineno": 811,
          "args": [
            "self",
            "tool_name",
            "params"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Enhanced tool execution with rate limiting, caching, and performance tracking.\n\nArgs:\n    tool_name: Name of the tool to execute\n    params: Parameters for the tool\n    \nReturns:\n    Dict containing the tool execution result\n    \nRaises:\n    MCPToolNotFoundError: If tool is not found\n    MCPInvalidParamsError: If parameters are invalid\n    MCPToolExecutionError: If tool execution fails\n    MCPPerformanceError: If performance thresholds are exceeded"
        },
        {
          "name": "get_resource",
          "lineno": 872,
          "args": [
            "self",
            "uri"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Retrieve a resource by URI.\n\nArgs:\n    uri: URI of the resource to retrieve\n    \nReturns:\n    Resource content\n    \nRaises:\n    MCPResourceNotFoundError: If resource is not found"
        },
        {
          "name": "get_capabilities",
          "lineno": 919,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get server capabilities including all available tools and resources."
        },
        {
          "name": "get_server_status",
          "lineno": 977,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get comprehensive server status information."
        },
        {
          "name": "get_module_info",
          "lineno": 1014,
          "args": [
            "self",
            "module_name"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Get detailed information about a specific module."
        },
        {
          "name": "get_tool_info",
          "lineno": 1050,
          "args": [
            "self",
            "tool_name"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Get detailed information about a specific tool."
        },
        {
          "name": "_validate_params",
          "lineno": 1085,
          "args": [
            "self",
            "schema",
            "params"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Enhanced parameter validation against schema with detailed error reporting.\n\nArgs:\n    schema: JSON schema for validation\n    params: Parameters to validate\n    \nRaises:\n    MCPValidationError: If validation fails"
        },
        {
          "name": "_validate_field",
          "lineno": 1134,
          "args": [
            "self",
            "field_name",
            "field_value",
            "field_schema"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Validate a single field against its schema.\n\nArgs:\n    field_name: Name of the field\n    field_value: Value to validate\n    field_schema: Schema for the field\n    \nRaises:\n    MCPValidationError: If validation fails"
        },
        {
          "name": "_match_uri_template",
          "lineno": 1310,
          "args": [
            "self",
            "template",
            "uri"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if URI matches template pattern."
        },
        {
          "name": "_track_performance",
          "lineno": 1337,
          "args": [
            "self",
            "operation"
          ],
          "returns": null,
          "decorators": [
            "contextmanager"
          ],
          "doc": "Context manager for tracking operation performance."
        },
        {
          "name": "_validate_output",
          "lineno": 1346,
          "args": [
            "self",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate tool output (basic validation)."
        },
        {
          "name": "get_enhanced_server_status",
          "lineno": 1355,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get enhanced server status with detailed metrics and health information.\n\nReturns:\n    Dict containing comprehensive server status"
        },
        {
          "name": "clear_cache",
          "lineno": 1444,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Clear all caches and return statistics.\n\nReturns:\n    Dict containing cache clearing statistics"
        },
        {
          "name": "get_tool_performance_stats",
          "lineno": 1464,
          "args": [
            "self",
            "tool_name"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Get detailed performance statistics for a specific tool.\n\nArgs:\n    tool_name: Name of the tool\n    \nReturns:\n    Dict containing tool performance statistics or None if tool not found"
        },
        {
          "name": "shutdown",
          "lineno": 1513,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Gracefully shutdown the MCP server.\n\nReturns:\n    Dict containing shutdown statistics"
        },
        {
          "name": "set_performance_mode",
          "lineno": 1541,
          "args": [
            "self",
            "mode"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Set performance mode to optimize resource usage."
        },
        {
          "name": "__init__",
          "lineno": 1640,
          "args": [
            "self",
            "mcp_instance"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the MCP server.\n\nArgs:\n    mcp_instance: MCP instance to use for tool execution"
        },
        {
          "name": "start",
          "lineno": 1660,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Start the MCP server."
        },
        {
          "name": "stop",
          "lineno": 1670,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Stop the MCP server."
        },
        {
          "name": "handle_request",
          "lineno": 1680,
          "args": [
            "self",
            "request"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Handle an incoming JSON-RPC request.\n\nArgs:\n    request: JSON-RPC request dictionary\n    \nReturns:\n    JSON-RPC response dictionary"
        },
        {
          "name": "_handle_initialize",
          "lineno": 1723,
          "args": [
            "self",
            "params"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Handle initialize request."
        },
        {
          "name": "_handle_initialized",
          "lineno": 1734,
          "args": [
            "self",
            "params"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Handle initialized notification."
        },
        {
          "name": "_handle_tools_list",
          "lineno": 1738,
          "args": [
            "self",
            "params"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Handle tools/list request."
        },
        {
          "name": "_handle_tools_call",
          "lineno": 1742,
          "args": [
            "self",
            "params"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Handle tools/call request."
        },
        {
          "name": "_handle_resources_list",
          "lineno": 1753,
          "args": [
            "self",
            "params"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Handle resources/list request."
        },
        {
          "name": "_handle_resources_read",
          "lineno": 1757,
          "args": [
            "self",
            "params"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Handle resources/read request."
        },
        {
          "name": "_handle_shutdown",
          "lineno": 1767,
          "args": [
            "self",
            "params"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Handle shutdown request."
        },
        {
          "name": "_handle_exit",
          "lineno": 1772,
          "args": [
            "self",
            "params"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Handle exit request."
        },
        {
          "name": "_create_success_response",
          "lineno": 1777,
          "args": [
            "self",
            "result",
            "request_id"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Create a successful JSON-RPC response."
        },
        {
          "name": "_create_error_response",
          "lineno": 1787,
          "args": [
            "self",
            "code",
            "message",
            "data",
            "request_id"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Create an error JSON-RPC response."
        }
      ],
      "classes": [
        {
          "name": "MCPError",
          "lineno": 47,
          "bases": [
            "Exception"
          ],
          "doc": "Base class for MCP related errors.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 49,
              "args": [
                "self",
                "message",
                "code",
                "data",
                "tool_name",
                "module_name"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "MCPToolNotFoundError",
          "lineno": 64,
          "bases": [
            "MCPError"
          ],
          "doc": "Raised when a requested tool is not found.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 66,
              "args": [
                "self",
                "tool_name",
                "available_tools"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "MCPResourceNotFoundError",
          "lineno": 74,
          "bases": [
            "MCPError"
          ],
          "doc": "Raised when a requested resource is not found.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 76,
              "args": [
                "self",
                "uri",
                "available_resources"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "MCPInvalidParamsError",
          "lineno": 84,
          "bases": [
            "MCPError"
          ],
          "doc": "Raised when tool parameters are invalid.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 86,
              "args": [
                "self",
                "message",
                "details",
                "tool_name",
                "schema"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "MCPToolExecutionError",
          "lineno": 95,
          "bases": [
            "MCPError"
          ],
          "doc": "Raised when tool execution fails.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 97,
              "args": [
                "self",
                "tool_name",
                "original_exception",
                "execution_time"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "MCPSDKNotFoundError",
          "lineno": 110,
          "bases": [
            "MCPError"
          ],
          "doc": "Raised when required SDK is not found.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 112,
              "args": [
                "self",
                "message",
                "sdk_paths"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "MCPValidationError",
          "lineno": 120,
          "bases": [
            "MCPError"
          ],
          "doc": "Raised when validation fails.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 122,
              "args": [
                "self",
                "message",
                "field",
                "tool_name",
                "value"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "MCPModuleLoadError",
          "lineno": 131,
          "bases": [
            "MCPError"
          ],
          "doc": "Raised when a module fails to load.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 133,
              "args": [
                "self",
                "module_name",
                "original_exception"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "MCPPerformanceError",
          "lineno": 144,
          "bases": [
            "MCPError"
          ],
          "doc": "Raised when performance thresholds are exceeded.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 146,
              "args": [
                "self",
                "operation",
                "execution_time",
                "threshold"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "MCPTool",
          "lineno": 159,
          "bases": [],
          "doc": "Represents an MCP tool that can be executed.",
          "methods": [
            {
              "name": "__post_init__",
              "lineno": 180,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate tool configuration after initialization."
            },
            {
              "name": "get_signature",
              "lineno": 199,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Get a unique signature for this tool."
            }
          ]
        },
        {
          "name": "MCPResource",
          "lineno": 206,
          "bases": [],
          "doc": "Represents an MCP resource that can be accessed.",
          "methods": [
            {
              "name": "__post_init__",
              "lineno": 224,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate resource configuration after initialization."
            }
          ]
        },
        {
          "name": "MCPModuleInfo",
          "lineno": 240,
          "bases": [],
          "doc": "Information about a discovered MCP module.",
          "methods": [
            {
              "name": "__post_init__",
              "lineno": 259,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Calculate file size and hash if path exists."
            }
          ]
        },
        {
          "name": "MCPPerformanceMetrics",
          "lineno": 269,
          "bases": [],
          "doc": "Enhanced performance metrics for MCP operations.",
          "methods": [
            {
              "name": "update_execution_time",
              "lineno": 291,
              "args": [
                "self",
                "execution_time"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Update execution time statistics."
            },
            {
              "name": "update_cache_stats",
              "lineno": 298,
              "args": [
                "self",
                "hit"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Update cache statistics."
            }
          ]
        },
        {
          "name": "MCPSDKStatus",
          "lineno": 309,
          "bases": [],
          "doc": "Enhanced MCP SDK status tracking.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 312,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "check_status",
              "lineno": 322,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if MCP SDK is available with enhanced detection."
            },
            {
              "name": "_check_sdk_health",
              "lineno": 380,
              "args": [
                "self",
                "sdk_path"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Check the health of the SDK installation."
            },
            {
              "name": "to_dict",
              "lineno": 405,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Convert status to dictionary."
            }
          ]
        },
        {
          "name": "MCP",
          "lineno": 420,
          "bases": [],
          "doc": "Enhanced Model Context Protocol implementation.\n\nThis class provides the core functionality for:\n- Discovering and loading MCP modules with caching\n- Registering tools and resources with enhanced metadata\n- Executing tools and retrieving resources with performance tracking\n- Managing server capabilities and status\n- Performance monitoring and metrics collection\n- Thread-safe operations with proper locking\n- Enhanced error handling and validation",
          "methods": [
            {
              "name": "__init__",
              "lineno": 434,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the enhanced MCP server."
            },
            {
              "name": "uptime",
              "lineno": 478,
              "args": [
                "self"
              ],
              "returns": "float",
              "decorators": [
                "property"
              ],
              "doc": "Get server uptime in seconds."
            },
            {
              "name": "request_count",
              "lineno": 483,
              "args": [
                "self"
              ],
              "returns": "int",
              "decorators": [
                "property"
              ],
              "doc": "Get total number of requests processed."
            },
            {
              "name": "error_count",
              "lineno": 488,
              "args": [
                "self"
              ],
              "returns": "int",
              "decorators": [
                "property"
              ],
              "doc": "Get total number of errors encountered."
            },
            {
              "name": "performance_metrics",
              "lineno": 493,
              "args": [
                "self"
              ],
              "returns": "MCPPerformanceMetrics",
              "decorators": [
                "property"
              ],
              "doc": "Get performance metrics."
            },
            {
              "name": "discover_modules",
              "lineno": 497,
              "args": [
                "self",
                "force_refresh"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Enhanced module discovery with caching and thread safety.\n\nThis method scans the src/ directory for modules with mcp.py files\nand loads them to register their tools and resources with improved\ncaching, thread safety, and error handling.\n\nArgs:\n    force_refresh: If True, force refresh of module discovery cache\n    \nReturns:\n    bool: True if all modules loaded successfully, False otherwise."
            },
            {
              "name": "_load_module",
              "lineno": 600,
              "args": [
                "self",
                "directory",
                "mcp_file",
                "module_name"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Load a single MCP module with enhanced error handling and performance tracking.\n\nArgs:\n    directory: Directory containing the module\n    mcp_file: Path to the mcp.py file\n    module_name: Optional custom module name\n    \nReturns:\n    bool: True if module loaded successfully"
            },
            {
              "name": "register_tool",
              "lineno": 701,
              "args": [
                "self",
                "name",
                "func",
                "schema",
                "description",
                "module",
                "category",
                "version",
                "tags",
                "examples",
                "deprecated",
                "experimental",
                "timeout",
                "max_concurrent",
                "requires_auth",
                "rate_limit",
                "cache_ttl",
                "input_validation",
                "output_validation"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Register a new tool with the MCP server.\n\nArgs:\n    name: Unique name for the tool\n    func: Callable function to execute\n    schema: JSON schema for tool parameters\n    description: Human-readable description\n    module: Module name that provides this tool\n    category: Tool category for organization\n    version: Tool version\n    tags: List of tags for categorization\n    examples: List of example parameter sets\n    deprecated: Whether the tool is deprecated\n    experimental: Whether the tool is experimental\n    timeout: Optional timeout for the tool in seconds\n    max_concurrent: Maximum number of concurrent executions\n    requires_auth: Whether the tool requires authentication\n    rate_limit: Optional rate limit for the tool in requests per second\n    cache_ttl: Optional cache TTL for the tool in seconds\n    input_validation: Whether to validate input parameters\n    output_validation: Whether to validate output results"
            },
            {
              "name": "register_resource",
              "lineno": 759,
              "args": [
                "self",
                "uri_template",
                "retriever",
                "description",
                "module",
                "category",
                "version",
                "mime_type",
                "cacheable",
                "tags",
                "timeout",
                "requires_auth",
                "rate_limit",
                "cache_ttl",
                "compression",
                "encryption"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Register a new resource with the MCP server.\n\nArgs:\n    uri_template: URI template for the resource\n    retriever: Function to retrieve resource content\n    description: Human-readable description\n    module: Module name that provides this resource\n    category: Resource category for organization\n    version: Resource version\n    mime_type: MIME type of the resource\n    cacheable: Whether the resource can be cached\n    tags: List of tags for categorization\n    timeout: Optional timeout for the resource in seconds\n    requires_auth: Whether the resource requires authentication\n    rate_limit: Optional rate limit for the resource in requests per second\n    cache_ttl: Optional cache TTL for the resource in seconds\n    compression: Whether the resource is compressed\n    encryption: Whether the resource is encrypted"
            },
            {
              "name": "execute_tool",
              "lineno": 811,
              "args": [
                "self",
                "tool_name",
                "params"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Enhanced tool execution with rate limiting, caching, and performance tracking.\n\nArgs:\n    tool_name: Name of the tool to execute\n    params: Parameters for the tool\n    \nReturns:\n    Dict containing the tool execution result\n    \nRaises:\n    MCPToolNotFoundError: If tool is not found\n    MCPInvalidParamsError: If parameters are invalid\n    MCPToolExecutionError: If tool execution fails\n    MCPPerformanceError: If performance thresholds are exceeded"
            },
            {
              "name": "get_resource",
              "lineno": 872,
              "args": [
                "self",
                "uri"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Retrieve a resource by URI.\n\nArgs:\n    uri: URI of the resource to retrieve\n    \nReturns:\n    Resource content\n    \nRaises:\n    MCPResourceNotFoundError: If resource is not found"
            },
            {
              "name": "get_capabilities",
              "lineno": 919,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Get server capabilities including all available tools and resources."
            },
            {
              "name": "get_server_status",
              "lineno": 977,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Get comprehensive server status information."
            },
            {
              "name": "get_module_info",
              "lineno": 1014,
              "args": [
                "self",
                "module_name"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Get detailed information about a specific module."
            },
            {
              "name": "get_tool_info",
              "lineno": 1050,
              "args": [
                "self",
                "tool_name"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Get detailed information about a specific tool."
            },
            {
              "name": "_validate_params",
              "lineno": 1085,
              "args": [
                "self",
                "schema",
                "params"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Enhanced parameter validation against schema with detailed error reporting.\n\nArgs:\n    schema: JSON schema for validation\n    params: Parameters to validate\n    \nRaises:\n    MCPValidationError: If validation fails"
            },
            {
              "name": "_validate_field",
              "lineno": 1134,
              "args": [
                "self",
                "field_name",
                "field_value",
                "field_schema"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Validate a single field against its schema.\n\nArgs:\n    field_name: Name of the field\n    field_value: Value to validate\n    field_schema: Schema for the field\n    \nRaises:\n    MCPValidationError: If validation fails"
            },
            {
              "name": "_match_uri_template",
              "lineno": 1310,
              "args": [
                "self",
                "template",
                "uri"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if URI matches template pattern."
            },
            {
              "name": "_track_performance",
              "lineno": 1337,
              "args": [
                "self",
                "operation"
              ],
              "returns": null,
              "decorators": [
                "contextmanager"
              ],
              "doc": "Context manager for tracking operation performance."
            },
            {
              "name": "_validate_output",
              "lineno": 1346,
              "args": [
                "self",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate tool output (basic validation)."
            },
            {
              "name": "get_enhanced_server_status",
              "lineno": 1355,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Get enhanced server status with detailed metrics and health information.\n\nReturns:\n    Dict containing comprehensive server status"
            },
            {
              "name": "clear_cache",
              "lineno": 1444,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Clear all caches and return statistics.\n\nReturns:\n    Dict containing cache clearing statistics"
            },
            {
              "name": "get_tool_performance_stats",
              "lineno": 1464,
              "args": [
                "self",
                "tool_name"
              ],
              "returns": "Optional[Dict[str, Any]]",
              "decorators": [],
              "doc": "Get detailed performance statistics for a specific tool.\n\nArgs:\n    tool_name: Name of the tool\n    \nReturns:\n    Dict containing tool performance statistics or None if tool not found"
            },
            {
              "name": "shutdown",
              "lineno": 1513,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Gracefully shutdown the MCP server.\n\nReturns:\n    Dict containing shutdown statistics"
            },
            {
              "name": "set_performance_mode",
              "lineno": 1541,
              "args": [
                "self",
                "mode"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Set performance mode to optimize resource usage."
            }
          ]
        },
        {
          "name": "MCPServer",
          "lineno": 1632,
          "bases": [],
          "doc": "MCP Server implementation for handling JSON-RPC requests.\n\nThis class provides a server implementation that can handle\nMCP protocol requests and responses.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 1640,
              "args": [
                "self",
                "mcp_instance"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the MCP server.\n\nArgs:\n    mcp_instance: MCP instance to use for tool execution"
            },
            {
              "name": "start",
              "lineno": 1660,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Start the MCP server."
            },
            {
              "name": "stop",
              "lineno": 1670,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Stop the MCP server."
            },
            {
              "name": "handle_request",
              "lineno": 1680,
              "args": [
                "self",
                "request"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Handle an incoming JSON-RPC request.\n\nArgs:\n    request: JSON-RPC request dictionary\n    \nReturns:\n    JSON-RPC response dictionary"
            },
            {
              "name": "_handle_initialize",
              "lineno": 1723,
              "args": [
                "self",
                "params"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Handle initialize request."
            },
            {
              "name": "_handle_initialized",
              "lineno": 1734,
              "args": [
                "self",
                "params"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Handle initialized notification."
            },
            {
              "name": "_handle_tools_list",
              "lineno": 1738,
              "args": [
                "self",
                "params"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Handle tools/list request."
            },
            {
              "name": "_handle_tools_call",
              "lineno": 1742,
              "args": [
                "self",
                "params"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Handle tools/call request."
            },
            {
              "name": "_handle_resources_list",
              "lineno": 1753,
              "args": [
                "self",
                "params"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Handle resources/list request."
            },
            {
              "name": "_handle_resources_read",
              "lineno": 1757,
              "args": [
                "self",
                "params"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Handle resources/read request."
            },
            {
              "name": "_handle_shutdown",
              "lineno": 1767,
              "args": [
                "self",
                "params"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Handle shutdown request."
            },
            {
              "name": "_handle_exit",
              "lineno": 1772,
              "args": [
                "self",
                "params"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Handle exit request."
            },
            {
              "name": "_create_success_response",
              "lineno": 1777,
              "args": [
                "self",
                "result",
                "request_id"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Create a successful JSON-RPC response."
            },
            {
              "name": "_create_error_response",
              "lineno": 1787,
              "args": [
                "self",
                "code",
                "message",
                "data",
                "request_id"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Create an error JSON-RPC response."
            }
          ]
        }
      ]
    },
    {
      "file": "src/mcp/meta_mcp.py",
      "module": "mcp.meta_mcp",
      "functions": [
        {
          "name": "get_mcp_server_status",
          "lineno": 28,
          "args": [
            "mcp_instance_ref"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get comprehensive status information about the MCP server.\n\nArgs:\n    mcp_instance_ref: Reference to the MCP instance running the server.\n                      \nReturns:\n    Dictionary containing detailed server status information."
        },
        {
          "name": "get_mcp_auth_status",
          "lineno": 80,
          "args": [
            "mcp_instance_ref"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get the authentication status and configuration of the MCP server.\n\nArgs:\n    mcp_instance_ref: Reference to the MCP instance.\n    \nReturns:\n    Dictionary with authentication status and configuration."
        },
        {
          "name": "get_mcp_encryption_status",
          "lineno": 107,
          "args": [
            "mcp_instance_ref"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get the encryption status of the MCP server connections and data handling.\n\nArgs:\n    mcp_instance_ref: Reference to the MCP instance.\n\nReturns:\n    Dictionary with encryption status and recommendations."
        },
        {
          "name": "get_mcp_module_info",
          "lineno": 142,
          "args": [
            "mcp_instance_ref",
            "module_name"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get detailed information about a specific loaded module.\n\nArgs:\n    mcp_instance_ref: Reference to the MCP instance.\n    module_name: Name of the module to query.\n    \nReturns:\n    Dictionary with detailed module information."
        },
        {
          "name": "get_mcp_tool_categories",
          "lineno": 198,
          "args": [
            "mcp_instance_ref"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get tools organized by category for easier discovery.\n\nArgs:\n    mcp_instance_ref: Reference to the MCP instance.\n    \nReturns:\n    Dictionary with tools organized by category."
        },
        {
          "name": "get_mcp_performance_metrics",
          "lineno": 229,
          "args": [
            "mcp_instance_ref"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get performance metrics and statistics for the MCP server.\n\nArgs:\n    mcp_instance_ref: Reference to the MCP instance.\n    \nReturns:\n    Dictionary with performance metrics."
        },
        {
          "name": "register_tools",
          "lineno": 261,
          "args": [
            "mcp_instance"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register MCP meta-tools with the MCP server itself.\n\nThese tools provide introspection and diagnostic capabilities for the MCP server,\nallowing clients to understand the server's state, capabilities, and performance.\n\nArgs:\n    mcp_instance: The main MCP instance to register tools with."
        },
        {
          "name": "get_status_wrapper",
          "lineno": 274,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_auth_wrapper",
          "lineno": 277,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_encryption_wrapper",
          "lineno": 280,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_module_info_wrapper",
          "lineno": 283,
          "args": [
            "module_name"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_tool_categories_wrapper",
          "lineno": 286,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_performance_metrics_wrapper",
          "lineno": 289,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/mcp/npx_inspector.py",
      "module": "mcp.npx_inspector",
      "functions": [
        {
          "name": "print_json",
          "lineno": 30,
          "args": [
            "data"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Prints JSON data with indentation."
        },
        {
          "name": "read_server_output",
          "lineno": 34,
          "args": [
            "process",
            "output_queue",
            "error_queue"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Reads stdout from the server process and puts lines into a queue."
        },
        {
          "name": "read_server_errors",
          "lineno": 41,
          "args": [
            "process",
            "error_queue"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Reads stderr from the server process and puts lines into a queue."
        },
        {
          "name": "handle_list_capabilities",
          "lineno": 146,
          "args": [
            "client",
            "args"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Handles the 'list-capabilities' command."
        },
        {
          "name": "handle_execute_tool",
          "lineno": 157,
          "args": [
            "client",
            "args"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Handles the 'execute-tool' command."
        },
        {
          "name": "handle_get_resource",
          "lineno": 173,
          "args": [
            "client",
            "args"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Handles the 'get-resource' command."
        },
        {
          "name": "main",
          "lineno": 185,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 50,
          "args": [
            "self",
            "process"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_send_request",
          "lineno": 70,
          "args": [
            "self",
            "method",
            "params"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_capabilities",
          "lineno": 124,
          "args": [
            "self"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "execute_tool",
          "lineno": 129,
          "args": [
            "self",
            "tool_name",
            "tool_params"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_resource",
          "lineno": 133,
          "args": [
            "self",
            "uri"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "StdioMCPClient",
          "lineno": 48,
          "bases": [],
          "doc": "A simple client to interact with an MCP server over stdio.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 50,
              "args": [
                "self",
                "process"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_send_request",
              "lineno": 70,
              "args": [
                "self",
                "method",
                "params"
              ],
              "returns": "dict",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_capabilities",
              "lineno": 124,
              "args": [
                "self"
              ],
              "returns": "dict",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "execute_tool",
              "lineno": 129,
              "args": [
                "self",
                "tool_name",
                "tool_params"
              ],
              "returns": "dict",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_resource",
              "lineno": 133,
              "args": [
                "self",
                "uri"
              ],
              "returns": "dict",
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/mcp/processor.py",
      "module": "mcp.processor",
      "functions": [
        {
          "name": "register_module_tools",
          "lineno": 21,
          "args": [
            "module_name"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Register tools for a specific module.\n\nArgs:\n    module_name: Name of the module to register tools for\n    \nReturns:\n    True if registration successful, False otherwise"
        },
        {
          "name": "handle_mcp_request",
          "lineno": 74,
          "args": [
            "request"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Handle MCP request.\n\nArgs:\n    request: MCP request dictionary\n    \nReturns:\n    Response dictionary"
        },
        {
          "name": "generate_mcp_report",
          "lineno": 132,
          "args": [],
          "returns": "dict",
          "decorators": [],
          "doc": "Generate MCP report.\n\nReturns:\n    Dictionary with MCP report"
        },
        {
          "name": "process_mcp",
          "lineno": 164,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process MCP for GNN files.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Directory to save results\n    verbose: Enable verbose output\n    **kwargs: Additional arguments\n    \nReturns:\n    True if processing successful, False otherwise"
        },
        {
          "name": "get_available_tools",
          "lineno": 224,
          "args": [],
          "returns": "list",
          "decorators": [],
          "doc": "Get list of available MCP tools.\n\nReturns:\n    List of available tools"
        }
      ],
      "classes": []
    },
    {
      "file": "src/mcp/server.py",
      "module": "mcp.server",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/mcp/server_http.py",
      "module": "mcp.server_http",
      "functions": [
        {
          "name": "start_http_server",
          "lineno": 192,
          "args": [
            "host",
            "port"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Start an MCP server using HTTP transport."
        },
        {
          "name": "do_POST",
          "lineno": 36,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Handle POST requests (JSON-RPC 2.0)."
        },
        {
          "name": "_handle_jsonrpc",
          "lineno": 56,
          "args": [
            "self",
            "request"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Process a JSON-RPC message, supporting both standard MCP methods and direct tool invocation."
        },
        {
          "name": "_send_jsonrpc_result",
          "lineno": 103,
          "args": [
            "self",
            "request_id",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Send a successful JSON-RPC response."
        },
        {
          "name": "_send_jsonrpc_error",
          "lineno": 113,
          "args": [
            "self",
            "request_id",
            "code",
            "message",
            "data"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Send a JSON-RPC error response, including optional data."
        },
        {
          "name": "_send_json_response",
          "lineno": 126,
          "args": [
            "self",
            "status_code",
            "data"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Send a JSON response."
        },
        {
          "name": "_send_error",
          "lineno": 134,
          "args": [
            "self",
            "status_code",
            "message"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Send an HTTP error response."
        },
        {
          "name": "log_message",
          "lineno": 142,
          "args": [
            "self",
            "format"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Override log_message to use our logger."
        },
        {
          "name": "__init__",
          "lineno": 150,
          "args": [
            "self",
            "host",
            "port"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "start",
          "lineno": 157,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Start the HTTP server."
        },
        {
          "name": "_server_thread",
          "lineno": 176,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Thread function that runs the HTTP server."
        },
        {
          "name": "stop",
          "lineno": 184,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Stop the HTTP server."
        }
      ],
      "classes": [
        {
          "name": "MCPHTTPHandler",
          "lineno": 31,
          "bases": [
            "BaseHTTPRequestHandler"
          ],
          "doc": "HTTP request handler for MCP JSON-RPC 2.0 requests.\nSupports both standard MCP methods and direct tool invocation.",
          "methods": [
            {
              "name": "do_POST",
              "lineno": 36,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Handle POST requests (JSON-RPC 2.0)."
            },
            {
              "name": "_handle_jsonrpc",
              "lineno": 56,
              "args": [
                "self",
                "request"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Process a JSON-RPC message, supporting both standard MCP methods and direct tool invocation."
            },
            {
              "name": "_send_jsonrpc_result",
              "lineno": 103,
              "args": [
                "self",
                "request_id",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Send a successful JSON-RPC response."
            },
            {
              "name": "_send_jsonrpc_error",
              "lineno": 113,
              "args": [
                "self",
                "request_id",
                "code",
                "message",
                "data"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Send a JSON-RPC error response, including optional data."
            },
            {
              "name": "_send_json_response",
              "lineno": 126,
              "args": [
                "self",
                "status_code",
                "data"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Send a JSON response."
            },
            {
              "name": "_send_error",
              "lineno": 134,
              "args": [
                "self",
                "status_code",
                "message"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Send an HTTP error response."
            },
            {
              "name": "log_message",
              "lineno": 142,
              "args": [
                "self",
                "format"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Override log_message to use our logger."
            }
          ]
        },
        {
          "name": "MCPHTTPServer",
          "lineno": 146,
          "bases": [],
          "doc": "HTTP server for MCP. Runs in a background thread and supports graceful shutdown.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 150,
              "args": [
                "self",
                "host",
                "port"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "start",
              "lineno": 157,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Start the HTTP server."
            },
            {
              "name": "_server_thread",
              "lineno": 176,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Thread function that runs the HTTP server."
            },
            {
              "name": "stop",
              "lineno": 184,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Stop the HTTP server."
            }
          ]
        }
      ]
    },
    {
      "file": "src/mcp/server_stdio.py",
      "module": "mcp.server_stdio",
      "functions": [
        {
          "name": "start_stdio_server",
          "lineno": 234,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Start an MCP server using stdio transport."
        },
        {
          "name": "__init__",
          "lineno": 40,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the stdio server with queues and thread management."
        },
        {
          "name": "start",
          "lineno": 48,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Start the server with reader, processor, and writer threads."
        },
        {
          "name": "_reader_thread",
          "lineno": 83,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Thread that reads JSON-RPC messages from stdin."
        },
        {
          "name": "_processor_thread",
          "lineno": 110,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Thread that processes messages from the request queue."
        },
        {
          "name": "_writer_thread",
          "lineno": 130,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Thread that writes JSON-RPC responses to stdout."
        },
        {
          "name": "_process_message",
          "lineno": 152,
          "args": [
            "self",
            "message"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Process an incoming JSON-RPC message."
        },
        {
          "name": "_process_jsonrpc",
          "lineno": 164,
          "args": [
            "self",
            "message"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Process a JSON-RPC message, supporting both standard MCP methods and direct tool invocation."
        },
        {
          "name": "_send_result",
          "lineno": 213,
          "args": [
            "self",
            "request_id",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Send a successful JSON-RPC result response."
        },
        {
          "name": "_send_error",
          "lineno": 222,
          "args": [
            "self",
            "request_id",
            "code",
            "message",
            "data"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Send a JSON-RPC error response, including optional data."
        }
      ],
      "classes": [
        {
          "name": "StdioServer",
          "lineno": 32,
          "bases": [],
          "doc": "A Model Context Protocol server implementation using stdio transport.\n\nThis server reads JSON-RPC 2.0 requests from stdin and writes responses to stdout,\nsupporting both standard MCP methods and direct tool invocation.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 40,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the stdio server with queues and thread management."
            },
            {
              "name": "start",
              "lineno": 48,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Start the server with reader, processor, and writer threads."
            },
            {
              "name": "_reader_thread",
              "lineno": 83,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Thread that reads JSON-RPC messages from stdin."
            },
            {
              "name": "_processor_thread",
              "lineno": 110,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Thread that processes messages from the request queue."
            },
            {
              "name": "_writer_thread",
              "lineno": 130,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Thread that writes JSON-RPC responses to stdout."
            },
            {
              "name": "_process_message",
              "lineno": 152,
              "args": [
                "self",
                "message"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Process an incoming JSON-RPC message."
            },
            {
              "name": "_process_jsonrpc",
              "lineno": 164,
              "args": [
                "self",
                "message"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Process a JSON-RPC message, supporting both standard MCP methods and direct tool invocation."
            },
            {
              "name": "_send_result",
              "lineno": 213,
              "args": [
                "self",
                "request_id",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Send a successful JSON-RPC result response."
            },
            {
              "name": "_send_error",
              "lineno": 222,
              "args": [
                "self",
                "request_id",
                "code",
                "message",
                "data"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Send a JSON-RPC error response, including optional data."
            }
          ]
        }
      ]
    },
    {
      "file": "src/mcp/sympy_mcp.py",
      "module": "mcp.sympy_mcp",
      "functions": [
        {
          "name": "register_tools",
          "lineno": 19,
          "args": [
            "mcp_instance"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register SymPy MCP tools with the main MCP instance.\n\nArgs:\n    mcp_instance: The main MCP instance to register tools with"
        },
        {
          "name": "find_sympy_server_executable",
          "lineno": 192,
          "args": [],
          "returns": "Optional[str]",
          "decorators": [],
          "doc": "Try to find the SymPy MCP server executable"
        },
        {
          "name": "validate_equation_tool_sync",
          "lineno": 402,
          "args": [
            "equation",
            "context"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Synchronous wrapper for equation validation"
        },
        {
          "name": "validate_matrix_tool_sync",
          "lineno": 413,
          "args": [
            "matrix_data",
            "matrix_type"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Synchronous wrapper for matrix validation"
        },
        {
          "name": "analyze_stability_tool_sync",
          "lineno": 420,
          "args": [
            "transition_matrices"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Synchronous wrapper for stability analysis"
        },
        {
          "name": "simplify_expression_tool_sync",
          "lineno": 427,
          "args": [
            "expression"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Synchronous wrapper for expression simplification"
        },
        {
          "name": "solve_equation_tool_sync",
          "lineno": 434,
          "args": [
            "equation",
            "variable",
            "domain"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Synchronous wrapper for equation solving"
        },
        {
          "name": "get_latex_tool_sync",
          "lineno": 441,
          "args": [
            "expression"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Synchronous wrapper for LaTeX conversion"
        },
        {
          "name": "initialize_sympy_tool_sync",
          "lineno": 448,
          "args": [
            "server_executable"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Synchronous wrapper for SymPy initialization"
        },
        {
          "name": "cleanup_sympy_tool_sync",
          "lineno": 455,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Synchronous wrapper for SymPy cleanup"
        }
      ],
      "classes": []
    },
    {
      "file": "src/mcp/sympy_mcp_client.py",
      "module": "mcp.sympy_mcp_client",
      "functions": [
        {
          "name": "__init__",
          "lineno": 47,
          "args": [
            "self",
            "server_url",
            "server_executable",
            "auto_start_server"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize SymPy MCP client.\n\nArgs:\n    server_url: URL of the SymPy MCP server\n    server_executable: Path to SymPy MCP server executable\n    auto_start_server: Whether to automatically start server if not running"
        },
        {
          "name": "__init__",
          "lineno": 302,
          "args": [
            "self",
            "sympy_client"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize GNN-SymPy integration.\n\nArgs:\n    sympy_client: Connected SymPy MCP client"
        },
        {
          "name": "_convert_gnn_to_sympy_syntax",
          "lineno": 455,
          "args": [
            "self",
            "gnn_expr"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert GNN mathematical syntax to SymPy syntax.\n\nArgs:\n    gnn_expr: Expression in GNN syntax\n    \nReturns:\n    Expression in SymPy syntax"
        },
        {
          "name": "__init__",
          "lineno": 27,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "SymPyMCPError",
          "lineno": 36,
          "bases": [
            "Exception"
          ],
          "doc": "Base exception for SymPy MCP operations",
          "methods": []
        },
        {
          "name": "SymPyMCPConnectionError",
          "lineno": 40,
          "bases": [
            "SymPyMCPError"
          ],
          "doc": "Exception raised when connection to SymPy MCP server fails",
          "methods": []
        },
        {
          "name": "SymPyMCPClient",
          "lineno": 44,
          "bases": [],
          "doc": "Client for interacting with SymPy MCP server",
          "methods": [
            {
              "name": "__init__",
              "lineno": 47,
              "args": [
                "self",
                "server_url",
                "server_executable",
                "auto_start_server"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize SymPy MCP client.\n\nArgs:\n    server_url: URL of the SymPy MCP server\n    server_executable: Path to SymPy MCP server executable\n    auto_start_server: Whether to automatically start server if not running"
            }
          ]
        },
        {
          "name": "GNNSymPyIntegration",
          "lineno": 299,
          "bases": [],
          "doc": "Integration layer between GNN and SymPy MCP for mathematical validation and analysis",
          "methods": [
            {
              "name": "__init__",
              "lineno": 302,
              "args": [
                "self",
                "sympy_client"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize GNN-SymPy integration.\n\nArgs:\n    sympy_client: Connected SymPy MCP client"
            },
            {
              "name": "_convert_gnn_to_sympy_syntax",
              "lineno": 455,
              "args": [
                "self",
                "gnn_expr"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert GNN mathematical syntax to SymPy syntax.\n\nArgs:\n    gnn_expr: Expression in GNN syntax\n    \nReturns:\n    Expression in SymPy syntax"
            }
          ]
        },
        {
          "name": "_DummyHttpx",
          "lineno": 25,
          "bases": [],
          "doc": "",
          "methods": []
        },
        {
          "name": "AsyncClient",
          "lineno": 26,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "__init__",
              "lineno": 27,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "RequestError",
          "lineno": 31,
          "bases": [
            "Exception"
          ],
          "doc": "",
          "methods": []
        }
      ]
    },
    {
      "file": "src/ml_integration/__init__.py",
      "module": "ml_integration.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/ml_integration/processor.py",
      "module": "ml_integration.processor",
      "functions": [
        {
          "name": "process_ml_integration",
          "lineno": 14,
          "args": [
            "target_dir",
            "output_dir",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process ML integration for GNN models.\n\nArgs:\n    target_dir: Directory containing GNN files\n    output_dir: Output directory for ML integration results\n    recursive: Whether to process subdirectories recursively\n    verbose: Enable verbose logging\n    **kwargs: Additional keyword arguments\n    \nReturns:\n    bool: True if processing succeeded, False otherwise"
        }
      ],
      "classes": []
    },
    {
      "file": "src/model_registry/__init__.py",
      "module": "model_registry.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/model_registry/legacy.py",
      "module": "model_registry.legacy",
      "functions": [
        {
          "name": "registry",
          "lineno": 8,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Legacy function name compatibility for model registry operations.\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    Model registry operation result"
        }
      ],
      "classes": []
    },
    {
      "file": "src/model_registry/mcp.py",
      "module": "model_registry.mcp",
      "functions": [
        {
          "name": "register_tools",
          "lineno": 15,
          "args": [
            "registry"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register all model registry tools with the MCP registry.\n\nArgs:\n    registry: The MCP tool registry"
        },
        {
          "name": "register_model",
          "lineno": 152,
          "args": [
            "model_path",
            "registry_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Register a model in the registry.\n\nArgs:\n    model_path: Path to the model file\n    registry_path: Path to the registry file\n    \nReturns:\n    Registration result with model ID and status"
        },
        {
          "name": "get_model",
          "lineno": 212,
          "args": [
            "model_id",
            "registry_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get a model from the registry by ID.\n\nArgs:\n    model_id: Model ID\n    registry_path: Path to the registry file\n    \nReturns:\n    Model entry with metadata and versions"
        },
        {
          "name": "search_models",
          "lineno": 263,
          "args": [
            "query",
            "registry_path"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Search models in the registry by name, description, or tags.\n\nArgs:\n    query: Search query\n    registry_path: Path to the registry file\n    \nReturns:\n    List of matching model entries"
        },
        {
          "name": "list_models",
          "lineno": 307,
          "args": [
            "registry_path"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "List all models in the registry.\n\nArgs:\n    registry_path: Path to the registry file\n    \nReturns:\n    List of all model entries"
        }
      ],
      "classes": []
    },
    {
      "file": "src/model_registry/registry.py",
      "module": "model_registry.registry",
      "functions": [
        {
          "name": "process_model_registry",
          "lineno": 410,
          "args": [
            "target_dir",
            "output_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Process model registry for GNN files in the target directory.\n\nArgs:\n    target_dir: Directory containing GNN files\n    output_dir: Directory to save registry results\n    **kwargs: Additional arguments\n    \nReturns:\n    Dictionary with processing results"
        },
        {
          "name": "__init__",
          "lineno": 18,
          "args": [
            "self",
            "version",
            "file_path",
            "created_at"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize a model version.\n\nArgs:\n    version: Version string (e.g., \"1.0.0\")\n    file_path: Path to the model file\n    created_at: Creation timestamp (ISO format)"
        },
        {
          "name": "_compute_hash",
          "lineno": 33,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Compute a hash of the model file content."
        },
        {
          "name": "to_dict",
          "lineno": 42,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Convert to dictionary for serialization."
        },
        {
          "name": "from_dict",
          "lineno": 53,
          "args": [
            "cls",
            "data"
          ],
          "returns": "'ModelVersion'",
          "decorators": [
            "classmethod"
          ],
          "doc": "Create a ModelVersion from a dictionary."
        },
        {
          "name": "__init__",
          "lineno": 67,
          "args": [
            "self",
            "model_id",
            "name"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize a model entry.\n\nArgs:\n    model_id: Unique identifier for the model\n    name: Human-readable name for the model"
        },
        {
          "name": "add_version",
          "lineno": 85,
          "args": [
            "self",
            "version"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Add a new version to the model.\n\nArgs:\n    version: ModelVersion object"
        },
        {
          "name": "get_version",
          "lineno": 96,
          "args": [
            "self",
            "version"
          ],
          "returns": "Optional[ModelVersion]",
          "decorators": [],
          "doc": "Get a specific version of the model.\n\nArgs:\n    version: Version string (if None, returns current version)\n    \nReturns:\n    ModelVersion object if found, None otherwise"
        },
        {
          "name": "add_tag",
          "lineno": 112,
          "args": [
            "self",
            "tag"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Add a tag to the model.\n\nArgs:\n    tag: Tag string"
        },
        {
          "name": "remove_tag",
          "lineno": 123,
          "args": [
            "self",
            "tag"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Remove a tag from the model.\n\nArgs:\n    tag: Tag string"
        },
        {
          "name": "update_metadata",
          "lineno": 134,
          "args": [
            "self",
            "metadata"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Update model metadata.\n\nArgs:\n    metadata: Dictionary of metadata"
        },
        {
          "name": "to_dict",
          "lineno": 144,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Convert to dictionary for serialization."
        },
        {
          "name": "from_dict",
          "lineno": 159,
          "args": [
            "cls",
            "data"
          ],
          "returns": "'ModelEntry'",
          "decorators": [
            "classmethod"
          ],
          "doc": "Create a ModelEntry from a dictionary."
        },
        {
          "name": "__init__",
          "lineno": 181,
          "args": [
            "self",
            "registry_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the model registry.\n\nArgs:\n    registry_path: Path to the registry file"
        },
        {
          "name": "load",
          "lineno": 192,
          "args": [
            "self"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Load the registry from file."
        },
        {
          "name": "save",
          "lineno": 204,
          "args": [
            "self"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Save the registry to file."
        },
        {
          "name": "register_model",
          "lineno": 217,
          "args": [
            "self",
            "model_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Register a model in the registry.\n\nArgs:\n    model_path: Path to the model file\n    \nReturns:\n    True if registration succeeded, False otherwise"
        },
        {
          "name": "get_model",
          "lineno": 273,
          "args": [
            "self",
            "model_id"
          ],
          "returns": "Optional[ModelEntry]",
          "decorators": [],
          "doc": "Get a model by ID.\n\nArgs:\n    model_id: Model ID\n    \nReturns:\n    ModelEntry if found, None otherwise"
        },
        {
          "name": "search_models",
          "lineno": 285,
          "args": [
            "self",
            "query"
          ],
          "returns": "List[ModelEntry]",
          "decorators": [],
          "doc": "Search models by name, description, or tags.\n\nArgs:\n    query: Search query\n    \nReturns:\n    List of matching ModelEntry objects"
        },
        {
          "name": "list_models",
          "lineno": 306,
          "args": [
            "self"
          ],
          "returns": "List[ModelEntry]",
          "decorators": [],
          "doc": "List all models in the registry.\n\nReturns:\n    List of all ModelEntry objects"
        },
        {
          "name": "delete_model",
          "lineno": 315,
          "args": [
            "self",
            "model_id"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Delete a model from the registry.\n\nArgs:\n    model_id: Model ID\n    \nReturns:\n    True if deletion succeeded, False otherwise"
        },
        {
          "name": "_extract_model_name",
          "lineno": 330,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[str]",
          "decorators": [],
          "doc": "Extract model name from content."
        },
        {
          "name": "_extract_version",
          "lineno": 344,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[str]",
          "decorators": [],
          "doc": "Extract version from content."
        },
        {
          "name": "_extract_tags",
          "lineno": 351,
          "args": [
            "self",
            "content"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Extract tags from content."
        },
        {
          "name": "_extract_description",
          "lineno": 359,
          "args": [
            "self",
            "content"
          ],
          "returns": "Optional[str]",
          "decorators": [],
          "doc": "Extract description from content."
        },
        {
          "name": "_extract_metadata",
          "lineno": 388,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Extract metadata from content."
        }
      ],
      "classes": [
        {
          "name": "ModelVersion",
          "lineno": 15,
          "bases": [],
          "doc": "Represents a specific version of a model.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 18,
              "args": [
                "self",
                "version",
                "file_path",
                "created_at"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize a model version.\n\nArgs:\n    version: Version string (e.g., \"1.0.0\")\n    file_path: Path to the model file\n    created_at: Creation timestamp (ISO format)"
            },
            {
              "name": "_compute_hash",
              "lineno": 33,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Compute a hash of the model file content."
            },
            {
              "name": "to_dict",
              "lineno": 42,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Convert to dictionary for serialization."
            },
            {
              "name": "from_dict",
              "lineno": 53,
              "args": [
                "cls",
                "data"
              ],
              "returns": "'ModelVersion'",
              "decorators": [
                "classmethod"
              ],
              "doc": "Create a ModelVersion from a dictionary."
            }
          ]
        },
        {
          "name": "ModelEntry",
          "lineno": 64,
          "bases": [],
          "doc": "Represents a model entry in the registry.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 67,
              "args": [
                "self",
                "model_id",
                "name"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize a model entry.\n\nArgs:\n    model_id: Unique identifier for the model\n    name: Human-readable name for the model"
            },
            {
              "name": "add_version",
              "lineno": 85,
              "args": [
                "self",
                "version"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Add a new version to the model.\n\nArgs:\n    version: ModelVersion object"
            },
            {
              "name": "get_version",
              "lineno": 96,
              "args": [
                "self",
                "version"
              ],
              "returns": "Optional[ModelVersion]",
              "decorators": [],
              "doc": "Get a specific version of the model.\n\nArgs:\n    version: Version string (if None, returns current version)\n    \nReturns:\n    ModelVersion object if found, None otherwise"
            },
            {
              "name": "add_tag",
              "lineno": 112,
              "args": [
                "self",
                "tag"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Add a tag to the model.\n\nArgs:\n    tag: Tag string"
            },
            {
              "name": "remove_tag",
              "lineno": 123,
              "args": [
                "self",
                "tag"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Remove a tag from the model.\n\nArgs:\n    tag: Tag string"
            },
            {
              "name": "update_metadata",
              "lineno": 134,
              "args": [
                "self",
                "metadata"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Update model metadata.\n\nArgs:\n    metadata: Dictionary of metadata"
            },
            {
              "name": "to_dict",
              "lineno": 144,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Convert to dictionary for serialization."
            },
            {
              "name": "from_dict",
              "lineno": 159,
              "args": [
                "cls",
                "data"
              ],
              "returns": "'ModelEntry'",
              "decorators": [
                "classmethod"
              ],
              "doc": "Create a ModelEntry from a dictionary."
            }
          ]
        },
        {
          "name": "ModelRegistry",
          "lineno": 178,
          "bases": [],
          "doc": "Centralized registry for GNN models.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 181,
              "args": [
                "self",
                "registry_path"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the model registry.\n\nArgs:\n    registry_path: Path to the registry file"
            },
            {
              "name": "load",
              "lineno": 192,
              "args": [
                "self"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Load the registry from file."
            },
            {
              "name": "save",
              "lineno": 204,
              "args": [
                "self"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Save the registry to file."
            },
            {
              "name": "register_model",
              "lineno": 217,
              "args": [
                "self",
                "model_path"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Register a model in the registry.\n\nArgs:\n    model_path: Path to the model file\n    \nReturns:\n    True if registration succeeded, False otherwise"
            },
            {
              "name": "get_model",
              "lineno": 273,
              "args": [
                "self",
                "model_id"
              ],
              "returns": "Optional[ModelEntry]",
              "decorators": [],
              "doc": "Get a model by ID.\n\nArgs:\n    model_id: Model ID\n    \nReturns:\n    ModelEntry if found, None otherwise"
            },
            {
              "name": "search_models",
              "lineno": 285,
              "args": [
                "self",
                "query"
              ],
              "returns": "List[ModelEntry]",
              "decorators": [],
              "doc": "Search models by name, description, or tags.\n\nArgs:\n    query: Search query\n    \nReturns:\n    List of matching ModelEntry objects"
            },
            {
              "name": "list_models",
              "lineno": 306,
              "args": [
                "self"
              ],
              "returns": "List[ModelEntry]",
              "decorators": [],
              "doc": "List all models in the registry.\n\nReturns:\n    List of all ModelEntry objects"
            },
            {
              "name": "delete_model",
              "lineno": 315,
              "args": [
                "self",
                "model_id"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Delete a model from the registry.\n\nArgs:\n    model_id: Model ID\n    \nReturns:\n    True if deletion succeeded, False otherwise"
            },
            {
              "name": "_extract_model_name",
              "lineno": 330,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[str]",
              "decorators": [],
              "doc": "Extract model name from content."
            },
            {
              "name": "_extract_version",
              "lineno": 344,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[str]",
              "decorators": [],
              "doc": "Extract version from content."
            },
            {
              "name": "_extract_tags",
              "lineno": 351,
              "args": [
                "self",
                "content"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Extract tags from content."
            },
            {
              "name": "_extract_description",
              "lineno": 359,
              "args": [
                "self",
                "content"
              ],
              "returns": "Optional[str]",
              "decorators": [],
              "doc": "Extract description from content."
            },
            {
              "name": "_extract_metadata",
              "lineno": 388,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Extract metadata from content."
            }
          ]
        }
      ]
    },
    {
      "file": "src/ontology/__init__.py",
      "module": "ontology.__init__",
      "functions": [
        {
          "name": "validate_ontology_terms",
          "lineno": 35,
          "args": [],
          "returns": "bool",
          "decorators": [],
          "doc": "Compatibility shim expected by some tests; returns True to indicate presence."
        }
      ],
      "classes": []
    },
    {
      "file": "src/ontology/mcp.py",
      "error": "parse_error: invalid syntax (<unknown>, line 15)"
    },
    {
      "file": "src/ontology/processor.py",
      "module": "ontology.processor",
      "functions": [
        {
          "name": "process_ontology",
          "lineno": 23,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process ontology for GNN files.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Directory to save results\n    verbose: Enable verbose output\n    **kwargs: Additional arguments\n    \nReturns:\n    True if processing successful, False otherwise"
        },
        {
          "name": "parse_gnn_ontology_section",
          "lineno": 76,
          "args": [
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse GNN ontology section from content.\n\nArgs:\n    content: GNN file content\n    \nReturns:\n    Dictionary with parsed ontology information"
        },
        {
          "name": "process_gnn_ontology",
          "lineno": 147,
          "args": [
            "gnn_file"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Process ontology for a single GNN file.\n\nArgs:\n    gnn_file: Path to the GNN file\n    \nReturns:\n    Dictionary with ontology processing results"
        },
        {
          "name": "load_defined_ontology_terms",
          "lineno": 196,
          "args": [],
          "returns": "Dict[str, List[str]]",
          "decorators": [],
          "doc": "Load defined ontology terms from the ontology terms file.\n\nReturns:\n    Dictionary mapping categories to lists of terms"
        },
        {
          "name": "validate_annotations",
          "lineno": 240,
          "args": [
            "annotations",
            "ontology_terms"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate annotations against ontology terms.\n\nArgs:\n    annotations: List of annotations to validate\n    ontology_terms: Dictionary of ontology terms (loaded if not provided)\n    \nReturns:\n    Dictionary with validation results"
        },
        {
          "name": "generate_ontology_report_for_file",
          "lineno": 299,
          "args": [
            "gnn_file",
            "output_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate ontology report for a single GNN file.\n\nArgs:\n    gnn_file: Path to the GNN file\n    output_dir: Output directory for reports\n    \nReturns:\n    Dictionary with report generation results"
        }
      ],
      "classes": []
    },
    {
      "file": "src/ontology/utils.py",
      "module": "ontology.utils",
      "functions": [
        {
          "name": "get_module_info",
          "lineno": 13,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get module information for ontology processing.\n\nReturns:\n    Dictionary with module information"
        },
        {
          "name": "get_ontology_processing_options",
          "lineno": 37,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get ontology processing options and configuration.\n\nReturns:\n    Dictionary with processing options"
        },
        {
          "name": "get_mcp_interface",
          "lineno": 63,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get MCP interface configuration for ontology module.\n\nReturns:\n    Dictionary with MCP interface configuration"
        }
      ],
      "classes": []
    },
    {
      "file": "src/pipeline/__init__.py",
      "module": "pipeline.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/pipeline/config.py",
      "module": "pipeline.config",
      "functions": [
        {
          "name": "get_pipeline_config",
          "lineno": 79,
          "args": [],
          "returns": "PipelineConfig",
          "decorators": [],
          "doc": "Get the pipeline configuration."
        },
        {
          "name": "set_pipeline_config",
          "lineno": 83,
          "args": [
            "config"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Set the pipeline configuration."
        },
        {
          "name": "get_output_dir_for_script",
          "lineno": 87,
          "args": [
            "script_name",
            "base_output_dir"
          ],
          "returns": "Path",
          "decorators": [],
          "doc": "Get output directory for a specific script."
        },
        {
          "name": "__init__",
          "lineno": 41,
          "args": [
            "self",
            "step_name"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 52,
          "args": [
            "self",
            "config_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_load_config",
          "lineno": 56,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Load configuration from file."
        },
        {
          "name": "get_step_config",
          "lineno": 66,
          "args": [
            "self",
            "step_name"
          ],
          "returns": "StepConfig",
          "decorators": [],
          "doc": "Get configuration for a specific step."
        },
        {
          "name": "save_config",
          "lineno": 71,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Save configuration to file."
        }
      ],
      "classes": [
        {
          "name": "StepConfig",
          "lineno": 38,
          "bases": [],
          "doc": "Configuration for a pipeline step.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 41,
              "args": [
                "self",
                "step_name"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "PipelineConfig",
          "lineno": 49,
          "bases": [],
          "doc": "Pipeline configuration manager.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 52,
              "args": [
                "self",
                "config_path"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_load_config",
              "lineno": 56,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Load configuration from file."
            },
            {
              "name": "get_step_config",
              "lineno": 66,
              "args": [
                "self",
                "step_name"
              ],
              "returns": "StepConfig",
              "decorators": [],
              "doc": "Get configuration for a specific step."
            },
            {
              "name": "save_config",
              "lineno": 71,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Save configuration to file."
            }
          ]
        }
      ]
    },
    {
      "file": "src/pipeline/discovery.py",
      "module": "pipeline.discovery",
      "functions": [
        {
          "name": "get_pipeline_scripts",
          "lineno": 9,
          "args": [
            "current_dir"
          ],
          "returns": "list[dict[str, int | str | Path]]",
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/pipeline/execution.py",
      "module": "pipeline.execution",
      "functions": [
        {
          "name": "run_pipeline",
          "lineno": 27,
          "args": [
            "pipeline_data"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Execute the pipeline with flexible arguments used in tests.\n\nAccepts either a pre-built pipeline_data dict or target/output directories.\nReturns a results dictionary with a success flag and basic metadata."
        },
        {
          "name": "get_pipeline_status",
          "lineno": 79,
          "args": [],
          "returns": "dict",
          "decorators": [],
          "doc": "Get the current pipeline status."
        },
        {
          "name": "validate_pipeline_config",
          "lineno": 88,
          "args": [
            "config"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate pipeline configuration."
        },
        {
          "name": "get_pipeline_info",
          "lineno": 96,
          "args": [],
          "returns": "dict",
          "decorators": [],
          "doc": "Get pipeline information."
        },
        {
          "name": "create_pipeline_config",
          "lineno": 105,
          "args": [],
          "returns": "dict",
          "decorators": [],
          "doc": "Create a default pipeline configuration."
        },
        {
          "name": "execute_pipeline_step",
          "lineno": 114,
          "args": [
            "step_name",
            "step_config",
            "pipeline_data"
          ],
          "returns": "StepExecutionResult",
          "decorators": [],
          "doc": "Execute a single pipeline step."
        },
        {
          "name": "execute_pipeline_steps",
          "lineno": 133,
          "args": [
            "steps",
            "pipeline_data"
          ],
          "returns": "List[StepExecutionResult]",
          "decorators": [],
          "doc": "Execute multiple pipeline steps."
        },
        {
          "name": "__post_init__",
          "lineno": 23,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "StepExecutionResult",
          "lineno": 14,
          "bases": [],
          "doc": "Result of a pipeline step execution.",
          "methods": [
            {
              "name": "__post_init__",
              "lineno": 23,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/pipeline/mcp.py",
      "module": "pipeline.mcp",
      "functions": [
        {
          "name": "get_pipeline_steps",
          "lineno": 23,
          "args": [
            "mcp_instance_ref"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get information about all available pipeline steps.\n\nReturns:\n    Dictionary containing pipeline step information."
        },
        {
          "name": "get_pipeline_status",
          "lineno": 60,
          "args": [
            "mcp_instance_ref"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get current pipeline execution status and statistics.\n\nReturns:\n    Dictionary containing pipeline status information."
        },
        {
          "name": "validate_pipeline_dependencies",
          "lineno": 114,
          "args": [
            "mcp_instance_ref"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate pipeline step dependencies and identify any issues.\n\nReturns:\n    Dictionary containing dependency validation results."
        },
        {
          "name": "get_pipeline_config_info",
          "lineno": 160,
          "args": [
            "mcp_instance_ref"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get detailed pipeline configuration information.\n\nReturns:\n    Dictionary containing pipeline configuration details."
        },
        {
          "name": "register_tools",
          "lineno": 188,
          "args": [
            "mcp_instance"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register pipeline management tools with the MCP server.\n\nArgs:\n    mcp_instance: The MCP instance to register tools with."
        },
        {
          "name": "get_steps_wrapper",
          "lineno": 198,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_status_wrapper",
          "lineno": 201,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "validate_deps_wrapper",
          "lineno": 204,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_config_wrapper",
          "lineno": 207,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/pipeline/pipeline_step_template.py",
      "module": "pipeline.pipeline_step_template",
      "functions": [
        {
          "name": "validate_step_requirements",
          "lineno": 60,
          "args": [],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate that all requirements for this step are met.\n\nReturns:\n    True if step can proceed, False otherwise"
        },
        {
          "name": "process_single_file",
          "lineno": 79,
          "args": [
            "input_file",
            "output_dir",
            "options"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process a single input file with comprehensive analysis and transformation.\n\nArgs:\n    input_file: Path to the input file\n    output_dir: Directory for outputs\n    options: Processing options from arguments\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "_detect_content_type",
          "lineno": 148,
          "args": [
            "content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Detect the type of content in the file."
        },
        {
          "name": "_extract_markdown_metadata",
          "lineno": 161,
          "args": [
            "content"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Extract metadata from markdown content."
        },
        {
          "name": "_extract_structured_metadata",
          "lineno": 189,
          "args": [
            "content",
            "file_type"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Extract metadata from structured files (JSON, YAML)."
        },
        {
          "name": "_extract_generic_metadata",
          "lineno": 217,
          "args": [
            "content"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Extract metadata from generic text content."
        },
        {
          "name": "_analyze_nested_structure",
          "lineno": 231,
          "args": [
            "data",
            "max_depth"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Analyze the nested structure of a dictionary."
        },
        {
          "name": "_generate_processed_content",
          "lineno": 255,
          "args": [
            "content",
            "analysis"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate processed content with annotations."
        },
        {
          "name": "_generate_summary_report",
          "lineno": 273,
          "args": [
            "analysis"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a comprehensive summary report in Markdown format."
        },
        {
          "name": "main",
          "lineno": 315,
          "args": [
            "parsed_args"
          ],
          "returns": "int",
          "decorators": [],
          "doc": "Main function for the pipeline step.\n\nArgs:\n    parsed_args: Parsed command line arguments\n    \nReturns:\n    Exit code (0=success, 1=error, 2=warnings)"
        },
        {
          "name": "_analyze_level",
          "lineno": 233,
          "args": [
            "obj",
            "depth"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/pipeline/pipeline_validation.py",
      "module": "pipeline.pipeline_validation",
      "functions": [
        {
          "name": "validate_module_imports",
          "lineno": 81,
          "args": [
            "module_path"
          ],
          "returns": "Dict[str, List[str]]",
          "decorators": [],
          "doc": "Validate that modules properly import and use centralized utilities."
        },
        {
          "name": "validate_output_structure",
          "lineno": 120,
          "args": [
            "output_dir"
          ],
          "returns": "Dict[str, List[str]]",
          "decorators": [],
          "doc": "Validate that expected outputs are being generated."
        },
        {
          "name": "get_pipeline_modules",
          "lineno": 138,
          "args": [
            "src_dir"
          ],
          "returns": "List[Path]",
          "decorators": [],
          "doc": "Get all numbered pipeline modules."
        },
        {
          "name": "validate_centralized_imports",
          "lineno": 154,
          "args": [
            "module_path"
          ],
          "returns": "Dict[str, List[str]]",
          "decorators": [],
          "doc": "Enhanced validation to check for proper centralized imports."
        },
        {
          "name": "validate_configuration_consistency",
          "lineno": 222,
          "args": [],
          "returns": "Dict[str, List[str]]",
          "decorators": [],
          "doc": "Validate that configuration is consistent across the pipeline."
        },
        {
          "name": "generate_improvement_recommendations",
          "lineno": 265,
          "args": [
            "report"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Generate specific improvement recommendations based on validation results."
        },
        {
          "name": "validate_argument_consistency",
          "lineno": 349,
          "args": [],
          "returns": "Dict[str, List[str]]",
          "decorators": [],
          "doc": "Validate that argument parsing is consistent across pipeline steps."
        },
        {
          "name": "validate_dependency_cycles",
          "lineno": 388,
          "args": [],
          "returns": "Dict[str, List[str]]",
          "decorators": [],
          "doc": "Check for circular dependencies in pipeline step configuration."
        },
        {
          "name": "validate_output_naming_conventions",
          "lineno": 445,
          "args": [],
          "returns": "Dict[str, List[str]]",
          "decorators": [],
          "doc": "Validate that output directory naming follows conventions."
        },
        {
          "name": "validate_performance_tracking_coverage",
          "lineno": 487,
          "args": [],
          "returns": "Dict[str, List[str]]",
          "decorators": [],
          "doc": "Check which steps have performance tracking enabled."
        },
        {
          "name": "generate_validation_report",
          "lineno": 520,
          "args": [
            "src_dir",
            "output_dir"
          ],
          "returns": "Dict",
          "decorators": [],
          "doc": "Generate a comprehensive validation report."
        },
        {
          "name": "print_validation_report",
          "lineno": 597,
          "args": [
            "report"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Print a human-readable validation report."
        },
        {
          "name": "main",
          "lineno": 684,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "find_cycles",
          "lineno": 403,
          "args": [
            "node",
            "path",
            "visited",
            "rec_stack"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/pipeline/update_version.py",
      "module": "pipeline.update_version",
      "functions": [
        {
          "name": "main",
          "lineno": 194,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main function."
        },
        {
          "name": "__init__",
          "lineno": 18,
          "args": [
            "self",
            "new_version",
            "project_root"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "validate_version",
          "lineno": 24,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate version format (semantic versioning)."
        },
        {
          "name": "update_citation_file",
          "lineno": 32,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Update CITATION.cff file."
        },
        {
          "name": "update_module_init_files",
          "lineno": 65,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Update all module __init__.py files."
        },
        {
          "name": "update_julia_scripts",
          "lineno": 103,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Update version in Julia scripts."
        },
        {
          "name": "update_changelog",
          "lineno": 125,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Update changelog with new version if it's a release."
        },
        {
          "name": "run_update",
          "lineno": 161,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Run the complete version update process."
        },
        {
          "name": "print_summary",
          "lineno": 176,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Print summary of update results."
        }
      ],
      "classes": [
        {
          "name": "VersionUpdater",
          "lineno": 15,
          "bases": [],
          "doc": "Updates version numbers across GNN project files.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 18,
              "args": [
                "self",
                "new_version",
                "project_root"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "validate_version",
              "lineno": 24,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Validate version format (semantic versioning)."
            },
            {
              "name": "update_citation_file",
              "lineno": 32,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Update CITATION.cff file."
            },
            {
              "name": "update_module_init_files",
              "lineno": 65,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Update all module __init__.py files."
            },
            {
              "name": "update_julia_scripts",
              "lineno": 103,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Update version in Julia scripts."
            },
            {
              "name": "update_changelog",
              "lineno": 125,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Update changelog with new version if it's a release."
            },
            {
              "name": "run_update",
              "lineno": 161,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Run the complete version update process."
            },
            {
              "name": "print_summary",
              "lineno": 176,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Print summary of update results."
            }
          ]
        }
      ]
    },
    {
      "file": "src/pipeline/validate_documentation.py",
      "module": "pipeline.validate_documentation",
      "functions": [
        {
          "name": "main",
          "lineno": 359,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main entry point"
        },
        {
          "name": "has_issues",
          "lineno": 36,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [
            "property"
          ],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 42,
          "args": [
            "self",
            "project_root",
            "verbose"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log",
          "lineno": 86,
          "args": [
            "self",
            "message",
            "level"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Log message if verbose mode enabled"
        },
        {
          "name": "find_markdown_files",
          "lineno": 91,
          "args": [
            "self"
          ],
          "returns": "List[Path]",
          "decorators": [],
          "doc": "Find all markdown files in documentation"
        },
        {
          "name": "validate_links",
          "lineno": 102,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Validate all links in a markdown file"
        },
        {
          "name": "_validate_single_link",
          "lineno": 121,
          "args": [
            "self",
            "file_path",
            "line_no",
            "text",
            "url"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Validate a single link"
        },
        {
          "name": "validate_pipeline_references",
          "lineno": 159,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Validate pipeline step references"
        },
        {
          "name": "validate_cross_references",
          "lineno": 201,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Validate cross-references and metadata"
        },
        {
          "name": "validate_file_existence",
          "lineno": 224,
          "args": [
            "self"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Validate that referenced files exist"
        },
        {
          "name": "fix_common_issues",
          "lineno": 245,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Attempt to fix common documentation issues"
        },
        {
          "name": "validate_all",
          "lineno": 292,
          "args": [
            "self",
            "fix_issues"
          ],
          "returns": "ValidationResult",
          "decorators": [],
          "doc": "Run all validation checks"
        },
        {
          "name": "generate_report",
          "lineno": 325,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a detailed validation report"
        }
      ],
      "classes": [
        {
          "name": "ValidationResult",
          "lineno": 29,
          "bases": [],
          "doc": "Container for validation results",
          "methods": [
            {
              "name": "has_issues",
              "lineno": 36,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [
                "property"
              ],
              "doc": ""
            }
          ]
        },
        {
          "name": "DocumentationValidator",
          "lineno": 39,
          "bases": [],
          "doc": "Main documentation validation class",
          "methods": [
            {
              "name": "__init__",
              "lineno": 42,
              "args": [
                "self",
                "project_root",
                "verbose"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "log",
              "lineno": 86,
              "args": [
                "self",
                "message",
                "level"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Log message if verbose mode enabled"
            },
            {
              "name": "find_markdown_files",
              "lineno": 91,
              "args": [
                "self"
              ],
              "returns": "List[Path]",
              "decorators": [],
              "doc": "Find all markdown files in documentation"
            },
            {
              "name": "validate_links",
              "lineno": 102,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Validate all links in a markdown file"
            },
            {
              "name": "_validate_single_link",
              "lineno": 121,
              "args": [
                "self",
                "file_path",
                "line_no",
                "text",
                "url"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Validate a single link"
            },
            {
              "name": "validate_pipeline_references",
              "lineno": 159,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Validate pipeline step references"
            },
            {
              "name": "validate_cross_references",
              "lineno": 201,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Validate cross-references and metadata"
            },
            {
              "name": "validate_file_existence",
              "lineno": 224,
              "args": [
                "self"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Validate that referenced files exist"
            },
            {
              "name": "fix_common_issues",
              "lineno": 245,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Attempt to fix common documentation issues"
            },
            {
              "name": "validate_all",
              "lineno": 292,
              "args": [
                "self",
                "fix_issues"
              ],
              "returns": "ValidationResult",
              "decorators": [],
              "doc": "Run all validation checks"
            },
            {
              "name": "generate_report",
              "lineno": 325,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate a detailed validation report"
            }
          ]
        }
      ]
    },
    {
      "file": "src/pipeline/verify_pipeline.py",
      "module": "pipeline.verify_pipeline",
      "functions": [
        {
          "name": "verify_pipeline_discovery",
          "lineno": 13,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Verify pipeline step discovery."
        },
        {
          "name": "verify_module_imports",
          "lineno": 36,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Verify that all modules can be imported."
        },
        {
          "name": "verify_pipeline_config",
          "lineno": 84,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Verify pipeline configuration."
        },
        {
          "name": "verify_step_files",
          "lineno": 104,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Verify that all step files exist."
        },
        {
          "name": "verify_mcp_integration",
          "lineno": 150,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Verify MCP integration files."
        },
        {
          "name": "verify_test_modules",
          "lineno": 179,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Verify test modules."
        },
        {
          "name": "main",
          "lineno": 210,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main verification function."
        }
      ],
      "classes": []
    },
    {
      "file": "src/render/__init__.py",
      "module": "render.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/render/activeinference_jl/__init__.py",
      "module": "render.activeinference_jl.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/render/activeinference_jl/activeinference_jl_renderer.py",
      "module": "render.activeinference_jl.activeinference_jl_renderer",
      "functions": [
        {
          "name": "render_gnn_to_activeinference_jl",
          "lineno": 451,
          "args": [
            "gnn_spec",
            "output_script_path",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Render GNN specification to ActiveInference.jl simulation script.\n\nArgs:\n    gnn_spec: Parsed GNN specification dictionary\n    output_script_path: Path for output ActiveInference.jl script\n    options: Optional rendering options\n    \nReturns:\n    Tuple of (success, message, warnings)"
        },
        {
          "name": "__init__",
          "lineno": 30,
          "args": [
            "self",
            "options"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize ActiveInference.jl renderer.\n\nArgs:\n    options: Optional configuration options"
        },
        {
          "name": "render_file",
          "lineno": 40,
          "args": [
            "self",
            "gnn_file_path",
            "output_path"
          ],
          "returns": "Tuple[bool, str]",
          "decorators": [],
          "doc": "Render a single GNN file to ActiveInference.jl simulation code.\n\nArgs:\n    gnn_file_path: Path to GNN file\n    output_path: Path for output ActiveInference.jl script\n    \nReturns:\n    Tuple of (success, message)"
        },
        {
          "name": "_parse_gnn_content",
          "lineno": 75,
          "args": [
            "self",
            "content",
            "model_name"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse GNN content into a structured dictionary (simplified parser)."
        },
        {
          "name": "_generate_activeinference_simulation_code",
          "lineno": 106,
          "args": [
            "self",
            "gnn_spec",
            "model_name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate executable ActiveInference.jl simulation code from GNN specification.\n\nArgs:\n    gnn_spec: Parsed GNN specification\n    model_name: Name of the model\n    \nReturns:\n    Generated Julia code string"
        },
        {
          "name": "_get_timestamp",
          "lineno": 446,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get current timestamp string."
        }
      ],
      "classes": [
        {
          "name": "ActiveInferenceJlRenderer",
          "lineno": 25,
          "bases": [],
          "doc": "ActiveInference.jl renderer for generating Julia Active Inference code from GNN specifications.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 30,
              "args": [
                "self",
                "options"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize ActiveInference.jl renderer.\n\nArgs:\n    options: Optional configuration options"
            },
            {
              "name": "render_file",
              "lineno": 40,
              "args": [
                "self",
                "gnn_file_path",
                "output_path"
              ],
              "returns": "Tuple[bool, str]",
              "decorators": [],
              "doc": "Render a single GNN file to ActiveInference.jl simulation code.\n\nArgs:\n    gnn_file_path: Path to GNN file\n    output_path: Path for output ActiveInference.jl script\n    \nReturns:\n    Tuple of (success, message)"
            },
            {
              "name": "_parse_gnn_content",
              "lineno": 75,
              "args": [
                "self",
                "content",
                "model_name"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Parse GNN content into a structured dictionary (simplified parser)."
            },
            {
              "name": "_generate_activeinference_simulation_code",
              "lineno": 106,
              "args": [
                "self",
                "gnn_spec",
                "model_name"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate executable ActiveInference.jl simulation code from GNN specification.\n\nArgs:\n    gnn_spec: Parsed GNN specification\n    model_name: Name of the model\n    \nReturns:\n    Generated Julia code string"
            },
            {
              "name": "_get_timestamp",
              "lineno": 446,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Get current timestamp string."
            }
          ]
        }
      ]
    },
    {
      "file": "src/render/activeinference_jl/activeinference_renderer.py",
      "module": "render.activeinference_jl.activeinference_renderer",
      "functions": [
        {
          "name": "render_gnn_to_activeinference_jl",
          "lineno": 17,
          "args": [
            "gnn_spec",
            "output_path",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Render a GNN specification to ActiveInference.jl script.\n\nArgs:\n    gnn_spec: The GNN specification as a Python dictionary\n    output_path: Path where the Julia script will be saved\n    options: Rendering options\n    \nReturns:\n    Tuple of (success: bool, message: str, artifact_uris: List[str])"
        },
        {
          "name": "extract_model_info",
          "lineno": 58,
          "args": [
            "gnn_spec"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Extract relevant model information from GNN specification for ActiveInference.jl.\nRobustly handles GNN state space and parameter extraction."
        },
        {
          "name": "generate_activeinference_script",
          "lineno": 162,
          "args": [
            "model_info"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a streamlined ActiveInference.jl script content.\n\nArgs:\n    model_info: Extracted model information\n    \nReturns:\n    Generated Julia script as string"
        },
        {
          "name": "render_gnn_to_activeinference_combined",
          "lineno": 448,
          "args": [
            "gnn_spec",
            "output_dir",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Render a GNN specification to ActiveInference.jl script (simplified version).\n\nArgs:\n    gnn_spec: The GNN specification as a Python dictionary\n    output_dir: Directory where outputs will be saved\n    options: Rendering options\n    \nReturns:\n    Tuple of (success: bool, message: str, artifact_uris: List[str])"
        },
        {
          "name": "matrix_to_julia",
          "lineno": 185,
          "args": [
            "matrix_data"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/render/activeinference_jl/activeinference_renderer_fixed.py",
      "module": "render.activeinference_jl.activeinference_renderer_fixed",
      "functions": [
        {
          "name": "render_gnn_to_activeinference_jl_fixed",
          "lineno": 17,
          "args": [
            "gnn_spec",
            "output_path",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Render a GNN specification to ActiveInference.jl script (fixed version).\n\nArgs:\n    gnn_spec: The GNN specification as a Python dictionary\n    output_path: Path where the Julia script will be saved\n    options: Rendering options\n    \nReturns:\n    Tuple of (success: bool, message: str, artifact_uris: List[str])"
        },
        {
          "name": "extract_model_info_fixed",
          "lineno": 58,
          "args": [
            "gnn_spec"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Extract relevant model information from GNN specification for ActiveInference.jl.\nFixed version that ensures proper data types."
        },
        {
          "name": "matrix_to_julia_fixed",
          "lineno": 91,
          "args": [
            "matrix_data"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Convert matrix data to Julia format (fixed version)."
        },
        {
          "name": "generate_activeinference_script_fixed",
          "lineno": 124,
          "args": [
            "model_info"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a corrected ActiveInference.jl script content that works with current API.\n\nArgs:\n    model_info: Extracted model information\n    \nReturns:\n    Generated Julia script as string"
        },
        {
          "name": "render_gnn_to_activeinference_combined_fixed",
          "lineno": 413,
          "args": [
            "gnn_spec",
            "output_dir",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Render a GNN specification to ActiveInference.jl script (fixed version).\n\nArgs:\n    gnn_spec: The GNN specification as a Python dictionary\n    output_dir: Directory where outputs will be saved\n    options: Rendering options\n    \nReturns:\n    Tuple of (success: bool, message: str, artifact_uris: List[str])"
        }
      ],
      "classes": []
    },
    {
      "file": "src/render/activeinference_jl/activeinference_renderer_simple.py",
      "module": "render.activeinference_jl.activeinference_renderer_simple",
      "functions": [
        {
          "name": "render_gnn_to_activeinference_jl_simple",
          "lineno": 17,
          "args": [
            "gnn_spec",
            "output_path",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Render a GNN specification to ActiveInference.jl script (simplified version).\n\nArgs:\n    gnn_spec: The GNN specification as a Python dictionary\n    output_path: Path where the Julia script will be saved\n    options: Rendering options\n    \nReturns:\n    Tuple of (success: bool, message: str, artifact_uris: List[str])"
        },
        {
          "name": "extract_model_info_simple",
          "lineno": 58,
          "args": [
            "gnn_spec"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Extract relevant model information from GNN specification for ActiveInference.jl.\nSimplified version that avoids complex parsing."
        },
        {
          "name": "matrix_to_julia_simple",
          "lineno": 98,
          "args": [
            "matrix_data"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Convert matrix data to Julia format (simplified version)."
        },
        {
          "name": "generate_activeinference_script_simple",
          "lineno": 131,
          "args": [
            "model_info"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a streamlined ActiveInference.jl script content (simplified version).\n\nArgs:\n    model_info: Extracted model information\n    \nReturns:\n    Generated Julia script as string"
        },
        {
          "name": "render_gnn_to_activeinference_combined_simple",
          "lineno": 394,
          "args": [
            "gnn_spec",
            "output_dir",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Render a GNN specification to ActiveInference.jl script (simplified version).\n\nArgs:\n    gnn_spec: The GNN specification as a Python dictionary\n    output_dir: Directory where outputs will be saved\n    options: Rendering options\n    \nReturns:\n    Tuple of (success: bool, message: str, artifact_uris: List[str])"
        }
      ],
      "classes": []
    },
    {
      "file": "src/render/discopy/__init__.py",
      "module": "render.discopy.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/render/discopy/discopy_renderer.py",
      "module": "render.discopy.discopy_renderer",
      "functions": [
        {
          "name": "render_gnn_to_discopy",
          "lineno": 459,
          "args": [
            "gnn_spec",
            "output_script_path",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Render GNN specification to DisCoPy categorical diagram script.\n\nArgs:\n    gnn_spec: Parsed GNN specification dictionary\n    output_script_path: Path for output DisCoPy script\n    options: Optional rendering options\n    \nReturns:\n    Tuple of (success, message, warnings)"
        },
        {
          "name": "__init__",
          "lineno": 30,
          "args": [
            "self",
            "options"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize DisCoPy renderer.\n\nArgs:\n    options: Optional configuration options"
        },
        {
          "name": "render_file",
          "lineno": 40,
          "args": [
            "self",
            "gnn_file_path",
            "output_path"
          ],
          "returns": "Tuple[bool, str]",
          "decorators": [],
          "doc": "Render a single GNN file to DisCoPy categorical diagram code.\n\nArgs:\n    gnn_file_path: Path to GNN file\n    output_path: Path for output DisCoPy script\n    \nReturns:\n    Tuple of (success, message)"
        },
        {
          "name": "_parse_gnn_content",
          "lineno": 75,
          "args": [
            "self",
            "content",
            "model_name"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse GNN content into a structured dictionary (simplified parser)."
        },
        {
          "name": "_generate_discopy_diagram_code",
          "lineno": 107,
          "args": [
            "self",
            "gnn_spec",
            "model_name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate executable DisCoPy categorical diagram code from GNN specification.\n\nArgs:\n    gnn_spec: Parsed GNN specification\n    model_name: Name of the model\n    \nReturns:\n    Generated Python code string"
        },
        {
          "name": "_get_timestamp",
          "lineno": 454,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get current timestamp string."
        }
      ],
      "classes": [
        {
          "name": "DisCoPyRenderer",
          "lineno": 25,
          "bases": [],
          "doc": "DisCoPy renderer for generating categorical diagram code from GNN specifications.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 30,
              "args": [
                "self",
                "options"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize DisCoPy renderer.\n\nArgs:\n    options: Optional configuration options"
            },
            {
              "name": "render_file",
              "lineno": 40,
              "args": [
                "self",
                "gnn_file_path",
                "output_path"
              ],
              "returns": "Tuple[bool, str]",
              "decorators": [],
              "doc": "Render a single GNN file to DisCoPy categorical diagram code.\n\nArgs:\n    gnn_file_path: Path to GNN file\n    output_path: Path for output DisCoPy script\n    \nReturns:\n    Tuple of (success, message)"
            },
            {
              "name": "_parse_gnn_content",
              "lineno": 75,
              "args": [
                "self",
                "content",
                "model_name"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Parse GNN content into a structured dictionary (simplified parser)."
            },
            {
              "name": "_generate_discopy_diagram_code",
              "lineno": 107,
              "args": [
                "self",
                "gnn_spec",
                "model_name"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate executable DisCoPy categorical diagram code from GNN specification.\n\nArgs:\n    gnn_spec: Parsed GNN specification\n    model_name: Name of the model\n    \nReturns:\n    Generated Python code string"
            },
            {
              "name": "_get_timestamp",
              "lineno": 454,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Get current timestamp string."
            }
          ]
        }
      ]
    },
    {
      "file": "src/render/discopy/test_improvements.py",
      "module": "render.discopy.test_improvements",
      "functions": [
        {
          "name": "test_discopy_improvements",
          "lineno": 18,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Test the improved DisCoPy translator functionality."
        }
      ],
      "classes": []
    },
    {
      "file": "src/render/discopy/translator.py",
      "module": "render.discopy.translator",
      "functions": [
        {
          "name": "generate_setup_report",
          "lineno": 39,
          "args": [],
          "returns": "str",
          "decorators": [],
          "doc": "Generate comprehensive setup instructions for DisCoPy and JAX."
        },
        {
          "name": "create_discopy_error_report",
          "lineno": 129,
          "args": [
            "gnn_file_path",
            "error_type"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Create a comprehensive error report when DisCoPy functionality is not available.\n\nArgs:\n    gnn_file_path: Path to the GNN file that was being processed\n    error_type: Type of error (\"unavailable\", \"import_failed\", \"initialization_failed\")\n    \nReturns:\n    Dictionary containing error report and setup instructions"
        },
        {
          "name": "check_discopy_availability",
          "lineno": 164,
          "args": [],
          "returns": "Dict[str, bool]",
          "decorators": [],
          "doc": "Check availability of all DisCoPy and JAX components."
        },
        {
          "name": "initialize_discopy_components",
          "lineno": 251,
          "args": [],
          "returns": "bool",
          "decorators": [],
          "doc": "Initialize DisCoPy and JAX components with proper error handling."
        },
        {
          "name": "_convert_json_to_complex_array",
          "lineno": 349,
          "args": [
            "data"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Recursively converts a list structure (from JSON) potentially containing [real, imag] pairs\ninto a structure of Python complex numbers, suitable for jnp.array."
        },
        {
          "name": "_parse_dims_str",
          "lineno": 366,
          "args": [
            "dims_str"
          ],
          "returns": "list[int]",
          "decorators": [],
          "doc": "Helper to parse a comma-separated string of dimensions into a list of ints.\nExtracts leading numeric dimensions, ignoring non-numeric parts like 'type=...'."
        },
        {
          "name": "parse_gnn_content",
          "lineno": 393,
          "args": [
            "gnn_content"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Parses the string content of a GNN file into a dictionary of sections.\nEach section's content is a list of non-empty, non-comment lines.\nParses ## TensorDefinitions section specifically."
        },
        {
          "name": "_get_discopy_dim_from_gnn_spec",
          "lineno": 514,
          "args": [
            "dim_spec_str",
            "logger"
          ],
          "returns": "Optional[Dim]",
          "decorators": [],
          "doc": "Parses a GNN dimension specification string (e.g., \"2\", \"2,3\", or even an empty string for Dim())\nand returns a DisCoPy Dim object.\nReturns None if Dim is not available or parsing fails critically."
        },
        {
          "name": "gnn_statespace_to_discopy_dims_map",
          "lineno": 562,
          "args": [
            "parsed_gnn"
          ],
          "returns": "dict[str, Dim]",
          "decorators": [],
          "doc": "Converts GNN StateSpaceBlock entries into a dictionary mapping variable names to DisCoPy Dim objects.\nHandles parsing of dimensions like VarName[dim1,dim2,...] or VarName."
        },
        {
          "name": "gnn_connections_to_discopy_diagram",
          "lineno": 609,
          "args": [
            "parsed_gnn",
            "dims_map"
          ],
          "returns": "Optional[Diagram]",
          "decorators": [],
          "doc": "Converts GNN Connections into a DisCoPy Diagram (from discopy.tensor).\nThis version creates a diagram with abstract boxes (no tensor data)."
        },
        {
          "name": "gnn_connections_to_discopy_matrix_diagram",
          "lineno": 779,
          "args": [
            "parsed_gnn",
            "dims_map",
            "tensor_definitions",
            "prng_key_provider",
            "default_dtype_str"
          ],
          "returns": "Optional[Diagram]",
          "decorators": [],
          "doc": "Converts GNN Connections into a DisCoPy Diagram, where boxes are populated with Matrix objects\n(from discopy.matrix) containing JAX-backed Tensors if JAX is available.\nIf JAX is not available or tensor data is missing, boxes may be abstract or use placeholders."
        },
        {
          "name": "gnn_file_to_discopy_diagram",
          "lineno": 1114,
          "args": [
            "gnn_file_path",
            "verbose"
          ],
          "returns": "Optional[Diagram]",
          "decorators": [],
          "doc": "Orchestrates the conversion of a GNN file to a DisCoPy diagram (tensor.Diagram).\nReads the file, parses content, converts state space and connections."
        },
        {
          "name": "gnn_file_to_discopy_matrix_diagram",
          "lineno": 1165,
          "args": [
            "gnn_file_path",
            "verbose",
            "jax_seed"
          ],
          "returns": "Optional[Diagram]",
          "decorators": [],
          "doc": "Orchestrates the conversion of a GNN file to a DisCoPy Diagram with JAX-backed matrices.\nReads the file, parses content (including TensorDefinitions), converts state space to Dims,\nand constructs the MatrixDiagram."
        },
        {
          "name": "gnn_spec_to_discopy_code",
          "lineno": 1285,
          "args": [
            "gnn_spec"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate Python code that creates and draws a DisCoPy categorical diagram from GNN spec.\n\nArgs:\n    gnn_spec: The GNN specification as a Python dictionary\n    \nReturns:\n    Python code string that creates and visualizes the diagram"
        },
        {
          "name": "gnn_spec_to_discopy_jax_code",
          "lineno": 1385,
          "args": [
            "gnn_spec",
            "seed"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate Python code that creates and evaluates a DisCoPy matrix diagram with JAX.\n\nArgs:\n    gnn_spec: The GNN specification as a Python dictionary\n    seed: Random seed for JAX operations\n    \nReturns:\n    Python code string that creates and evaluates the matrix diagram"
        },
        {
          "name": "parse_vars_from_group",
          "lineno": 667,
          "args": [
            "group_str"
          ],
          "returns": "list[str]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse_vars_from_group",
          "lineno": 847,
          "args": [
            "group_str"
          ],
          "returns": "list[str]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_key_provider_impl",
          "lineno": 1211,
          "args": [
            "name_suffix",
            "_jrm"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "DisCoPySetupError",
          "lineno": 35,
          "bases": [
            "Exception"
          ],
          "doc": "Raised when DisCoPy or JAX components are not available.",
          "methods": []
        }
      ]
    },
    {
      "file": "src/render/discopy/visualize_jax_output.py",
      "module": "render.discopy.visualize_jax_output",
      "functions": [
        {
          "name": "plot_tensor_output",
          "lineno": 24,
          "args": [
            "tensor_data",
            "output_file_path",
            "title",
            "verbose"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Visualizes tensor data and saves it to a file.\n- 0D (scalar): Saves as text.\n- 1D: Saves as a line plot.\n- 2D: Saves as a heatmap.\n- >2D: Saves raw data to a text file and logs a message.\n\nArgs:\n    tensor_data: The tensor data (JAX array or NumPy array).\n    output_file_path: The base Path object for the output file (e.g., Path(\"output/diagram_result\")).\n                      Extensions will be added automatically (_scalar.txt, _plot.png, etc.).\n    title (str): A title for the plot or output.\n    verbose (bool): If True, sets logger to DEBUG level for this function."
        }
      ],
      "classes": []
    },
    {
      "file": "src/render/generators.py",
      "module": "render.generators",
      "functions": [
        {
          "name": "generate_pymdp_code",
          "lineno": 8,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate PyMDP simulation code using the modular PyMDP renderer."
        },
        {
          "name": "generate_rxinfer_code",
          "lineno": 113,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate RxInfer.jl simulation code."
        },
        {
          "name": "generate_rxinfer_fallback_code",
          "lineno": 187,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate fallback RxInfer.jl code when main generator fails."
        },
        {
          "name": "generate_activeinference_jl_code",
          "lineno": 249,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate ActiveInference.jl simulation code."
        },
        {
          "name": "generate_activeinference_jl_fallback_code",
          "lineno": 348,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate fallback ActiveInference.jl code."
        },
        {
          "name": "generate_discopy_code",
          "lineno": 415,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate DisCoPy categorical diagram code."
        },
        {
          "name": "generate_discopy_fallback_code",
          "lineno": 486,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate fallback DisCoPy code."
        },
        {
          "name": "create_active_inference_diagram",
          "lineno": 524,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Create a DisCoPy diagram representing Active Inference."
        }
      ],
      "classes": []
    },
    {
      "file": "src/render/jax/__init__.py",
      "module": "render.jax.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/render/jax/jax_renderer.py",
      "module": "render.jax.jax_renderer",
      "functions": [
        {
          "name": "render_gnn_to_jax",
          "lineno": 25,
          "args": [
            "gnn_spec",
            "output_path",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Render a GNN specification to a general JAX model implementation.\n\nArgs:\n    gnn_spec: Parsed GNN model specification.\n    output_path: Path to write the generated JAX code.\n    options: Optional rendering options.\n    \nReturns:\n    (success, message, [output_file_path])\n    \n@Web: https://github.com/google/jax\n@Web: https://flax.readthedocs.io"
        },
        {
          "name": "render_gnn_to_jax_pomdp",
          "lineno": 51,
          "args": [
            "gnn_spec",
            "output_path",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Render a GNN POMDP specification to a JAX POMDP solver implementation.\n\nArgs:\n    gnn_spec: Parsed GNN model specification.\n    output_path: Path to write the generated JAX POMDP code.\n    options: Optional rendering options.\n    \nReturns:\n    (success, message, [output_file_path])\n    \n@Web: https://pfjax.readthedocs.io\n@Web: https://arxiv.org/abs/1304.1118\n@Web: https://www.cs.cmu.edu/~ggordon/jpineau-ggordon-thrun.ijcai03.pdf"
        },
        {
          "name": "render_gnn_to_jax_combined",
          "lineno": 78,
          "args": [
            "gnn_spec",
            "output_path",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Render a GNN specification to a combined JAX implementation (hierarchical, multi-agent, or continuous).\n\nArgs:\n    gnn_spec: Parsed GNN model specification.\n    output_path: Path to write the generated JAX code.\n    options: Optional rendering options.\n    \nReturns:\n    (success, message, [output_file_path])\n    \n@Web: https://github.com/google/jax\n@Web: https://optax.readthedocs.io"
        },
        {
          "name": "_parse_gnn_matrix_string",
          "lineno": 106,
          "args": [
            "matrix_str"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Parse GNN matrix string format to numpy array."
        },
        {
          "name": "_extract_gnn_matrices",
          "lineno": 201,
          "args": [
            "gnn_spec"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Extract A, B, C, D matrices from GNN specification."
        },
        {
          "name": "_create_improved_default_matrix",
          "lineno": 551,
          "args": [
            "param_name",
            "default_matrix",
            "param_value"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Create an improved default matrix based on context clues from the failed parsing."
        },
        {
          "name": "_infer_matrix_from_context",
          "lineno": 623,
          "args": [
            "param_name",
            "param_value",
            "var_dims"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Infer matrix dimensions and create appropriate matrix when no defaults are available."
        },
        {
          "name": "_create_fallback_matrix",
          "lineno": 678,
          "args": [
            "param_name",
            "var_dims"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Create a fallback matrix when all else fails."
        },
        {
          "name": "_parse_matrix_string",
          "lineno": 682,
          "args": [
            "matrix_str"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Parse matrix string to numpy array."
        },
        {
          "name": "_parse_vector_string",
          "lineno": 715,
          "args": [
            "vector_str"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Parse vector string to numpy array."
        },
        {
          "name": "_generate_jax_model_code",
          "lineno": 736,
          "args": [
            "gnn_spec",
            "options"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate general JAX model code from GNN specification."
        },
        {
          "name": "_generate_jax_pomdp_code",
          "lineno": 962,
          "args": [
            "gnn_spec",
            "options"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate JAX POMDP solver code from GNN specification."
        },
        {
          "name": "_generate_jax_combined_code",
          "lineno": 1208,
          "args": [
            "gnn_spec",
            "options"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate JAX code for hierarchical/multi-agent/continuous models."
        }
      ],
      "classes": []
    },
    {
      "file": "src/render/jax/templates/__init__.py",
      "module": "render.jax.templates.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/render/jax/templates/combined_template.py",
      "module": "render.jax.templates.combined_template",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/render/jax/templates/general_template.py",
      "module": "render.jax.templates.general_template",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/render/jax/templates/pomdp_template.py",
      "module": "render.jax.templates.pomdp_template",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/render/legacy.py",
      "module": "render.legacy",
      "functions": [
        {
          "name": "render_gnn_to_pymdp",
          "lineno": 8,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Render GNN to PyMDP simulation code (legacy wrapper).\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    PyMDP code generation result"
        },
        {
          "name": "render_gnn_to_activeinference_jl",
          "lineno": 22,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Render GNN to ActiveInference.jl simulation code (legacy wrapper).\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    ActiveInference.jl code generation result"
        },
        {
          "name": "render_gnn_to_rxinfer",
          "lineno": 36,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Render GNN to RxInfer.jl simulation code (legacy wrapper).\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    RxInfer.jl code generation result"
        },
        {
          "name": "render_gnn_to_rxinfer_toml",
          "lineno": 50,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Legacy alias expected by tests for RxInfer TOML generation; reuse rxinfer code generator."
        },
        {
          "name": "render_gnn_to_discopy",
          "lineno": 54,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Render GNN to DisCoPy categorical diagram (legacy wrapper).\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    DisCoPy diagram generation result"
        },
        {
          "name": "pymdp_renderer",
          "lineno": 68,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Legacy function name for PyMDP rendering.\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    PyMDP rendering result"
        },
        {
          "name": "activeinference_jl_renderer",
          "lineno": 81,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Legacy function name for ActiveInference.jl rendering.\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    ActiveInference.jl rendering result"
        },
        {
          "name": "rxinfer_renderer",
          "lineno": 94,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Legacy function name for RxInfer rendering.\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    RxInfer rendering result"
        },
        {
          "name": "discopy_renderer",
          "lineno": 107,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Legacy function name for DisCoPy rendering.\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    DisCoPy rendering result"
        },
        {
          "name": "pymdp_converter",
          "lineno": 120,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Legacy function name for PyMDP conversion.\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    PyMDP conversion result"
        }
      ],
      "classes": []
    },
    {
      "file": "src/render/mcp.py",
      "module": "render.mcp",
      "functions": [
        {
          "name": "process_render_mcp",
          "lineno": 19,
          "args": [
            "target_directory",
            "output_directory",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Process render for GNN files. Exposed via MCP.\n\nArgs:\n    target_directory: Directory containing GNN files to process\n    output_directory: Directory to save results\n    verbose: Enable verbose output\n    \nReturns:\n    Dictionary with operation status and results."
        },
        {
          "name": "register_tools",
          "lineno": 51,
          "args": [
            "mcp_instance"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register render utility tools with the MCP."
        }
      ],
      "classes": []
    },
    {
      "file": "src/render/processor.py",
      "module": "render.processor",
      "functions": [
        {
          "name": "process_render",
          "lineno": 10,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process GNN files with code generation for various simulation environments.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Directory to save results\n    verbose: Enable verbose output\n    **kwargs: Additional arguments\n    \nReturns:\n    True if processing successful, False otherwise"
        },
        {
          "name": "render_gnn_spec",
          "lineno": 104,
          "args": [
            "gnn_spec",
            "target",
            "output_directory",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Render a GNN specification to a target language.\n\nArgs:\n    gnn_spec: GNN specification dictionary\n    target: Target language/environment\n    output_directory: Output directory for generated code\n    options: Additional options\n    \nReturns:\n    Tuple of (success, message, warnings)"
        },
        {
          "name": "get_module_info",
          "lineno": 151,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get information about the render module."
        },
        {
          "name": "get_available_renderers",
          "lineno": 168,
          "args": [],
          "returns": "Dict[str, Dict[str, Any]]",
          "decorators": [],
          "doc": "Get information about available renderers."
        }
      ],
      "classes": []
    },
    {
      "file": "src/render/pymdp/__init__.py",
      "module": "render.pymdp.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/render/pymdp/pymdp_converter.py",
      "module": "render.pymdp.pymdp_converter",
      "functions": [
        {
          "name": "_get_numpy",
          "lineno": 16,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Safely import numpy with fallback."
        },
        {
          "name": "get_numpy",
          "lineno": 32,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Get numpy module with caching."
        },
        {
          "name": "__init__",
          "lineno": 42,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "array",
          "lineno": 45,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Create array with fallback."
        },
        {
          "name": "ones",
          "lineno": 51,
          "args": [
            "self",
            "shape"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Create ones array with fallback."
        },
        {
          "name": "zeros",
          "lineno": 62,
          "args": [
            "self",
            "shape"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Create zeros array with fallback."
        },
        {
          "name": "eye",
          "lineno": 72,
          "args": [
            "self",
            "n"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Create identity matrix with fallback."
        },
        {
          "name": "empty",
          "lineno": 84,
          "args": [
            "self",
            "shape",
            "dtype"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Create empty array with fallback."
        },
        {
          "name": "sum",
          "lineno": 93,
          "args": [
            "self",
            "arr",
            "axis",
            "keepdims"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Sum with fallback."
        },
        {
          "name": "where",
          "lineno": 102,
          "args": [
            "self",
            "condition",
            "x",
            "y"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Where operation with fallback."
        },
        {
          "name": "any",
          "lineno": 111,
          "args": [
            "self",
            "arr"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Any operation with fallback."
        },
        {
          "name": "newaxis",
          "lineno": 119,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Get newaxis with fallback."
        },
        {
          "name": "_create_ones_list",
          "lineno": 125,
          "args": [
            "self",
            "shape"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Create nested list of ones."
        },
        {
          "name": "_create_zeros_list",
          "lineno": 134,
          "args": [
            "self",
            "shape"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Create nested list of zeros."
        },
        {
          "name": "__init__",
          "lineno": 177,
          "args": [
            "self",
            "gnn_spec"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the converter with a GNN specification.\n\nArgs:\n    gnn_spec: Dictionary containing the GNN specification"
        },
        {
          "name": "_sanitize_model_name",
          "lineno": 238,
          "args": [
            "self",
            "name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Sanitize model name to be a valid Python variable name."
        },
        {
          "name": "_add_log",
          "lineno": 250,
          "args": [
            "self",
            "message",
            "level"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Add message to conversion log and module logger."
        },
        {
          "name": "_parse_string_to_literal",
          "lineno": 269,
          "args": [
            "self",
            "data_str",
            "context_msg"
          ],
          "returns": "Optional[Any]",
          "decorators": [],
          "doc": "Parse a string representation of a Python literal."
        },
        {
          "name": "_extract_gnn_data",
          "lineno": 326,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Extract relevant data from the GNN specification."
        },
        {
          "name": "_parse_variables_from_gnn_data",
          "lineno": 357,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse variables from the parsed GNN data structure."
        },
        {
          "name": "_extract_gnn_data_legacy",
          "lineno": 455,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Legacy method for extracting data from raw text GNN format."
        },
        {
          "name": "_parse_statespace_variables",
          "lineno": 492,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse StateSpaceBlock to extract observation modalities and state factors."
        },
        {
          "name": "_parse_variable_definition",
          "lineno": 586,
          "args": [
            "self",
            "var_name",
            "dims",
            "obs_modalities",
            "state_factors"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse a single variable definition into the appropriate data structure."
        },
        {
          "name": "_extract_dimensions_from_model_params",
          "lineno": 622,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Extract dimensions from ModelParameters section."
        },
        {
          "name": "_infer_from_initial_parameterization",
          "lineno": 655,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Try to infer dimensions from InitialParameterization section."
        },
        {
          "name": "_extract_initial_parameterization_matrices",
          "lineno": 667,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Extract and assign matrices from InitialParameterization section."
        },
        {
          "name": "_parse_gnn_matrix_string",
          "lineno": 757,
          "args": [
            "self",
            "matrix_str"
          ],
          "returns": "List[List[float]]",
          "decorators": [],
          "doc": "Parse GNN matrix string format into Python list of lists using robust parsing."
        },
        {
          "name": "_parse_gnn_3d_matrix_string",
          "lineno": 827,
          "args": [
            "self",
            "matrix_str"
          ],
          "returns": "List[List[List[float]]]",
          "decorators": [],
          "doc": "Parse GNN 3D matrix string format into Python list of lists of lists."
        },
        {
          "name": "_strip_comments_from_multiline_str",
          "lineno": 895,
          "args": [
            "self",
            "m_str"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Strip comments from a multiline string."
        },
        {
          "name": "_parse_matrix_fallback",
          "lineno": 908,
          "args": [
            "self",
            "matrix_str"
          ],
          "returns": "List[List[float]]",
          "decorators": [],
          "doc": "Fallback parsing for complex matrix strings."
        },
        {
          "name": "_parse_3d_matrix_fallback",
          "lineno": 966,
          "args": [
            "self",
            "matrix_str"
          ],
          "returns": "List[List[List[float]]]",
          "decorators": [],
          "doc": "Fallback parsing for complex 3D matrix strings."
        },
        {
          "name": "_parse_matrix_row",
          "lineno": 1010,
          "args": [
            "self",
            "row_str"
          ],
          "returns": "List[float]",
          "decorators": [],
          "doc": "Parse a single matrix row string into list of floats."
        },
        {
          "name": "_parse_parameters_from_gnn_data",
          "lineno": 1048,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Parse parameters from the parsed GNN data structure."
        },
        {
          "name": "_infer_from_initial_parameterization_legacy",
          "lineno": 1120,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Legacy method to infer dimensions from raw InitialParameterization text."
        },
        {
          "name": "_parse_model_parameters_from_text",
          "lineno": 1125,
          "args": [
            "self",
            "text"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse ModelParameters from raw text format."
        },
        {
          "name": "_numpy_array_to_string",
          "lineno": 1146,
          "args": [
            "self",
            "arr",
            "indent"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert numpy array to string representation for code generation."
        },
        {
          "name": "convert_A_matrix",
          "lineno": 1150,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "convert_B_matrix",
          "lineno": 1192,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "convert_C_vector",
          "lineno": 1243,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Converts GNN's C vector (preferences over observations) to PyMDP format."
        },
        {
          "name": "convert_D_vector",
          "lineno": 1281,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Converts GNN's D vector (initial beliefs about hidden states) to PyMDP format."
        },
        {
          "name": "convert_E_vector",
          "lineno": 1319,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Converts GNN's E vector (policy prior) to PyMDP format."
        },
        {
          "name": "extract_agent_hyperparameters",
          "lineno": 1341,
          "args": [
            "self"
          ],
          "returns": "Tuple[Optional[Dict[str, Any]], Optional[Dict[str, Any]], Optional[Dict[str, Any]]]",
          "decorators": [],
          "doc": "Extract agent hyperparameters from GNN specification."
        },
        {
          "name": "generate_agent_instantiation_code",
          "lineno": 1366,
          "args": [
            "self",
            "action_names",
            "qs_initial"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate code for instantiating a PyMDP agent with the model parameters."
        },
        {
          "name": "generate_example_usage_code",
          "lineno": 1414,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Generate example code that demonstrates how to use the PyMDP agent."
        },
        {
          "name": "get_full_python_script",
          "lineno": 1444,
          "args": [
            "self",
            "include_example_usage"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate the complete Python script for the PyMDP agent."
        },
        {
          "name": "convert_structure",
          "lineno": 784,
          "args": [
            "item"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "convert_structure",
          "lineno": 854,
          "args": [
            "item"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "NumpySafeOperations",
          "lineno": 39,
          "bases": [],
          "doc": "Safe wrapper for numpy operations with fallbacks.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 42,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "array",
              "lineno": 45,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Create array with fallback."
            },
            {
              "name": "ones",
              "lineno": 51,
              "args": [
                "self",
                "shape"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Create ones array with fallback."
            },
            {
              "name": "zeros",
              "lineno": 62,
              "args": [
                "self",
                "shape"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Create zeros array with fallback."
            },
            {
              "name": "eye",
              "lineno": 72,
              "args": [
                "self",
                "n"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Create identity matrix with fallback."
            },
            {
              "name": "empty",
              "lineno": 84,
              "args": [
                "self",
                "shape",
                "dtype"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Create empty array with fallback."
            },
            {
              "name": "sum",
              "lineno": 93,
              "args": [
                "self",
                "arr",
                "axis",
                "keepdims"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Sum with fallback."
            },
            {
              "name": "where",
              "lineno": 102,
              "args": [
                "self",
                "condition",
                "x",
                "y"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Where operation with fallback."
            },
            {
              "name": "any",
              "lineno": 111,
              "args": [
                "self",
                "arr"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Any operation with fallback."
            },
            {
              "name": "newaxis",
              "lineno": 119,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Get newaxis with fallback."
            },
            {
              "name": "_create_ones_list",
              "lineno": 125,
              "args": [
                "self",
                "shape"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Create nested list of ones."
            },
            {
              "name": "_create_zeros_list",
              "lineno": 134,
              "args": [
                "self",
                "shape"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Create nested list of zeros."
            }
          ]
        },
        {
          "name": "GnnToPyMdpConverter",
          "lineno": 174,
          "bases": [],
          "doc": "Converts a GNN specification dictionary to PyMDP-compatible format.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 177,
              "args": [
                "self",
                "gnn_spec"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the converter with a GNN specification.\n\nArgs:\n    gnn_spec: Dictionary containing the GNN specification"
            },
            {
              "name": "_sanitize_model_name",
              "lineno": 238,
              "args": [
                "self",
                "name"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Sanitize model name to be a valid Python variable name."
            },
            {
              "name": "_add_log",
              "lineno": 250,
              "args": [
                "self",
                "message",
                "level"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Add message to conversion log and module logger."
            },
            {
              "name": "_parse_string_to_literal",
              "lineno": 269,
              "args": [
                "self",
                "data_str",
                "context_msg"
              ],
              "returns": "Optional[Any]",
              "decorators": [],
              "doc": "Parse a string representation of a Python literal."
            },
            {
              "name": "_extract_gnn_data",
              "lineno": 326,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Extract relevant data from the GNN specification."
            },
            {
              "name": "_parse_variables_from_gnn_data",
              "lineno": 357,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse variables from the parsed GNN data structure."
            },
            {
              "name": "_extract_gnn_data_legacy",
              "lineno": 455,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Legacy method for extracting data from raw text GNN format."
            },
            {
              "name": "_parse_statespace_variables",
              "lineno": 492,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse StateSpaceBlock to extract observation modalities and state factors."
            },
            {
              "name": "_parse_variable_definition",
              "lineno": 586,
              "args": [
                "self",
                "var_name",
                "dims",
                "obs_modalities",
                "state_factors"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse a single variable definition into the appropriate data structure."
            },
            {
              "name": "_extract_dimensions_from_model_params",
              "lineno": 622,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Extract dimensions from ModelParameters section."
            },
            {
              "name": "_infer_from_initial_parameterization",
              "lineno": 655,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Try to infer dimensions from InitialParameterization section."
            },
            {
              "name": "_extract_initial_parameterization_matrices",
              "lineno": 667,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Extract and assign matrices from InitialParameterization section."
            },
            {
              "name": "_parse_gnn_matrix_string",
              "lineno": 757,
              "args": [
                "self",
                "matrix_str"
              ],
              "returns": "List[List[float]]",
              "decorators": [],
              "doc": "Parse GNN matrix string format into Python list of lists using robust parsing."
            },
            {
              "name": "_parse_gnn_3d_matrix_string",
              "lineno": 827,
              "args": [
                "self",
                "matrix_str"
              ],
              "returns": "List[List[List[float]]]",
              "decorators": [],
              "doc": "Parse GNN 3D matrix string format into Python list of lists of lists."
            },
            {
              "name": "_strip_comments_from_multiline_str",
              "lineno": 895,
              "args": [
                "self",
                "m_str"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Strip comments from a multiline string."
            },
            {
              "name": "_parse_matrix_fallback",
              "lineno": 908,
              "args": [
                "self",
                "matrix_str"
              ],
              "returns": "List[List[float]]",
              "decorators": [],
              "doc": "Fallback parsing for complex matrix strings."
            },
            {
              "name": "_parse_3d_matrix_fallback",
              "lineno": 966,
              "args": [
                "self",
                "matrix_str"
              ],
              "returns": "List[List[List[float]]]",
              "decorators": [],
              "doc": "Fallback parsing for complex 3D matrix strings."
            },
            {
              "name": "_parse_matrix_row",
              "lineno": 1010,
              "args": [
                "self",
                "row_str"
              ],
              "returns": "List[float]",
              "decorators": [],
              "doc": "Parse a single matrix row string into list of floats."
            },
            {
              "name": "_parse_parameters_from_gnn_data",
              "lineno": 1048,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Parse parameters from the parsed GNN data structure."
            },
            {
              "name": "_infer_from_initial_parameterization_legacy",
              "lineno": 1120,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Legacy method to infer dimensions from raw InitialParameterization text."
            },
            {
              "name": "_parse_model_parameters_from_text",
              "lineno": 1125,
              "args": [
                "self",
                "text"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Parse ModelParameters from raw text format."
            },
            {
              "name": "_numpy_array_to_string",
              "lineno": 1146,
              "args": [
                "self",
                "arr",
                "indent"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Convert numpy array to string representation for code generation."
            },
            {
              "name": "convert_A_matrix",
              "lineno": 1150,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "convert_B_matrix",
              "lineno": 1192,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "convert_C_vector",
              "lineno": 1243,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Converts GNN's C vector (preferences over observations) to PyMDP format."
            },
            {
              "name": "convert_D_vector",
              "lineno": 1281,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Converts GNN's D vector (initial beliefs about hidden states) to PyMDP format."
            },
            {
              "name": "convert_E_vector",
              "lineno": 1319,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Converts GNN's E vector (policy prior) to PyMDP format."
            },
            {
              "name": "extract_agent_hyperparameters",
              "lineno": 1341,
              "args": [
                "self"
              ],
              "returns": "Tuple[Optional[Dict[str, Any]], Optional[Dict[str, Any]], Optional[Dict[str, Any]]]",
              "decorators": [],
              "doc": "Extract agent hyperparameters from GNN specification."
            },
            {
              "name": "generate_agent_instantiation_code",
              "lineno": 1366,
              "args": [
                "self",
                "action_names",
                "qs_initial"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate code for instantiating a PyMDP agent with the model parameters."
            },
            {
              "name": "generate_example_usage_code",
              "lineno": 1414,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Generate example code that demonstrates how to use the PyMDP agent."
            },
            {
              "name": "get_full_python_script",
              "lineno": 1444,
              "args": [
                "self",
                "include_example_usage"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate the complete Python script for the PyMDP agent."
            }
          ]
        }
      ]
    },
    {
      "file": "src/render/pymdp/pymdp_renderer.py",
      "module": "render.pymdp.pymdp_renderer",
      "functions": [
        {
          "name": "parse_gnn_markdown",
          "lineno": 48,
          "args": [
            "content",
            "file_path"
          ],
          "returns": "Optional[Dict[str, Any]]",
          "decorators": [],
          "doc": "Parse GNN markdown content into a structured dictionary.\n\nArgs:\n    content: GNN markdown content\n    file_path: Path to the source file\n    \nReturns:\n    Parsed GNN specification dictionary or None if parsing fails"
        },
        {
          "name": "parse_state_space_block",
          "lineno": 76,
          "args": [
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse StateSpaceBlock section from GNN content."
        },
        {
          "name": "parse_initial_parameterization",
          "lineno": 110,
          "args": [
            "content"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Parse InitialParameterization section from GNN content."
        },
        {
          "name": "parse_model_parameters",
          "lineno": 149,
          "args": [
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse ModelParameters section from GNN content."
        },
        {
          "name": "render_gnn_to_pymdp",
          "lineno": 415,
          "args": [
            "gnn_spec",
            "output_script_path",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Render GNN specification to PyMDP simulation script.\n\nArgs:\n    gnn_spec: Parsed GNN specification dictionary\n    output_script_path: Path for output PyMDP script\n    options: Optional rendering options\n    \nReturns:\n    Tuple of (success, message, warnings)"
        },
        {
          "name": "__init__",
          "lineno": 184,
          "args": [
            "self",
            "options"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize PyMDP renderer.\n\nArgs:\n    options: Optional configuration options"
        },
        {
          "name": "render_file",
          "lineno": 194,
          "args": [
            "self",
            "gnn_file_path",
            "output_path"
          ],
          "returns": "Tuple[bool, str]",
          "decorators": [],
          "doc": "Render a single GNN file to PyMDP simulation code.\n\nArgs:\n    gnn_file_path: Path to GNN file\n    output_path: Path for output PyMDP script\n    \nReturns:\n    Tuple of (success, message)"
        },
        {
          "name": "render_directory",
          "lineno": 231,
          "args": [
            "self",
            "output_dir",
            "input_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Render all GNN files in a directory to PyMDP simulation code.\n\nArgs:\n    output_dir: Directory for output files\n    input_dir: Input directory with GNN files (optional)\n    \nReturns:\n    Dictionary with rendering results"
        },
        {
          "name": "_generate_pymdp_simulation_code",
          "lineno": 277,
          "args": [
            "self",
            "gnn_spec",
            "model_name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate executable PyMDP simulation code from GNN specification.\n\nArgs:\n    gnn_spec: Parsed GNN specification\n    model_name: Name of the model\n    \nReturns:\n    Generated Python code string"
        },
        {
          "name": "_get_timestamp",
          "lineno": 409,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get current timestamp string."
        },
        {
          "name": "__init__",
          "lineno": 39,
          "args": [
            "self",
            "data"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 41,
          "args": [
            "self",
            "success",
            "data"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse",
          "lineno": 43,
          "args": [
            "self",
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "parse",
          "lineno": 45,
          "args": [
            "self",
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "PyMDPRenderer",
          "lineno": 179,
          "bases": [],
          "doc": "PyMDP renderer for generating executable PyMDP simulation code from GNN specifications.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 184,
              "args": [
                "self",
                "options"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize PyMDP renderer.\n\nArgs:\n    options: Optional configuration options"
            },
            {
              "name": "render_file",
              "lineno": 194,
              "args": [
                "self",
                "gnn_file_path",
                "output_path"
              ],
              "returns": "Tuple[bool, str]",
              "decorators": [],
              "doc": "Render a single GNN file to PyMDP simulation code.\n\nArgs:\n    gnn_file_path: Path to GNN file\n    output_path: Path for output PyMDP script\n    \nReturns:\n    Tuple of (success, message)"
            },
            {
              "name": "render_directory",
              "lineno": 231,
              "args": [
                "self",
                "output_dir",
                "input_dir"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Render all GNN files in a directory to PyMDP simulation code.\n\nArgs:\n    output_dir: Directory for output files\n    input_dir: Input directory with GNN files (optional)\n    \nReturns:\n    Dictionary with rendering results"
            },
            {
              "name": "_generate_pymdp_simulation_code",
              "lineno": 277,
              "args": [
                "self",
                "gnn_spec",
                "model_name"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate executable PyMDP simulation code from GNN specification.\n\nArgs:\n    gnn_spec: Parsed GNN specification\n    model_name: Name of the model\n    \nReturns:\n    Generated Python code string"
            },
            {
              "name": "_get_timestamp",
              "lineno": 409,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Get current timestamp string."
            }
          ]
        },
        {
          "name": "GNNInternalRepresentation",
          "lineno": 38,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "__init__",
              "lineno": 39,
              "args": [
                "self",
                "data"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "ParseResult",
          "lineno": 40,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "__init__",
              "lineno": 41,
              "args": [
                "self",
                "success",
                "data"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "MarkdownGNNParser",
          "lineno": 42,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "parse",
              "lineno": 43,
              "args": [
                "self",
                "content"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "JSONGNNParser",
          "lineno": 44,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "parse",
              "lineno": 45,
              "args": [
                "self",
                "content"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/render/pymdp/pymdp_templates.py",
      "module": "render.pymdp.pymdp_templates",
      "functions": [
        {
          "name": "generate_file_header",
          "lineno": 182,
          "args": [
            "model_name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate the file header with imports and module docstring."
        },
        {
          "name": "generate_conversion_summary",
          "lineno": 187,
          "args": [
            "log_entries"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate the conversion summary section from log entries."
        },
        {
          "name": "generate_debug_block",
          "lineno": 193,
          "args": [
            "action_names_dict_str",
            "qs_initial_str",
            "agent_hyperparams_dict_str"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate the debug block for the PyMDP script."
        },
        {
          "name": "generate_example_usage_template",
          "lineno": 206,
          "args": [
            "model_name",
            "num_modalities",
            "num_factors",
            "control_factor_indices",
            "sim_timesteps",
            "use_gp_copy",
            "print_obs",
            "print_beliefs",
            "print_actions",
            "print_states"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Generate example usage code for the PyMDP script.\n\nArgs:\n    model_name: Name of the agent model\n    num_modalities: Number of observation modalities\n    num_factors: Number of hidden state factors\n    control_factor_indices: List of indices for controllable factors\n    sim_timesteps: Number of simulation timesteps\n    use_gp_copy: Whether to use a copy of the generative process\n    print_obs: Whether to print observations\n    print_beliefs: Whether to print beliefs\n    print_actions: Whether to print actions\n    print_states: Whether to print true states\n    \nReturns:\n    List of code lines for the example usage section"
        },
        {
          "name": "generate_placeholder_matrices",
          "lineno": 367,
          "args": [
            "num_modalities",
            "num_states"
          ],
          "returns": "Dict[str, List[str]]",
          "decorators": [],
          "doc": "Generate functional matrix definitions for PyMDP based on GNN specifications.\n\nThis function creates mathematically sound matrices that can be used for\nactual Active Inference simulations, rather than non-functional placeholders.\n\nArgs:\n    num_modalities: Number of observation modalities\n    num_states: List of dimensions for each state factor\n    \nReturns:\n    Dictionary of code lines for different matrix definitions"
        }
      ],
      "classes": []
    },
    {
      "file": "src/render/pymdp/pymdp_utils.py",
      "module": "render.pymdp.pymdp_utils",
      "functions": [
        {
          "name": "_numpy_array_to_string",
          "lineno": 9,
          "args": [
            "arr",
            "indent"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Converts a NumPy array to a string representation for Python script.\nThe `indent` parameter specifies the indentation for lines *after the first* if the array string is multi-line."
        },
        {
          "name": "format_list_recursive",
          "lineno": 54,
          "args": [
            "data_list",
            "current_indent",
            "item_formatter"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Formats a potentially nested list of items (like NumPy arrays) into a string for Python script."
        },
        {
          "name": "generate_pymdp_matrix_definition",
          "lineno": 96,
          "args": [
            "matrix_name",
            "data",
            "is_object_array",
            "num_modalities_or_factors",
            "is_vector"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generates Python code for a PyMDP matrix (A, B, C, D, etc.).\nHandles single matrices, lists of matrices (object arrays), and vectors.\nIf data is already a string (e.g. \"pymdp.utils.get_A_likelihood_identity(...)\"), use it directly."
        },
        {
          "name": "generate_pymdp_agent_instantiation",
          "lineno": 197,
          "args": [
            "agent_name",
            "model_params",
            "control_params",
            "learning_params",
            "algorithm_params",
            "policy_len",
            "control_fac_idx_list",
            "use_utility",
            "use_states_info_gain",
            "use_param_info_gain",
            "action_selection",
            "action_names",
            "qs_initial"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generates the Agent instantiation code string."
        },
        {
          "name": "float_format_func",
          "lineno": 23,
          "args": [
            "x"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/render/render.py",
      "module": "render.render",
      "functions": [
        {
          "name": "render_gnn_spec",
          "lineno": 69,
          "args": [
            "gnn_spec",
            "target",
            "output_directory",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Render a GNN specification to a target format.\n\nArgs:\n    gnn_spec: Dictionary containing the GNN specification\n    target: Target platform (\"pymdp\", \"rxinfer_toml\", \"discopy\", \"discopy_jax\", \"discopy_combined\", etc.)\n    output_directory: Directory for output files\n    options: Additional options for the renderer\n    \nReturns:\n    Tuple of (success flag, message, list of artifact URIs)"
        },
        {
          "name": "main",
          "lineno": 172,
          "args": [
            "cli_args"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Command-line entry point for the renderer."
        }
      ],
      "classes": []
    },
    {
      "file": "src/render/renderer.py",
      "module": "render.renderer",
      "functions": [
        {
          "name": "generate_pymdp_code",
          "lineno": 15,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate PyMDP simulation code using the modular PyMDP renderer."
        },
        {
          "name": "generate_rxinfer_code",
          "lineno": 51,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate RxInfer.jl simulation code using the modular RxInfer renderer."
        },
        {
          "name": "generate_rxinfer_fallback_code",
          "lineno": 73,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Fallback RxInfer.jl code generation."
        },
        {
          "name": "generate_activeinference_jl_code",
          "lineno": 133,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate ActiveInference.jl simulation code using the modular ActiveInference.jl renderer."
        },
        {
          "name": "generate_activeinference_jl_fallback_code",
          "lineno": 155,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Fallback ActiveInference.jl code generation."
        },
        {
          "name": "generate_discopy_code",
          "lineno": 220,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate DisCoPy categorical diagram code using the modular DisCoPy renderer."
        },
        {
          "name": "generate_discopy_fallback_code",
          "lineno": 242,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Fallback DisCoPy categorical diagram code generation."
        },
        {
          "name": "render_gnn_files",
          "lineno": 282,
          "args": [
            "target_dir",
            "output_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Recovery-friendly bulk render used by tests.\n\nReturns a dict with status and recovery actions if numpy recursion issues occur."
        },
        {
          "name": "render_gnn_spec",
          "lineno": 316,
          "args": [
            "gnn_spec",
            "target",
            "output_directory",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Render GNN specification to target language.\n\nArgs:\n    gnn_spec: GNN specification dictionary\n    target: Target language/framework\n    output_directory: Output directory for rendered code\n    options: Additional rendering options\n    \nReturns:\n    Tuple of (success, message, warnings)"
        }
      ],
      "classes": []
    },
    {
      "file": "src/render/rxinfer/__init__.py",
      "module": "render.rxinfer.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/render/rxinfer/gnn_parser.py",
      "module": "render.rxinfer.gnn_parser",
      "functions": [
        {
          "name": "parse_gnn_section",
          "lineno": 12,
          "args": [
            "content",
            "section_name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Parse a specific section from GNN content.\n\nArgs:\n    content: The full GNN file content\n    section_name: The section name to extract\n    \nReturns:\n    The extracted section content as a string"
        },
        {
          "name": "parse_initial_value",
          "lineno": 29,
          "args": [
            "value_str"
          ],
          "returns": "Any",
          "decorators": [],
          "doc": "Parse GNN initial value notation into Python objects.\n\nArgs:\n    value_str: String representation of value from GNN file\n    \nReturns:\n    The parsed value (string, number, boolean, tuple, etc.)"
        },
        {
          "name": "parse_tuple",
          "lineno": 95,
          "args": [
            "tuple_str"
          ],
          "returns": "Tuple",
          "decorators": [],
          "doc": "Parse a GNN tuple string into a Python tuple.\n\nArgs:\n    tuple_str: String representation of a tuple\n    \nReturns:\n    A Python tuple with parsed values"
        },
        {
          "name": "parse_initial_parameterization",
          "lineno": 114,
          "args": [
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse the InitialParameterization section of a GNN file.\n\nArgs:\n    content: The full GNN file content\n    \nReturns:\n    Dictionary of parameter names to values"
        },
        {
          "name": "parse_state_space_block",
          "lineno": 141,
          "args": [
            "content"
          ],
          "returns": "Dict[str, Dict[str, Any]]",
          "decorators": [],
          "doc": "Parse the StateSpaceBlock section of a GNN file.\n\nArgs:\n    content: The full GNN file content\n    \nReturns:\n    Dictionary of variable definitions"
        },
        {
          "name": "parse_model_name",
          "lineno": 189,
          "args": [
            "content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Parse the ModelName section of a GNN file.\n\nArgs:\n    content: The full GNN file content\n    \nReturns:\n    The model name as a string"
        },
        {
          "name": "parse_model_parameters",
          "lineno": 201,
          "args": [
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse the ModelParameters section of a GNN file.\n\nArgs:\n    content: The full GNN file content\n    \nReturns:\n    Dictionary of model parameters"
        },
        {
          "name": "parse_gnn_file",
          "lineno": 232,
          "args": [
            "file_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse a GNN file into a structured dictionary.\n\nArgs:\n    file_path: Path to the GNN file\n    \nReturns:\n    Dictionary containing parsed GNN content"
        }
      ],
      "classes": []
    },
    {
      "file": "src/render/rxinfer/rxinfer_renderer.py",
      "module": "render.rxinfer.rxinfer_renderer",
      "functions": [
        {
          "name": "render_gnn_to_rxinfer",
          "lineno": 357,
          "args": [
            "gnn_spec",
            "output_script_path",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Render GNN specification to RxInfer.jl simulation script.\n\nArgs:\n    gnn_spec: Parsed GNN specification dictionary\n    output_script_path: Path for output RxInfer script\n    options: Optional rendering options\n    \nReturns:\n    Tuple of (success, message, warnings)"
        },
        {
          "name": "__init__",
          "lineno": 30,
          "args": [
            "self",
            "options"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize RxInfer renderer.\n\nArgs:\n    options: Optional configuration options"
        },
        {
          "name": "render_file",
          "lineno": 40,
          "args": [
            "self",
            "gnn_file_path",
            "output_path"
          ],
          "returns": "Tuple[bool, str]",
          "decorators": [],
          "doc": "Render a single GNN file to RxInfer.jl simulation code.\n\nArgs:\n    gnn_file_path: Path to GNN file\n    output_path: Path for output RxInfer script\n    \nReturns:\n    Tuple of (success, message)"
        },
        {
          "name": "_parse_gnn_content",
          "lineno": 75,
          "args": [
            "self",
            "content",
            "model_name"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse GNN content into a structured dictionary (simplified parser)."
        },
        {
          "name": "_generate_rxinfer_simulation_code",
          "lineno": 106,
          "args": [
            "self",
            "gnn_spec",
            "model_name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate executable RxInfer.jl simulation code from GNN specification.\n\nArgs:\n    gnn_spec: Parsed GNN specification\n    model_name: Name of the model\n    \nReturns:\n    Generated Julia code string"
        },
        {
          "name": "_get_timestamp",
          "lineno": 352,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get current timestamp string."
        }
      ],
      "classes": [
        {
          "name": "RxInferRenderer",
          "lineno": 25,
          "bases": [],
          "doc": "RxInfer.jl renderer for generating Julia probabilistic programming code from GNN specifications.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 30,
              "args": [
                "self",
                "options"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize RxInfer renderer.\n\nArgs:\n    options: Optional configuration options"
            },
            {
              "name": "render_file",
              "lineno": 40,
              "args": [
                "self",
                "gnn_file_path",
                "output_path"
              ],
              "returns": "Tuple[bool, str]",
              "decorators": [],
              "doc": "Render a single GNN file to RxInfer.jl simulation code.\n\nArgs:\n    gnn_file_path: Path to GNN file\n    output_path: Path for output RxInfer script\n    \nReturns:\n    Tuple of (success, message)"
            },
            {
              "name": "_parse_gnn_content",
              "lineno": 75,
              "args": [
                "self",
                "content",
                "model_name"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Parse GNN content into a structured dictionary (simplified parser)."
            },
            {
              "name": "_generate_rxinfer_simulation_code",
              "lineno": 106,
              "args": [
                "self",
                "gnn_spec",
                "model_name"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate executable RxInfer.jl simulation code from GNN specification.\n\nArgs:\n    gnn_spec: Parsed GNN specification\n    model_name: Name of the model\n    \nReturns:\n    Generated Julia code string"
            },
            {
              "name": "_get_timestamp",
              "lineno": 352,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Get current timestamp string."
            }
          ]
        }
      ]
    },
    {
      "file": "src/render/rxinfer/toml_generator.py",
      "module": "render.rxinfer.toml_generator",
      "functions": [
        {
          "name": "render_gnn_to_rxinfer_toml",
          "lineno": 15,
          "args": [
            "gnn_spec",
            "output_path",
            "options"
          ],
          "returns": "Tuple[bool, str, List[str]]",
          "decorators": [],
          "doc": "Generate an executable Julia script for RxInfer.jl from a GNN specification.\nCreates a proper POMDP model with Active Inference structure."
        },
        {
          "name": "_parse_gnn_matrix",
          "lineno": 104,
          "args": [
            "matrix_str"
          ],
          "returns": "List[List[float]]",
          "decorators": [],
          "doc": "Parse GNN matrix notation into Python list of lists.\n\nArgs:\n    matrix_str: String representation of matrix from GNN file\n    \nReturns:\n    List of lists representing the matrix"
        },
        {
          "name": "_parse_gnn_3d_matrix",
          "lineno": 174,
          "args": [
            "matrix_str"
          ],
          "returns": "List[List[List[float]]]",
          "decorators": [],
          "doc": "Parse GNN 3D matrix notation (for B matrix) into Python list of lists of lists.\n\nArgs:\n    matrix_str: String representation of 3D matrix from GNN file\n    \nReturns:\n    List of lists of lists representing the 3D matrix"
        },
        {
          "name": "_parse_gnn_vector",
          "lineno": 249,
          "args": [
            "vector_str"
          ],
          "returns": "List[float]",
          "decorators": [],
          "doc": "Parse GNN vector notation into Python list.\n\nArgs:\n    vector_str: String representation of vector from GNN file\n    \nReturns:\n    List representing the vector"
        },
        {
          "name": "_extract_parameter_from_section",
          "lineno": 275,
          "args": [
            "section_content",
            "param_name"
          ],
          "returns": "Optional[str]",
          "decorators": [],
          "doc": "Extract a parameter value from a GNN section content.\n\nArgs:\n    section_content: The content of a GNN section\n    param_name: The name of the parameter to extract\n    \nReturns:\n    The parameter value as a string, or None if not found"
        },
        {
          "name": "_generate_rxinfer_pomdp_code",
          "lineno": 322,
          "args": [
            "model_name",
            "model_annotation",
            "A_matrix",
            "B_matrix",
            "C_vector",
            "D_vector",
            "E_vector",
            "num_states",
            "num_obs",
            "num_actions",
            "T"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate comprehensive RxInfer.jl POMDP code based on the RxInfer.jl example."
        },
        {
          "name": "_matrix_to_julia",
          "lineno": 555,
          "args": [
            "matrix"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert Python matrix to Julia matrix string."
        },
        {
          "name": "_tensor_to_julia",
          "lineno": 563,
          "args": [
            "tensor"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert Python 3D tensor to Julia tensor string."
        },
        {
          "name": "_vector_to_julia",
          "lineno": 576,
          "args": [
            "vector"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convert Python vector to Julia vector string."
        },
        {
          "name": "_create_dirichlet_prior",
          "lineno": 580,
          "args": [
            "matrix"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Create Dirichlet prior for matrix."
        },
        {
          "name": "_create_dirichlet_prior_3d",
          "lineno": 590,
          "args": [
            "tensor"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Create Dirichlet prior for 3D tensor."
        },
        {
          "name": "_write_toml_with_exact_formatting",
          "lineno": 602,
          "args": [
            "f",
            "config"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Write TOML with exact formatting to match the gold standard.\nThis function writes sections in a specific order with comments and formatting."
        },
        {
          "name": "_create_toml_config_structure",
          "lineno": 780,
          "args": [
            "gnn_spec",
            "options"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Create the TOML configuration structure from a GNN specification.\n\nArgs:\n    gnn_spec: Dictionary containing the GNN specification\n    options: Additional options for TOML generation\n    \nReturns:\n    Dictionary representing the TOML configuration"
        },
        {
          "name": "_get_agent_count",
          "lineno": 837,
          "args": [
            "gnn_spec"
          ],
          "returns": "int",
          "decorators": [],
          "doc": "Extract the number of agents from the GNN specification."
        },
        {
          "name": "_extract_matrices",
          "lineno": 844,
          "args": [
            "gnn_spec"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Extract state space matrices from the GNN specification."
        },
        {
          "name": "_extract_environments",
          "lineno": 883,
          "args": [
            "gnn_spec"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Extract environment definitions from the GNN specification."
        },
        {
          "name": "_extract_agents",
          "lineno": 937,
          "args": [
            "gnn_spec"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Extract agent configurations from the GNN specification."
        },
        {
          "name": "_extract_experiments",
          "lineno": 988,
          "args": [
            "gnn_spec"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Extract experiment configurations from the GNN specification."
        }
      ],
      "classes": []
    },
    {
      "file": "src/report/__init__.py",
      "module": "report.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/report/analyzer.py",
      "module": "report.analyzer",
      "functions": [
        {
          "name": "collect_pipeline_data",
          "lineno": 15,
          "args": [
            "pipeline_output_dir",
            "logger"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Collect data from all pipeline outputs for analysis.\n\nArgs:\n    pipeline_output_dir: Directory containing pipeline outputs\n    logger: Logger for this operation\n    \nReturns:\n    Dictionary containing collected pipeline data"
        },
        {
          "name": "analyze_step_directory",
          "lineno": 114,
          "args": [
            "step_path",
            "step_name",
            "logger"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze a specific step directory and extract relevant data.\n\nArgs:\n    step_path: Path to the step directory\n    step_name: Name of the step\n    logger: Logger for this operation\n    \nReturns:\n    Dictionary containing step analysis data"
        },
        {
          "name": "analyze_step_specific_data",
          "lineno": 186,
          "args": [
            "step_path",
            "step_name",
            "logger"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze step-specific data like performance metrics and error logs.\n\nArgs:\n    step_path: Path to the step directory\n    step_name: Name of the step\n    logger: Logger for this operation\n    \nReturns:\n    Dictionary with step-specific analysis data"
        },
        {
          "name": "analyze_file_types_across_steps",
          "lineno": 234,
          "args": [
            "steps",
            "logger"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze file types across all pipeline steps.\n\nArgs:\n    steps: Dictionary of step data\n    logger: Logger for this operation\n    \nReturns:\n    Dictionary with file type analysis"
        },
        {
          "name": "analyze_step_dependencies",
          "lineno": 287,
          "args": [
            "steps",
            "logger"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze dependencies between pipeline steps.\n\nArgs:\n    steps: Dictionary of step data\n    logger: Logger for this operation\n    \nReturns:\n    Dictionary with dependency analysis"
        },
        {
          "name": "analyze_errors",
          "lineno": 362,
          "args": [
            "errors",
            "logger"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze error patterns from pipeline execution.\n\nArgs:\n    errors: List of error dictionaries\n    logger: Logger for this operation\n    \nReturns:\n    Dictionary with error analysis"
        },
        {
          "name": "is_key_file",
          "lineno": 407,
          "args": [
            "file_path",
            "step_name"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Determine if a file is a key file for a specific step.\n\nArgs:\n    file_path: Path to the file\n    step_name: Name of the step\n    \nReturns:\n    True if the file is a key file for the step"
        },
        {
          "name": "get_pipeline_health_score",
          "lineno": 448,
          "args": [
            "pipeline_data"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Calculate a health score for the pipeline based on various metrics.\n\nArgs:\n    pipeline_data: Pipeline analysis data\n    \nReturns:\n    Health score between 0 and 100"
        }
      ],
      "classes": []
    },
    {
      "file": "src/report/formatters.py",
      "module": "report.formatters",
      "functions": [
        {
          "name": "generate_html_report",
          "lineno": 13,
          "args": [
            "pipeline_data",
            "logger"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate an HTML report from pipeline data.\n\nArgs:\n    pipeline_data: Collected pipeline data\n    logger: Logger for this operation\n    \nReturns:\n    HTML content as string"
        },
        {
          "name": "generate_markdown_report",
          "lineno": 435,
          "args": [
            "pipeline_data",
            "logger"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a markdown report from pipeline data.\n\nArgs:\n    pipeline_data: Collected pipeline data\n    logger: Logger for this operation\n    \nReturns:\n    Markdown content as string"
        },
        {
          "name": "get_health_color",
          "lineno": 582,
          "args": [
            "health_score"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get color for health score display.\n\nArgs:\n    health_score: Health score between 0 and 100\n    \nReturns:\n    CSS color string"
        }
      ],
      "classes": []
    },
    {
      "file": "src/report/generator.py",
      "module": "report.generator",
      "functions": [
        {
          "name": "generate_comprehensive_report",
          "lineno": 18,
          "args": [
            "pipeline_output_dir",
            "report_output_dir",
            "logger",
            "report_formats",
            "include_performance",
            "include_errors",
            "include_dependencies"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate a comprehensive analysis report from all pipeline outputs.\n\nArgs:\n    pipeline_output_dir: Directory containing all pipeline outputs\n    report_output_dir: Directory to save the generated report\n    logger: Logger for this operation\n    report_formats: List of report formats to generate (html, markdown, json)\n    include_performance: Whether to include performance metrics\n    include_errors: Whether to include error analysis\n    include_dependencies: Whether to include dependency analysis\n    \nReturns:\n    True if report generation succeeded, False otherwise"
        },
        {
          "name": "generate_html_report_file",
          "lineno": 116,
          "args": [
            "pipeline_data",
            "report_output_dir",
            "logger"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate HTML report file.\n\nArgs:\n    pipeline_data: Pipeline analysis data\n    report_output_dir: Output directory\n    logger: Logger for this operation\n    \nReturns:\n    True if successful, False otherwise"
        },
        {
          "name": "generate_markdown_report_file",
          "lineno": 152,
          "args": [
            "pipeline_data",
            "report_output_dir",
            "logger"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate Markdown report file.\n\nArgs:\n    pipeline_data: Pipeline analysis data\n    report_output_dir: Output directory\n    logger: Logger for this operation\n    \nReturns:\n    True if successful, False otherwise"
        },
        {
          "name": "generate_json_report_file",
          "lineno": 188,
          "args": [
            "pipeline_data",
            "report_output_dir",
            "logger"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate JSON report file.\n\nArgs:\n    pipeline_data: Pipeline analysis data\n    report_output_dir: Output directory\n    logger: Logger for this operation\n    \nReturns:\n    True if successful, False otherwise"
        },
        {
          "name": "generate_summary_report",
          "lineno": 221,
          "args": [
            "pipeline_data",
            "report_output_dir",
            "logger",
            "generated_files"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Generate a summary report of the report generation process.\n\nArgs:\n    pipeline_data: Pipeline analysis data\n    report_output_dir: Output directory\n    logger: Logger for this operation\n    generated_files: List of generated report files"
        },
        {
          "name": "generate_custom_report",
          "lineno": 263,
          "args": [
            "pipeline_output_dir",
            "report_output_dir",
            "logger",
            "step_filter",
            "exclude_steps",
            "format_type"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate a custom report with specific step filtering.\n\nArgs:\n    pipeline_output_dir: Directory containing pipeline outputs\n    report_output_dir: Directory to save generated reports\n    logger: Logger for this operation\n    step_filter: List of steps to include (optional)\n    exclude_steps: List of steps to exclude (optional)\n    format_type: Report format (html, markdown, json)\n    \nReturns:\n    True if successful, False otherwise"
        },
        {
          "name": "validate_report_data",
          "lineno": 325,
          "args": [
            "pipeline_data"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate pipeline data and return validation results.\n\nArgs:\n    pipeline_data: Pipeline analysis data\n    \nReturns:\n    Dictionary with validation results"
        }
      ],
      "classes": []
    },
    {
      "file": "src/report/mcp.py",
      "module": "report.mcp",
      "functions": [
        {
          "name": "generate_report_mcp",
          "lineno": 18,
          "args": [
            "target_directory",
            "output_directory",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate comprehensive report for pipeline artifacts. Exposed via MCP.\n\nArgs:\n    target_directory: Directory containing GNN files to process\n    output_directory: Directory to save results\n    verbose: Enable verbose output\n    \nReturns:\n    Dictionary with operation status and results."
        },
        {
          "name": "register_tools",
          "lineno": 49,
          "args": [
            "mcp_instance"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register report utility tools with the MCP."
        }
      ],
      "classes": []
    },
    {
      "file": "src/report/processor.py",
      "module": "report.processor",
      "functions": [
        {
          "name": "process_report",
          "lineno": 21,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process report for GNN files.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Directory to save results\n    verbose: Enable verbose output\n    **kwargs: Additional arguments\n    \nReturns:\n    True if processing successful, False otherwise"
        },
        {
          "name": "generate_comprehensive_report",
          "lineno": 77,
          "args": [
            "target_dir",
            "output_dir",
            "format"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate a comprehensive report for GNN files.\n\nArgs:\n    target_dir: Directory containing GNN files to analyze\n    output_dir: Directory to save the report\n    format: Output format (json, html, markdown)\n    **kwargs: Additional arguments\n    \nReturns:\n    Dictionary with report results"
        },
        {
          "name": "analyze_gnn_file",
          "lineno": 165,
          "args": [
            "file_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze a GNN file for report generation.\n\nArgs:\n    file_path: Path to GNN file\n    \nReturns:\n    Dictionary with file analysis"
        },
        {
          "name": "generate_html_report",
          "lineno": 206,
          "args": [
            "report_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate HTML report.\n\nArgs:\n    report_data: Report data dictionary\n    \nReturns:\n    HTML content string"
        },
        {
          "name": "generate_markdown_report",
          "lineno": 259,
          "args": [
            "report_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate Markdown report.\n\nArgs:\n    report_data: Report data dictionary\n    \nReturns:\n    Markdown content string"
        }
      ],
      "classes": []
    },
    {
      "file": "src/research/__init__.py",
      "module": "research.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/research/mcp.py",
      "error": "parse_error: invalid syntax (<unknown>, line 15)"
    },
    {
      "file": "src/research/processor.py",
      "module": "research.processor",
      "functions": [
        {
          "name": "process_research",
          "lineno": 21,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process research for GNN files.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Directory to save results\n    verbose: Enable verbose output\n    **kwargs: Additional arguments\n    \nReturns:\n    True if processing successful, False otherwise"
        }
      ],
      "classes": []
    },
    {
      "file": "src/security/__init__.py",
      "module": "security.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/security/mcp.py",
      "error": "parse_error: invalid syntax (<unknown>, line 15)"
    },
    {
      "file": "src/security/processor.py",
      "module": "security.processor",
      "functions": [
        {
          "name": "process_security",
          "lineno": 21,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process security validation for GNN files.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Directory to save results\n    verbose: Enable verbose output\n    **kwargs: Additional arguments\n    \nReturns:\n    True if processing successful, False otherwise"
        },
        {
          "name": "perform_security_check",
          "lineno": 114,
          "args": [
            "file_path",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Perform security checks on a GNN file."
        },
        {
          "name": "check_vulnerabilities",
          "lineno": 159,
          "args": [
            "file_path",
            "verbose"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Check for security vulnerabilities in a GNN file."
        },
        {
          "name": "generate_security_recommendations",
          "lineno": 221,
          "args": [
            "file_path",
            "verbose"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Generate security recommendations for a GNN file."
        },
        {
          "name": "calculate_security_score",
          "lineno": 281,
          "args": [
            "vulnerabilities"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Calculate a security score based on vulnerabilities."
        },
        {
          "name": "generate_security_summary",
          "lineno": 306,
          "args": [
            "results"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a security summary report."
        }
      ],
      "classes": []
    },
    {
      "file": "src/setup/__init__.py",
      "module": "setup.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/setup/mcp.py",
      "module": "setup.mcp",
      "functions": [
        {
          "name": "ensure_directory_exists_mcp",
          "lineno": 27,
          "args": [
            "directory_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Ensure a directory exists, creating it if necessary. Exposed via MCP.\n\nArgs:\n    directory_path: Directory path to ensure existence of.\n    \nReturns:\n    Dictionary with operation status and path."
        },
        {
          "name": "find_project_gnn_files_mcp",
          "lineno": 51,
          "args": [
            "search_directory",
            "recursive"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Find all GNN (.md) files in a directory. Exposed via MCP.\n\nArgs:\n    search_directory: Directory to search.\n    recursive: Whether to search recursively (default: False).\n    \nReturns:\n    Dictionary with list of found file paths or an error."
        },
        {
          "name": "get_standard_output_paths_mcp",
          "lineno": 76,
          "args": [
            "base_output_directory"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get standard output paths for the pipeline. Exposed via MCP.\n\nArgs:\n    base_output_directory: Base output directory.\n    \nReturns:\n    Dictionary of named output paths or an error."
        },
        {
          "name": "check_uv_project_status_mcp",
          "lineno": 99,
          "args": [
            "project_directory"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Check the status of a UV project. Exposed via MCP.\n\nArgs:\n    project_directory: Path to the project directory.\n    \nReturns:\n    Dictionary with UV project status information."
        },
        {
          "name": "get_uv_environment_info_mcp",
          "lineno": 123,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get information about the current UV environment. Exposed via MCP.\n\nReturns:\n    Dictionary with UV environment information."
        },
        {
          "name": "setup_uv_project_structure_mcp",
          "lineno": 143,
          "args": [
            "project_directory"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Set up a new UV project structure. Exposed via MCP.\n\nArgs:\n    project_directory: Path to the project directory.\n    \nReturns:\n    Dictionary with setup status."
        },
        {
          "name": "install_uv_dependency_mcp",
          "lineno": 168,
          "args": [
            "package_name",
            "extras"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Install a dependency using UV. Exposed via MCP.\n\nArgs:\n    package_name: Name of the package to install.\n    extras: Optional extras to install (e.g., \"dev\", \"ml-ai\").\n    \nReturns:\n    Dictionary with installation status."
        },
        {
          "name": "sync_uv_dependencies_mcp",
          "lineno": 227,
          "args": [
            "project_directory"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Sync dependencies using UV. Exposed via MCP.\n\nArgs:\n    project_directory: Path to the project directory.\n    \nReturns:\n    Dictionary with sync status."
        },
        {
          "name": "register_tools",
          "lineno": 280,
          "args": [
            "mcp_instance"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register UV-based setup utility tools with the MCP."
        }
      ],
      "classes": []
    },
    {
      "file": "src/setup/setup.py",
      "module": "setup.setup",
      "functions": [
        {
          "name": "run_command",
          "lineno": 50,
          "args": [
            "command",
            "cwd",
            "check",
            "verbose"
          ],
          "returns": "subprocess.CompletedProcess",
          "decorators": [],
          "doc": "Runs a shell command and logs its output based on verbosity.\n\nArgs:\n    command: The command and its arguments as a list of strings.\n    cwd: The current working directory for the command.\n    check: If True, raises CalledProcessError if the command returns a non-zero exit code.\n    verbose: If True, enables detailed (DEBUG level) logging for this setup process.\n    \nReturns:\n    The completed process object with stdout and stderr attributes."
        },
        {
          "name": "check_system_requirements",
          "lineno": 100,
          "args": [
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Checks if the system meets the minimum requirements for the GNN project.\n\nArgs:\n    verbose: If True, enables detailed logging.\n    \nReturns:\n    True if all requirements are met, False otherwise."
        },
        {
          "name": "check_uv_availability",
          "lineno": 149,
          "args": [
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if UV is available and properly installed.\n\nArgs:\n    verbose: If True, enables detailed logging.\n    \nReturns:\n    True if UV is available, False otherwise."
        },
        {
          "name": "create_uv_environment",
          "lineno": 173,
          "args": [
            "verbose",
            "recreate"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Creates a UV environment if it doesn't already exist, or recreates it if specified.\n\nArgs:\n    verbose: If True, enables detailed (DEBUG level) logging for this setup process.\n    recreate: If True, deletes and recreates an existing virtual environment.\n    \nReturns:\n    True if successful, False otherwise."
        },
        {
          "name": "install_uv_dependencies",
          "lineno": 259,
          "args": [
            "verbose",
            "dev",
            "extras"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Installs dependencies using UV from pyproject.toml.\nUses UV's sync command for fast, reliable dependency installation.\n\nArgs:\n    verbose: If True, enables detailed logging.\n    dev: If True, also installs development dependencies.\n    extras: List of optional dependency groups to install.\n    \nReturns:\n    True if successful, False otherwise."
        },
        {
          "name": "get_installed_package_versions",
          "lineno": 437,
          "args": [
            "verbose"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Get a list of all installed packages and their versions using UV.\n\nArgs:\n    verbose: If True, logs the full package list.\n    \nReturns:\n    A dictionary of package names and their versions."
        },
        {
          "name": "install_jax_and_test",
          "lineno": 507,
          "args": [
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Ensure JAX, Optax, and Flax are installed and working using UV.\nAfter install, run a self-test: import JAX, print device info, check Optax/Flax, log results."
        },
        {
          "name": "perform_full_setup",
          "lineno": 644,
          "args": [
            "verbose",
            "recreate_venv",
            "dev",
            "extras",
            "skip_jax_test"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Performs the full setup using UV: creates environment and installs dependencies.\nThis function is intended to be called by other scripts.\n\nArgs:\n    verbose (bool): If True, enables detailed (DEBUG level) logging for this setup process.\n    recreate_venv (bool): If True, recreates the UV environment even if it already exists.\n    dev (bool): If True, also installs development dependencies.\n    extras (list): List of optional dependency groups to install.\n    skip_jax_test (bool): If True, skips JAX/Optax/Flax installation testing (faster setup).\n    \nReturns:\n    int: 0 if successful, 1 if failed"
        },
        {
          "name": "setup_uv_environment",
          "lineno": 779,
          "args": [
            "verbose",
            "recreate",
            "dev",
            "extras"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Set up the complete GNN environment using UV.\n\nThis function handles the complete environment setup process:\n1. System requirements validation\n2. UV environment creation\n3. Dependency installation\n4. JAX installation and testing\n5. Environment validation\n\nArgs:\n    verbose: Enable verbose logging\n    recreate: Recreate UV environment if it exists\n    dev: Install development dependencies\n    extras: List of optional dependency groups to install\n    \nReturns:\n    True if setup successful, False otherwise"
        },
        {
          "name": "validate_uv_setup",
          "lineno": 847,
          "args": [
            "project_root",
            "logger"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate the current UV setup and return status information.\n\nArgs:\n    project_root: Path to project root (optional)\n    logger: Logger instance (optional)\n    \nReturns:\n    Dictionary with UV setup validation results"
        },
        {
          "name": "get_uv_setup_info",
          "lineno": 902,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get comprehensive information about the current UV setup.\n\nReturns:\n    Dictionary with UV setup information"
        },
        {
          "name": "cleanup_uv_setup",
          "lineno": 925,
          "args": [],
          "returns": "bool",
          "decorators": [],
          "doc": "Clean up the UV setup (remove virtual environment).\n\nReturns:\n    True if cleanup successful, False otherwise"
        },
        {
          "name": "log_system_info",
          "lineno": 944,
          "args": [
            "logger"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Log comprehensive system information."
        },
        {
          "name": "install_optional_dependencies",
          "lineno": 974,
          "args": [
            "project_root",
            "logger",
            "package_groups"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Install optional dependencies for the project."
        },
        {
          "name": "create_project_structure",
          "lineno": 1009,
          "args": [
            "output_dir",
            "logger"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Create the standard project structure."
        },
        {
          "name": "setup_gnn_project",
          "lineno": 1050,
          "args": [
            "project_path",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Set up a new GNN project at the specified path using UV.\n\nArgs:\n    project_path: Path where the project should be set up\n    verbose: Enable verbose logging\n\nReturns:\n    True if setup successful, False otherwise"
        },
        {
          "name": "test_jit",
          "lineno": 549,
          "args": [
            "x"
          ],
          "returns": null,
          "decorators": [
            "jax.jit"
          ],
          "doc": ""
        },
        {
          "name": "test_vmap",
          "lineno": 556,
          "args": [
            "x"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "test_pomdp_ops",
          "lineno": 581,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__call__",
          "lineno": 572,
          "args": [
            "self",
            "x"
          ],
          "returns": null,
          "decorators": [
            "flax.linen.compact"
          ],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "SimpleModel",
          "lineno": 570,
          "bases": [
            "flax.linen.Module"
          ],
          "doc": "",
          "methods": [
            {
              "name": "__call__",
              "lineno": 572,
              "args": [
                "self",
                "x"
              ],
              "returns": null,
              "decorators": [
                "flax.linen.compact"
              ],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/setup/utils.py",
      "module": "setup.utils",
      "functions": [
        {
          "name": "ensure_directory",
          "lineno": 14,
          "args": [
            "directory_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Ensure a directory exists, creating it if necessary.\n\nArgs:\n    directory_path: Path to the directory to ensure\n    \nReturns:\n    True if directory exists or was created successfully, False otherwise"
        },
        {
          "name": "find_gnn_files",
          "lineno": 31,
          "args": [
            "directory"
          ],
          "returns": "List[Path]",
          "decorators": [],
          "doc": "Find GNN files in the specified directory.\n\nArgs:\n    directory: Directory to search for GNN files\n    \nReturns:\n    List of GNN file paths found"
        },
        {
          "name": "get_output_paths",
          "lineno": 51,
          "args": [
            "base_output_dir"
          ],
          "returns": "Dict[str, Path]",
          "decorators": [],
          "doc": "Get standard output paths for the pipeline.\n\nArgs:\n    base_output_dir: Base output directory\n    \nReturns:\n    Dictionary of output paths"
        },
        {
          "name": "get_module_info",
          "lineno": 83,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Get comprehensive information about the setup module and its UV capabilities.\n\nReturns:\n    Dictionary with module information"
        },
        {
          "name": "get_setup_options",
          "lineno": 137,
          "args": [],
          "returns": "dict",
          "decorators": [],
          "doc": "Get setup options and configuration.\n\nReturns:\n    Dictionary with setup options"
        },
        {
          "name": "setup_environment",
          "lineno": 155,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Setup environment (alias for setup_uv_environment).\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    Setup result"
        },
        {
          "name": "install_dependencies",
          "lineno": 173,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Install dependencies using UV.\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    Installation result"
        }
      ],
      "classes": []
    },
    {
      "file": "src/setup/validator.py",
      "module": "setup.validator",
      "functions": [
        {
          "name": "validate_system",
          "lineno": 13,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate the system requirements for GNN with UV support.\n\nReturns:\n    Dictionary with system validation results"
        },
        {
          "name": "get_environment_info",
          "lineno": 33,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get comprehensive environment information.\n\nReturns:\n    Dictionary with environment information"
        },
        {
          "name": "get_uv_status",
          "lineno": 59,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get UV status and configuration.\n\nReturns:\n    Dictionary with UV status information"
        }
      ],
      "classes": []
    },
    {
      "file": "src/template/__init__.py",
      "module": "template.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/template/mcp.py",
      "module": "template.mcp",
      "functions": [
        {
          "name": "register_tools",
          "lineno": 15,
          "args": [
            "registry"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register all template tools with the MCP registry.\n\nArgs:\n    registry: The MCP tool registry"
        },
        {
          "name": "process_file",
          "lineno": 133,
          "args": [
            "file_path",
            "output_dir",
            "options"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Process a single file using the template processor.\n\nArgs:\n    file_path: Path to the file to process\n    output_dir: Output directory for processed files\n    options: Processing options\n    \nReturns:\n    Processing result with status and output paths"
        },
        {
          "name": "process_directory",
          "lineno": 190,
          "args": [
            "directory_path",
            "recursive",
            "output_dir",
            "options"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Process all files in a directory using the template processor.\n\nArgs:\n    directory_path: Path to the directory to process\n    recursive: Whether to process files recursively\n    output_dir: Output directory for processed files\n    options: Processing options\n    \nReturns:\n    Processing result with status and summary statistics"
        },
        {
          "name": "get_template_info",
          "lineno": 259,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get information about the template step.\n\nReturns:\n    Template step information"
        }
      ],
      "classes": []
    },
    {
      "file": "src/template/processor.py",
      "module": "template.processor",
      "functions": [
        {
          "name": "generate_correlation_id",
          "lineno": 50,
          "args": [],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a unique correlation ID for this execution."
        },
        {
          "name": "safe_template_execution",
          "lineno": 58,
          "args": [
            "logger",
            "correlation_id"
          ],
          "returns": null,
          "decorators": [
            "contextmanager"
          ],
          "doc": "Context manager for safe template execution with comprehensive error handling.\n\nDemonstrates safe-to-fail patterns that should be used across all pipeline steps."
        },
        {
          "name": "demonstrate_utility_patterns",
          "lineno": 117,
          "args": [
            "context",
            "logger"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Demonstrate various utility patterns and infrastructure capabilities.\n\nThis function showcases the comprehensive infrastructure available\nfor pipeline steps, including error recovery, resource tracking,\nand enhanced logging."
        },
        {
          "name": "process_template_standardized",
          "lineno": 242,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process files in a directory using the template processor.\n\nArgs:\n    target_dir: Directory containing files to process\n    output_dir: Output directory for processing results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "process_single_file",
          "lineno": 363,
          "args": [
            "input_file",
            "output_dir",
            "options"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process a single file.\n\nArgs:\n    input_file: Path to input file\n    output_dir: Output directory for results\n    options: Processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "validate_file",
          "lineno": 428,
          "args": [
            "input_file"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate a file for processing.\n\nArgs:\n    input_file: Path to input file\n    \nReturns:\n    Validation result with status and details"
        },
        {
          "name": "log_step_start",
          "lineno": 31,
          "args": [
            "logger",
            "message"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_success",
          "lineno": 32,
          "args": [
            "logger",
            "message"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_warning",
          "lineno": 33,
          "args": [
            "logger",
            "message"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_error",
          "lineno": 34,
          "args": [
            "logger",
            "message"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "track_operation",
          "lineno": 38,
          "args": [
            "self",
            "name",
            "metadata"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_summary",
          "lineno": 43,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__enter__",
          "lineno": 40,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__exit__",
          "lineno": 41,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "DummyPerformanceTracker",
          "lineno": 37,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "track_operation",
              "lineno": 38,
              "args": [
                "self",
                "name",
                "metadata"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_summary",
              "lineno": 43,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "DummyContext",
          "lineno": 39,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "__enter__",
              "lineno": 40,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "__exit__",
              "lineno": 41,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/template/utils.py",
      "module": "template.utils",
      "functions": [
        {
          "name": "get_version_info",
          "lineno": 8,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Get version information for the template step.\n\nReturns:\n    Dictionary with version information"
        }
      ],
      "classes": []
    },
    {
      "file": "src/type_checker/__init__.py",
      "module": "type_checker.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/type_checker/__main__.py",
      "module": "type_checker.__main__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/type_checker/analysis_utils.py",
      "module": "type_checker.analysis_utils",
      "functions": [
        {
          "name": "analyze_variable_types",
          "lineno": 13,
          "args": [
            "variables"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze variable types and dimensions for a GNN model."
        },
        {
          "name": "analyze_connections",
          "lineno": 74,
          "args": [
            "connections"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze connection patterns and complexity for a GNN model."
        },
        {
          "name": "estimate_computational_complexity",
          "lineno": 127,
          "args": [
            "type_analysis",
            "connection_analysis"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Estimate computational complexity for inference and learning."
        }
      ],
      "classes": []
    },
    {
      "file": "src/type_checker/checker.py",
      "module": "type_checker.checker",
      "functions": [
        {
          "name": "check_gnn_file",
          "lineno": 1129,
          "args": [
            "file_path",
            "strict_mode"
          ],
          "returns": "TypeCheckResult",
          "decorators": [],
          "doc": "Convenience function to check a single GNN file.\n\nArgs:\n    file_path: Path to the GNN file to check\n    strict_mode: Whether to enforce strict type checking rules\n\nReturns:\n    TypeCheckResult with the check results"
        },
        {
          "name": "validate_syntax",
          "lineno": 1145,
          "args": [
            "gnn_content",
            "strict_mode"
          ],
          "returns": "TypeCheckResult",
          "decorators": [],
          "doc": "Validate GNN syntax from content string.\n\nArgs:\n    gnn_content: GNN content as string\n    strict_mode: Whether to enforce strict type checking rules\n\nReturns:\n    TypeCheckResult with the validation results"
        },
        {
          "name": "estimate_resources",
          "lineno": 1173,
          "args": [
            "gnn_content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Estimate computational resources needed for a GNN model.\n\nArgs:\n    gnn_content: GNN content as string\n\nReturns:\n    Dictionary with resource estimates"
        },
        {
          "name": "run_type_checking",
          "lineno": 1215,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "strict"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Run comprehensive type checking on GNN files."
        },
        {
          "name": "parse_file",
          "lineno": 32,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse a GNN file and return structured content."
        },
        {
          "name": "_parse_markdown_format",
          "lineno": 42,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse GNN file in Markdown format."
        },
        {
          "name": "_process_state_space",
          "lineno": 97,
          "args": [
            "self",
            "sections"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Process StateSpaceBlock to extract variables."
        },
        {
          "name": "_process_connections",
          "lineno": 139,
          "args": [
            "self",
            "sections"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Process Connections section to extract edges."
        },
        {
          "name": "__init__",
          "lineno": 219,
          "args": [
            "self",
            "strict_mode"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the GNN type checker.\n\nArgs:\n    strict_mode: Whether to enforce strict type checking rules"
        },
        {
          "name": "check_file",
          "lineno": 232,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "Tuple[bool, List[str], List[str], Dict[str, Any]]",
          "decorators": [],
          "doc": "Check a GNN file for type and structure validity.\nReturns: (is_valid, errors, warnings, details_dict)"
        },
        {
          "name": "check_directory",
          "lineno": 334,
          "args": [
            "self",
            "dir_path",
            "recursive"
          ],
          "returns": "Dict[str, Dict[str, Any]]",
          "decorators": [],
          "doc": "Check all GNN files in a directory.\n\nArgs:\n    dir_path: Path to the directory containing GNN files\n    recursive: Whether to recursively check subdirectories\n    \nReturns:\n    Dictionary mapping file paths to check results"
        },
        {
          "name": "_check_required_sections",
          "lineno": 367,
          "args": [
            "self",
            "content"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Check if all required sections are present in the GNN file.\n\nArgs:\n    content: Parsed GNN content"
        },
        {
          "name": "_check_state_space",
          "lineno": 390,
          "args": [
            "self",
            "content"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Check state space variables and their types.\n\nArgs:\n    content: Parsed GNN content"
        },
        {
          "name": "_check_connections",
          "lineno": 426,
          "args": [
            "self",
            "content"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Check connections for consistency with declared variables.\n\nArgs:\n    content: Parsed GNN content"
        },
        {
          "name": "_check_time_specification",
          "lineno": 472,
          "args": [
            "self",
            "content"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Check time specification for validity.\n\nArgs:\n    content: Parsed GNN content"
        },
        {
          "name": "_check_equations",
          "lineno": 504,
          "args": [
            "self",
            "content"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Check equations for references to undefined variables.\n\nArgs:\n    content: Parsed GNN content"
        },
        {
          "name": "_check_version_and_flags",
          "lineno": 534,
          "args": [
            "self",
            "content"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Check GNN version and flags for validity.\n\nArgs:\n    content: Parsed GNN content"
        },
        {
          "name": "_is_common_math_function",
          "lineno": 551,
          "args": [
            "self",
            "name"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_collect_section_analysis",
          "lineno": 555,
          "args": [
            "self",
            "parsed_content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Collect comprehensive section presence and content analysis."
        },
        {
          "name": "_collect_variable_analysis",
          "lineno": 583,
          "args": [
            "self",
            "parsed_content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Collect comprehensive variable analysis."
        },
        {
          "name": "_collect_connection_analysis",
          "lineno": 634,
          "args": [
            "self",
            "parsed_content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Collect comprehensive connection analysis."
        },
        {
          "name": "_collect_model_complexity",
          "lineno": 684,
          "args": [
            "self",
            "parsed_content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Collect model complexity metrics."
        },
        {
          "name": "_collect_parameterization_analysis",
          "lineno": 735,
          "args": [
            "self",
            "parsed_content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Collect parameterization analysis."
        },
        {
          "name": "_calculate_total_elements",
          "lineno": 756,
          "args": [
            "self",
            "dimensions"
          ],
          "returns": "int",
          "decorators": [],
          "doc": "Calculate total number of elements for given dimensions."
        },
        {
          "name": "generate_report",
          "lineno": 772,
          "args": [
            "self",
            "results",
            "output_dir_base",
            "report_md_filename",
            "project_root_path"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a markdown report of the type checking results.\n\nArgs:\n    results: Dictionary mapping file paths to check results\n    output_dir_base: The base directory where type checking outputs (like this report) are saved.\n    report_md_filename: The specific name for the markdown report file.\n    project_root_path: Optional path to the project root for making file paths relative.\n    \nReturns:\n    String summary of the report."
        },
        {
          "name": "_generate_html_report",
          "lineno": 925,
          "args": [
            "self",
            "results",
            "output_file"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Generate an HTML report with visualizations.\n\nArgs:\n    results: Dictionary mapping file paths to check results\n    output_file: Path to save the HTML report"
        },
        {
          "name": "generate_json_data",
          "lineno": 1062,
          "args": [
            "self",
            "results",
            "output_file"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Generate JSON data for resource estimator and general use.\n\nArgs:\n    results: Dictionary mapping file paths to check results\n    output_file: Path to save the JSON data"
        },
        {
          "name": "__init__",
          "lineno": 1095,
          "args": [
            "self",
            "is_valid",
            "errors",
            "warnings",
            "details"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize a TypeCheckResult.\n\nArgs:\n    is_valid: Whether the GNN file passed all type checks\n    errors: List of error messages\n    warnings: List of warning messages\n    details: Additional details about the check"
        },
        {
          "name": "to_dict",
          "lineno": 1110,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Convert the result to a dictionary."
        },
        {
          "name": "__str__",
          "lineno": 1119,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "String representation of the result."
        },
        {
          "name": "__repr__",
          "lineno": 1124,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Detailed string representation."
        },
        {
          "name": "__enter__",
          "lineno": 1344,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__exit__",
          "lineno": 1345,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_start",
          "lineno": 1222,
          "args": [
            "logger",
            "msg"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_success",
          "lineno": 1223,
          "args": [
            "logger",
            "msg"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_warning",
          "lineno": 1224,
          "args": [
            "logger",
            "msg"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_error",
          "lineno": 1225,
          "args": [
            "logger",
            "msg"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_output_dir_for_script",
          "lineno": 1226,
          "args": [
            "script",
            "output_dir"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "SimpleGNNParser",
          "lineno": 29,
          "bases": [],
          "doc": "Simple GNN parser that handles markdown format correctly.",
          "methods": [
            {
              "name": "parse_file",
              "lineno": 32,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Parse a GNN file and return structured content."
            },
            {
              "name": "_parse_markdown_format",
              "lineno": 42,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Parse GNN file in Markdown format."
            },
            {
              "name": "_process_state_space",
              "lineno": 97,
              "args": [
                "self",
                "sections"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Process StateSpaceBlock to extract variables."
            },
            {
              "name": "_process_connections",
              "lineno": 139,
              "args": [
                "self",
                "sections"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Process Connections section to extract edges."
            }
          ]
        },
        {
          "name": "GNNTypeChecker",
          "lineno": 174,
          "bases": [],
          "doc": "Type checker for GNN files to validate they adhere to the specification\nand have consistent typing.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 219,
              "args": [
                "self",
                "strict_mode"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the GNN type checker.\n\nArgs:\n    strict_mode: Whether to enforce strict type checking rules"
            },
            {
              "name": "check_file",
              "lineno": 232,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "Tuple[bool, List[str], List[str], Dict[str, Any]]",
              "decorators": [],
              "doc": "Check a GNN file for type and structure validity.\nReturns: (is_valid, errors, warnings, details_dict)"
            },
            {
              "name": "check_directory",
              "lineno": 334,
              "args": [
                "self",
                "dir_path",
                "recursive"
              ],
              "returns": "Dict[str, Dict[str, Any]]",
              "decorators": [],
              "doc": "Check all GNN files in a directory.\n\nArgs:\n    dir_path: Path to the directory containing GNN files\n    recursive: Whether to recursively check subdirectories\n    \nReturns:\n    Dictionary mapping file paths to check results"
            },
            {
              "name": "_check_required_sections",
              "lineno": 367,
              "args": [
                "self",
                "content"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Check if all required sections are present in the GNN file.\n\nArgs:\n    content: Parsed GNN content"
            },
            {
              "name": "_check_state_space",
              "lineno": 390,
              "args": [
                "self",
                "content"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Check state space variables and their types.\n\nArgs:\n    content: Parsed GNN content"
            },
            {
              "name": "_check_connections",
              "lineno": 426,
              "args": [
                "self",
                "content"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Check connections for consistency with declared variables.\n\nArgs:\n    content: Parsed GNN content"
            },
            {
              "name": "_check_time_specification",
              "lineno": 472,
              "args": [
                "self",
                "content"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Check time specification for validity.\n\nArgs:\n    content: Parsed GNN content"
            },
            {
              "name": "_check_equations",
              "lineno": 504,
              "args": [
                "self",
                "content"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Check equations for references to undefined variables.\n\nArgs:\n    content: Parsed GNN content"
            },
            {
              "name": "_check_version_and_flags",
              "lineno": 534,
              "args": [
                "self",
                "content"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Check GNN version and flags for validity.\n\nArgs:\n    content: Parsed GNN content"
            },
            {
              "name": "_is_common_math_function",
              "lineno": 551,
              "args": [
                "self",
                "name"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_collect_section_analysis",
              "lineno": 555,
              "args": [
                "self",
                "parsed_content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Collect comprehensive section presence and content analysis."
            },
            {
              "name": "_collect_variable_analysis",
              "lineno": 583,
              "args": [
                "self",
                "parsed_content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Collect comprehensive variable analysis."
            },
            {
              "name": "_collect_connection_analysis",
              "lineno": 634,
              "args": [
                "self",
                "parsed_content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Collect comprehensive connection analysis."
            },
            {
              "name": "_collect_model_complexity",
              "lineno": 684,
              "args": [
                "self",
                "parsed_content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Collect model complexity metrics."
            },
            {
              "name": "_collect_parameterization_analysis",
              "lineno": 735,
              "args": [
                "self",
                "parsed_content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Collect parameterization analysis."
            },
            {
              "name": "_calculate_total_elements",
              "lineno": 756,
              "args": [
                "self",
                "dimensions"
              ],
              "returns": "int",
              "decorators": [],
              "doc": "Calculate total number of elements for given dimensions."
            },
            {
              "name": "generate_report",
              "lineno": 772,
              "args": [
                "self",
                "results",
                "output_dir_base",
                "report_md_filename",
                "project_root_path"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate a markdown report of the type checking results.\n\nArgs:\n    results: Dictionary mapping file paths to check results\n    output_dir_base: The base directory where type checking outputs (like this report) are saved.\n    report_md_filename: The specific name for the markdown report file.\n    project_root_path: Optional path to the project root for making file paths relative.\n    \nReturns:\n    String summary of the report."
            },
            {
              "name": "_generate_html_report",
              "lineno": 925,
              "args": [
                "self",
                "results",
                "output_file"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Generate an HTML report with visualizations.\n\nArgs:\n    results: Dictionary mapping file paths to check results\n    output_file: Path to save the HTML report"
            },
            {
              "name": "generate_json_data",
              "lineno": 1062,
              "args": [
                "self",
                "results",
                "output_file"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Generate JSON data for resource estimator and general use.\n\nArgs:\n    results: Dictionary mapping file paths to check results\n    output_file: Path to save the JSON data"
            }
          ]
        },
        {
          "name": "TypeCheckResult",
          "lineno": 1090,
          "bases": [],
          "doc": "Structured result type for GNN type checking operations.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 1095,
              "args": [
                "self",
                "is_valid",
                "errors",
                "warnings",
                "details"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize a TypeCheckResult.\n\nArgs:\n    is_valid: Whether the GNN file passed all type checks\n    errors: List of error messages\n    warnings: List of warning messages\n    details: Additional details about the check"
            },
            {
              "name": "to_dict",
              "lineno": 1110,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Convert the result to a dictionary."
            },
            {
              "name": "__str__",
              "lineno": 1119,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "String representation of the result."
            },
            {
              "name": "__repr__",
              "lineno": 1124,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Detailed string representation."
            }
          ]
        },
        {
          "name": "nullcontext",
          "lineno": 1343,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "__enter__",
              "lineno": 1344,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "__exit__",
              "lineno": 1345,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/type_checker/cli.py",
      "module": "type_checker.cli",
      "functions": [
        {
          "name": "main",
          "lineno": 32,
          "args": [
            "cmd_args"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Main function to run the type checker from command line.\n\nArgs:\n    cmd_args: Command line arguments (if None, sys.argv[1:] is used)\n    \nReturns:\n    Exit code (0 for success, 1 for errors)"
        }
      ],
      "classes": []
    },
    {
      "file": "src/type_checker/mcp.py",
      "module": "type_checker.mcp",
      "functions": [
        {
          "name": "validate_gnn_files_mcp",
          "lineno": 19,
          "args": [
            "target_directory",
            "output_directory",
            "strict",
            "estimate_resources",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate GNN files for syntax and type correctness. Exposed via MCP.\n\nArgs:\n    target_directory: Directory containing GNN files to validate\n    output_directory: Directory to save validation results\n    strict: Enable strict type checking mode\n    estimate_resources: Estimate computational resources\n    verbose: Enable verbose output\n    \nReturns:\n    Dictionary with operation status and validation results."
        },
        {
          "name": "validate_single_gnn_file_mcp",
          "lineno": 56,
          "args": [
            "gnn_file_path",
            "strict",
            "estimate_resources"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate a single GNN file. Exposed via MCP.\n\nArgs:\n    gnn_file_path: Path to the GNN file to validate\n    strict: Enable strict validation mode\n    estimate_resources: Estimate computational resources\n    \nReturns:\n    Dictionary with validation results."
        },
        {
          "name": "register_tools",
          "lineno": 88,
          "args": [
            "mcp_instance"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register type_checker utility tools with the MCP."
        }
      ],
      "classes": []
    },
    {
      "file": "src/type_checker/output_utils.py",
      "module": "type_checker.output_utils",
      "functions": [
        {
          "name": "write_markdown",
          "lineno": 17,
          "args": [
            "path",
            "content"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "write_json",
          "lineno": 22,
          "args": [
            "path",
            "data"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "write_csv",
          "lineno": 27,
          "args": [
            "path",
            "rows",
            "header"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "per_file_markdown_report",
          "lineno": 35,
          "args": [
            "filename",
            "result"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a detailed Markdown report for a single file's type check result."
        },
        {
          "name": "per_file_json_report",
          "lineno": 136,
          "args": [
            "filename",
            "result"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Return a JSON-serializable dict for a single file's type check result."
        },
        {
          "name": "summary_markdown_report",
          "lineno": 140,
          "args": [
            "all_results"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a Markdown summary for all files."
        },
        {
          "name": "summary_json_report",
          "lineno": 183,
          "args": [
            "all_results"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Return a JSON-serializable summary for all files."
        },
        {
          "name": "variables_table_csv",
          "lineno": 193,
          "args": [
            "all_results"
          ],
          "returns": "List[List[Any]]",
          "decorators": [],
          "doc": "Return rows for a CSV table of all variables across all files."
        },
        {
          "name": "section_presence_matrix_csv",
          "lineno": 201,
          "args": [
            "all_results",
            "section_list"
          ],
          "returns": "List[List[Any]]",
          "decorators": [],
          "doc": "Return rows for a CSV matrix of section presence (files \u00d7 sections)."
        },
        {
          "name": "connections_table_csv",
          "lineno": 212,
          "args": [
            "all_results"
          ],
          "returns": "List[List[Any]]",
          "decorators": [],
          "doc": "Return rows for a CSV table of all connections across all files."
        },
        {
          "name": "complexity_analysis_csv",
          "lineno": 226,
          "args": [
            "all_results"
          ],
          "returns": "List[List[Any]]",
          "decorators": [],
          "doc": "Return rows for a CSV table of complexity analysis across all files."
        },
        {
          "name": "type_distribution_csv",
          "lineno": 242,
          "args": [
            "all_results"
          ],
          "returns": "List[List[Any]]",
          "decorators": [],
          "doc": "Return rows for a CSV table of type distribution across all files."
        }
      ],
      "classes": []
    },
    {
      "file": "src/type_checker/processor.py",
      "module": "type_checker.processor",
      "functions": [
        {
          "name": "estimate_file_resources",
          "lineno": 313,
          "args": [
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Estimate computational resources needed for a GNN file."
        },
        {
          "name": "__init__",
          "lineno": 23,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the GNN type checker."
        },
        {
          "name": "validate_gnn_files",
          "lineno": 27,
          "args": [
            "self",
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate GNN files for type consistency.\n\nArgs:\n    target_dir: Directory containing GNN files to validate\n    output_dir: Directory to save validation results\n    verbose: Enable verbose output\n    **kwargs: Additional arguments\n    \nReturns:\n    True if validation successful, False otherwise"
        },
        {
          "name": "validate_single_gnn_file",
          "lineno": 116,
          "args": [
            "self",
            "file_path",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate a single GNN file for type consistency."
        },
        {
          "name": "_get_validation_rules",
          "lineno": 177,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get validation rules for GNN types."
        },
        {
          "name": "_validate_type",
          "lineno": 191,
          "args": [
            "self",
            "type_info"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate a single type definition."
        },
        {
          "name": "_check_type_consistency",
          "lineno": 215,
          "args": [
            "self",
            "types"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Check consistency of types across the file."
        },
        {
          "name": "_analyze_types",
          "lineno": 232,
          "args": [
            "self",
            "file_path",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze types in a GNN file."
        },
        {
          "name": "_generate_type_check_summary",
          "lineno": 277,
          "args": [
            "self",
            "results"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a summary of type checking results."
        }
      ],
      "classes": [
        {
          "name": "GNNTypeChecker",
          "lineno": 20,
          "bases": [],
          "doc": "Type checker for GNN files.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 23,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the GNN type checker."
            },
            {
              "name": "validate_gnn_files",
              "lineno": 27,
              "args": [
                "self",
                "target_dir",
                "output_dir",
                "verbose"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Validate GNN files for type consistency.\n\nArgs:\n    target_dir: Directory containing GNN files to validate\n    output_dir: Directory to save validation results\n    verbose: Enable verbose output\n    **kwargs: Additional arguments\n    \nReturns:\n    True if validation successful, False otherwise"
            },
            {
              "name": "validate_single_gnn_file",
              "lineno": 116,
              "args": [
                "self",
                "file_path",
                "verbose"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Validate a single GNN file for type consistency."
            },
            {
              "name": "_get_validation_rules",
              "lineno": 177,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Get validation rules for GNN types."
            },
            {
              "name": "_validate_type",
              "lineno": 191,
              "args": [
                "self",
                "type_info"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Validate a single type definition."
            },
            {
              "name": "_check_type_consistency",
              "lineno": 215,
              "args": [
                "self",
                "types"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Check consistency of types across the file."
            },
            {
              "name": "_analyze_types",
              "lineno": 232,
              "args": [
                "self",
                "file_path",
                "verbose"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Analyze types in a GNN file."
            },
            {
              "name": "_generate_type_check_summary",
              "lineno": 277,
              "args": [
                "self",
                "results"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate a summary of type checking results."
            }
          ]
        }
      ]
    },
    {
      "file": "src/type_checker/resource_estimator.py",
      "module": "type_checker.resource_estimator",
      "functions": [
        {
          "name": "main",
          "lineno": 1700,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Main function to run the resource estimator from command line."
        },
        {
          "name": "__init__",
          "lineno": 73,
          "args": [
            "self",
            "type_check_data"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the resource estimator.\n\nArgs:\n    type_check_data: Path to JSON data from type checker"
        },
        {
          "name": "estimate_from_file",
          "lineno": 93,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Estimate resources for a single GNN file.\n\nArgs:\n    file_path: Path to GNN file\n    \nReturns:\n    Dictionary with resource estimates"
        },
        {
          "name": "estimate_from_directory",
          "lineno": 121,
          "args": [
            "self",
            "dir_path",
            "recursive"
          ],
          "returns": "Dict[str, Dict[str, Any]]",
          "decorators": [],
          "doc": "Estimate resources for all GNN files in a directory.\n\nArgs:\n    dir_path: Path to directory with GNN files\n    recursive: Whether to recursively process subdirectories\n    \nReturns:\n    Dictionary mapping file paths to resource estimates"
        },
        {
          "name": "_analyze_model",
          "lineno": 145,
          "args": [
            "self",
            "content",
            "file_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze a GNN model and estimate resources.\n\nArgs:\n    content: Parsed GNN content\n    file_path: Path to source file\n    \nReturns:\n    Dictionary with resource estimates"
        },
        {
          "name": "_estimate_memory",
          "lineno": 222,
          "args": [
            "self",
            "variables"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Estimate memory requirements based on variables.\n\nArgs:\n    variables: Dictionary of model variables\n    \nReturns:\n    Memory estimate in KB"
        },
        {
          "name": "_detailed_memory_breakdown",
          "lineno": 274,
          "args": [
            "self",
            "variables"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Create detailed memory breakdown by variable and type.\n\nArgs:\n    variables: Dictionary of model variables\n    \nReturns:\n    Dictionary with detailed memory breakdown"
        },
        {
          "name": "_estimate_flops",
          "lineno": 354,
          "args": [
            "self",
            "variables",
            "edges",
            "equations",
            "model_type"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Estimate floating-point operations (FLOPS) required for inference.\n\nArgs:\n    variables: Dictionary of model variables\n    edges: List of edges in the model\n    equations: Equations in the model\n    model_type: Type of model (Static, Dynamic, Hierarchical)\n    \nReturns:\n    Dictionary with FLOPS estimates"
        },
        {
          "name": "_estimate_inference_time",
          "lineno": 447,
          "args": [
            "self",
            "flops_estimate"
          ],
          "returns": "Dict[str, float]",
          "decorators": [],
          "doc": "Estimate inference time based on FLOPS and hardware specs.\n\nArgs:\n    flops_estimate: Dictionary with FLOPS estimates\n    \nReturns:\n    Dictionary with inference time estimates in various units"
        },
        {
          "name": "_estimate_batched_inference",
          "lineno": 468,
          "args": [
            "self",
            "variables",
            "model_type",
            "flops_estimate"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Estimate batched inference performance.\n\nArgs:\n    variables: Dictionary of model variables\n    model_type: Type of model (Static, Dynamic, Hierarchical)\n    flops_estimate: Dictionary with FLOPS estimates\n    \nReturns:\n    Dictionary with batched inference estimates"
        },
        {
          "name": "_estimate_matrix_operation_costs",
          "lineno": 511,
          "args": [
            "self",
            "variables",
            "edges",
            "equations"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Provide detailed estimates of matrix operation costs.\n\nArgs:\n    variables: Dictionary of model variables\n    edges: List of edges in the model\n    equations: Equations in the model\n    \nReturns:\n    Dictionary with matrix operation costs"
        },
        {
          "name": "_estimate_model_overhead",
          "lineno": 616,
          "args": [
            "self",
            "variables",
            "edges",
            "equations"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Estimate model overhead including compile-time and optimization costs.\n\nArgs:\n    variables: Dictionary of model variables\n    edges: List of edges in the model\n    equations: Equations in the model\n    \nReturns:\n    Dictionary with model overhead estimates"
        },
        {
          "name": "_estimate_inference",
          "lineno": 654,
          "args": [
            "self",
            "variables",
            "model_type",
            "edges",
            "equations"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Estimate inference time requirements based on model complexity.\n\nArgs:\n    variables: Dictionary of model variables\n    model_type: Type of model (Static, Dynamic, Hierarchical)\n    edges: List of edges in the model\n    equations: Equations in the model\n    \nReturns:\n    Inference time estimate (arbitrary units)"
        },
        {
          "name": "_estimate_storage",
          "lineno": 754,
          "args": [
            "self",
            "variables",
            "edges",
            "equations"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Estimate storage requirements based on model structure and size.\n\nArgs:\n    variables: Dictionary of model variables\n    edges: List of edges in the model\n    equations: Equations in the model\n    \nReturns:\n    Storage estimate in KB"
        },
        {
          "name": "_calculate_complexity",
          "lineno": 802,
          "args": [
            "self",
            "variables",
            "edges",
            "equations"
          ],
          "returns": "Dict[str, float]",
          "decorators": [],
          "doc": "Calculate detailed complexity metrics for the model.\n\nArgs:\n    variables: Dictionary of model variables\n    edges: List of edges in the model\n    equations: Equations in the model\n    \nReturns:\n    Dictionary with complexity metrics"
        },
        {
          "name": "generate_html_report",
          "lineno": 932,
          "args": [
            "self",
            "output_dir"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a comprehensive HTML report with visualizations and detailed explanations.\n\nArgs:\n    output_dir: Directory to save report files\n    \nReturns:\n    Path to the generated HTML report"
        },
        {
          "name": "_generate_visualizations_for_html",
          "lineno": 1479,
          "args": [
            "self",
            "output_dir"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Generate visualizations specifically for HTML embedding.\n\nArgs:\n    output_dir: Directory to save visualizations"
        },
        {
          "name": "generate_report",
          "lineno": 1564,
          "args": [
            "self",
            "output_dir",
            "project_root_path"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate a markdown report and JSON data of the resource estimates.\n\nArgs:\n    output_dir: Directory to save the report and JSON data. \n                If None, defaults to a subdirectory 'resource_estimates' in the current working directory.\n    project_root_path: Optional path to the project root for making file paths relative in the report.\n\nReturns:\n    String summary of the report."
        },
        {
          "name": "_generate_visualizations",
          "lineno": 1689,
          "args": [
            "self",
            "output_dir"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Generate visualizations of resource estimates.\n\nArgs:\n    output_dir: Directory to save visualizations"
        }
      ],
      "classes": [
        {
          "name": "GNNResourceEstimator",
          "lineno": 23,
          "bases": [],
          "doc": "Estimates computational resources required for GNN models.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 73,
              "args": [
                "self",
                "type_check_data"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the resource estimator.\n\nArgs:\n    type_check_data: Path to JSON data from type checker"
            },
            {
              "name": "estimate_from_file",
              "lineno": 93,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Estimate resources for a single GNN file.\n\nArgs:\n    file_path: Path to GNN file\n    \nReturns:\n    Dictionary with resource estimates"
            },
            {
              "name": "estimate_from_directory",
              "lineno": 121,
              "args": [
                "self",
                "dir_path",
                "recursive"
              ],
              "returns": "Dict[str, Dict[str, Any]]",
              "decorators": [],
              "doc": "Estimate resources for all GNN files in a directory.\n\nArgs:\n    dir_path: Path to directory with GNN files\n    recursive: Whether to recursively process subdirectories\n    \nReturns:\n    Dictionary mapping file paths to resource estimates"
            },
            {
              "name": "_analyze_model",
              "lineno": 145,
              "args": [
                "self",
                "content",
                "file_path"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Analyze a GNN model and estimate resources.\n\nArgs:\n    content: Parsed GNN content\n    file_path: Path to source file\n    \nReturns:\n    Dictionary with resource estimates"
            },
            {
              "name": "_estimate_memory",
              "lineno": 222,
              "args": [
                "self",
                "variables"
              ],
              "returns": "float",
              "decorators": [],
              "doc": "Estimate memory requirements based on variables.\n\nArgs:\n    variables: Dictionary of model variables\n    \nReturns:\n    Memory estimate in KB"
            },
            {
              "name": "_detailed_memory_breakdown",
              "lineno": 274,
              "args": [
                "self",
                "variables"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Create detailed memory breakdown by variable and type.\n\nArgs:\n    variables: Dictionary of model variables\n    \nReturns:\n    Dictionary with detailed memory breakdown"
            },
            {
              "name": "_estimate_flops",
              "lineno": 354,
              "args": [
                "self",
                "variables",
                "edges",
                "equations",
                "model_type"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Estimate floating-point operations (FLOPS) required for inference.\n\nArgs:\n    variables: Dictionary of model variables\n    edges: List of edges in the model\n    equations: Equations in the model\n    model_type: Type of model (Static, Dynamic, Hierarchical)\n    \nReturns:\n    Dictionary with FLOPS estimates"
            },
            {
              "name": "_estimate_inference_time",
              "lineno": 447,
              "args": [
                "self",
                "flops_estimate"
              ],
              "returns": "Dict[str, float]",
              "decorators": [],
              "doc": "Estimate inference time based on FLOPS and hardware specs.\n\nArgs:\n    flops_estimate: Dictionary with FLOPS estimates\n    \nReturns:\n    Dictionary with inference time estimates in various units"
            },
            {
              "name": "_estimate_batched_inference",
              "lineno": 468,
              "args": [
                "self",
                "variables",
                "model_type",
                "flops_estimate"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Estimate batched inference performance.\n\nArgs:\n    variables: Dictionary of model variables\n    model_type: Type of model (Static, Dynamic, Hierarchical)\n    flops_estimate: Dictionary with FLOPS estimates\n    \nReturns:\n    Dictionary with batched inference estimates"
            },
            {
              "name": "_estimate_matrix_operation_costs",
              "lineno": 511,
              "args": [
                "self",
                "variables",
                "edges",
                "equations"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Provide detailed estimates of matrix operation costs.\n\nArgs:\n    variables: Dictionary of model variables\n    edges: List of edges in the model\n    equations: Equations in the model\n    \nReturns:\n    Dictionary with matrix operation costs"
            },
            {
              "name": "_estimate_model_overhead",
              "lineno": 616,
              "args": [
                "self",
                "variables",
                "edges",
                "equations"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Estimate model overhead including compile-time and optimization costs.\n\nArgs:\n    variables: Dictionary of model variables\n    edges: List of edges in the model\n    equations: Equations in the model\n    \nReturns:\n    Dictionary with model overhead estimates"
            },
            {
              "name": "_estimate_inference",
              "lineno": 654,
              "args": [
                "self",
                "variables",
                "model_type",
                "edges",
                "equations"
              ],
              "returns": "float",
              "decorators": [],
              "doc": "Estimate inference time requirements based on model complexity.\n\nArgs:\n    variables: Dictionary of model variables\n    model_type: Type of model (Static, Dynamic, Hierarchical)\n    edges: List of edges in the model\n    equations: Equations in the model\n    \nReturns:\n    Inference time estimate (arbitrary units)"
            },
            {
              "name": "_estimate_storage",
              "lineno": 754,
              "args": [
                "self",
                "variables",
                "edges",
                "equations"
              ],
              "returns": "float",
              "decorators": [],
              "doc": "Estimate storage requirements based on model structure and size.\n\nArgs:\n    variables: Dictionary of model variables\n    edges: List of edges in the model\n    equations: Equations in the model\n    \nReturns:\n    Storage estimate in KB"
            },
            {
              "name": "_calculate_complexity",
              "lineno": 802,
              "args": [
                "self",
                "variables",
                "edges",
                "equations"
              ],
              "returns": "Dict[str, float]",
              "decorators": [],
              "doc": "Calculate detailed complexity metrics for the model.\n\nArgs:\n    variables: Dictionary of model variables\n    edges: List of edges in the model\n    equations: Equations in the model\n    \nReturns:\n    Dictionary with complexity metrics"
            },
            {
              "name": "generate_html_report",
              "lineno": 932,
              "args": [
                "self",
                "output_dir"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate a comprehensive HTML report with visualizations and detailed explanations.\n\nArgs:\n    output_dir: Directory to save report files\n    \nReturns:\n    Path to the generated HTML report"
            },
            {
              "name": "_generate_visualizations_for_html",
              "lineno": 1479,
              "args": [
                "self",
                "output_dir"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Generate visualizations specifically for HTML embedding.\n\nArgs:\n    output_dir: Directory to save visualizations"
            },
            {
              "name": "generate_report",
              "lineno": 1564,
              "args": [
                "self",
                "output_dir",
                "project_root_path"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate a markdown report and JSON data of the resource estimates.\n\nArgs:\n    output_dir: Directory to save the report and JSON data. \n                If None, defaults to a subdirectory 'resource_estimates' in the current working directory.\n    project_root_path: Optional path to the project root for making file paths relative in the report.\n\nReturns:\n    String summary of the report."
            },
            {
              "name": "_generate_visualizations",
              "lineno": 1689,
              "args": [
                "self",
                "output_dir"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Generate visualizations of resource estimates.\n\nArgs:\n    output_dir: Directory to save visualizations"
            }
          ]
        }
      ]
    },
    {
      "file": "src/utils/__init__.py",
      "module": "utils.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/utils/argument_utils.py",
      "module": "utils.argument_utils",
      "functions": [
        {
          "name": "build_step_command_args",
          "lineno": 458,
          "args": [
            "step_name",
            "pipeline_args",
            "python_executable",
            "script_path"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Build command line arguments for a pipeline step.\n\nArgs:\n    step_name: Name of the step (e.g., \"1_gnn\")\n    pipeline_args: Main pipeline arguments\n    python_executable: Path to Python executable\n    script_path: Path to the step script\n    \nReturns:\n    List of command line arguments"
        },
        {
          "name": "get_step_output_dir",
          "lineno": 504,
          "args": [
            "step_name",
            "base_output_dir"
          ],
          "returns": "Path",
          "decorators": [],
          "doc": "Get the appropriate output directory for a pipeline step.\n\nArgs:\n    step_name: Name of the step\n    base_output_dir: Base output directory\n    \nReturns:\n    Output directory for the step"
        },
        {
          "name": "build_enhanced_step_command_args",
          "lineno": 844,
          "args": [
            "step_name",
            "pipeline_args",
            "python_executable",
            "script_path"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Build validated command line arguments for a pipeline step.\n\nArgs:\n    step_name: Name of the step (e.g., \"1_gnn\")\n    pipeline_args: Main pipeline arguments\n    python_executable: Path to Python executable\n    script_path: Path to the step script\n    \nReturns:\n    List of command line arguments\n    \nRaises:\n    ValueError: If step configuration is invalid"
        },
        {
          "name": "get_pipeline_step_info",
          "lineno": 917,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get comprehensive information about all pipeline steps."
        },
        {
          "name": "parse_step_arguments",
          "lineno": 933,
          "args": [
            "step_name",
            "args"
          ],
          "returns": "argparse.Namespace",
          "decorators": [],
          "doc": "Parse arguments for a specific pipeline step (standalone function)."
        },
        {
          "name": "validate_arguments",
          "lineno": 937,
          "args": [
            "args"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Validate parsed arguments and return list of errors."
        },
        {
          "name": "convert_path_arguments",
          "lineno": 952,
          "args": [
            "args"
          ],
          "returns": "argparse.Namespace",
          "decorators": [],
          "doc": "Convert string paths to Path objects in parsed arguments."
        },
        {
          "name": "validate_pipeline_configuration",
          "lineno": 961,
          "args": [
            "pipeline_args"
          ],
          "returns": "Dict[str, List[str]]",
          "decorators": [],
          "doc": "Validate pipeline configuration against all step requirements.\n\nReturns:\n    Dictionary mapping step names to lists of validation errors"
        },
        {
          "name": "parse_step_list",
          "lineno": 987,
          "args": [
            "step_str"
          ],
          "returns": "List[int]",
          "decorators": [],
          "doc": "Parse a comma-separated list of step numbers."
        },
        {
          "name": "parse_arguments",
          "lineno": 1001,
          "args": [],
          "returns": "PipelineArguments",
          "decorators": [],
          "doc": "Parse command line arguments and load configuration."
        },
        {
          "name": "validate_and_convert_paths",
          "lineno": 1130,
          "args": [
            "args",
            "logger"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "add_to_parser",
          "lineno": 32,
          "args": [
            "self",
            "parser"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Add this argument to an ArgumentParser."
        },
        {
          "name": "__post_init__",
          "lineno": 103,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Post-initialization validation and path resolution."
        },
        {
          "name": "validate",
          "lineno": 122,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Validate argument values and return list of errors."
        },
        {
          "name": "to_dict",
          "lineno": 174,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Convert to dictionary with string representation of paths."
        },
        {
          "name": "create_main_parser",
          "lineno": 327,
          "args": [
            "cls"
          ],
          "returns": "argparse.ArgumentParser",
          "decorators": [
            "classmethod"
          ],
          "doc": "Create the main pipeline argument parser with all arguments."
        },
        {
          "name": "create_step_parser",
          "lineno": 341,
          "args": [
            "cls",
            "step_name",
            "description"
          ],
          "returns": "argparse.ArgumentParser",
          "decorators": [
            "classmethod"
          ],
          "doc": "Create a parser for a specific pipeline step."
        },
        {
          "name": "parse_main_arguments",
          "lineno": 362,
          "args": [
            "cls",
            "args"
          ],
          "returns": "PipelineArguments",
          "decorators": [
            "classmethod"
          ],
          "doc": "Parse main pipeline arguments and return PipelineArguments object."
        },
        {
          "name": "parse_step_arguments",
          "lineno": 386,
          "args": [
            "cls",
            "step_name",
            "args"
          ],
          "returns": "argparse.Namespace",
          "decorators": [
            "classmethod"
          ],
          "doc": "Parse arguments for a specific step with guaranteed attribute availability."
        },
        {
          "name": "get_step_config",
          "lineno": 685,
          "args": [
            "cls",
            "step_name"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [
            "classmethod"
          ],
          "doc": "Get configuration for a specific step."
        },
        {
          "name": "validate_step_args",
          "lineno": 690,
          "args": [
            "cls",
            "step_name",
            "args"
          ],
          "returns": "List[str]",
          "decorators": [
            "classmethod"
          ],
          "doc": "Validate arguments for a specific step."
        },
        {
          "name": "create_step_parser",
          "lineno": 741,
          "args": [
            "cls",
            "step_name",
            "description"
          ],
          "returns": "argparse.ArgumentParser",
          "decorators": [
            "classmethod"
          ],
          "doc": "Create an enhanced parser for a specific pipeline step."
        },
        {
          "name": "parse_step_arguments",
          "lineno": 796,
          "args": [
            "cls",
            "step_name",
            "args"
          ],
          "returns": "argparse.Namespace",
          "decorators": [
            "classmethod"
          ],
          "doc": "Parse and validate arguments for a specific pipeline step."
        },
        {
          "name": "get_step_help",
          "lineno": 813,
          "args": [
            "cls",
            "step_name"
          ],
          "returns": "str",
          "decorators": [
            "classmethod"
          ],
          "doc": "Get help text for a specific step."
        }
      ],
      "classes": [
        {
          "name": "ArgumentDefinition",
          "lineno": 22,
          "bases": [],
          "doc": "Definition of a pipeline argument with metadata.",
          "methods": [
            {
              "name": "add_to_parser",
              "lineno": 32,
              "args": [
                "self",
                "parser"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Add this argument to an ArgumentParser."
            }
          ]
        },
        {
          "name": "PipelineArguments",
          "lineno": 58,
          "bases": [],
          "doc": "Centralized argument configuration for the entire pipeline.",
          "methods": [
            {
              "name": "__post_init__",
              "lineno": 103,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Post-initialization validation and path resolution."
            },
            {
              "name": "validate",
              "lineno": 122,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Validate argument values and return list of errors."
            },
            {
              "name": "to_dict",
              "lineno": 174,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Convert to dictionary with string representation of paths."
            }
          ]
        },
        {
          "name": "ArgumentParser",
          "lineno": 184,
          "bases": [],
          "doc": "Centralized argument parser for the GNN pipeline.",
          "methods": [
            {
              "name": "create_main_parser",
              "lineno": 327,
              "args": [
                "cls"
              ],
              "returns": "argparse.ArgumentParser",
              "decorators": [
                "classmethod"
              ],
              "doc": "Create the main pipeline argument parser with all arguments."
            },
            {
              "name": "create_step_parser",
              "lineno": 341,
              "args": [
                "cls",
                "step_name",
                "description"
              ],
              "returns": "argparse.ArgumentParser",
              "decorators": [
                "classmethod"
              ],
              "doc": "Create a parser for a specific pipeline step."
            },
            {
              "name": "parse_main_arguments",
              "lineno": 362,
              "args": [
                "cls",
                "args"
              ],
              "returns": "PipelineArguments",
              "decorators": [
                "classmethod"
              ],
              "doc": "Parse main pipeline arguments and return PipelineArguments object."
            },
            {
              "name": "parse_step_arguments",
              "lineno": 386,
              "args": [
                "cls",
                "step_name",
                "args"
              ],
              "returns": "argparse.Namespace",
              "decorators": [
                "classmethod"
              ],
              "doc": "Parse arguments for a specific step with guaranteed attribute availability."
            }
          ]
        },
        {
          "name": "StepConfiguration",
          "lineno": 539,
          "bases": [],
          "doc": "Configuration for individual pipeline steps.",
          "methods": [
            {
              "name": "get_step_config",
              "lineno": 685,
              "args": [
                "cls",
                "step_name"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [
                "classmethod"
              ],
              "doc": "Get configuration for a specific step."
            },
            {
              "name": "validate_step_args",
              "lineno": 690,
              "args": [
                "cls",
                "step_name",
                "args"
              ],
              "returns": "List[str]",
              "decorators": [
                "classmethod"
              ],
              "doc": "Validate arguments for a specific step."
            }
          ]
        },
        {
          "name": "EnhancedArgumentParser",
          "lineno": 737,
          "bases": [
            "ArgumentParser"
          ],
          "doc": "Argument parser with step-specific validation and defaults.",
          "methods": [
            {
              "name": "create_step_parser",
              "lineno": 741,
              "args": [
                "cls",
                "step_name",
                "description"
              ],
              "returns": "argparse.ArgumentParser",
              "decorators": [
                "classmethod"
              ],
              "doc": "Create an enhanced parser for a specific pipeline step."
            },
            {
              "name": "parse_step_arguments",
              "lineno": 796,
              "args": [
                "cls",
                "step_name",
                "args"
              ],
              "returns": "argparse.Namespace",
              "decorators": [
                "classmethod"
              ],
              "doc": "Parse and validate arguments for a specific pipeline step."
            },
            {
              "name": "get_step_help",
              "lineno": 813,
              "args": [
                "cls",
                "step_name"
              ],
              "returns": "str",
              "decorators": [
                "classmethod"
              ],
              "doc": "Get help text for a specific step."
            }
          ]
        }
      ]
    },
    {
      "file": "src/utils/config_loader.py",
      "module": "utils.config_loader",
      "functions": [
        {
          "name": "load_config",
          "lineno": 245,
          "args": [
            "config_path"
          ],
          "returns": "GNNPipelineConfig",
          "decorators": [],
          "doc": "Load configuration from file or use defaults.\n\nArgs:\n    config_path: Path to configuration file. If None, looks for config.yaml in input/\n    \nReturns:\n    Loaded configuration"
        },
        {
          "name": "save_config",
          "lineno": 281,
          "args": [
            "config",
            "file_path"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Save a configuration dictionary to a file (YAML or JSON based on extension).\nArgs:\n    config: Configuration dictionary to save\n    file_path: Path to the output file (should end with .yaml/.yml or .json)\nRaises:\n    ValueError: If file extension is not supported"
        },
        {
          "name": "validate_config",
          "lineno": 313,
          "args": [
            "config"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate a configuration dictionary for required structure.\nReturns True if valid, False otherwise.\nFor demonstration, require at least one section with at least one key."
        },
        {
          "name": "get_config_value",
          "lineno": 328,
          "args": [
            "config",
            "key"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Retrieve a value from a nested config dictionary using dot notation.\nExample: get_config_value(config, 'section.key')"
        },
        {
          "name": "set_config_value",
          "lineno": 343,
          "args": [
            "config",
            "key",
            "value"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Set a value in a nested config dictionary using dot notation.\nExample: set_config_value(config, 'section.key', value)"
        },
        {
          "name": "__post_init__",
          "lineno": 44,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Post-initialization validation and path resolution."
        },
        {
          "name": "__post_init__",
          "lineno": 67,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "load_from_file",
          "lineno": 113,
          "args": [
            "cls",
            "config_path"
          ],
          "returns": "'GNNPipelineConfig'",
          "decorators": [
            "classmethod"
          ],
          "doc": "Load configuration from YAML file."
        },
        {
          "name": "_from_dict",
          "lineno": 129,
          "args": [
            "cls",
            "config_data"
          ],
          "returns": "'GNNPipelineConfig'",
          "decorators": [
            "classmethod"
          ],
          "doc": "Create configuration from dictionary."
        },
        {
          "name": "to_pipeline_arguments",
          "lineno": 188,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Convert configuration to pipeline arguments dictionary."
        },
        {
          "name": "validate",
          "lineno": 211,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Validate configuration and return list of errors."
        }
      ],
      "classes": [
        {
          "name": "PipelineConfig",
          "lineno": 22,
          "bases": [],
          "doc": "Configuration for the GNN pipeline.",
          "methods": [
            {
              "name": "__post_init__",
              "lineno": 44,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Post-initialization validation and path resolution."
            }
          ]
        },
        {
          "name": "TypeCheckerConfig",
          "lineno": 57,
          "bases": [],
          "doc": "Configuration for type checking step.",
          "methods": []
        },
        {
          "name": "OntologyConfig",
          "lineno": 63,
          "bases": [],
          "doc": "Configuration for ontology processing.",
          "methods": [
            {
              "name": "__post_init__",
              "lineno": 67,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "LLMConfig",
          "lineno": 72,
          "bases": [],
          "doc": "Configuration for LLM processing.",
          "methods": []
        },
        {
          "name": "WebsiteConfig",
          "lineno": 78,
          "bases": [],
          "doc": "Configuration for website generation.",
          "methods": []
        },
        {
          "name": "SetupConfig",
          "lineno": 83,
          "bases": [],
          "doc": "Configuration for setup step.",
          "methods": []
        },
        {
          "name": "SAPFConfig",
          "lineno": 89,
          "bases": [],
          "doc": "Configuration for SAPF audio generation.",
          "methods": []
        },
        {
          "name": "ModelConfig",
          "lineno": 94,
          "bases": [],
          "doc": "Configuration for model-specific settings.",
          "methods": []
        },
        {
          "name": "GNNPipelineConfig",
          "lineno": 100,
          "bases": [],
          "doc": "Complete configuration for the GNN pipeline.",
          "methods": [
            {
              "name": "load_from_file",
              "lineno": 113,
              "args": [
                "cls",
                "config_path"
              ],
              "returns": "'GNNPipelineConfig'",
              "decorators": [
                "classmethod"
              ],
              "doc": "Load configuration from YAML file."
            },
            {
              "name": "_from_dict",
              "lineno": 129,
              "args": [
                "cls",
                "config_data"
              ],
              "returns": "'GNNPipelineConfig'",
              "decorators": [
                "classmethod"
              ],
              "doc": "Create configuration from dictionary."
            },
            {
              "name": "to_pipeline_arguments",
              "lineno": 188,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Convert configuration to pipeline arguments dictionary."
            },
            {
              "name": "validate",
              "lineno": 211,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Validate configuration and return list of errors."
            }
          ]
        }
      ]
    },
    {
      "file": "src/utils/dependency_validator.py",
      "module": "utils.dependency_validator",
      "functions": [
        {
          "name": "validate_pipeline_dependencies",
          "lineno": 370,
          "args": [
            "step_names",
            "logger",
            "python_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate dependencies for specific pipeline steps.\n\nArgs:\n    step_names: List of pipeline step names to validate dependencies for\n    logger: Optional logger instance\n    \nReturns:\n    bool: True if all required dependencies are available"
        },
        {
          "name": "check_optional_dependencies",
          "lineno": 419,
          "args": [],
          "returns": "dict",
          "decorators": [],
          "doc": "Check the status of all optional dependencies and return a summary dictionary.\nReturns:\n    dict: { 'optional_dependencies': {name: status, ...}, 'missing_optional': [name, ...] }"
        },
        {
          "name": "get_dependency_status",
          "lineno": 437,
          "args": [],
          "returns": "dict",
          "decorators": [],
          "doc": "Get a summary of required, optional, and missing dependencies for the pipeline.\nReturns:\n    dict: { 'required_dependencies': [...], 'optional_dependencies': [...], 'missing_dependencies': [...], 'version_conflicts': [...] }"
        },
        {
          "name": "install_missing_dependencies",
          "lineno": 462,
          "args": [],
          "returns": "dict",
          "decorators": [],
          "doc": "Attempt to install missing Python dependencies using pip. System dependencies are not installed automatically.\nReturns:\n    dict: { 'installed': [name, ...], 'failed': [name, ...], 'skipped': [name, ...] }"
        },
        {
          "name": "validate_pipeline_dependencies_if_available",
          "lineno": 522,
          "args": [
            "args"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate dependencies if the validator is available.\n\nArgs:\n    args: Parsed command line arguments\n    \nReturns:\n    bool: True if validation passed or validator unavailable"
        },
        {
          "name": "__init__",
          "lineno": 42,
          "args": [
            "self",
            "logger",
            "python_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the dependency validator."
        },
        {
          "name": "_define_dependencies",
          "lineno": 53,
          "args": [
            "self"
          ],
          "returns": "Dict[str, List[DependencySpec]]",
          "decorators": [],
          "doc": "Define all dependencies required by different pipeline components."
        },
        {
          "name": "validate_python_dependency",
          "lineno": 168,
          "args": [
            "self",
            "dep",
            "python_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate a Python package dependency using the specified Python executable."
        },
        {
          "name": "validate_system_dependency",
          "lineno": 261,
          "args": [
            "self",
            "dep"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate a system-level dependency."
        },
        {
          "name": "validate_dependency_group",
          "lineno": 274,
          "args": [
            "self",
            "group_name"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate all dependencies in a specific group."
        },
        {
          "name": "validate_all_dependencies",
          "lineno": 296,
          "args": [
            "self",
            "required_groups"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate all dependencies or specific groups.\n\nArgs:\n    required_groups: List of dependency groups to validate, or None for all\n    \nReturns:\n    bool: True if all required dependencies are satisfied"
        },
        {
          "name": "get_installation_instructions",
          "lineno": 338,
          "args": [
            "self"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get installation instructions for missing dependencies."
        }
      ],
      "classes": [
        {
          "name": "DependencySpec",
          "lineno": 27,
          "bases": [],
          "doc": "Specification for a required dependency.",
          "methods": []
        },
        {
          "name": "DependencyValidator",
          "lineno": 39,
          "bases": [],
          "doc": "Validates pipeline dependencies before execution.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 42,
              "args": [
                "self",
                "logger",
                "python_path"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the dependency validator."
            },
            {
              "name": "_define_dependencies",
              "lineno": 53,
              "args": [
                "self"
              ],
              "returns": "Dict[str, List[DependencySpec]]",
              "decorators": [],
              "doc": "Define all dependencies required by different pipeline components."
            },
            {
              "name": "validate_python_dependency",
              "lineno": 168,
              "args": [
                "self",
                "dep",
                "python_path"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Validate a Python package dependency using the specified Python executable."
            },
            {
              "name": "validate_system_dependency",
              "lineno": 261,
              "args": [
                "self",
                "dep"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Validate a system-level dependency."
            },
            {
              "name": "validate_dependency_group",
              "lineno": 274,
              "args": [
                "self",
                "group_name"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Validate all dependencies in a specific group."
            },
            {
              "name": "validate_all_dependencies",
              "lineno": 296,
              "args": [
                "self",
                "required_groups"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Validate all dependencies or specific groups.\n\nArgs:\n    required_groups: List of dependency groups to validate, or None for all\n    \nReturns:\n    bool: True if all required dependencies are satisfied"
            },
            {
              "name": "get_installation_instructions",
              "lineno": 338,
              "args": [
                "self"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Get installation instructions for missing dependencies."
            }
          ]
        }
      ]
    },
    {
      "file": "src/utils/error_recovery.py",
      "module": "utils.error_recovery",
      "functions": [
        {
          "name": "analyze_pipeline_error",
          "lineno": 536,
          "args": [
            "step_name",
            "error_message",
            "context"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Convenience function to analyze pipeline errors.\n\nArgs:\n    step_name: Name of the pipeline step\n    error_message: The error message\n    context: Additional context\n    \nReturns:\n    Error analysis with recovery suggestions"
        },
        {
          "name": "log_error_with_recovery",
          "lineno": 550,
          "args": [
            "logger",
            "step_name",
            "error",
            "context"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Log an error with recovery suggestions.\n\nArgs:\n    logger: Logger instance\n    step_name: Name of the pipeline step\n    error: The exception that occurred\n    context: Additional context\n    \nReturns:\n    Error analysis with recovery suggestions"
        },
        {
          "name": "__init__",
          "lineno": 60,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_initialize_error_patterns",
          "lineno": 65,
          "args": [
            "self"
          ],
          "returns": "List[ErrorPattern]",
          "decorators": [],
          "doc": "Initialize common error patterns and their recovery strategies."
        },
        {
          "name": "analyze_error",
          "lineno": 210,
          "args": [
            "self",
            "error_message",
            "step_name",
            "context"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Analyze an error and provide recovery suggestions.\n\nArgs:\n    error_message: The error message to analyze\n    step_name: Name of the pipeline step where error occurred\n    context: Additional context about the error\n    \nReturns:\n    Dictionary with error analysis and recovery suggestions"
        },
        {
          "name": "_generate_recovery_actions",
          "lineno": 261,
          "args": [
            "self",
            "pattern",
            "extracted_info",
            "step_name",
            "context"
          ],
          "returns": "List[RecoveryAction]",
          "decorators": [],
          "doc": "Generate specific recovery actions based on the error pattern."
        },
        {
          "name": "_get_setup_recovery_actions",
          "lineno": 302,
          "args": [
            "self",
            "pattern",
            "extracted_info"
          ],
          "returns": "List[RecoveryAction]",
          "decorators": [],
          "doc": "Get recovery actions specific to setup step."
        },
        {
          "name": "_get_gnn_recovery_actions",
          "lineno": 319,
          "args": [
            "self",
            "pattern",
            "extracted_info"
          ],
          "returns": "List[RecoveryAction]",
          "decorators": [],
          "doc": "Get recovery actions specific to GNN processing step."
        },
        {
          "name": "_get_visualization_recovery_actions",
          "lineno": 333,
          "args": [
            "self",
            "pattern",
            "extracted_info"
          ],
          "returns": "List[RecoveryAction]",
          "decorators": [],
          "doc": "Get recovery actions specific to visualization step."
        },
        {
          "name": "_get_execution_recovery_actions",
          "lineno": 347,
          "args": [
            "self",
            "pattern",
            "extracted_info"
          ],
          "returns": "List[RecoveryAction]",
          "decorators": [],
          "doc": "Get recovery actions specific to execution step."
        },
        {
          "name": "_auto_fix_missing_package",
          "lineno": 371,
          "args": [
            "self",
            "package_name"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Automatically install missing package."
        },
        {
          "name": "_auto_fix_matplotlib_backend",
          "lineno": 386,
          "args": [
            "self"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Fix matplotlib backend issues."
        },
        {
          "name": "apply_auto_fix",
          "lineno": 396,
          "args": [
            "self",
            "error_analysis"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Apply automatic fix if available."
        },
        {
          "name": "get_recovery_suggestions",
          "lineno": 416,
          "args": [
            "self",
            "step_name",
            "error_message",
            "context"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get comprehensive recovery suggestions for a pipeline step error.\n\nArgs:\n    step_name: Name of the pipeline step\n    error_message: The error message\n    context: Additional context\n    \nReturns:\n    Dictionary with recovery suggestions"
        },
        {
          "name": "_get_recommended_action",
          "lineno": 486,
          "args": [
            "self",
            "error_analysis"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get the recommended action based on error analysis."
        },
        {
          "name": "get_error_statistics",
          "lineno": 497,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get statistics about encountered errors."
        },
        {
          "name": "__init__",
          "lineno": 524,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "collect_error",
          "lineno": 527,
          "args": [
            "self",
            "error_type",
            "message"
          ],
          "returns": "None",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_errors",
          "lineno": 530,
          "args": [
            "self"
          ],
          "returns": "list[dict[str, Any]]",
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "ErrorSeverity",
          "lineno": 19,
          "bases": [
            "Enum"
          ],
          "doc": "Error severity levels for classification.",
          "methods": []
        },
        {
          "name": "RecoveryStrategy",
          "lineno": 26,
          "bases": [
            "Enum"
          ],
          "doc": "Types of recovery strategies.",
          "methods": []
        },
        {
          "name": "ErrorPattern",
          "lineno": 35,
          "bases": [],
          "doc": "Definition of an error pattern and its recovery strategy.",
          "methods": []
        },
        {
          "name": "RecoveryAction",
          "lineno": 47,
          "bases": [],
          "doc": "A specific recovery action that can be taken.",
          "methods": []
        },
        {
          "name": "ErrorRecoverySystem",
          "lineno": 57,
          "bases": [],
          "doc": "Comprehensive error recovery system for the GNN pipeline.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 60,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_initialize_error_patterns",
              "lineno": 65,
              "args": [
                "self"
              ],
              "returns": "List[ErrorPattern]",
              "decorators": [],
              "doc": "Initialize common error patterns and their recovery strategies."
            },
            {
              "name": "analyze_error",
              "lineno": 210,
              "args": [
                "self",
                "error_message",
                "step_name",
                "context"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Analyze an error and provide recovery suggestions.\n\nArgs:\n    error_message: The error message to analyze\n    step_name: Name of the pipeline step where error occurred\n    context: Additional context about the error\n    \nReturns:\n    Dictionary with error analysis and recovery suggestions"
            },
            {
              "name": "_generate_recovery_actions",
              "lineno": 261,
              "args": [
                "self",
                "pattern",
                "extracted_info",
                "step_name",
                "context"
              ],
              "returns": "List[RecoveryAction]",
              "decorators": [],
              "doc": "Generate specific recovery actions based on the error pattern."
            },
            {
              "name": "_get_setup_recovery_actions",
              "lineno": 302,
              "args": [
                "self",
                "pattern",
                "extracted_info"
              ],
              "returns": "List[RecoveryAction]",
              "decorators": [],
              "doc": "Get recovery actions specific to setup step."
            },
            {
              "name": "_get_gnn_recovery_actions",
              "lineno": 319,
              "args": [
                "self",
                "pattern",
                "extracted_info"
              ],
              "returns": "List[RecoveryAction]",
              "decorators": [],
              "doc": "Get recovery actions specific to GNN processing step."
            },
            {
              "name": "_get_visualization_recovery_actions",
              "lineno": 333,
              "args": [
                "self",
                "pattern",
                "extracted_info"
              ],
              "returns": "List[RecoveryAction]",
              "decorators": [],
              "doc": "Get recovery actions specific to visualization step."
            },
            {
              "name": "_get_execution_recovery_actions",
              "lineno": 347,
              "args": [
                "self",
                "pattern",
                "extracted_info"
              ],
              "returns": "List[RecoveryAction]",
              "decorators": [],
              "doc": "Get recovery actions specific to execution step."
            },
            {
              "name": "_auto_fix_missing_package",
              "lineno": 371,
              "args": [
                "self",
                "package_name"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Automatically install missing package."
            },
            {
              "name": "_auto_fix_matplotlib_backend",
              "lineno": 386,
              "args": [
                "self"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Fix matplotlib backend issues."
            },
            {
              "name": "apply_auto_fix",
              "lineno": 396,
              "args": [
                "self",
                "error_analysis"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Apply automatic fix if available."
            },
            {
              "name": "get_recovery_suggestions",
              "lineno": 416,
              "args": [
                "self",
                "step_name",
                "error_message",
                "context"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Get comprehensive recovery suggestions for a pipeline step error.\n\nArgs:\n    step_name: Name of the pipeline step\n    error_message: The error message\n    context: Additional context\n    \nReturns:\n    Dictionary with recovery suggestions"
            },
            {
              "name": "_get_recommended_action",
              "lineno": 486,
              "args": [
                "self",
                "error_analysis"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Get the recommended action based on error analysis."
            },
            {
              "name": "get_error_statistics",
              "lineno": 497,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Get statistics about encountered errors."
            }
          ]
        },
        {
          "name": "ErrorReporter",
          "lineno": 522,
          "bases": [],
          "doc": "Simple error reporter used by tests to collect errors.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 524,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "collect_error",
              "lineno": 527,
              "args": [
                "self",
                "error_type",
                "message"
              ],
              "returns": "None",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "get_errors",
              "lineno": 530,
              "args": [
                "self"
              ],
              "returns": "list[dict[str, Any]]",
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/utils/fallback.py",
      "module": "utils.fallback",
      "functions": [
        {
          "name": "setup_step_logging",
          "lineno": 33,
          "args": [
            "step_name",
            "verbose"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Fallback step logging setup.\n\nArgs:\n    step_name: Name of the step\n    verbose: Enable verbose logging\n    \nReturns:\n    Logger instance"
        },
        {
          "name": "parse_step_arguments",
          "lineno": 16,
          "args": [
            "step_name"
          ],
          "returns": null,
          "decorators": [
            "staticmethod"
          ],
          "doc": "Parse step arguments with fallback implementation.\n\nArgs:\n    step_name: Name of the step\n    \nReturns:\n    MockArgs object with default values"
        },
        {
          "name": "__init__",
          "lineno": 27,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "MockArgumentParser",
          "lineno": 11,
          "bases": [],
          "doc": "Fallback argument parser for when argument_utils is not available.",
          "methods": [
            {
              "name": "parse_step_arguments",
              "lineno": 16,
              "args": [
                "step_name"
              ],
              "returns": null,
              "decorators": [
                "staticmethod"
              ],
              "doc": "Parse step arguments with fallback implementation.\n\nArgs:\n    step_name: Name of the step\n    \nReturns:\n    MockArgs object with default values"
            }
          ]
        },
        {
          "name": "MockArgs",
          "lineno": 26,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "__init__",
              "lineno": 27,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/utils/io_utils.py",
      "module": "utils.io_utils",
      "functions": [
        {
          "name": "batch_write_files",
          "lineno": 18,
          "args": [
            "files_data",
            "output_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Write multiple files in batch with performance tracking.\n\nArgs:\n    files_data: List of dictionaries with 'path' and 'content' keys\n    output_dir: Directory to write files to\n    \nReturns:\n    Dictionary with write performance metrics"
        },
        {
          "name": "batch_read_files",
          "lineno": 79,
          "args": [
            "file_paths"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Read multiple files in batch with performance tracking.\n\nArgs:\n    file_paths: List of file paths to read\n    \nReturns:\n    Dictionary with read performance metrics"
        },
        {
          "name": "get_file_performance_metrics",
          "lineno": 142,
          "args": [
            "file_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get performance metrics for file operations.\n\nArgs:\n    file_path: Path to the file to analyze\n    \nReturns:\n    Dictionary with file performance metrics"
        },
        {
          "name": "create_temp_file_with_content",
          "lineno": 183,
          "args": [
            "content",
            "suffix"
          ],
          "returns": "Path",
          "decorators": [],
          "doc": "Create a temporary file with content and return its path.\n\nArgs:\n    content: Content to write to the file\n    suffix: File suffix\n    \nReturns:\n    Path to the created temporary file"
        },
        {
          "name": "cleanup_temp_files",
          "lineno": 202,
          "args": [
            "temp_files"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Clean up temporary files and return cleanup metrics.\n\nArgs:\n    temp_files: List of temporary file paths to clean up\n    \nReturns:\n    Dictionary with cleanup metrics"
        }
      ],
      "classes": []
    },
    {
      "file": "src/utils/logging_utils.py",
      "module": "utils.logging_utils",
      "functions": [
        {
          "name": "setup_step_logging",
          "lineno": 141,
          "args": [
            "step_name",
            "verbose"
          ],
          "returns": "logging.Logger",
          "decorators": [],
          "doc": "Setup streamlined logging for a pipeline step.\n\nThis is the main entry point for pipeline step logging.\nAll modules should use this function.\n\nArgs:\n    step_name: Name of the pipeline step\n    verbose: Whether to enable verbose logging\n    \nReturns:\n    Configured logger for the step"
        },
        {
          "name": "setup_main_logging",
          "lineno": 173,
          "args": [
            "log_dir",
            "verbose"
          ],
          "returns": "logging.Logger",
          "decorators": [],
          "doc": "Setup logging for the main pipeline orchestrator.\n\nArgs:\n    log_dir: Directory for log files\n    verbose: Whether to enable verbose logging\n    \nReturns:\n    Configured main logger"
        },
        {
          "name": "setup_standalone_logging",
          "lineno": 195,
          "args": [
            "level",
            "logger_name",
            "output_dir",
            "log_filename",
            "console_level",
            "file_level"
          ],
          "returns": "logging.Logger",
          "decorators": [],
          "doc": "Legacy compatibility function."
        },
        {
          "name": "silence_noisy_modules_in_console",
          "lineno": 208,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Reduce console output from verbose third-party modules."
        },
        {
          "name": "set_verbose_mode",
          "lineno": 213,
          "args": [
            "verbose"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Set verbose mode for console output."
        },
        {
          "name": "log_section_header",
          "lineno": 217,
          "args": [
            "logger",
            "title",
            "char",
            "length"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Log a formatted section header."
        },
        {
          "name": "step",
          "lineno": 232,
          "args": [
            "self",
            "message"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Log a step-level message."
        },
        {
          "name": "setup_enhanced_step_logging",
          "lineno": 369,
          "args": [
            "step_name",
            "verbose",
            "enable_structured"
          ],
          "returns": "logging.Logger",
          "decorators": [],
          "doc": "Setup enhanced logging for a pipeline step with structured data support.\n\nArgs:\n    step_name: Name of the pipeline step\n    verbose: Whether to enable verbose logging\n    enable_structured: Whether to enable structured logging\n    \nReturns:\n    Configured logger for the step"
        },
        {
          "name": "log_step_start",
          "lineno": 653,
          "args": [
            "logger_or_step_name",
            "message",
            "step_number",
            "total_steps"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Enhanced step start logging with visual progress indicators."
        },
        {
          "name": "log_step_success",
          "lineno": 682,
          "args": [
            "logger_or_step_name",
            "message",
            "step_number",
            "duration"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Enhanced step success logging with visual indicators."
        },
        {
          "name": "log_step_warning",
          "lineno": 714,
          "args": [
            "logger_or_step_name",
            "message",
            "step_number"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Enhanced step warning logging with visual indicators."
        },
        {
          "name": "log_step_error",
          "lineno": 738,
          "args": [
            "logger_or_step_name",
            "message",
            "step_number"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Enhanced step error logging with visual indicators."
        },
        {
          "name": "log_pipeline_summary",
          "lineno": 767,
          "args": [
            "logger",
            "summary_data"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Enhanced pipeline summary logging with sophisticated visual formatting."
        },
        {
          "name": "get_performance_summary",
          "lineno": 883,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get performance summary for the current pipeline run."
        },
        {
          "name": "reset_progress_tracker",
          "lineno": 887,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Reset the global progress tracker for a new pipeline run."
        },
        {
          "name": "get_progress_summary",
          "lineno": 892,
          "args": [],
          "returns": "str",
          "decorators": [],
          "doc": "Get a summary of current progress."
        },
        {
          "name": "setup_correlation_context",
          "lineno": 896,
          "args": [
            "step_name",
            "correlation_id"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Setup correlation context for a pipeline step.\n\nArgs:\n    step_name: Name of the pipeline step\n    correlation_id: Optional correlation ID (generated if not provided)\n    \nReturns:\n    The correlation ID that was set"
        },
        {
          "name": "format",
          "lineno": 31,
          "args": [
            "self",
            "record"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "initialize",
          "lineno": 50,
          "args": [
            "cls",
            "log_dir",
            "console_level",
            "file_level"
          ],
          "returns": "None",
          "decorators": [
            "classmethod"
          ],
          "doc": "Initialize the centralized logging system."
        },
        {
          "name": "get_logger",
          "lineno": 99,
          "args": [
            "cls",
            "name"
          ],
          "returns": "logging.Logger",
          "decorators": [
            "classmethod"
          ],
          "doc": "Get a logger with the given name, ensuring it's properly configured."
        },
        {
          "name": "set_correlation_context",
          "lineno": 113,
          "args": [
            "cls",
            "step_name",
            "correlation_id"
          ],
          "returns": "str",
          "decorators": [
            "classmethod"
          ],
          "doc": "Set correlation context for current thread."
        },
        {
          "name": "clear_correlation_context",
          "lineno": 124,
          "args": [
            "cls"
          ],
          "returns": null,
          "decorators": [
            "classmethod"
          ],
          "doc": "Clear correlation context for current thread."
        },
        {
          "name": "set_verbosity",
          "lineno": 132,
          "args": [
            "cls",
            "verbose"
          ],
          "returns": null,
          "decorators": [
            "classmethod"
          ],
          "doc": "Update console log level based on verbosity."
        },
        {
          "name": "format",
          "lineno": 242,
          "args": [
            "self",
            "record"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "initialize",
          "lineno": 260,
          "args": [
            "cls",
            "log_dir",
            "console_level",
            "file_level",
            "enable_structured"
          ],
          "returns": "None",
          "decorators": [
            "classmethod"
          ],
          "doc": "Initialize enhanced logging with structured data support."
        },
        {
          "name": "log_structured",
          "lineno": 316,
          "args": [
            "cls",
            "logger",
            "level",
            "message"
          ],
          "returns": null,
          "decorators": [
            "classmethod"
          ],
          "doc": "Log a message with structured data."
        },
        {
          "name": "timed_operation",
          "lineno": 327,
          "args": [
            "cls",
            "operation_name",
            "logger",
            "metadata"
          ],
          "returns": null,
          "decorators": [
            "classmethod",
            "contextmanager"
          ],
          "doc": "Context manager for timing operations with structured logging."
        },
        {
          "name": "supports_color",
          "lineno": 424,
          "args": [
            "cls"
          ],
          "returns": "bool",
          "decorators": [
            "classmethod"
          ],
          "doc": "Check if terminal supports color output."
        },
        {
          "name": "colorize",
          "lineno": 444,
          "args": [
            "cls",
            "text",
            "color",
            "bold"
          ],
          "returns": "str",
          "decorators": [
            "classmethod"
          ],
          "doc": "Apply color formatting to text if terminal supports it."
        },
        {
          "name": "format_step_header",
          "lineno": 456,
          "args": [
            "cls",
            "step_num",
            "total_steps",
            "step_name",
            "status"
          ],
          "returns": "str",
          "decorators": [
            "classmethod"
          ],
          "doc": "Create a formatted step header with progress bar."
        },
        {
          "name": "format_duration",
          "lineno": 488,
          "args": [
            "cls",
            "duration_seconds"
          ],
          "returns": "str",
          "decorators": [
            "classmethod"
          ],
          "doc": "Format duration with appropriate units and color coding."
        },
        {
          "name": "format_memory_usage",
          "lineno": 517,
          "args": [
            "cls",
            "memory_mb"
          ],
          "returns": "str",
          "decorators": [
            "classmethod"
          ],
          "doc": "Format memory usage with appropriate units and color coding."
        },
        {
          "name": "__init__",
          "lineno": 535,
          "args": [
            "self",
            "total_steps"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "start_step",
          "lineno": 542,
          "args": [
            "self",
            "step_num",
            "step_name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Mark step as started and return formatted header."
        },
        {
          "name": "complete_step",
          "lineno": 551,
          "args": [
            "self",
            "step_num",
            "status",
            "duration"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Mark step as completed and return summary."
        },
        {
          "name": "get_overall_progress",
          "lineno": 585,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get overall pipeline progress summary."
        },
        {
          "name": "__init__",
          "lineno": 611,
          "args": [
            "self",
            "format_string",
            "include_performance",
            "use_colors"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "format",
          "lineno": 616,
          "args": [
            "self",
            "record"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "CorrelationFormatter",
          "lineno": 28,
          "bases": [
            "logging.Formatter"
          ],
          "doc": "Formatter that includes correlation IDs for tracing across pipeline steps.",
          "methods": [
            {
              "name": "format",
              "lineno": 31,
              "args": [
                "self",
                "record"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "PipelineLogger",
          "lineno": 42,
          "bases": [],
          "doc": "Centralized logger for the GNN pipeline with correlation support.",
          "methods": [
            {
              "name": "initialize",
              "lineno": 50,
              "args": [
                "cls",
                "log_dir",
                "console_level",
                "file_level"
              ],
              "returns": "None",
              "decorators": [
                "classmethod"
              ],
              "doc": "Initialize the centralized logging system."
            },
            {
              "name": "get_logger",
              "lineno": 99,
              "args": [
                "cls",
                "name"
              ],
              "returns": "logging.Logger",
              "decorators": [
                "classmethod"
              ],
              "doc": "Get a logger with the given name, ensuring it's properly configured."
            },
            {
              "name": "set_correlation_context",
              "lineno": 113,
              "args": [
                "cls",
                "step_name",
                "correlation_id"
              ],
              "returns": "str",
              "decorators": [
                "classmethod"
              ],
              "doc": "Set correlation context for current thread."
            },
            {
              "name": "clear_correlation_context",
              "lineno": 124,
              "args": [
                "cls"
              ],
              "returns": null,
              "decorators": [
                "classmethod"
              ],
              "doc": "Clear correlation context for current thread."
            },
            {
              "name": "set_verbosity",
              "lineno": 132,
              "args": [
                "cls",
                "verbose"
              ],
              "returns": null,
              "decorators": [
                "classmethod"
              ],
              "doc": "Update console log level based on verbosity."
            }
          ]
        },
        {
          "name": "StructuredFormatter",
          "lineno": 239,
          "bases": [
            "CorrelationFormatter"
          ],
          "doc": "Formatter that handles structured logging data.",
          "methods": [
            {
              "name": "format",
              "lineno": 242,
              "args": [
                "self",
                "record"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "EnhancedPipelineLogger",
          "lineno": 256,
          "bases": [
            "PipelineLogger"
          ],
          "doc": "Enhanced pipeline logger with structured logging support.",
          "methods": [
            {
              "name": "initialize",
              "lineno": 260,
              "args": [
                "cls",
                "log_dir",
                "console_level",
                "file_level",
                "enable_structured"
              ],
              "returns": "None",
              "decorators": [
                "classmethod"
              ],
              "doc": "Initialize enhanced logging with structured data support."
            },
            {
              "name": "log_structured",
              "lineno": 316,
              "args": [
                "cls",
                "logger",
                "level",
                "message"
              ],
              "returns": null,
              "decorators": [
                "classmethod"
              ],
              "doc": "Log a message with structured data."
            },
            {
              "name": "timed_operation",
              "lineno": 327,
              "args": [
                "cls",
                "operation_name",
                "logger",
                "metadata"
              ],
              "returns": null,
              "decorators": [
                "classmethod",
                "contextmanager"
              ],
              "doc": "Context manager for timing operations with structured logging."
            }
          ]
        },
        {
          "name": "VisualLoggingEnhancer",
          "lineno": 400,
          "bases": [],
          "doc": "Enhanced visual formatting for pipeline logging with progress tracking.",
          "methods": [
            {
              "name": "supports_color",
              "lineno": 424,
              "args": [
                "cls"
              ],
              "returns": "bool",
              "decorators": [
                "classmethod"
              ],
              "doc": "Check if terminal supports color output."
            },
            {
              "name": "colorize",
              "lineno": 444,
              "args": [
                "cls",
                "text",
                "color",
                "bold"
              ],
              "returns": "str",
              "decorators": [
                "classmethod"
              ],
              "doc": "Apply color formatting to text if terminal supports it."
            },
            {
              "name": "format_step_header",
              "lineno": 456,
              "args": [
                "cls",
                "step_num",
                "total_steps",
                "step_name",
                "status"
              ],
              "returns": "str",
              "decorators": [
                "classmethod"
              ],
              "doc": "Create a formatted step header with progress bar."
            },
            {
              "name": "format_duration",
              "lineno": 488,
              "args": [
                "cls",
                "duration_seconds"
              ],
              "returns": "str",
              "decorators": [
                "classmethod"
              ],
              "doc": "Format duration with appropriate units and color coding."
            },
            {
              "name": "format_memory_usage",
              "lineno": 517,
              "args": [
                "cls",
                "memory_mb"
              ],
              "returns": "str",
              "decorators": [
                "classmethod"
              ],
              "doc": "Format memory usage with appropriate units and color coding."
            }
          ]
        },
        {
          "name": "PipelineProgressTracker",
          "lineno": 532,
          "bases": [],
          "doc": "Track pipeline progress across steps with visual indicators.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 535,
              "args": [
                "self",
                "total_steps"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "start_step",
              "lineno": 542,
              "args": [
                "self",
                "step_num",
                "step_name"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Mark step as started and return formatted header."
            },
            {
              "name": "complete_step",
              "lineno": 551,
              "args": [
                "self",
                "step_num",
                "status",
                "duration"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Mark step as completed and return summary."
            },
            {
              "name": "get_overall_progress",
              "lineno": 585,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Get overall pipeline progress summary."
            }
          ]
        },
        {
          "name": "EnhancedVisualFormatter",
          "lineno": 608,
          "bases": [
            "StructuredFormatter"
          ],
          "doc": "Enhanced formatter with visual improvements and performance context.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 611,
              "args": [
                "self",
                "format_string",
                "include_performance",
                "use_colors"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "format",
              "lineno": 616,
              "args": [
                "self",
                "record"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/utils/mcp.py",
      "module": "utils.mcp",
      "functions": [
        {
          "name": "get_system_info",
          "lineno": 28,
          "args": [
            "mcp_instance_ref"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get comprehensive system information and diagnostics.\n\nReturns:\n    Dictionary containing system information."
        },
        {
          "name": "get_environment_info",
          "lineno": 94,
          "args": [
            "mcp_instance_ref"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get environment information including Python environment and dependencies.\n\nReturns:\n    Dictionary containing environment information."
        },
        {
          "name": "get_file_info",
          "lineno": 141,
          "args": [
            "mcp_instance_ref",
            "file_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get detailed information about a file or directory.\n\nArgs:\n    file_path: Path to the file or directory.\n    \nReturns:\n    Dictionary containing file information."
        },
        {
          "name": "get_logging_info",
          "lineno": 202,
          "args": [
            "mcp_instance_ref"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get current logging configuration and status.\n\nReturns:\n    Dictionary containing logging information."
        },
        {
          "name": "validate_dependencies",
          "lineno": 242,
          "args": [
            "mcp_instance_ref"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate system dependencies and requirements.\n\nReturns:\n    Dictionary containing dependency validation results."
        },
        {
          "name": "register_tools",
          "lineno": 282,
          "args": [
            "mcp_instance"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register utility tools with the MCP server.\n\nArgs:\n    mcp_instance: The MCP instance to register tools with."
        },
        {
          "name": "get_system_info_wrapper",
          "lineno": 292,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_environment_info_wrapper",
          "lineno": 295,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_file_info_wrapper",
          "lineno": 298,
          "args": [
            "file_path"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_logging_info_wrapper",
          "lineno": 301,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "validate_dependencies_wrapper",
          "lineno": 304,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/utils/migration_helper.py",
      "module": "utils.migration_helper",
      "functions": [
        {
          "name": "main",
          "lineno": 207,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 28,
          "args": [
            "self",
            "src_dir"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "analyze_module",
          "lineno": 32,
          "args": [
            "self",
            "module_path"
          ],
          "returns": "Dict[str, List[str]]",
          "decorators": [],
          "doc": "Analyze a module for potential improvements."
        },
        {
          "name": "apply_improvements",
          "lineno": 67,
          "args": [
            "self",
            "module_path",
            "dry_run"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Apply automatic improvements to a module."
        },
        {
          "name": "_has_redundant_fallbacks",
          "lineno": 111,
          "args": [
            "self",
            "content"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if module has redundant fallback imports."
        },
        {
          "name": "_needs_enhanced_argument_parsing",
          "lineno": 124,
          "args": [
            "self",
            "content",
            "module_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if module could benefit from enhanced argument parsing."
        },
        {
          "name": "_find_hardcoded_paths",
          "lineno": 140,
          "args": [
            "self",
            "content"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Find hardcoded path patterns."
        },
        {
          "name": "_needs_performance_tracking",
          "lineno": 158,
          "args": [
            "self",
            "module_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if module should have performance tracking."
        },
        {
          "name": "_remove_redundant_fallbacks",
          "lineno": 163,
          "args": [
            "self",
            "content"
          ],
          "returns": "Tuple[str, List[str]]",
          "decorators": [],
          "doc": "Remove redundant fallback import patterns."
        },
        {
          "name": "_add_missing_imports",
          "lineno": 185,
          "args": [
            "self",
            "content",
            "module_path"
          ],
          "returns": "Tuple[str, List[str]]",
          "decorators": [],
          "doc": "Add missing standard imports."
        },
        {
          "name": "_fix_hardcoded_paths",
          "lineno": 197,
          "args": [
            "self",
            "content"
          ],
          "returns": "Tuple[str, List[str]]",
          "decorators": [],
          "doc": "Fix simple hardcoded path patterns."
        },
        {
          "name": "replace_fallback",
          "lineno": 170,
          "args": [
            "match"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "PipelineMigrationHelper",
          "lineno": 25,
          "bases": [],
          "doc": "Helper class for migrating pipeline modules to new patterns.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 28,
              "args": [
                "self",
                "src_dir"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "analyze_module",
              "lineno": 32,
              "args": [
                "self",
                "module_path"
              ],
              "returns": "Dict[str, List[str]]",
              "decorators": [],
              "doc": "Analyze a module for potential improvements."
            },
            {
              "name": "apply_improvements",
              "lineno": 67,
              "args": [
                "self",
                "module_path",
                "dry_run"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Apply automatic improvements to a module."
            },
            {
              "name": "_has_redundant_fallbacks",
              "lineno": 111,
              "args": [
                "self",
                "content"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if module has redundant fallback imports."
            },
            {
              "name": "_needs_enhanced_argument_parsing",
              "lineno": 124,
              "args": [
                "self",
                "content",
                "module_path"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if module could benefit from enhanced argument parsing."
            },
            {
              "name": "_find_hardcoded_paths",
              "lineno": 140,
              "args": [
                "self",
                "content"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Find hardcoded path patterns."
            },
            {
              "name": "_needs_performance_tracking",
              "lineno": 158,
              "args": [
                "self",
                "module_path"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if module should have performance tracking."
            },
            {
              "name": "_remove_redundant_fallbacks",
              "lineno": 163,
              "args": [
                "self",
                "content"
              ],
              "returns": "Tuple[str, List[str]]",
              "decorators": [],
              "doc": "Remove redundant fallback import patterns."
            },
            {
              "name": "_add_missing_imports",
              "lineno": 185,
              "args": [
                "self",
                "content",
                "module_path"
              ],
              "returns": "Tuple[str, List[str]]",
              "decorators": [],
              "doc": "Add missing standard imports."
            },
            {
              "name": "_fix_hardcoded_paths",
              "lineno": 197,
              "args": [
                "self",
                "content"
              ],
              "returns": "Tuple[str, List[str]]",
              "decorators": [],
              "doc": "Fix simple hardcoded path patterns."
            }
          ]
        }
      ]
    },
    {
      "file": "src/utils/network_utils.py",
      "module": "utils.network_utils",
      "functions": [
        {
          "name": "timed_request",
          "lineno": 17,
          "args": [
            "url",
            "method"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Make a timed HTTP request and return timing information.\n\nArgs:\n    url: The URL to request\n    method: HTTP method (GET, POST, etc.)\n    **kwargs: Additional arguments for requests\n    \nReturns:\n    Dictionary with response data and timing information"
        },
        {
          "name": "batch_request",
          "lineno": 54,
          "args": [
            "urls",
            "method"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Make batch HTTP requests and return results.\n\nArgs:\n    urls: List of URLs to request\n    method: HTTP method (GET, POST, etc.)\n    **kwargs: Additional arguments for requests\n    \nReturns:\n    List of response dictionaries"
        },
        {
          "name": "validate_api_endpoint",
          "lineno": 74,
          "args": [
            "url",
            "expected_status"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate an API endpoint by making a test request.\n\nArgs:\n    url: The URL to validate\n    expected_status: Expected HTTP status code\n    \nReturns:\n    Dictionary with validation results"
        },
        {
          "name": "get_network_performance_metrics",
          "lineno": 97,
          "args": [
            "urls"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get network performance metrics for a list of URLs.\n\nArgs:\n    urls: List of URLs to test\n    \nReturns:\n    Dictionary with performance metrics"
        }
      ],
      "classes": []
    },
    {
      "file": "src/utils/path_utils.py",
      "module": "utils.path_utils",
      "functions": [
        {
          "name": "get_relative_path_if_possible",
          "lineno": 4,
          "args": [
            "absolute_path_obj",
            "project_root"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Returns a path string relative to project_root if provided and applicable, otherwise absolute."
        }
      ],
      "classes": []
    },
    {
      "file": "src/utils/performance_tracker.py",
      "module": "utils.performance_tracker",
      "functions": [
        {
          "name": "track_operation_standalone",
          "lineno": 116,
          "args": [
            "operation",
            "metadata"
          ],
          "returns": null,
          "decorators": [
            "contextmanager"
          ],
          "doc": "Context manager to track the duration of an operation using the global performance_tracker.\nArgs:\n    operation: Name of the operation\n    metadata: Optional dictionary of metadata\nYields:\n    None"
        },
        {
          "name": "get_performance_metrics",
          "lineno": 133,
          "args": [],
          "returns": "dict",
          "decorators": [],
          "doc": "Retrieve current performance metrics, including tracked operations and system info.\nReturns:\n    dict: { 'operations': ..., 'system_info': ... }"
        },
        {
          "name": "start_performance_monitoring",
          "lineno": 150,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Start performance monitoring (records initial system state)."
        },
        {
          "name": "stop_performance_monitoring",
          "lineno": 158,
          "args": [],
          "returns": "dict",
          "decorators": [],
          "doc": "Stop performance monitoring and return monitoring data (delta from start).\nReturns:\n    dict: { 'start': ..., 'end': ..., 'delta': ... }"
        },
        {
          "name": "generate_performance_report",
          "lineno": 183,
          "args": [],
          "returns": "dict",
          "decorators": [],
          "doc": "Generate a performance report (summary of tracked operations and system info).\nReturns:\n    dict: { 'summary': ..., 'details': ... }"
        },
        {
          "name": "__init__",
          "lineno": 28,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "record_timing",
          "lineno": 34,
          "args": [
            "self",
            "operation",
            "duration",
            "metadata"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Record timing information for an operation."
        },
        {
          "name": "track_operation",
          "lineno": 47,
          "args": [
            "self",
            "operation",
            "metadata"
          ],
          "returns": null,
          "decorators": [
            "contextmanager"
          ],
          "doc": "Context manager to automatically track operation timing."
        },
        {
          "name": "get_summary",
          "lineno": 56,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get summary statistics for all tracked operations."
        },
        {
          "name": "record_memory_usage",
          "lineno": 71,
          "args": [
            "self",
            "memory_mb"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Record memory usage in MB."
        },
        {
          "name": "max_memory_mb",
          "lineno": 79,
          "args": [
            "self"
          ],
          "returns": "float",
          "decorators": [
            "property"
          ],
          "doc": "Get maximum memory usage in MB."
        },
        {
          "name": "current_memory_mb",
          "lineno": 84,
          "args": [
            "self"
          ],
          "returns": "float",
          "decorators": [
            "property"
          ],
          "doc": "Get current memory usage in MB."
        },
        {
          "name": "get_timestamp",
          "lineno": 94,
          "args": [
            "self"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get current timestamp as ISO format string."
        }
      ],
      "classes": [
        {
          "name": "PerformanceTracker",
          "lineno": 25,
          "bases": [],
          "doc": "Track performance metrics across pipeline steps.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 28,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "record_timing",
              "lineno": 34,
              "args": [
                "self",
                "operation",
                "duration",
                "metadata"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Record timing information for an operation."
            },
            {
              "name": "track_operation",
              "lineno": 47,
              "args": [
                "self",
                "operation",
                "metadata"
              ],
              "returns": null,
              "decorators": [
                "contextmanager"
              ],
              "doc": "Context manager to automatically track operation timing."
            },
            {
              "name": "get_summary",
              "lineno": 56,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Get summary statistics for all tracked operations."
            },
            {
              "name": "record_memory_usage",
              "lineno": 71,
              "args": [
                "self",
                "memory_mb"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Record memory usage in MB."
            },
            {
              "name": "max_memory_mb",
              "lineno": 79,
              "args": [
                "self"
              ],
              "returns": "float",
              "decorators": [
                "property"
              ],
              "doc": "Get maximum memory usage in MB."
            },
            {
              "name": "current_memory_mb",
              "lineno": 84,
              "args": [
                "self"
              ],
              "returns": "float",
              "decorators": [
                "property"
              ],
              "doc": "Get current memory usage in MB."
            },
            {
              "name": "get_timestamp",
              "lineno": 94,
              "args": [
                "self"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Get current timestamp as ISO format string."
            }
          ]
        }
      ]
    },
    {
      "file": "src/utils/pipeline.py",
      "module": "utils.pipeline",
      "functions": [
        {
          "name": "setup_step_logging",
          "lineno": 14,
          "args": [
            "step_name",
            "verbose"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Setup logging for a pipeline step.\n\nArgs:\n    step_name: Name of the pipeline step\n    verbose: Enable verbose logging"
        },
        {
          "name": "get_pipeline_utilities",
          "lineno": 58,
          "args": [
            "step_name",
            "verbose"
          ],
          "returns": "Tuple[Any, ...]",
          "decorators": [],
          "doc": "Get pipeline utilities for a step.\n\nArgs:\n    step_name: Name of the pipeline step\n    verbose: Enable verbose output\n    \nReturns:\n    Tuple of pipeline utilities"
        },
        {
          "name": "validate_output_directory",
          "lineno": 86,
          "args": [
            "output_dir",
            "step_name"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate output directory for a pipeline step.\n\nArgs:\n    output_dir: Output directory path\n    step_name: Name of the pipeline step\n    \nReturns:\n    True if directory is valid, False otherwise"
        },
        {
          "name": "execute_pipeline_step_template",
          "lineno": 117,
          "args": [
            "step_name",
            "step_description",
            "main_function",
            "import_dependencies"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Execute a pipeline step using the standard template.\n\nArgs:\n    step_name: Name of the pipeline step\n    step_description: Description of the step\n    main_function: Main function to execute\n    import_dependencies: Optional list of dependencies to import"
        },
        {
          "name": "parse_step_arguments",
          "lineno": 40,
          "args": [
            "step_name"
          ],
          "returns": null,
          "decorators": [
            "staticmethod"
          ],
          "doc": "Parse step arguments (mock implementation).\n\nArgs:\n    step_name: Name of the step\n    \nReturns:\n    Mock arguments object"
        },
        {
          "name": "__init__",
          "lineno": 51,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "MockArgumentParser",
          "lineno": 34,
          "bases": [],
          "doc": "Mock argument parser for fallback scenarios.",
          "methods": [
            {
              "name": "parse_step_arguments",
              "lineno": 40,
              "args": [
                "step_name"
              ],
              "returns": null,
              "decorators": [
                "staticmethod"
              ],
              "doc": "Parse step arguments (mock implementation).\n\nArgs:\n    step_name: Name of the step\n    \nReturns:\n    Mock arguments object"
            }
          ]
        },
        {
          "name": "MockArgs",
          "lineno": 50,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "__init__",
              "lineno": 51,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/utils/pipeline_monitor.py",
      "module": "utils.pipeline_monitor",
      "functions": [
        {
          "name": "start_pipeline_monitoring",
          "lineno": 583,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Start global pipeline monitoring."
        },
        {
          "name": "stop_pipeline_monitoring",
          "lineno": 587,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Stop global pipeline monitoring."
        },
        {
          "name": "record_step_execution",
          "lineno": 591,
          "args": [
            "step_name",
            "success",
            "duration",
            "error_type",
            "error_message",
            "context"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Convenience function to record step execution.\n\nArgs:\n    step_name: Name of the pipeline step\n    success: Whether the step succeeded\n    duration: Duration in seconds\n    error_type: Type of error if failed\n    error_message: Error message if failed\n    context: Additional context\n    \nReturns:\n    Execution ID"
        },
        {
          "name": "get_pipeline_health_status",
          "lineno": 620,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get current pipeline health status."
        },
        {
          "name": "update_duration",
          "lineno": 54,
          "args": [
            "self",
            "duration"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Update duration statistics."
        },
        {
          "name": "get_success_rate",
          "lineno": 63,
          "args": [
            "self"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Get success rate as percentage."
        },
        {
          "name": "get_recent_avg_duration",
          "lineno": 69,
          "args": [
            "self"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Get average duration of recent executions."
        },
        {
          "name": "get_health_percentage",
          "lineno": 99,
          "args": [
            "self"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Get percentage of healthy steps."
        },
        {
          "name": "__init__",
          "lineno": 108,
          "args": [
            "self",
            "alert_callbacks"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_initialize_health_thresholds",
          "lineno": 118,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Dict[str, float]]",
          "decorators": [],
          "doc": "Initialize health check thresholds."
        },
        {
          "name": "start_monitoring",
          "lineno": 141,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Start pipeline monitoring."
        },
        {
          "name": "stop_monitoring",
          "lineno": 147,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Stop pipeline monitoring."
        },
        {
          "name": "record_step_start",
          "lineno": 153,
          "args": [
            "self",
            "step_name",
            "context"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Record the start of a pipeline step.\n\nArgs:\n    step_name: Name of the pipeline step\n    context: Additional context information\n    \nReturns:\n    Execution ID for tracking"
        },
        {
          "name": "record_step_success",
          "lineno": 177,
          "args": [
            "self",
            "step_name",
            "execution_id",
            "duration",
            "context"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Record successful completion of a pipeline step."
        },
        {
          "name": "record_step_failure",
          "lineno": 197,
          "args": [
            "self",
            "step_name",
            "execution_id",
            "duration",
            "error_type",
            "error_message",
            "context"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Record failure of a pipeline step."
        },
        {
          "name": "record_step_warning",
          "lineno": 230,
          "args": [
            "self",
            "step_name",
            "execution_id",
            "warning_message",
            "context"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Record a warning for a pipeline step."
        },
        {
          "name": "_update_step_health",
          "lineno": 251,
          "args": [
            "self",
            "step_name"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Update health status for a step based on metrics."
        },
        {
          "name": "_check_performance_alerts",
          "lineno": 285,
          "args": [
            "self",
            "step_name",
            "duration"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Check for performance-related alerts."
        },
        {
          "name": "_generate_alert",
          "lineno": 309,
          "args": [
            "self",
            "level",
            "message",
            "step_name",
            "details"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Generate and dispatch an alert."
        },
        {
          "name": "get_pipeline_health",
          "lineno": 339,
          "args": [
            "self"
          ],
          "returns": "PipelineHealth",
          "decorators": [],
          "doc": "Get overall pipeline health status."
        },
        {
          "name": "get_step_metrics",
          "lineno": 379,
          "args": [
            "self",
            "step_name"
          ],
          "returns": "Optional[StepMetrics]",
          "decorators": [],
          "doc": "Get metrics for a specific step."
        },
        {
          "name": "get_all_metrics",
          "lineno": 384,
          "args": [
            "self"
          ],
          "returns": "Dict[str, StepMetrics]",
          "decorators": [],
          "doc": "Get metrics for all steps."
        },
        {
          "name": "get_recent_alerts",
          "lineno": 389,
          "args": [
            "self",
            "count"
          ],
          "returns": "List[Alert]",
          "decorators": [],
          "doc": "Get recent alerts."
        },
        {
          "name": "get_active_alerts",
          "lineno": 394,
          "args": [
            "self"
          ],
          "returns": "List[Alert]",
          "decorators": [],
          "doc": "Get unresolved alerts."
        },
        {
          "name": "resolve_alert",
          "lineno": 399,
          "args": [
            "self",
            "alert_index"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Mark an alert as resolved."
        },
        {
          "name": "set_performance_baseline",
          "lineno": 405,
          "args": [
            "self",
            "step_name",
            "baseline_duration"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Set performance baseline for a step."
        },
        {
          "name": "generate_health_report",
          "lineno": 410,
          "args": [
            "self"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate comprehensive health report."
        },
        {
          "name": "save_health_report",
          "lineno": 511,
          "args": [
            "self",
            "output_dir",
            "filename"
          ],
          "returns": "Path",
          "decorators": [],
          "doc": "Save health report to file."
        },
        {
          "name": "check_circuit_breaker",
          "lineno": 528,
          "args": [
            "self",
            "step_name",
            "failure_threshold",
            "time_window"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if circuit breaker should be triggered for a step.\n\nArgs:\n    step_name: Name of the step to check\n    failure_threshold: Number of failures to trigger circuit breaker\n    time_window: Time window in seconds to check failures\n    \nReturns:\n    True if circuit breaker should be triggered"
        },
        {
          "name": "reset_metrics",
          "lineno": 568,
          "args": [
            "self",
            "step_name"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Reset metrics for a step or all steps."
        }
      ],
      "classes": [
        {
          "name": "HealthStatus",
          "lineno": 20,
          "bases": [
            "Enum"
          ],
          "doc": "Health status levels.",
          "methods": []
        },
        {
          "name": "AlertLevel",
          "lineno": 28,
          "bases": [
            "Enum"
          ],
          "doc": "Alert severity levels.",
          "methods": []
        },
        {
          "name": "StepMetrics",
          "lineno": 36,
          "bases": [],
          "doc": "Metrics for a single pipeline step.",
          "methods": [
            {
              "name": "update_duration",
              "lineno": 54,
              "args": [
                "self",
                "duration"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Update duration statistics."
            },
            {
              "name": "get_success_rate",
              "lineno": 63,
              "args": [
                "self"
              ],
              "returns": "float",
              "decorators": [],
              "doc": "Get success rate as percentage."
            },
            {
              "name": "get_recent_avg_duration",
              "lineno": 69,
              "args": [
                "self"
              ],
              "returns": "float",
              "decorators": [],
              "doc": "Get average duration of recent executions."
            }
          ]
        },
        {
          "name": "Alert",
          "lineno": 76,
          "bases": [],
          "doc": "Pipeline alert.",
          "methods": []
        },
        {
          "name": "PipelineHealth",
          "lineno": 86,
          "bases": [],
          "doc": "Overall pipeline health status.",
          "methods": [
            {
              "name": "get_health_percentage",
              "lineno": 99,
              "args": [
                "self"
              ],
              "returns": "float",
              "decorators": [],
              "doc": "Get percentage of healthy steps."
            }
          ]
        },
        {
          "name": "PipelineMonitor",
          "lineno": 105,
          "bases": [],
          "doc": "Comprehensive pipeline monitoring system.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 108,
              "args": [
                "self",
                "alert_callbacks"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_initialize_health_thresholds",
              "lineno": 118,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Dict[str, float]]",
              "decorators": [],
              "doc": "Initialize health check thresholds."
            },
            {
              "name": "start_monitoring",
              "lineno": 141,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Start pipeline monitoring."
            },
            {
              "name": "stop_monitoring",
              "lineno": 147,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Stop pipeline monitoring."
            },
            {
              "name": "record_step_start",
              "lineno": 153,
              "args": [
                "self",
                "step_name",
                "context"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Record the start of a pipeline step.\n\nArgs:\n    step_name: Name of the pipeline step\n    context: Additional context information\n    \nReturns:\n    Execution ID for tracking"
            },
            {
              "name": "record_step_success",
              "lineno": 177,
              "args": [
                "self",
                "step_name",
                "execution_id",
                "duration",
                "context"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Record successful completion of a pipeline step."
            },
            {
              "name": "record_step_failure",
              "lineno": 197,
              "args": [
                "self",
                "step_name",
                "execution_id",
                "duration",
                "error_type",
                "error_message",
                "context"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Record failure of a pipeline step."
            },
            {
              "name": "record_step_warning",
              "lineno": 230,
              "args": [
                "self",
                "step_name",
                "execution_id",
                "warning_message",
                "context"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Record a warning for a pipeline step."
            },
            {
              "name": "_update_step_health",
              "lineno": 251,
              "args": [
                "self",
                "step_name"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Update health status for a step based on metrics."
            },
            {
              "name": "_check_performance_alerts",
              "lineno": 285,
              "args": [
                "self",
                "step_name",
                "duration"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Check for performance-related alerts."
            },
            {
              "name": "_generate_alert",
              "lineno": 309,
              "args": [
                "self",
                "level",
                "message",
                "step_name",
                "details"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Generate and dispatch an alert."
            },
            {
              "name": "get_pipeline_health",
              "lineno": 339,
              "args": [
                "self"
              ],
              "returns": "PipelineHealth",
              "decorators": [],
              "doc": "Get overall pipeline health status."
            },
            {
              "name": "get_step_metrics",
              "lineno": 379,
              "args": [
                "self",
                "step_name"
              ],
              "returns": "Optional[StepMetrics]",
              "decorators": [],
              "doc": "Get metrics for a specific step."
            },
            {
              "name": "get_all_metrics",
              "lineno": 384,
              "args": [
                "self"
              ],
              "returns": "Dict[str, StepMetrics]",
              "decorators": [],
              "doc": "Get metrics for all steps."
            },
            {
              "name": "get_recent_alerts",
              "lineno": 389,
              "args": [
                "self",
                "count"
              ],
              "returns": "List[Alert]",
              "decorators": [],
              "doc": "Get recent alerts."
            },
            {
              "name": "get_active_alerts",
              "lineno": 394,
              "args": [
                "self"
              ],
              "returns": "List[Alert]",
              "decorators": [],
              "doc": "Get unresolved alerts."
            },
            {
              "name": "resolve_alert",
              "lineno": 399,
              "args": [
                "self",
                "alert_index"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Mark an alert as resolved."
            },
            {
              "name": "set_performance_baseline",
              "lineno": 405,
              "args": [
                "self",
                "step_name",
                "baseline_duration"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Set performance baseline for a step."
            },
            {
              "name": "generate_health_report",
              "lineno": 410,
              "args": [
                "self"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Generate comprehensive health report."
            },
            {
              "name": "save_health_report",
              "lineno": 511,
              "args": [
                "self",
                "output_dir",
                "filename"
              ],
              "returns": "Path",
              "decorators": [],
              "doc": "Save health report to file."
            },
            {
              "name": "check_circuit_breaker",
              "lineno": 528,
              "args": [
                "self",
                "step_name",
                "failure_threshold",
                "time_window"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Check if circuit breaker should be triggered for a step.\n\nArgs:\n    step_name: Name of the step to check\n    failure_threshold: Number of failures to trigger circuit breaker\n    time_window: Time window in seconds to check failures\n    \nReturns:\n    True if circuit breaker should be triggered"
            },
            {
              "name": "reset_metrics",
              "lineno": 568,
              "args": [
                "self",
                "step_name"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Reset metrics for a step or all steps."
            }
          ]
        }
      ]
    },
    {
      "file": "src/utils/pipeline_template.py",
      "module": "utils.pipeline_template",
      "functions": [
        {
          "name": "create_standard_pipeline_script",
          "lineno": 59,
          "args": [
            "step_name",
            "module_function",
            "fallback_parser_description",
            "additional_arguments",
            "step_specific_imports"
          ],
          "returns": "Callable",
          "decorators": [],
          "doc": "Create a standardized pipeline script with consistent argument parsing and error handling.\n\nArgs:\n    step_name: Name of the step (e.g., \"1_gnn\", \"5_export\")\n    module_function: The main function to call for processing\n    fallback_parser_description: Description for fallback argument parser\n    additional_arguments: Additional arguments to add to the parser\n    step_specific_imports: Additional imports needed for the step\n    \nReturns:\n    Function that can be called to run the standardized script"
        },
        {
          "name": "_create_fallback_parser",
          "lineno": 148,
          "args": [
            "description",
            "additional_arguments"
          ],
          "returns": "argparse.ArgumentParser",
          "decorators": [],
          "doc": "Create a fallback argument parser with standard arguments."
        },
        {
          "name": "standard_module_function",
          "lineno": 194,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standard template for module functions used by pipeline scripts.\n\nArgs:\n    target_dir: Directory containing input files to process\n    output_dir: Base output directory for results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional step-specific arguments\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "process_single_file",
          "lineno": 273,
          "args": [
            "file_path",
            "output_dir"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Template for processing a single file. Override this in specific modules.\n\nArgs:\n    file_path: Path to the file to process\n    output_dir: Output directory for results\n    **kwargs: Additional processing options\n    \nReturns:\n    True if processing succeeded, False otherwise"
        },
        {
          "name": "create_standard_module_function",
          "lineno": 288,
          "args": [
            "step_name",
            "process_function",
            "additional_params"
          ],
          "returns": "Callable",
          "decorators": [],
          "doc": "Create a standardized module function with the given process function.\n\nArgs:\n    step_name: Name of the step (e.g., \"gnn\", \"export\")\n    process_function: Function to process individual files\n    additional_params: Additional parameters to pass to the process function\n    \nReturns:\n    Standardized module function"
        },
        {
          "name": "create_standardized_pipeline_script",
          "lineno": 376,
          "args": [
            "step_name",
            "module_function",
            "fallback_parser_description",
            "additional_arguments",
            "step_specific_imports"
          ],
          "returns": "Callable",
          "decorators": [],
          "doc": "Create a standardized pipeline script with consistent argument parsing and error handling.\n\nArgs:\n    step_name: Name of the step (e.g., \"1_gnn\", \"5_export\")\n    module_function: The main function to call for processing\n    fallback_parser_description: Description for fallback argument parser\n    additional_arguments: Additional arguments to add to the parser\n    step_specific_imports: Additional imports needed for the step\n    \nReturns:\n    Function that can be called to run the standardized script"
        },
        {
          "name": "get_standard_function_name",
          "lineno": 475,
          "args": [
            "step_name"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get the standard function name for a step."
        },
        {
          "name": "validate_module_function_signature",
          "lineno": 479,
          "args": [
            "func"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate that a module function has the correct signature."
        },
        {
          "name": "run_standardized_script",
          "lineno": 79,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Standardized script execution function."
        },
        {
          "name": "standard_function",
          "lineno": 304,
          "args": [
            "target_dir",
            "output_dir",
            "logger",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Standardized module function for {step_name}."
        },
        {
          "name": "run_standardized_script",
          "lineno": 396,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Standardized script execution function."
        },
        {
          "name": "setup_step_logging",
          "lineno": 41,
          "args": [
            "name",
            "verbose"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_start",
          "lineno": 46,
          "args": [
            "logger",
            "message"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_success",
          "lineno": 47,
          "args": [
            "logger",
            "message"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_warning",
          "lineno": 48,
          "args": [
            "logger",
            "message"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_error",
          "lineno": 49,
          "args": [
            "logger",
            "message"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "validate_output_directory",
          "lineno": 50,
          "args": [
            "output_dir",
            "step_name"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/utils/resource_manager.py",
      "module": "utils.resource_manager",
      "functions": [
        {
          "name": "performance_tracker",
          "lineno": 69,
          "args": [],
          "returns": "ResourceTracker",
          "decorators": [
            "contextmanager"
          ],
          "doc": "Context manager for tracking performance metrics."
        },
        {
          "name": "track_peak_memory",
          "lineno": 77,
          "args": [
            "func"
          ],
          "returns": "Callable[..., Tuple[T, float]]",
          "decorators": [],
          "doc": "Decorator to track peak memory usage of a function."
        },
        {
          "name": "with_resource_limits",
          "lineno": 90,
          "args": [
            "max_memory_mb",
            "max_time_seconds"
          ],
          "returns": null,
          "decorators": [
            "contextmanager"
          ],
          "doc": "Context manager to enforce resource limits."
        },
        {
          "name": "check_disk_space",
          "lineno": 114,
          "args": [
            "path",
            "required_mb",
            "buffer_factor"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if sufficient disk space is available.\n\nArgs:\n    path: Path to check\n    required_mb: Required space in MB\n    buffer_factor: Safety factor (e.g., 1.1 = 10% extra)\n    \nReturns:\n    True if sufficient space available\n    \nRaises:\n    RuntimeError if insufficient space"
        },
        {
          "name": "estimate_resources",
          "lineno": 150,
          "args": [
            "model_file"
          ],
          "returns": "Dict[str, float]",
          "decorators": [],
          "doc": "Estimate resource requirements for processing a model.\n\nArgs:\n    model_file: Path to GNN model file\n    \nReturns:\n    Dictionary with estimated resources:\n    - time: Estimated processing time in seconds\n    - memory_mb: Estimated peak memory usage in MB\n    - disk_mb: Estimated disk space needed in MB"
        },
        {
          "name": "log_resource_usage",
          "lineno": 182,
          "args": [
            "logger",
            "tracker"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Log resource usage metrics."
        },
        {
          "name": "get_system_info",
          "lineno": 192,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get system information and resource availability."
        },
        {
          "name": "__init__",
          "lineno": 26,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "update",
          "lineno": 33,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Update current resource measurements."
        },
        {
          "name": "stop",
          "lineno": 38,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Stop tracking and calculate final metrics."
        },
        {
          "name": "duration",
          "lineno": 44,
          "args": [
            "self"
          ],
          "returns": "float",
          "decorators": [
            "property"
          ],
          "doc": "Get operation duration in seconds."
        },
        {
          "name": "memory_used",
          "lineno": 51,
          "args": [
            "self"
          ],
          "returns": "float",
          "decorators": [
            "property"
          ],
          "doc": "Get current memory usage in MB."
        },
        {
          "name": "max_memory_mb",
          "lineno": 56,
          "args": [
            "self"
          ],
          "returns": "float",
          "decorators": [
            "property"
          ],
          "doc": "Get peak memory usage in MB."
        },
        {
          "name": "to_dict",
          "lineno": 60,
          "args": [
            "self"
          ],
          "returns": "Dict[str, float]",
          "decorators": [],
          "doc": "Convert metrics to dictionary."
        },
        {
          "name": "wrapper",
          "lineno": 80,
          "args": [],
          "returns": "Tuple[T, float]",
          "decorators": [
            "functools.wraps(func)"
          ],
          "doc": ""
        },
        {
          "name": "check_limits",
          "lineno": 98,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "ResourceTracker",
          "lineno": 23,
          "bases": [],
          "doc": "Tracks resource usage during operations.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 26,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "update",
              "lineno": 33,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Update current resource measurements."
            },
            {
              "name": "stop",
              "lineno": 38,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Stop tracking and calculate final metrics."
            },
            {
              "name": "duration",
              "lineno": 44,
              "args": [
                "self"
              ],
              "returns": "float",
              "decorators": [
                "property"
              ],
              "doc": "Get operation duration in seconds."
            },
            {
              "name": "memory_used",
              "lineno": 51,
              "args": [
                "self"
              ],
              "returns": "float",
              "decorators": [
                "property"
              ],
              "doc": "Get current memory usage in MB."
            },
            {
              "name": "max_memory_mb",
              "lineno": 56,
              "args": [
                "self"
              ],
              "returns": "float",
              "decorators": [
                "property"
              ],
              "doc": "Get peak memory usage in MB."
            },
            {
              "name": "to_dict",
              "lineno": 60,
              "args": [
                "self"
              ],
              "returns": "Dict[str, float]",
              "decorators": [],
              "doc": "Convert metrics to dictionary."
            }
          ]
        }
      ]
    },
    {
      "file": "src/utils/script_validator.py",
      "module": "utils.script_validator",
      "functions": [
        {
          "name": "validate_pipeline_scripts",
          "lineno": 473,
          "args": [
            "src_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate all pipeline scripts and return comprehensive results.\n\nArgs:\n    src_dir: Source directory containing pipeline scripts\n    \nReturns:\n    Validation report with results and recommendations"
        },
        {
          "name": "__init__",
          "lineno": 46,
          "args": [
            "self",
            "src_dir"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "validate_all_scripts",
          "lineno": 66,
          "args": [
            "self"
          ],
          "returns": "Dict[str, ScriptValidationResult]",
          "decorators": [],
          "doc": "Validate all numbered pipeline scripts."
        },
        {
          "name": "validate_script",
          "lineno": 105,
          "args": [
            "self",
            "script_path"
          ],
          "returns": "ScriptValidationResult",
          "decorators": [],
          "doc": "Validate a single pipeline script."
        },
        {
          "name": "_analyze_imports",
          "lineno": 166,
          "args": [
            "self",
            "tree",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Analyze import statements in the script."
        },
        {
          "name": "_analyze_error_handling",
          "lineno": 190,
          "args": [
            "self",
            "tree",
            "content",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Analyze error handling patterns."
        },
        {
          "name": "_analyze_logging_patterns",
          "lineno": 230,
          "args": [
            "self",
            "tree",
            "content",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Analyze logging patterns."
        },
        {
          "name": "_analyze_function_calls",
          "lineno": 255,
          "args": [
            "self",
            "tree",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Analyze function calls to detect potential missing implementations."
        },
        {
          "name": "_validate_module_imports",
          "lineno": 266,
          "args": [
            "self",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Validate that imported modules exist and have required functions."
        },
        {
          "name": "_check_safe_fail_patterns",
          "lineno": 337,
          "args": [
            "self",
            "content",
            "result"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Check for safe-to-fail patterns."
        },
        {
          "name": "generate_validation_report",
          "lineno": 379,
          "args": [
            "self",
            "results"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate a comprehensive validation report."
        },
        {
          "name": "fix_common_issues",
          "lineno": 444,
          "args": [
            "self",
            "results"
          ],
          "returns": "Dict[str, List[str]]",
          "decorators": [],
          "doc": "Generate automatic fixes for common issues."
        }
      ],
      "classes": [
        {
          "name": "ValidationIssue",
          "lineno": 21,
          "bases": [],
          "doc": "Represents a validation issue found in a script.",
          "methods": []
        },
        {
          "name": "ScriptValidationResult",
          "lineno": 31,
          "bases": [],
          "doc": "Results of validating a single script.",
          "methods": []
        },
        {
          "name": "PipelineScriptValidator",
          "lineno": 43,
          "bases": [],
          "doc": "Validator for pipeline scripts.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 46,
              "args": [
                "self",
                "src_dir"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "validate_all_scripts",
              "lineno": 66,
              "args": [
                "self"
              ],
              "returns": "Dict[str, ScriptValidationResult]",
              "decorators": [],
              "doc": "Validate all numbered pipeline scripts."
            },
            {
              "name": "validate_script",
              "lineno": 105,
              "args": [
                "self",
                "script_path"
              ],
              "returns": "ScriptValidationResult",
              "decorators": [],
              "doc": "Validate a single pipeline script."
            },
            {
              "name": "_analyze_imports",
              "lineno": 166,
              "args": [
                "self",
                "tree",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Analyze import statements in the script."
            },
            {
              "name": "_analyze_error_handling",
              "lineno": 190,
              "args": [
                "self",
                "tree",
                "content",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Analyze error handling patterns."
            },
            {
              "name": "_analyze_logging_patterns",
              "lineno": 230,
              "args": [
                "self",
                "tree",
                "content",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Analyze logging patterns."
            },
            {
              "name": "_analyze_function_calls",
              "lineno": 255,
              "args": [
                "self",
                "tree",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Analyze function calls to detect potential missing implementations."
            },
            {
              "name": "_validate_module_imports",
              "lineno": 266,
              "args": [
                "self",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Validate that imported modules exist and have required functions."
            },
            {
              "name": "_check_safe_fail_patterns",
              "lineno": 337,
              "args": [
                "self",
                "content",
                "result"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Check for safe-to-fail patterns."
            },
            {
              "name": "generate_validation_report",
              "lineno": 379,
              "args": [
                "self",
                "results"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Generate a comprehensive validation report."
            },
            {
              "name": "fix_common_issues",
              "lineno": 444,
              "args": [
                "self",
                "results"
              ],
              "returns": "Dict[str, List[str]]",
              "decorators": [],
              "doc": "Generate automatic fixes for common issues."
            }
          ]
        }
      ]
    },
    {
      "file": "src/utils/shared_functions.py",
      "module": "utils.shared_functions",
      "functions": [
        {
          "name": "find_gnn_files",
          "lineno": 16,
          "args": [
            "target_dir",
            "recursive"
          ],
          "returns": "List[Path]",
          "decorators": [],
          "doc": "Find GNN files in the target directory.\n\nArgs:\n    target_dir: Directory to search for GNN files\n    recursive: Whether to search recursively\n    \nReturns:\n    List of paths to GNN files"
        },
        {
          "name": "parse_gnn_sections",
          "lineno": 44,
          "args": [
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse common GNN sections from file content.\n\nArgs:\n    content: Raw file content\n    \nReturns:\n    Dictionary with parsed sections"
        },
        {
          "name": "extract_model_parameters",
          "lineno": 80,
          "args": [
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Extract model parameters from GNN content.\n\nArgs:\n    content: GNN file content\n    \nReturns:\n    Dictionary of parameter names and values"
        },
        {
          "name": "create_processing_report",
          "lineno": 126,
          "args": [
            "step_name",
            "target_dir",
            "output_dir",
            "processed_files",
            "errors",
            "warnings",
            "additional_info"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Create a standardized processing report.\n\nArgs:\n    step_name: Name of the processing step\n    target_dir: Target directory that was processed\n    output_dir: Output directory where results were saved\n    processed_files: List of files that were successfully processed\n    errors: List of error messages\n    warnings: List of warning messages\n    additional_info: Additional information to include in the report\n    \nReturns:\n    Dictionary containing the processing report"
        },
        {
          "name": "save_processing_report",
          "lineno": 169,
          "args": [
            "report",
            "output_dir",
            "filename"
          ],
          "returns": "Path",
          "decorators": [],
          "doc": "Save a processing report to a JSON file.\n\nArgs:\n    report: Processing report dictionary\n    output_dir: Directory to save the report\n    filename: Name of the report file\n    \nReturns:\n    Path to the saved report file"
        },
        {
          "name": "validate_file_paths",
          "lineno": 193,
          "args": [],
          "returns": "Tuple[bool, List[str]]",
          "decorators": [],
          "doc": "Validate that file paths exist and are accessible.\n\nArgs:\n    *paths: Paths to validate\n    \nReturns:\n    Tuple of (is_valid, list_of_errors)"
        },
        {
          "name": "ensure_output_directory",
          "lineno": 213,
          "args": [
            "output_dir",
            "logger"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Ensure output directory exists and is writable.\n\nArgs:\n    output_dir: Output directory to create/validate\n    logger: Logger instance\n    \nReturns:\n    True if directory is ready, False otherwise"
        },
        {
          "name": "log_processing_summary",
          "lineno": 237,
          "args": [
            "logger",
            "step_name",
            "total_files",
            "successful_files",
            "failed_files",
            "warnings"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Log a standardized processing summary.\n\nArgs:\n    logger: Logger instance\n    step_name: Name of the processing step\n    total_files: Total number of files processed\n    successful_files: Number of successfully processed files\n    failed_files: Number of failed files\n    warnings: Number of warnings"
        }
      ],
      "classes": []
    },
    {
      "file": "src/utils/system_utils.py",
      "module": "utils.system_utils",
      "functions": [
        {
          "name": "get_system_info",
          "lineno": 18,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Gather comprehensive system information for pipeline tracking."
        }
      ],
      "classes": []
    },
    {
      "file": "src/utils/test_utils.py",
      "module": "utils.test_utils",
      "functions": [
        {
          "name": "run_tests",
          "lineno": 196,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Basic test execution function."
        },
        {
          "name": "run_test_category",
          "lineno": 219,
          "args": [
            "category",
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Run tests for a specific category."
        },
        {
          "name": "run_test_stage",
          "lineno": 223,
          "args": [
            "stage",
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Run tests for a specific stage."
        },
        {
          "name": "get_test_results",
          "lineno": 227,
          "args": [
            "output_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get test results from output directory."
        },
        {
          "name": "generate_test_report",
          "lineno": 235,
          "args": [
            "results",
            "output_dir"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate test report."
        },
        {
          "name": "validate_test_environment",
          "lineno": 245,
          "args": [],
          "returns": "Tuple[bool, List[str]]",
          "decorators": [],
          "doc": "Validate test environment."
        },
        {
          "name": "setup_test_environment",
          "lineno": 249,
          "args": [],
          "returns": "None",
          "decorators": [],
          "doc": "Setup test environment."
        },
        {
          "name": "cleanup_test_environment",
          "lineno": 253,
          "args": [],
          "returns": "None",
          "decorators": [],
          "doc": "Cleanup test environment."
        },
        {
          "name": "get_test_coverage",
          "lineno": 257,
          "args": [
            "output_dir"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Get test coverage percentage."
        },
        {
          "name": "validate_coverage_targets",
          "lineno": 261,
          "args": [
            "coverage",
            "targets"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate coverage targets."
        },
        {
          "name": "get_test_summary",
          "lineno": 265,
          "args": [
            "results"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get test summary."
        },
        {
          "name": "get_test_statistics",
          "lineno": 269,
          "args": [
            "results"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get test statistics."
        },
        {
          "name": "get_test_performance",
          "lineno": 273,
          "args": [
            "results"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get test performance metrics."
        },
        {
          "name": "get_test_dependencies",
          "lineno": 277,
          "args": [],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get test dependencies."
        },
        {
          "name": "validate_test_dependencies",
          "lineno": 281,
          "args": [],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate test dependencies."
        },
        {
          "name": "install_test_dependencies",
          "lineno": 285,
          "args": [],
          "returns": "bool",
          "decorators": [],
          "doc": "Install test dependencies."
        },
        {
          "name": "get_test_configuration",
          "lineno": 289,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get test configuration."
        },
        {
          "name": "validate_test_configuration",
          "lineno": 293,
          "args": [],
          "returns": "bool",
          "decorators": [],
          "doc": "Validate test configuration."
        },
        {
          "name": "get_test_environment",
          "lineno": 297,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get test environment info."
        },
        {
          "name": "get_test_logs",
          "lineno": 301,
          "args": [
            "output_dir"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get test logs."
        },
        {
          "name": "get_test_artifacts",
          "lineno": 305,
          "args": [
            "output_dir"
          ],
          "returns": "List[Path]",
          "decorators": [],
          "doc": "Get test artifacts."
        },
        {
          "name": "get_test_metadata",
          "lineno": 309,
          "args": [
            "results"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get test metadata."
        },
        {
          "name": "get_test_timestamps",
          "lineno": 313,
          "args": [
            "results"
          ],
          "returns": "Dict[str, float]",
          "decorators": [],
          "doc": "Get test timestamps."
        },
        {
          "name": "get_test_duration",
          "lineno": 317,
          "args": [
            "results"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Get test duration."
        },
        {
          "name": "get_test_status",
          "lineno": 321,
          "args": [
            "results"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Get test status."
        },
        {
          "name": "get_test_progress",
          "lineno": 325,
          "args": [
            "results"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get test progress."
        },
        {
          "name": "get_test_args",
          "lineno": 329,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get standard test arguments."
        },
        {
          "name": "get_sample_pipeline_arguments",
          "lineno": 351,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get sample pipeline arguments for testing."
        },
        {
          "name": "get_step_metadata_dict",
          "lineno": 375,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get metadata dictionary for pipeline steps."
        },
        {
          "name": "is_safe_mode",
          "lineno": 394,
          "args": [],
          "returns": "bool",
          "decorators": [],
          "doc": "Check if tests are running in safe mode."
        },
        {
          "name": "create_missing_test_files",
          "lineno": 398,
          "args": [],
          "returns": "None",
          "decorators": [],
          "doc": "Create missing test files and directories."
        },
        {
          "name": "create_sample_config",
          "lineno": 426,
          "args": [
            "config_path"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Create a sample configuration file."
        },
        {
          "name": "create_sample_ontology",
          "lineno": 459,
          "args": [
            "ontology_path"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Create a sample ontology terms file."
        },
        {
          "name": "create_test_gnn_files",
          "lineno": 475,
          "args": [
            "target_dir"
          ],
          "returns": "List[Path]",
          "decorators": [],
          "doc": "Create test GNN files in the target directory."
        },
        {
          "name": "create_test_files",
          "lineno": 490,
          "args": [
            "target_dir",
            "num_files"
          ],
          "returns": "List[Path]",
          "decorators": [],
          "doc": "Create generic test files in the target directory."
        },
        {
          "name": "create_sample_gnn_content",
          "lineno": 507,
          "args": [],
          "returns": "Dict[str, str]",
          "decorators": [],
          "doc": "Create sample GNN content for testing."
        },
        {
          "name": "get_mock_filesystem_structure",
          "lineno": 645,
          "args": [],
          "returns": "Dict[str, List[str]]",
          "decorators": [],
          "doc": "Get a mock filesystem structure for testing."
        },
        {
          "name": "run_all_tests",
          "lineno": 664,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Run all tests and return success status."
        },
        {
          "name": "run_fast_tests",
          "lineno": 715,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Run fast tests."
        },
        {
          "name": "run_standard_tests",
          "lineno": 725,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Run standard tests."
        },
        {
          "name": "run_slow_tests",
          "lineno": 735,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Run slow tests."
        },
        {
          "name": "run_performance_tests",
          "lineno": 745,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Run performance tests."
        },
        {
          "name": "run_coverage_tests",
          "lineno": 755,
          "args": [
            "test_results_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Run coverage tests."
        },
        {
          "name": "assert_file_exists",
          "lineno": 765,
          "args": [
            "file_path",
            "message"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Assert that a file exists."
        },
        {
          "name": "assert_valid_json",
          "lineno": 770,
          "args": [
            "file_path"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Assert that a file contains valid JSON."
        },
        {
          "name": "assert_directory_structure",
          "lineno": 778,
          "args": [
            "base_dir",
            "expected_structure"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Assert that a directory has the expected structure."
        },
        {
          "name": "validate_report_data",
          "lineno": 797,
          "args": [
            "data"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate report data and return validation results."
        },
        {
          "name": "run_all_tests_mcp",
          "lineno": 835,
          "args": [
            "target_directory",
            "output_directory",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Run all tests via MCP and return results."
        },
        {
          "name": "register_tools",
          "lineno": 869,
          "args": [
            "mcp_instance"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Register test-related tools with MCP instance."
        },
        {
          "name": "generate_html_report_file",
          "lineno": 875,
          "args": [
            "data",
            "output_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate an HTML test report file."
        },
        {
          "name": "generate_markdown_report_file",
          "lineno": 932,
          "args": [
            "data",
            "output_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate a Markdown test report file."
        },
        {
          "name": "generate_json_report_file",
          "lineno": 971,
          "args": [
            "data",
            "output_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate a JSON test report file."
        },
        {
          "name": "generate_comprehensive_report",
          "lineno": 983,
          "args": [
            "pipeline_dir",
            "output_dir",
            "logger"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate a comprehensive test report."
        },
        {
          "name": "performance_tracker",
          "lineno": 1022,
          "args": [],
          "returns": null,
          "decorators": [
            "contextmanager"
          ],
          "doc": "Context manager for tracking test performance."
        },
        {
          "name": "get_memory_usage",
          "lineno": 1049,
          "args": [],
          "returns": "float",
          "decorators": [],
          "doc": "Get current memory usage in MB."
        },
        {
          "name": "track_peak_memory",
          "lineno": 1058,
          "args": [
            "func"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Decorator to track peak memory usage of a function."
        },
        {
          "name": "with_resource_limits",
          "lineno": 1084,
          "args": [
            "max_memory_mb",
            "max_cpu_percent"
          ],
          "returns": null,
          "decorators": [
            "contextmanager"
          ],
          "doc": "Context manager for resource limit testing."
        },
        {
          "name": "__init__",
          "lineno": 109,
          "args": [
            "self",
            "config"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "run_tests",
          "lineno": 113,
          "args": [
            "self",
            "test_paths",
            "output_dir"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Basic test execution."
        },
        {
          "name": "__init__",
          "lineno": 128,
          "args": [
            "self",
            "success",
            "tests_run",
            "tests_passed",
            "tests_failed",
            "tests_skipped",
            "execution_time",
            "error_message"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "to_dict",
          "lineno": 138,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Convert to dictionary."
        },
        {
          "name": "__init__",
          "lineno": 154,
          "args": [
            "self",
            "name",
            "description"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__str__",
          "lineno": 158,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__repr__",
          "lineno": 161,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 168,
          "args": [
            "self",
            "name",
            "timeout",
            "max_failures",
            "parallel",
            "coverage"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__str__",
          "lineno": 175,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__repr__",
          "lineno": 178,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 185,
          "args": [
            "self",
            "name",
            "target_percentage"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__str__",
          "lineno": 189,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__repr__",
          "lineno": 192,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "wrapper",
          "lineno": 1060,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "__init__",
          "lineno": 1028,
          "args": [
            "self",
            "start_time",
            "start_memory"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "finalize",
          "lineno": 1036,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "TestRunner",
          "lineno": 106,
          "bases": [],
          "doc": "Basic test runner for compatibility.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 109,
              "args": [
                "self",
                "config"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "run_tests",
              "lineno": 113,
              "args": [
                "self",
                "test_paths",
                "output_dir"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Basic test execution."
            }
          ]
        },
        {
          "name": "TestResult",
          "lineno": 125,
          "bases": [],
          "doc": "Basic test result for compatibility.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 128,
              "args": [
                "self",
                "success",
                "tests_run",
                "tests_passed",
                "tests_failed",
                "tests_skipped",
                "execution_time",
                "error_message"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "to_dict",
              "lineno": 138,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Convert to dictionary."
            }
          ]
        },
        {
          "name": "TestCategory",
          "lineno": 151,
          "bases": [],
          "doc": "Basic test category for compatibility.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 154,
              "args": [
                "self",
                "name",
                "description"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "__str__",
              "lineno": 158,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "__repr__",
              "lineno": 161,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "TestStage",
          "lineno": 165,
          "bases": [],
          "doc": "Basic test stage for compatibility.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 168,
              "args": [
                "self",
                "name",
                "timeout",
                "max_failures",
                "parallel",
                "coverage"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "__str__",
              "lineno": 175,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "__repr__",
              "lineno": 178,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "CoverageTarget",
          "lineno": 182,
          "bases": [],
          "doc": "Basic coverage target for compatibility.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 185,
              "args": [
                "self",
                "name",
                "target_percentage"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "__str__",
              "lineno": 189,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "__repr__",
              "lineno": 192,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        },
        {
          "name": "PerformanceTracker",
          "lineno": 1027,
          "bases": [],
          "doc": "",
          "methods": [
            {
              "name": "__init__",
              "lineno": 1028,
              "args": [
                "self",
                "start_time",
                "start_memory"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            },
            {
              "name": "finalize",
              "lineno": 1036,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/utils/venv_utils.py",
      "module": "utils.venv_utils",
      "functions": [
        {
          "name": "get_venv_python",
          "lineno": 7,
          "args": [
            "script_dir"
          ],
          "returns": "tuple[Path | None, Path | None]",
          "decorators": [],
          "doc": "Find the virtual environment Python executable and site-packages path.\n\nArgs:\n    script_dir: The directory where the script is located (typically src/)\n    \nReturns:\n    Tuple of (venv_python_path, site_packages_path)"
        }
      ],
      "classes": []
    },
    {
      "file": "src/validation/__init__.py",
      "module": "validation.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/validation/consistency_checker.py",
      "module": "validation.consistency_checker",
      "functions": [
        {
          "name": "check_consistency",
          "lineno": 313,
          "args": [
            "model_data"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Check consistency for a GNN model.\n\nArgs:\n    model_data: Path to GNN file, Path object, or model data dictionary\n    \nReturns:\n    Dictionary with consistency check results"
        },
        {
          "name": "_extract_content_from_dict",
          "lineno": 366,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Extract content from model data dictionary."
        },
        {
          "name": "_calculate_consistency_score",
          "lineno": 424,
          "args": [
            "consistency_result"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Calculate a consistency score from consistency results."
        },
        {
          "name": "__init__",
          "lineno": 15,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the consistency checker."
        },
        {
          "name": "check",
          "lineno": 19,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Check the consistency of a GNN model.\n\nArgs:\n    content: GNN model content\n    \nReturns:\n    Consistency check result with warnings"
        },
        {
          "name": "_check_naming_conventions",
          "lineno": 61,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Check naming conventions."
        },
        {
          "name": "_check_style_consistency",
          "lineno": 107,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Check style consistency."
        },
        {
          "name": "_check_structural_integrity",
          "lineno": 159,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Check structural integrity."
        },
        {
          "name": "_check_reference_consistency",
          "lineno": 216,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Check reference consistency."
        },
        {
          "name": "has_cycle",
          "lineno": 281,
          "args": [
            "node"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "ConsistencyChecker",
          "lineno": 12,
          "bases": [],
          "doc": "Checker for consistency aspects of GNN models.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 15,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the consistency checker."
            },
            {
              "name": "check",
              "lineno": 19,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Check the consistency of a GNN model.\n\nArgs:\n    content: GNN model content\n    \nReturns:\n    Consistency check result with warnings"
            },
            {
              "name": "_check_naming_conventions",
              "lineno": 61,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Check naming conventions."
            },
            {
              "name": "_check_style_consistency",
              "lineno": 107,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Check style consistency."
            },
            {
              "name": "_check_structural_integrity",
              "lineno": 159,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Check structural integrity."
            },
            {
              "name": "_check_reference_consistency",
              "lineno": 216,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Check reference consistency."
            }
          ]
        }
      ]
    },
    {
      "file": "src/validation/legacy.py",
      "module": "validation.legacy",
      "functions": [
        {
          "name": "semantic_validator",
          "lineno": 10,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Legacy function name compatibility for semantic validation.\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    Semantic validation result"
        },
        {
          "name": "performance_profiler",
          "lineno": 24,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Legacy function name compatibility for performance profiling.\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    Performance profiling result"
        },
        {
          "name": "consistency_checker",
          "lineno": 38,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Legacy function name compatibility for consistency checking.\n\nArgs:\n    *args: Positional arguments\n    **kwargs: Keyword arguments\n    \nReturns:\n    Consistency checking result"
        },
        {
          "name": "validate_semantic_fallback",
          "lineno": 52,
          "args": [
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Fallback semantic validation when main validator is not available.\n\nArgs:\n    content: Content to validate\n    \nReturns:\n    Fallback validation result"
        },
        {
          "name": "profile_performance_fallback",
          "lineno": 70,
          "args": [
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Fallback performance profiling when main profiler is not available.\n\nArgs:\n    content: Content to profile\n    \nReturns:\n    Fallback performance result"
        },
        {
          "name": "check_consistency_fallback",
          "lineno": 92,
          "args": [
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Fallback consistency checking when main checker is not available.\n\nArgs:\n    content: Content to check\n    \nReturns:\n    Fallback consistency result"
        }
      ],
      "classes": []
    },
    {
      "file": "src/validation/mcp.py",
      "module": "validation.mcp",
      "functions": [
        {
          "name": "register_tools",
          "lineno": 15,
          "args": [
            "registry"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register all validation tools with the MCP registry.\n\nArgs:\n    registry: The MCP tool registry"
        },
        {
          "name": "validate_model",
          "lineno": 162,
          "args": [
            "model_path",
            "validation_level",
            "profile_performance",
            "check_consistency"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate a GNN model for semantic correctness, performance, and consistency.\n\nArgs:\n    model_path: Path to the GNN model file\n    validation_level: Validation level (basic, standard, strict, research)\n    profile_performance: Whether to profile performance\n    check_consistency: Whether to check consistency\n    \nReturns:\n    Validation result with errors, warnings, and metrics"
        },
        {
          "name": "validate_semantic",
          "lineno": 243,
          "args": [
            "model_path",
            "validation_level"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate the semantic aspects of a GNN model.\n\nArgs:\n    model_path: Path to the GNN model file\n    validation_level: Validation level (basic, standard, strict, research)\n    \nReturns:\n    Semantic validation result with errors and warnings"
        },
        {
          "name": "profile_performance",
          "lineno": 285,
          "args": [
            "model_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Profile the performance characteristics of a GNN model.\n\nArgs:\n    model_path: Path to the GNN model file\n    \nReturns:\n    Performance profile with metrics and warnings"
        },
        {
          "name": "check_consistency",
          "lineno": 324,
          "args": [
            "model_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Check the consistency of a GNN model.\n\nArgs:\n    model_path: Path to the GNN model file\n    \nReturns:\n    Consistency check result with warnings"
        }
      ],
      "classes": []
    },
    {
      "file": "src/validation/performance_profiler.py",
      "module": "validation.performance_profiler",
      "functions": [
        {
          "name": "profile_performance",
          "lineno": 274,
          "args": [
            "model_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Profile the performance characteristics of a GNN model.\n\nArgs:\n    model_path: Path to the GNN model file, Path object, or model data dictionary\n    \nReturns:\n    Performance profile with metrics and warnings"
        },
        {
          "name": "_extract_content_from_dict",
          "lineno": 318,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Extract content from model data dictionary."
        },
        {
          "name": "_calculate_performance_score",
          "lineno": 376,
          "args": [
            "profile_result"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Calculate a performance score from profile results."
        },
        {
          "name": "__init__",
          "lineno": 17,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the performance profiler."
        },
        {
          "name": "profile",
          "lineno": 21,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Profile the performance characteristics of a GNN model.\n\nArgs:\n    content: GNN model content\n    \nReturns:\n    Performance profile with metrics and warnings"
        },
        {
          "name": "_extract_block_dimensions",
          "lineno": 51,
          "args": [
            "self",
            "state_blocks"
          ],
          "returns": "Dict[str, List[int]]",
          "decorators": [],
          "doc": "Extract dimensions from state blocks."
        },
        {
          "name": "_extract_block_types",
          "lineno": 70,
          "args": [
            "self",
            "state_blocks"
          ],
          "returns": "Dict[str, str]",
          "decorators": [],
          "doc": "Extract block types from state blocks."
        },
        {
          "name": "_extract_connection_types",
          "lineno": 85,
          "args": [
            "self",
            "connections"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Extract connection types from connections."
        },
        {
          "name": "_calculate_metrics",
          "lineno": 98,
          "args": [
            "self",
            "block_dims",
            "block_types",
            "connection_types"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Calculate performance metrics."
        },
        {
          "name": "_estimate_computational_complexity",
          "lineno": 128,
          "args": [
            "self",
            "block_dims",
            "block_types",
            "connection_types"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Estimate computational complexity of the model."
        },
        {
          "name": "_estimate_parallelization_potential",
          "lineno": 186,
          "args": [
            "self",
            "block_dims",
            "block_types",
            "connection_types"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Estimate parallelization potential of the model."
        },
        {
          "name": "_generate_warnings",
          "lineno": 230,
          "args": [
            "self",
            "metrics"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Generate warnings based on performance metrics."
        }
      ],
      "classes": [
        {
          "name": "PerformanceProfiler",
          "lineno": 14,
          "bases": [],
          "doc": "Profiler for performance aspects of GNN models.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 17,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the performance profiler."
            },
            {
              "name": "profile",
              "lineno": 21,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Profile the performance characteristics of a GNN model.\n\nArgs:\n    content: GNN model content\n    \nReturns:\n    Performance profile with metrics and warnings"
            },
            {
              "name": "_extract_block_dimensions",
              "lineno": 51,
              "args": [
                "self",
                "state_blocks"
              ],
              "returns": "Dict[str, List[int]]",
              "decorators": [],
              "doc": "Extract dimensions from state blocks."
            },
            {
              "name": "_extract_block_types",
              "lineno": 70,
              "args": [
                "self",
                "state_blocks"
              ],
              "returns": "Dict[str, str]",
              "decorators": [],
              "doc": "Extract block types from state blocks."
            },
            {
              "name": "_extract_connection_types",
              "lineno": 85,
              "args": [
                "self",
                "connections"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Extract connection types from connections."
            },
            {
              "name": "_calculate_metrics",
              "lineno": 98,
              "args": [
                "self",
                "block_dims",
                "block_types",
                "connection_types"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Calculate performance metrics."
            },
            {
              "name": "_estimate_computational_complexity",
              "lineno": 128,
              "args": [
                "self",
                "block_dims",
                "block_types",
                "connection_types"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Estimate computational complexity of the model."
            },
            {
              "name": "_estimate_parallelization_potential",
              "lineno": 186,
              "args": [
                "self",
                "block_dims",
                "block_types",
                "connection_types"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Estimate parallelization potential of the model."
            },
            {
              "name": "_generate_warnings",
              "lineno": 230,
              "args": [
                "self",
                "metrics"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Generate warnings based on performance metrics."
            }
          ]
        }
      ]
    },
    {
      "file": "src/validation/semantic_validator.py",
      "module": "validation.semantic_validator",
      "functions": [
        {
          "name": "process_semantic_validation",
          "lineno": 388,
          "args": [
            "model_data"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Process semantic validation for a GNN model.\n\nArgs:\n    model_data: Path to GNN file, Path object, or model data dictionary\n    **kwargs: Additional arguments including validation_level\n    \nReturns:\n    Dictionary with validation results"
        },
        {
          "name": "_extract_content_from_dict",
          "lineno": 447,
          "args": [
            "model_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Extract content from model data dictionary."
        },
        {
          "name": "_calculate_semantic_score",
          "lineno": 505,
          "args": [
            "validation_result"
          ],
          "returns": "float",
          "decorators": [],
          "doc": "Calculate a semantic score from validation results."
        },
        {
          "name": "__init__",
          "lineno": 16,
          "args": [
            "self",
            "validation_level"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the semantic validator.\n\nArgs:\n    validation_level: Validation level (basic, standard, strict, research)"
        },
        {
          "name": "validate",
          "lineno": 26,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate the semantic aspects of a GNN model.\n\nArgs:\n    content: GNN model content\n    \nReturns:\n    Validation result with errors and warnings"
        },
        {
          "name": "_get_level_value",
          "lineno": 53,
          "args": [
            "self"
          ],
          "returns": "int",
          "decorators": [],
          "doc": "Convert validation level string to numeric value."
        },
        {
          "name": "_get_validation_rules",
          "lineno": 63,
          "args": [
            "self"
          ],
          "returns": "List[Dict[str, Any]]",
          "decorators": [],
          "doc": "Get validation rules based on validation level."
        },
        {
          "name": "_validate_basic_structure",
          "lineno": 103,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate basic structure of the GNN model."
        },
        {
          "name": "_validate_state_space_definitions",
          "lineno": 129,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate state space definitions."
        },
        {
          "name": "_validate_connection_integrity",
          "lineno": 161,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate connection integrity."
        },
        {
          "name": "_validate_mathematical_consistency",
          "lineno": 216,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate mathematical consistency."
        },
        {
          "name": "_validate_active_inference_principles",
          "lineno": 272,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate compliance with Active Inference principles."
        },
        {
          "name": "_validate_causal_relationships",
          "lineno": 301,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate causal relationships in the model."
        },
        {
          "name": "_validate_advanced_mathematical_properties",
          "lineno": 356,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Validate advanced mathematical properties."
        },
        {
          "name": "has_cycle",
          "lineno": 327,
          "args": [
            "node"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "SemanticValidator",
          "lineno": 13,
          "bases": [],
          "doc": "Validator for semantic aspects of GNN models.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 16,
              "args": [
                "self",
                "validation_level"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the semantic validator.\n\nArgs:\n    validation_level: Validation level (basic, standard, strict, research)"
            },
            {
              "name": "validate",
              "lineno": 26,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Validate the semantic aspects of a GNN model.\n\nArgs:\n    content: GNN model content\n    \nReturns:\n    Validation result with errors and warnings"
            },
            {
              "name": "_get_level_value",
              "lineno": 53,
              "args": [
                "self"
              ],
              "returns": "int",
              "decorators": [],
              "doc": "Convert validation level string to numeric value."
            },
            {
              "name": "_get_validation_rules",
              "lineno": 63,
              "args": [
                "self"
              ],
              "returns": "List[Dict[str, Any]]",
              "decorators": [],
              "doc": "Get validation rules based on validation level."
            },
            {
              "name": "_validate_basic_structure",
              "lineno": 103,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Validate basic structure of the GNN model."
            },
            {
              "name": "_validate_state_space_definitions",
              "lineno": 129,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Validate state space definitions."
            },
            {
              "name": "_validate_connection_integrity",
              "lineno": 161,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Validate connection integrity."
            },
            {
              "name": "_validate_mathematical_consistency",
              "lineno": 216,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Validate mathematical consistency."
            },
            {
              "name": "_validate_active_inference_principles",
              "lineno": 272,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Validate compliance with Active Inference principles."
            },
            {
              "name": "_validate_causal_relationships",
              "lineno": 301,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Validate causal relationships in the model."
            },
            {
              "name": "_validate_advanced_mathematical_properties",
              "lineno": 356,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Validate advanced mathematical properties."
            }
          ]
        }
      ]
    },
    {
      "file": "src/visualization/__init__.py",
      "module": "visualization.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/visualization/__main__.py",
      "module": "visualization.__main__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/visualization/cli.py",
      "module": "visualization.cli",
      "functions": [
        {
          "name": "parse_args",
          "lineno": 16,
          "args": [
            "args"
          ],
          "returns": "argparse.Namespace",
          "decorators": [],
          "doc": "Parse command-line arguments."
        },
        {
          "name": "main",
          "lineno": 50,
          "args": [
            "args"
          ],
          "returns": "int",
          "decorators": [],
          "doc": "Main entry point for GNN visualization CLI."
        }
      ],
      "classes": []
    },
    {
      "file": "src/visualization/legacy.py",
      "module": "visualization.legacy",
      "functions": [
        {
          "name": "matrix_visualizer",
          "lineno": 8,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Legacy function name compatibility for matrix visualization."
        },
        {
          "name": "generate_visualizations",
          "lineno": 13,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Legacy function name compatibility for visualization generation."
        }
      ],
      "classes": []
    },
    {
      "file": "src/visualization/matrix_visualizer.py",
      "module": "visualization.matrix_visualizer",
      "functions": [
        {
          "name": "generate_matrix_visualizations",
          "lineno": 921,
          "args": [
            "parsed_data",
            "output_dir",
            "model_name"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Generate matrix visualizations for a parsed GNN model.\n\nArgs:\n    parsed_data: Parsed GNN model data\n    output_dir: Output directory for visualizations\n    model_name: Name of the model\n    \nReturns:\n    List of generated visualization file paths"
        },
        {
          "name": "process_matrix_visualization",
          "lineno": 963,
          "args": [
            "parameters",
            "output_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process matrix visualization using the MatrixVisualizer class.\n\nThis function provides a standalone interface for matrix visualization\nthat can be called from other modules.\n\nArgs:\n    parameters: List of parameter dictionaries from GNN\n    output_path: Path where to save the visualization\n    **kwargs: Additional keyword arguments\n    \nReturns:\n    bool: True if visualization was successful"
        },
        {
          "name": "__init__",
          "lineno": 49,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the MatrixVisualizer."
        },
        {
          "name": "extract_matrix_data_from_parameters",
          "lineno": 53,
          "args": [
            "self",
            "parameters"
          ],
          "returns": "Dict[str, np.ndarray]",
          "decorators": [],
          "doc": "Extract matrix data from parameters section.\n\nArgs:\n    parameters: List of parameter dictionaries\n    \nReturns:\n    Dictionary mapping matrix names to numpy arrays"
        },
        {
          "name": "generate_matrix_heatmap",
          "lineno": 80,
          "args": [
            "self",
            "matrix_name",
            "matrix",
            "output_path",
            "title",
            "cmap"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate a heatmap visualization for a matrix.\n\nArgs:\n    matrix_name: Name of the matrix\n    matrix: Numpy array representing the matrix\n    output_path: Output file path\n    title: Optional title for the plot\n    cmap: Colormap to use\n    \nReturns:\n    True if successful, False otherwise"
        },
        {
          "name": "create_heatmap",
          "lineno": 137,
          "args": [
            "self",
            "matrix"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "generate_3d_tensor_visualization",
          "lineno": 146,
          "args": [
            "self",
            "tensor_name",
            "tensor",
            "output_path",
            "title",
            "tensor_type"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate specialized visualization for 3D tensors like POMDP transition matrices.\n\nArgs:\n    tensor_name: Name of the tensor (e.g., 'B')\n    tensor: 3D numpy array\n    output_path: Output file path\n    title: Optional title for the plot\n    tensor_type: Type of tensor ('transition', 'likelihood', etc.)\n    \nReturns:\n    True if successful, False otherwise"
        },
        {
          "name": "_generate_tensor_statistics",
          "lineno": 244,
          "args": [
            "self",
            "tensor",
            "tensor_name",
            "tensor_type"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate statistical summary for a 3D tensor.\n\nArgs:\n    tensor: 3D numpy array\n    tensor_name: Name of the tensor\n    tensor_type: Type of tensor\n    \nReturns:\n    Formatted statistics string"
        },
        {
          "name": "generate_pomdp_transition_analysis",
          "lineno": 291,
          "args": [
            "self",
            "tensor",
            "output_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate specialized analysis for POMDP transition matrices.\n\nArgs:\n    tensor: 3D numpy array representing transition matrix\n    output_path: Output file path\n    \nReturns:\n    True if successful, False otherwise"
        },
        {
          "name": "generate_matrix_analysis",
          "lineno": 459,
          "args": [
            "self",
            "parameters",
            "output_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate comprehensive matrix analysis from parameters.\n\nArgs:\n    parameters: List of parameter dictionaries from GNN\n    output_path: Path where to save the analysis image\n    \nReturns:\n    bool: True if analysis was generated successfully"
        },
        {
          "name": "generate_combined_matrix_overview",
          "lineno": 577,
          "args": [
            "self",
            "matrices",
            "output_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate a combined overview of all matrices.\n\nArgs:\n    matrices: Dictionary of matrix name to numpy array mappings\n    output_path: Output file path\n    \nReturns:\n    True if successful, False otherwise"
        },
        {
          "name": "generate_matrix_statistics",
          "lineno": 689,
          "args": [
            "self",
            "parameters",
            "output_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate statistics about matrices in the model.\n\nArgs:\n    parameters: List of parameter dictionaries\n    output_path: Output file path\n    \nReturns:\n    True if successful, False otherwise"
        },
        {
          "name": "visualize_directory",
          "lineno": 793,
          "args": [
            "self",
            "input_dir",
            "output_dir"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Visualize matrices from all GNN files in a directory.\n\nArgs:\n    input_dir: Input directory containing GNN files\n    output_dir: Output directory for visualizations\n    \nReturns:\n    List of generated visualization file paths"
        },
        {
          "name": "_parse_gnn_content_for_parameters",
          "lineno": 855,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse GNN content to extract parameters for matrix visualization.\n\nArgs:\n    content: GNN file content\n    \nReturns:\n    Dictionary with parsed parameters"
        },
        {
          "name": "_parse_matrix_string",
          "lineno": 895,
          "args": [
            "self",
            "matrix_str"
          ],
          "returns": "List[List[float]]",
          "decorators": [],
          "doc": "Parse matrix string into list format.\n\nArgs:\n    matrix_str: Matrix data as string\n    \nReturns:\n    List representation of matrix"
        }
      ],
      "classes": [
        {
          "name": "MatrixVisualizer",
          "lineno": 39,
          "bases": [],
          "doc": "Handles matrix visualization for GNN models.\n\nThis class provides methods to extract matrix data from GNN parameters\nand generate various visualizations including heatmaps, statistics,\nand combined overviews. Specialized support for 3D tensors like\nPOMDP transition matrices (B matrix).",
          "methods": [
            {
              "name": "__init__",
              "lineno": 49,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the MatrixVisualizer."
            },
            {
              "name": "extract_matrix_data_from_parameters",
              "lineno": 53,
              "args": [
                "self",
                "parameters"
              ],
              "returns": "Dict[str, np.ndarray]",
              "decorators": [],
              "doc": "Extract matrix data from parameters section.\n\nArgs:\n    parameters: List of parameter dictionaries\n    \nReturns:\n    Dictionary mapping matrix names to numpy arrays"
            },
            {
              "name": "generate_matrix_heatmap",
              "lineno": 80,
              "args": [
                "self",
                "matrix_name",
                "matrix",
                "output_path",
                "title",
                "cmap"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Generate a heatmap visualization for a matrix.\n\nArgs:\n    matrix_name: Name of the matrix\n    matrix: Numpy array representing the matrix\n    output_path: Output file path\n    title: Optional title for the plot\n    cmap: Colormap to use\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "create_heatmap",
              "lineno": 137,
              "args": [
                "self",
                "matrix"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "generate_3d_tensor_visualization",
              "lineno": 146,
              "args": [
                "self",
                "tensor_name",
                "tensor",
                "output_path",
                "title",
                "tensor_type"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Generate specialized visualization for 3D tensors like POMDP transition matrices.\n\nArgs:\n    tensor_name: Name of the tensor (e.g., 'B')\n    tensor: 3D numpy array\n    output_path: Output file path\n    title: Optional title for the plot\n    tensor_type: Type of tensor ('transition', 'likelihood', etc.)\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "_generate_tensor_statistics",
              "lineno": 244,
              "args": [
                "self",
                "tensor",
                "tensor_name",
                "tensor_type"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate statistical summary for a 3D tensor.\n\nArgs:\n    tensor: 3D numpy array\n    tensor_name: Name of the tensor\n    tensor_type: Type of tensor\n    \nReturns:\n    Formatted statistics string"
            },
            {
              "name": "generate_pomdp_transition_analysis",
              "lineno": 291,
              "args": [
                "self",
                "tensor",
                "output_path"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Generate specialized analysis for POMDP transition matrices.\n\nArgs:\n    tensor: 3D numpy array representing transition matrix\n    output_path: Output file path\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "generate_matrix_analysis",
              "lineno": 459,
              "args": [
                "self",
                "parameters",
                "output_path"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Generate comprehensive matrix analysis from parameters.\n\nArgs:\n    parameters: List of parameter dictionaries from GNN\n    output_path: Path where to save the analysis image\n    \nReturns:\n    bool: True if analysis was generated successfully"
            },
            {
              "name": "generate_combined_matrix_overview",
              "lineno": 577,
              "args": [
                "self",
                "matrices",
                "output_path"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Generate a combined overview of all matrices.\n\nArgs:\n    matrices: Dictionary of matrix name to numpy array mappings\n    output_path: Output file path\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "generate_matrix_statistics",
              "lineno": 689,
              "args": [
                "self",
                "parameters",
                "output_path"
              ],
              "returns": "bool",
              "decorators": [],
              "doc": "Generate statistics about matrices in the model.\n\nArgs:\n    parameters: List of parameter dictionaries\n    output_path: Output file path\n    \nReturns:\n    True if successful, False otherwise"
            },
            {
              "name": "visualize_directory",
              "lineno": 793,
              "args": [
                "self",
                "input_dir",
                "output_dir"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Visualize matrices from all GNN files in a directory.\n\nArgs:\n    input_dir: Input directory containing GNN files\n    output_dir: Output directory for visualizations\n    \nReturns:\n    List of generated visualization file paths"
            },
            {
              "name": "_parse_gnn_content_for_parameters",
              "lineno": 855,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Parse GNN content to extract parameters for matrix visualization.\n\nArgs:\n    content: GNN file content\n    \nReturns:\n    Dictionary with parsed parameters"
            },
            {
              "name": "_parse_matrix_string",
              "lineno": 895,
              "args": [
                "self",
                "matrix_str"
              ],
              "returns": "List[List[float]]",
              "decorators": [],
              "doc": "Parse matrix string into list format.\n\nArgs:\n    matrix_str: Matrix data as string\n    \nReturns:\n    List representation of matrix"
            }
          ]
        }
      ]
    },
    {
      "file": "src/visualization/mcp.py",
      "module": "visualization.mcp",
      "functions": [
        {
          "name": "process_visualization_mcp",
          "lineno": 19,
          "args": [
            "target_directory",
            "output_directory",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Process visualization for GNN files. Exposed via MCP.\n\nArgs:\n    target_directory: Directory containing GNN files to process\n    output_directory: Directory to save results\n    verbose: Enable verbose output\n    \nReturns:\n    Dictionary with operation status and results."
        },
        {
          "name": "register_tools",
          "lineno": 51,
          "args": [
            "mcp_instance"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register visualization utility tools with the MCP."
        }
      ],
      "classes": []
    },
    {
      "file": "src/visualization/ontology_visualizer.py",
      "module": "visualization.ontology_visualizer",
      "functions": [
        {
          "name": "__init__",
          "lineno": 26,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the ontology visualizer."
        },
        {
          "name": "visualize_directory",
          "lineno": 43,
          "args": [
            "self",
            "input_dir",
            "output_dir"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Visualize ontology annotations from all GNN files in a directory.\n\nArgs:\n    input_dir: Directory containing GNN files\n    output_dir: Directory to save visualizations\n    \nReturns:\n    List of paths to saved visualization files"
        },
        {
          "name": "visualize_ontology",
          "lineno": 93,
          "args": [
            "self",
            "parsed_data",
            "output_dir"
          ],
          "returns": "Optional[str]",
          "decorators": [],
          "doc": "Generate visualization of the ontology annotations.\n\nArgs:\n    parsed_data: Parsed GNN model data\n    output_dir: Directory to save visualization\n    \nReturns:\n    Path to saved visualization file, or None if failed"
        },
        {
          "name": "_extract_ontology_mappings",
          "lineno": 122,
          "args": [
            "self",
            "ontology_content"
          ],
          "returns": "List[Tuple[str, str]]",
          "decorators": [],
          "doc": "Extract variable-concept mappings from ontology content.\n\nArgs:\n    ontology_content: Raw content of the ActInfOntologyAnnotation section\n    \nReturns:\n    List of (variable, concept) tuples"
        },
        {
          "name": "extract_ontology_mappings",
          "lineno": 159,
          "args": [
            "self",
            "ontology_content"
          ],
          "returns": "List[Tuple[str, str]]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "_create_ontology_table",
          "lineno": 162,
          "args": [
            "self",
            "mappings",
            "output_dir"
          ],
          "returns": "Optional[str]",
          "decorators": [],
          "doc": "Create a table visualization of ontology mappings.\n\nArgs:\n    mappings: List of (variable, concept) tuples\n    output_dir: Directory to save visualization\n    \nReturns:\n    Path to saved visualization file, or None if failed"
        },
        {
          "name": "extract_ontology_mappings",
          "lineno": 237,
          "args": [
            "self",
            "ontology_content"
          ],
          "returns": "List[Tuple[str, str]]",
          "decorators": [],
          "doc": ""
        },
        {
          "name": "create_ontology_table",
          "lineno": 240,
          "args": [
            "self",
            "mappings",
            "output_dir"
          ],
          "returns": "Optional[str]",
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "OntologyVisualizer",
          "lineno": 18,
          "bases": [],
          "doc": "A class for visualizing ontology annotations extracted from GNN models.\n\nThis visualizer provides methods to create table-based and other\nvisualizations of ontology mappings using real matplotlib functionality.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 26,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the ontology visualizer."
            },
            {
              "name": "visualize_directory",
              "lineno": 43,
              "args": [
                "self",
                "input_dir",
                "output_dir"
              ],
              "returns": "List[str]",
              "decorators": [],
              "doc": "Visualize ontology annotations from all GNN files in a directory.\n\nArgs:\n    input_dir: Directory containing GNN files\n    output_dir: Directory to save visualizations\n    \nReturns:\n    List of paths to saved visualization files"
            },
            {
              "name": "visualize_ontology",
              "lineno": 93,
              "args": [
                "self",
                "parsed_data",
                "output_dir"
              ],
              "returns": "Optional[str]",
              "decorators": [],
              "doc": "Generate visualization of the ontology annotations.\n\nArgs:\n    parsed_data: Parsed GNN model data\n    output_dir: Directory to save visualization\n    \nReturns:\n    Path to saved visualization file, or None if failed"
            },
            {
              "name": "_extract_ontology_mappings",
              "lineno": 122,
              "args": [
                "self",
                "ontology_content"
              ],
              "returns": "List[Tuple[str, str]]",
              "decorators": [],
              "doc": "Extract variable-concept mappings from ontology content.\n\nArgs:\n    ontology_content: Raw content of the ActInfOntologyAnnotation section\n    \nReturns:\n    List of (variable, concept) tuples"
            },
            {
              "name": "extract_ontology_mappings",
              "lineno": 159,
              "args": [
                "self",
                "ontology_content"
              ],
              "returns": "List[Tuple[str, str]]",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "_create_ontology_table",
              "lineno": 162,
              "args": [
                "self",
                "mappings",
                "output_dir"
              ],
              "returns": "Optional[str]",
              "decorators": [],
              "doc": "Create a table visualization of ontology mappings.\n\nArgs:\n    mappings: List of (variable, concept) tuples\n    output_dir: Directory to save visualization\n    \nReturns:\n    Path to saved visualization file, or None if failed"
            },
            {
              "name": "extract_ontology_mappings",
              "lineno": 237,
              "args": [
                "self",
                "ontology_content"
              ],
              "returns": "List[Tuple[str, str]]",
              "decorators": [],
              "doc": ""
            },
            {
              "name": "create_ontology_table",
              "lineno": 240,
              "args": [
                "self",
                "mappings",
                "output_dir"
              ],
              "returns": "Optional[str]",
              "decorators": [],
              "doc": ""
            }
          ]
        }
      ]
    },
    {
      "file": "src/visualization/parser.py",
      "module": "visualization.parser",
      "functions": [
        {
          "name": "__init__",
          "lineno": 21,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the GNN parser."
        },
        {
          "name": "parse_file",
          "lineno": 25,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse a GNN file and return the structured content.\n\nArgs:\n    file_path: Path to the GNN file to parse\n    \nReturns:\n    Dictionary containing parsed GNN sections"
        },
        {
          "name": "_parse_csv_format",
          "lineno": 44,
          "args": [
            "self",
            "file_path",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse GNN file in CSV format."
        },
        {
          "name": "_extract_gnn_csv_sections",
          "lineno": 74,
          "args": [
            "self",
            "content",
            "sections"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Extract sections from GNN CSV format, handling quoted multiline values."
        },
        {
          "name": "_parse_markdown_format",
          "lineno": 94,
          "args": [
            "self",
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse GNN file in Markdown format."
        },
        {
          "name": "_process_state_space",
          "lineno": 138,
          "args": [
            "self",
            "sections"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Process the StateSpaceBlock to extract variables and their dimensions."
        },
        {
          "name": "_process_connections",
          "lineno": 202,
          "args": [
            "self",
            "sections"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Process the Connections section to extract graph structure."
        },
        {
          "name": "extract_sections",
          "lineno": 239,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "Dict[str, str]",
          "decorators": [],
          "doc": "Extract all sections from a GNN file without detailed parsing.\n\nArgs:\n    file_path: Path to the GNN file\n    \nReturns:\n    Dictionary with section names as keys and their raw content as values"
        }
      ],
      "classes": [
        {
          "name": "GNNParser",
          "lineno": 18,
          "bases": [],
          "doc": "Parser for GNN files in various formats.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 21,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the GNN parser."
            },
            {
              "name": "parse_file",
              "lineno": 25,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Parse a GNN file and return the structured content.\n\nArgs:\n    file_path: Path to the GNN file to parse\n    \nReturns:\n    Dictionary containing parsed GNN sections"
            },
            {
              "name": "_parse_csv_format",
              "lineno": 44,
              "args": [
                "self",
                "file_path",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Parse GNN file in CSV format."
            },
            {
              "name": "_extract_gnn_csv_sections",
              "lineno": 74,
              "args": [
                "self",
                "content",
                "sections"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Extract sections from GNN CSV format, handling quoted multiline values."
            },
            {
              "name": "_parse_markdown_format",
              "lineno": 94,
              "args": [
                "self",
                "content"
              ],
              "returns": "Dict[str, Any]",
              "decorators": [],
              "doc": "Parse GNN file in Markdown format."
            },
            {
              "name": "_process_state_space",
              "lineno": 138,
              "args": [
                "self",
                "sections"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Process the StateSpaceBlock to extract variables and their dimensions."
            },
            {
              "name": "_process_connections",
              "lineno": 202,
              "args": [
                "self",
                "sections"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Process the Connections section to extract graph structure."
            },
            {
              "name": "extract_sections",
              "lineno": 239,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "Dict[str, str]",
              "decorators": [],
              "doc": "Extract all sections from a GNN file without detailed parsing.\n\nArgs:\n    file_path: Path to the GNN file\n    \nReturns:\n    Dictionary with section names as keys and their raw content as values"
            }
          ]
        }
      ]
    },
    {
      "file": "src/visualization/processor.py",
      "module": "visualization.processor",
      "functions": [
        {
          "name": "process_visualization",
          "lineno": 61,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process comprehensive visualization for GNN files.\n\nArgs:\n    target_dir: Directory containing GNN files to process\n    output_dir: Directory to save results\n    verbose: Enable verbose output\n    **kwargs: Additional arguments\n    \nReturns:\n    True if processing successful, False otherwise"
        },
        {
          "name": "process_single_gnn_file",
          "lineno": 134,
          "args": [
            "gnn_file",
            "results_dir",
            "verbose"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Process visualization for a single GNN file.\n\nArgs:\n    gnn_file: Path to the GNN file\n    results_dir: Directory to save results\n    verbose: Enable verbose output\n    \nReturns:\n    List of generated visualization file paths"
        },
        {
          "name": "parse_gnn_content",
          "lineno": 179,
          "args": [
            "content"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Parse GNN content into structured data for visualization.\n\nArgs:\n    content: Raw GNN file content\n    \nReturns:\n    Dictionary with parsed GNN data"
        },
        {
          "name": "parse_matrix_data",
          "lineno": 254,
          "args": [
            "matrix_str"
          ],
          "returns": "np.ndarray",
          "decorators": [],
          "doc": "Parse matrix data from string representation.\n\nArgs:\n    matrix_str: String representation of matrix\n    \nReturns:\n    Numpy array of matrix data"
        },
        {
          "name": "generate_matrix_visualizations",
          "lineno": 290,
          "args": [
            "parsed_data",
            "output_dir",
            "model_name"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Generate matrix visualizations.\n\nArgs:\n    parsed_data: Parsed GNN data\n    output_dir: Output directory\n    model_name: Name of the model\n    \nReturns:\n    List of generated visualization file paths"
        },
        {
          "name": "generate_network_visualizations",
          "lineno": 355,
          "args": [
            "parsed_data",
            "output_dir",
            "model_name"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Generate network visualizations.\n\nArgs:\n    parsed_data: Parsed GNN data\n    output_dir: Output directory\n    model_name: Name of the model\n    \nReturns:\n    List of generated visualization file paths"
        },
        {
          "name": "generate_combined_analysis",
          "lineno": 424,
          "args": [
            "parsed_data",
            "output_dir",
            "model_name"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Generate combined analysis visualizations.\n\nArgs:\n    parsed_data: Parsed GNN data\n    output_dir: Output directory\n    model_name: Name of the model\n    \nReturns:\n    List of generated visualization file paths"
        },
        {
          "name": "generate_combined_visualizations",
          "lineno": 510,
          "args": [
            "gnn_files",
            "results_dir",
            "verbose"
          ],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Generate combined visualizations across multiple GNN files.\n\nArgs:\n    gnn_files: List of GNN file paths\n    results_dir: Results directory\n    verbose: Enable verbose output\n    \nReturns:\n    List of generated visualization file paths"
        },
        {
          "name": "log_step_start",
          "lineno": 55,
          "args": [
            "logger",
            "msg"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_success",
          "lineno": 56,
          "args": [
            "logger",
            "msg"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_error",
          "lineno": 57,
          "args": [
            "logger",
            "msg"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_warning",
          "lineno": 58,
          "args": [
            "logger",
            "msg"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": []
    },
    {
      "file": "src/visualization/run_visualization.py",
      "module": "visualization.run_visualization",
      "functions": [
        {
          "name": "main",
          "lineno": 22,
          "args": [],
          "returns": null,
          "decorators": [],
          "doc": "Run the visualization on GNN examples."
        }
      ],
      "classes": []
    },
    {
      "file": "src/visualization/visualizer.py",
      "module": "visualization.visualizer",
      "functions": [
        {
          "name": "generate_graph_visualization",
          "lineno": 639,
          "args": [
            "gnn_data",
            "output_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate a graph visualization from GNN data.\n\nArgs:\n    gnn_data: Parsed GNN data dictionary\n    output_path: Path where the visualization should be saved\n\nReturns:\n    True if successful, False otherwise"
        },
        {
          "name": "generate_matrix_visualization",
          "lineno": 659,
          "args": [
            "gnn_data",
            "output_path"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate matrix visualizations from GNN data.\n\nArgs:\n    gnn_data: Parsed GNN data dictionary\n    output_path: Path where the visualization should be saved\n\nReturns:\n    True if successful, False otherwise"
        },
        {
          "name": "create_visualization_report",
          "lineno": 684,
          "args": [
            "gnn_file_path",
            "output_dir"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Create a comprehensive visualization report for a GNN file.\n\nArgs:\n    gnn_file_path: Path to the GNN file\n    output_dir: Output directory for visualizations\n\nReturns:\n    Path to the generated report"
        },
        {
          "name": "visualize_gnn_model",
          "lineno": 704,
          "args": [
            "gnn_content",
            "model_name",
            "output_dir"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Visualize a GNN model from content string.\n\nArgs:\n    gnn_content: GNN model content as string\n    model_name: Name of the model\n    output_dir: Output directory for visualizations\n\nReturns:\n    Dictionary with visualization result information"
        },
        {
          "name": "generate_visualizations",
          "lineno": 748,
          "args": [
            "logger",
            "target_dir",
            "output_dir",
            "recursive",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate visualizations for GNN models.\n\nArgs:\n    target_dir: Directory containing GNN files to visualize\n    output_dir: Output directory for results\n    logger: Logger instance for this step\n    recursive: Whether to process files recursively\n    verbose: Whether to enable verbose logging\n    **kwargs: Additional visualization options\n    \nReturns:\n    True if visualization succeeded, False otherwise"
        },
        {
          "name": "__init__",
          "lineno": 73,
          "args": [
            "self",
            "output_dir",
            "project_root"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the GNN visualizer.\n\nArgs:\n    output_dir: Directory where output visualizations will be saved.\n                If None, creates a timestamped directory in the current working directory.\n    project_root: Optional path to the project root for making file paths relative."
        },
        {
          "name": "visualize_file",
          "lineno": 125,
          "args": [
            "self",
            "file_path"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate visualizations for a GNN file.\n\nArgs:\n    file_path: Path to the GNN file to visualize\n    \nReturns:\n    Path to the directory containing generated visualizations"
        },
        {
          "name": "_process_state_space_and_visualize",
          "lineno": 226,
          "args": [
            "self",
            "parsed_data",
            "output_dir"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Process state space and generate visualization."
        },
        {
          "name": "_process_connections_and_visualize",
          "lineno": 239,
          "args": [
            "self",
            "parsed_data",
            "output_dir"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Process connections and generate visualization."
        },
        {
          "name": "visualize_directory",
          "lineno": 252,
          "args": [
            "self",
            "dir_path"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate visualizations for all GNN files in a directory.\n\nArgs:\n    dir_path: Path to directory containing GNN files\n    \nReturns:\n    Path to the directory containing all generated visualizations"
        },
        {
          "name": "_create_basic_text_visualization",
          "lineno": 273,
          "args": [
            "self",
            "parsed_data",
            "file_path",
            "output_dir"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Create a simple text-based visualization of the file."
        },
        {
          "name": "_save_model_metadata",
          "lineno": 305,
          "args": [
            "self",
            "parsed_data",
            "output_dir"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Save model metadata as JSON for reference."
        },
        {
          "name": "_visualize_state_space",
          "lineno": 333,
          "args": [
            "self",
            "parsed_data",
            "output_dir"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Generate visualization of the state space variables."
        },
        {
          "name": "_visualize_connections",
          "lineno": 382,
          "args": [
            "self",
            "parsed_data",
            "output_dir"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Generate visualization of the connections/edges in the model."
        },
        {
          "name": "_visualize_combined",
          "lineno": 462,
          "args": [
            "self",
            "parsed_data",
            "output_dir"
          ],
          "returns": "None",
          "decorators": [],
          "doc": "Generate a combined visualization of the model."
        },
        {
          "name": "_extract_model_name",
          "lineno": 572,
          "args": [
            "self",
            "parsed_data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Extract a clean model name from the parsed data."
        },
        {
          "name": "_extract_parameters_from_parsed_data",
          "lineno": 579,
          "args": [
            "self",
            "parsed_data"
          ],
          "returns": "List[Dict]",
          "decorators": [],
          "doc": "Extract parameters from parsed data for matrix visualization.\n\nArgs:\n    parsed_data: Parsed GNN data\n    \nReturns:\n    List of parameter dictionaries"
        },
        {
          "name": "_parse_matrix_string",
          "lineno": 614,
          "args": [
            "self",
            "matrix_str"
          ],
          "returns": "List[List[float]]",
          "decorators": [],
          "doc": "Parse matrix string into list format.\n\nArgs:\n    matrix_str: Matrix data as string\n    \nReturns:\n    List representation of matrix"
        },
        {
          "name": "log_step_start",
          "lineno": 775,
          "args": [
            "logger",
            "msg"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_success",
          "lineno": 776,
          "args": [
            "logger",
            "msg"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_warning",
          "lineno": 777,
          "args": [
            "logger",
            "msg"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "log_step_error",
          "lineno": 778,
          "args": [
            "logger",
            "msg"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        },
        {
          "name": "get_output_dir_for_script",
          "lineno": 779,
          "args": [
            "script",
            "output_dir"
          ],
          "returns": null,
          "decorators": [],
          "doc": ""
        }
      ],
      "classes": [
        {
          "name": "GNNVisualizer",
          "lineno": 64,
          "bases": [],
          "doc": "Visualizer for GNN models.\n\nThis class provides methods to visualize GNN models from parsed GNN files.\nIt generates various visualizations of the model's state space, connections,\nand other properties.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 73,
              "args": [
                "self",
                "output_dir",
                "project_root"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the GNN visualizer.\n\nArgs:\n    output_dir: Directory where output visualizations will be saved.\n                If None, creates a timestamped directory in the current working directory.\n    project_root: Optional path to the project root for making file paths relative."
            },
            {
              "name": "visualize_file",
              "lineno": 125,
              "args": [
                "self",
                "file_path"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate visualizations for a GNN file.\n\nArgs:\n    file_path: Path to the GNN file to visualize\n    \nReturns:\n    Path to the directory containing generated visualizations"
            },
            {
              "name": "_process_state_space_and_visualize",
              "lineno": 226,
              "args": [
                "self",
                "parsed_data",
                "output_dir"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Process state space and generate visualization."
            },
            {
              "name": "_process_connections_and_visualize",
              "lineno": 239,
              "args": [
                "self",
                "parsed_data",
                "output_dir"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Process connections and generate visualization."
            },
            {
              "name": "visualize_directory",
              "lineno": 252,
              "args": [
                "self",
                "dir_path"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate visualizations for all GNN files in a directory.\n\nArgs:\n    dir_path: Path to directory containing GNN files\n    \nReturns:\n    Path to the directory containing all generated visualizations"
            },
            {
              "name": "_create_basic_text_visualization",
              "lineno": 273,
              "args": [
                "self",
                "parsed_data",
                "file_path",
                "output_dir"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Create a simple text-based visualization of the file."
            },
            {
              "name": "_save_model_metadata",
              "lineno": 305,
              "args": [
                "self",
                "parsed_data",
                "output_dir"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Save model metadata as JSON for reference."
            },
            {
              "name": "_visualize_state_space",
              "lineno": 333,
              "args": [
                "self",
                "parsed_data",
                "output_dir"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Generate visualization of the state space variables."
            },
            {
              "name": "_visualize_connections",
              "lineno": 382,
              "args": [
                "self",
                "parsed_data",
                "output_dir"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Generate visualization of the connections/edges in the model."
            },
            {
              "name": "_visualize_combined",
              "lineno": 462,
              "args": [
                "self",
                "parsed_data",
                "output_dir"
              ],
              "returns": "None",
              "decorators": [],
              "doc": "Generate a combined visualization of the model."
            },
            {
              "name": "_extract_model_name",
              "lineno": 572,
              "args": [
                "self",
                "parsed_data"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Extract a clean model name from the parsed data."
            },
            {
              "name": "_extract_parameters_from_parsed_data",
              "lineno": 579,
              "args": [
                "self",
                "parsed_data"
              ],
              "returns": "List[Dict]",
              "decorators": [],
              "doc": "Extract parameters from parsed data for matrix visualization.\n\nArgs:\n    parsed_data: Parsed GNN data\n    \nReturns:\n    List of parameter dictionaries"
            },
            {
              "name": "_parse_matrix_string",
              "lineno": 614,
              "args": [
                "self",
                "matrix_str"
              ],
              "returns": "List[List[float]]",
              "decorators": [],
              "doc": "Parse matrix string into list format.\n\nArgs:\n    matrix_str: Matrix data as string\n    \nReturns:\n    List representation of matrix"
            }
          ]
        }
      ]
    },
    {
      "file": "src/website/__init__.py",
      "module": "website.__init__",
      "functions": [],
      "classes": []
    },
    {
      "file": "src/website/generator.py",
      "module": "website.generator",
      "functions": [
        {
          "name": "generate_website",
          "lineno": 252,
          "args": [
            "logger",
            "input_dir",
            "output_dir"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Generate a website from pipeline artifacts."
        },
        {
          "name": "__init__",
          "lineno": 16,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the website generator."
        },
        {
          "name": "generate_website",
          "lineno": 21,
          "args": [
            "self",
            "website_data"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Generate a complete website from the provided data."
        },
        {
          "name": "create_pages",
          "lineno": 59,
          "args": [
            "self",
            "output_dir",
            "data"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Create individual website pages."
        },
        {
          "name": "_generate_index_page",
          "lineno": 96,
          "args": [
            "self",
            "data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate the main index page."
        },
        {
          "name": "_generate_analysis_page",
          "lineno": 141,
          "args": [
            "self",
            "data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate the analysis results page."
        },
        {
          "name": "_generate_visualization_page",
          "lineno": 174,
          "args": [
            "self",
            "data"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Generate the visualization page."
        },
        {
          "name": "_format_analysis_results",
          "lineno": 202,
          "args": [
            "self",
            "results"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Format analysis results for HTML."
        },
        {
          "name": "_format_complexity_results",
          "lineno": 219,
          "args": [
            "self",
            "results"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Format complexity results for HTML."
        },
        {
          "name": "_format_visualization_results",
          "lineno": 236,
          "args": [
            "self",
            "results"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Format visualization results for HTML."
        }
      ],
      "classes": [
        {
          "name": "WebsiteGenerator",
          "lineno": 13,
          "bases": [],
          "doc": "Generates static HTML websites from pipeline artifacts.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 16,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the website generator."
            },
            {
              "name": "generate_website",
              "lineno": 21,
              "args": [
                "self",
                "website_data"
              ],
              "returns": "dict",
              "decorators": [],
              "doc": "Generate a complete website from the provided data."
            },
            {
              "name": "create_pages",
              "lineno": 59,
              "args": [
                "self",
                "output_dir",
                "data"
              ],
              "returns": "dict",
              "decorators": [],
              "doc": "Create individual website pages."
            },
            {
              "name": "_generate_index_page",
              "lineno": 96,
              "args": [
                "self",
                "data"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate the main index page."
            },
            {
              "name": "_generate_analysis_page",
              "lineno": 141,
              "args": [
                "self",
                "data"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate the analysis results page."
            },
            {
              "name": "_generate_visualization_page",
              "lineno": 174,
              "args": [
                "self",
                "data"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Generate the visualization page."
            },
            {
              "name": "_format_analysis_results",
              "lineno": 202,
              "args": [
                "self",
                "results"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Format analysis results for HTML."
            },
            {
              "name": "_format_complexity_results",
              "lineno": 219,
              "args": [
                "self",
                "results"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Format complexity results for HTML."
            },
            {
              "name": "_format_visualization_results",
              "lineno": 236,
              "args": [
                "self",
                "results"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Format visualization results for HTML."
            }
          ]
        }
      ]
    },
    {
      "file": "src/website/mcp.py",
      "module": "website.mcp",
      "functions": [
        {
          "name": "process_website_mcp",
          "lineno": 18,
          "args": [
            "target_directory",
            "output_directory",
            "verbose"
          ],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Process website generation for pipeline artifacts. Exposed via MCP.\n\nArgs:\n    target_directory: Directory containing GNN files to process\n    output_directory: Directory to save results\n    verbose: Enable verbose output\n    \nReturns:\n    Dictionary with operation status and results."
        },
        {
          "name": "register_tools",
          "lineno": 46,
          "args": [
            "mcp_instance"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Register website utility tools with the MCP."
        }
      ],
      "classes": []
    },
    {
      "file": "src/website/renderer.py",
      "module": "website.renderer",
      "functions": [
        {
          "name": "process_website",
          "lineno": 107,
          "args": [
            "target_dir",
            "output_dir",
            "verbose"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Process website generation from pipeline artifacts.\n\nArgs:\n    target_dir: Directory containing pipeline artifacts\n    output_dir: Directory to save website\n    verbose: Enable verbose output\n    **kwargs: Additional arguments\n    \nReturns:\n    True if processing successful, False otherwise"
        },
        {
          "name": "generate_html_report",
          "lineno": 151,
          "args": [
            "content",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Generate an HTML report from content."
        },
        {
          "name": "embed_image",
          "lineno": 165,
          "args": [
            "image_path",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Embed an image into an HTML file."
        },
        {
          "name": "embed_markdown_file",
          "lineno": 197,
          "args": [
            "md_path",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Embed a markdown file into an HTML file."
        },
        {
          "name": "embed_text_file",
          "lineno": 237,
          "args": [
            "text_path",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Embed a text file into an HTML file."
        },
        {
          "name": "embed_json_file",
          "lineno": 273,
          "args": [
            "json_path",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Embed a JSON file into an HTML file."
        },
        {
          "name": "embed_html_file",
          "lineno": 312,
          "args": [
            "html_path",
            "output_file"
          ],
          "returns": "bool",
          "decorators": [],
          "doc": "Embed an HTML file into another HTML file."
        },
        {
          "name": "get_module_info",
          "lineno": 350,
          "args": [],
          "returns": "Dict[str, Any]",
          "decorators": [],
          "doc": "Get information about the website module."
        },
        {
          "name": "get_supported_file_types",
          "lineno": 372,
          "args": [],
          "returns": "List[str]",
          "decorators": [],
          "doc": "Get supported file types for embedding as a flat list for tests."
        },
        {
          "name": "validate_website_config",
          "lineno": 382,
          "args": [
            "config"
          ],
          "returns": "bool | Dict[str, Any]",
          "decorators": [],
          "doc": "Validate website configuration. Accepts dict or dummy string for tests."
        },
        {
          "name": "__init__",
          "lineno": 16,
          "args": [
            "self"
          ],
          "returns": null,
          "decorators": [],
          "doc": "Initialize the website renderer."
        },
        {
          "name": "render_html",
          "lineno": 20,
          "args": [
            "self",
            "content"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Render content as HTML with default styling."
        },
        {
          "name": "render_css",
          "lineno": 39,
          "args": [
            "self",
            "styles"
          ],
          "returns": "str",
          "decorators": [],
          "doc": "Render CSS styles as a string."
        },
        {
          "name": "_get_default_styles",
          "lineno": 49,
          "args": [
            "self"
          ],
          "returns": "dict",
          "decorators": [],
          "doc": "Get default CSS styles."
        }
      ],
      "classes": [
        {
          "name": "WebsiteRenderer",
          "lineno": 13,
          "bases": [],
          "doc": "Renders HTML content and manages website assets.",
          "methods": [
            {
              "name": "__init__",
              "lineno": 16,
              "args": [
                "self"
              ],
              "returns": null,
              "decorators": [],
              "doc": "Initialize the website renderer."
            },
            {
              "name": "render_html",
              "lineno": 20,
              "args": [
                "self",
                "content"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Render content as HTML with default styling."
            },
            {
              "name": "render_css",
              "lineno": 39,
              "args": [
                "self",
                "styles"
              ],
              "returns": "str",
              "decorators": [],
              "doc": "Render CSS styles as a string."
            },
            {
              "name": "_get_default_styles",
              "lineno": 49,
              "args": [
                "self"
              ],
              "returns": "dict",
              "decorators": [],
              "doc": "Get default CSS styles."
            }
          ]
        }
      ]
    }
  ]
}