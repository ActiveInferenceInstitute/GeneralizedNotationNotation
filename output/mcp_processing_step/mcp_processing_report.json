{
  "timestamp": "2025-07-22T09:12:27.789951",
  "target_directory": "/Users/4d/Documents/GitHub/GeneralizedNotationNotation/input/gnn_files",
  "output_directory": "/Users/4d/Documents/GitHub/GeneralizedNotationNotation/output/mcp_processing_step",
  "integration_check": {
    "export": {
      "exists": true,
      "has_mcp_file": true,
      "has_init": true,
      "path": "/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/export",
      "has_register_tools": true,
      "register_tools_type": "function"
    },
    "gnn": {
      "exists": true,
      "has_mcp_file": true,
      "has_init": true,
      "path": "/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/gnn",
      "has_register_tools": true,
      "register_tools_type": "function"
    },
    "type_checker": {
      "exists": true,
      "has_mcp_file": true,
      "has_init": true,
      "path": "/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/type_checker",
      "has_register_tools": true,
      "register_tools_type": "function"
    },
    "ontology": {
      "exists": true,
      "has_mcp_file": true,
      "has_init": true,
      "path": "/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/ontology",
      "has_register_tools": false,
      "register_tools_type": "NoneType"
    },
    "setup": {
      "exists": true,
      "has_mcp_file": true,
      "has_init": true,
      "path": "/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/setup",
      "import_error": "attempted relative import with no known parent package",
      "has_register_tools": false
    },
    "tests": {
      "exists": true,
      "has_mcp_file": true,
      "has_init": true,
      "path": "/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/tests",
      "has_register_tools": true,
      "register_tools_type": "function"
    },
    "visualization": {
      "exists": true,
      "has_mcp_file": true,
      "has_init": true,
      "path": "/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/visualization",
      "import_error": "attempted relative import with no known parent package",
      "has_register_tools": false
    },
    "llm": {
      "exists": true,
      "has_mcp_file": true,
      "has_init": true,
      "path": "/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/llm",
      "has_register_tools": true,
      "register_tools_type": "function"
    },
    "render": {
      "exists": true,
      "has_mcp_file": true,
      "has_init": true,
      "path": "/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/render",
      "import_error": "attempted relative import with no known parent package",
      "has_register_tools": false
    },
    "execute": {
      "exists": true,
      "has_mcp_file": true,
      "has_init": true,
      "path": "/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/execute",
      "has_register_tools": true,
      "register_tools_type": "function"
    },
    "website": {
      "exists": true,
      "has_mcp_file": true,
      "has_init": true,
      "path": "/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/website",
      "import_error": "attempted relative import with no known parent package",
      "has_register_tools": false
    },
    "sapf": {
      "exists": true,
      "has_mcp_file": true,
      "has_init": true,
      "path": "/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/sapf",
      "import_error": "attempted relative import with no known parent package",
      "has_register_tools": false
    },
    "pipeline": {
      "exists": true,
      "has_mcp_file": true,
      "has_init": true,
      "path": "/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/pipeline",
      "has_register_tools": true,
      "register_tools_type": "function"
    },
    "utils": {
      "exists": true,
      "has_mcp_file": true,
      "has_init": true,
      "path": "/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils",
      "has_register_tools": true,
      "register_tools_type": "function"
    }
  },
  "functionality_test": {
    "error": "MCP functionality testing is now handled by mcp.processor.process_mcp_operations"
  },
  "mcp_tools_available": true
}