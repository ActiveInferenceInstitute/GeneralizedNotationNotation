{
    "file_path": "/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples/rxinfer_hidden_markov_model.md",
    "name": "RxInfer Hidden Markov Model v1",
    "raw_sections": {
        "GNNSection": "RxInferHiddenMarkovModel",
        "GNNVersionAndFlags": "GNN v1",
        "ModelName": "RxInfer Hidden Markov Model v1",
        "ModelAnnotation": "This model represents a Hidden Markov Model with 3 hidden states and 3 observation categories for RxInfer.jl.\n- Hidden states: \"Bedroom\" (state 1), \"Living room\" (state 2), \"Bathroom\" (state 3)\n- Observations: 3 categorical outcomes corresponding to noisy observations of the true state\n- Transition matrix A: Controls state-to-state transitions over time\n- Observation matrix B: Controls emission probabilities from hidden states to observations\n- The model uses Dirichlet priors on both A and B matrices for Bayesian learning\n- Initial state distribution is uniform over the 3 states",
        "StateSpaceBlock": "# Model dimensions\nT[1,type=int]                    # Time horizon / number of time steps\nn_states[1,type=int]             # Number of hidden states (3)\nn_obs[1,type=int]                # Number of observation categories (3)\n\n# Transition and observation matrices\nA[3,3,type=float]                # State transition matrix P(s_t|s_{t-1})\nB[3,3,type=float]                # Observation/emission matrix P(x_t|s_t)\n\n# Dirichlet hyperparameters for priors\nA_prior[3,3,type=float]          # Dirichlet hyperparameters for transition matrix\nB_prior[3,3,type=float]          # Dirichlet hyperparameters for observation matrix\n\n# State and observation sequences\ns_0[3,type=float]                # Initial state distribution\ns[3,T,type=float]                # Hidden state sequence (categorical distributions)\nx[3,T,type=float]                # Observation sequence (categorical distributions)\n\n# Posterior marginals (inference results)\nq_A[3,3,type=float]              # Posterior marginal for transition matrix\nq_B[3,3,type=float]              # Posterior marginal for observation matrix\nq_s[3,T,type=float]              # Posterior marginals for hidden states\n\n# Inference parameters\nn_iterations[1,type=int]         # Number of variational inference iterations\nfree_energy[n_iterations,type=float] # Free energy trace during inference\n\n# Data generation parameters (for simulation)\nseed[1,type=int]                 # Random seed for reproducibility\nn_samples[1,type=int]            # Number of data samples to generate",
        "Connections": "# Prior specifications\nA_prior > A\nB_prior > B\ns_0 > s\n\n# Generative model structure\ns_0 > s[1]                       # Initial state influences first hidden state\nA > s                            # Transition matrix influences state sequence  \nB > x                            # Observation matrix influences observations\ns > x                            # Hidden states generate observations\n\n# Temporal dependencies\ns[t-1] > s[t]                    # Previous state influences current state (for t > 1)\ns[t] > x[t]                      # Current state generates current observation\n\n# Inference connections\n(A, B, s_0, x) > (q_A, q_B, q_s) # Inference from observations to posteriors\n(q_A, q_B, q_s) > free_energy    # Posteriors contribute to free energy calculation",
        "InitialParameterization": "# Model dimensions\nT=100\nn_states=3\nn_obs=3\nn_iterations=20\nn_samples=100\nseed=42\n\n# Dirichlet hyperparameters for transition matrix A\n# Encouraging diagonal structure (agents tend to stay in same room)\nA_prior={\n  (10.0, 1.0, 1.0),  # From state 0 (Bedroom): strong preference to stay\n  (1.0, 10.0, 1.0),  # From state 1 (Living room): strong preference to stay  \n  (1.0, 1.0, 10.0)   # From state 2 (Bathroom): strong preference to stay\n}\n\n# Dirichlet hyperparameters for observation matrix B  \n# Diagonal structure with some noise (observations mostly match true state)\nB_prior={\n  (1.0, 1.0, 1.0),   # Uniform prior for observations from each state\n  (1.0, 1.0, 1.0),   \n  (1.0, 1.0, 1.0)    \n}\n\n# True data generation parameters (from the Julia example)\n# Ground truth transition matrix for data generation\nA_true={\n  (0.9, 0.05, 0.0),   # From Bedroom: 90% stay, 5% to Living room, 0% to Bathroom\n  (0.1, 0.9, 0.1),    # From Living room: 10% to Bedroom, 90% stay, 10% to Bathroom\n  (0.0, 0.05, 0.9)    # From Bathroom: 0% to Bedroom, 5% to Living room, 90% stay\n}\n\n# Ground truth observation matrix for data generation  \nB_true={\n  (0.9, 0.05, 0.05),  # From Bedroom: 90% correct obs, 5% each wrong obs\n  (0.05, 0.9, 0.05),  # From Living room: 90% correct obs, 5% each wrong obs\n  (0.05, 0.05, 0.9)   # From Bathroom: 90% correct obs, 5% each wrong obs\n}\n\n# Initial state distribution (starts in Bedroom with certainty)\ns_0={(1.0, 0.0, 0.0)}\n\n# Expected posterior results (approximate, from Julia example output)\n# These would be learned through inference\nq_A_expected={\n  (0.9, 0.05, 0.0),   # Learned transition probabilities\n  (0.1, 0.9, 0.1),    \n  (0.0, 0.05, 0.9)    \n}\n\nq_B_expected={\n  (0.9, 0.05, 0.05),  # Learned observation probabilities\n  (0.05, 0.9, 0.05),  \n  (0.05, 0.05, 0.9)   \n}",
        "Equations": "# Hidden Markov Model generative equations:\n# s_0 ~ Categorical([1/3, 1/3, 1/3])  # Initial state (uniform in model, deterministic in data)\n# A ~ DirichletCollection(A_prior)     # Prior on transition matrix\n# B ~ DirichletCollection(B_prior)     # Prior on observation matrix\n# \n# For t = 1, ..., T:\n#   s[t] ~ DiscreteTransition(s[t-1], A)  # State transition\n#   x[t] ~ DiscreteTransition(s[t], B)    # Observation emission\n#\n# Inference objective:\n# Minimize: F = E_q[log q(s,A,B) - log p(x,s,A,B)]\n# where q(s,A,B) is the variational posterior approximation",
        "Time": "Dynamic\nDiscreteTime=t\nModelTimeHorizon=T",
        "ActInfOntologyAnnotation": "A=StateTransitionMatrix\nB=ObservationMatrix\nA_prior=TransitionMatrixPrior\nB_prior=ObservationMatrixPrior\ns_0=InitialStateDistribution\ns=HiddenStateSequence\nx=ObservationSequence\nq_A=PosteriorTransitionMatrix\nq_B=PosteriorObservationMatrix  \nq_s=PosteriorHiddenStates\nfree_energy=VariationalFreeEnergy\nT=TimeHorizon\nn_states=NumberOfHiddenStates\nn_obs=NumberOfObservationCategories\nn_iterations=InferenceIterations",
        "ModelParameters": "n_states=3              # Hidden states: Bedroom, Living room, Bathroom\nn_obs=3                 # Observation categories: 3 discrete outcomes\nn_iterations=20         # Variational inference iterations\nmodel_type=\"HMM\"        # Hidden Markov Model\ninference_method=\"variational_message_passing\"\nbackend=\"RxInfer.jl\"",
        "Footer": "RxInfer Hidden Markov Model v1 - GNN Representation",
        "Signature": "Creator: AI Assistant for GNN\nDate: 2024-12-19\nStatus: Example for RxInfer.jl Hidden Markov Model\nSource: RxInferExamples.jl/Basic Examples/Hidden Markov Model"
    },
    "statespaceblock": [
        {
            "id": "T",
            "dimensions": "1,type=int",
            "original_id": "T"
        },
        {
            "id": "n_states",
            "dimensions": "1,type=int",
            "original_id": "n_states"
        },
        {
            "id": "n_obs",
            "dimensions": "1,type=int",
            "original_id": "n_obs"
        },
        {
            "id": "A",
            "dimensions": "3,3,type=float",
            "original_id": "A"
        },
        {
            "id": "B",
            "dimensions": "3,3,type=float",
            "original_id": "B"
        },
        {
            "id": "A_prior",
            "dimensions": "3,3,type=float",
            "original_id": "A_prior"
        },
        {
            "id": "B_prior",
            "dimensions": "3,3,type=float",
            "original_id": "B_prior"
        },
        {
            "id": "s_0",
            "dimensions": "3,type=float",
            "original_id": "s_0"
        },
        {
            "id": "s",
            "dimensions": "3,T,type=float",
            "original_id": "s"
        },
        {
            "id": "x",
            "dimensions": "3,T,type=float",
            "original_id": "x"
        },
        {
            "id": "q_A",
            "dimensions": "3,3,type=float",
            "original_id": "q_A"
        },
        {
            "id": "q_B",
            "dimensions": "3,3,type=float",
            "original_id": "q_B"
        },
        {
            "id": "q_s",
            "dimensions": "3,T,type=float",
            "original_id": "q_s"
        },
        {
            "id": "n_iterations",
            "dimensions": "1,type=int",
            "original_id": "n_iterations"
        },
        {
            "id": "free_energy",
            "dimensions": "n_iterations,type=float",
            "original_id": "free_energy"
        },
        {
            "id": "seed",
            "dimensions": "1,type=int",
            "original_id": "seed"
        },
        {
            "id": "n_samples",
            "dimensions": "1,type=int",
            "original_id": "n_samples"
        }
    ],
    "connections": [
        {
            "sources": [
                "A_prior"
            ],
            "operator": ">",
            "targets": [
                "A"
            ],
            "attributes": {}
        },
        {
            "sources": [
                "B_prior"
            ],
            "operator": ">",
            "targets": [
                "B"
            ],
            "attributes": {}
        },
        {
            "sources": [
                "s_0"
            ],
            "operator": ">",
            "targets": [
                "s"
            ],
            "attributes": {}
        },
        {
            "sources": [
                "s_0"
            ],
            "operator": ">",
            "targets": [
                "s[1]"
            ],
            "attributes": {}
        },
        {
            "sources": [
                "A"
            ],
            "operator": ">",
            "targets": [
                "s"
            ],
            "attributes": {}
        },
        {
            "sources": [
                "B"
            ],
            "operator": ">",
            "targets": [
                "x"
            ],
            "attributes": {}
        },
        {
            "sources": [
                "s"
            ],
            "operator": ">",
            "targets": [
                "x"
            ],
            "attributes": {}
        },
        {
            "sources": [
                "s[t"
            ],
            "operator": "-",
            "targets": [
                "1] > s[t]"
            ],
            "attributes": {}
        },
        {
            "sources": [
                "s[t]"
            ],
            "operator": ">",
            "targets": [
                "x[t]"
            ],
            "attributes": {}
        },
        {
            "sources": [
                "A",
                "B",
                "s_0",
                "x"
            ],
            "operator": ">",
            "targets": [
                "q_A",
                "q_B",
                "q_s"
            ],
            "attributes": {}
        },
        {
            "sources": [
                "q_A",
                "q_B",
                "q_s"
            ],
            "operator": ">",
            "targets": [
                "free_energy"
            ],
            "attributes": {}
        }
    ],
    "initialparameterization": {
        "T": 100,
        "n_states": 3,
        "n_obs": 3,
        "n_iterations": 20,
        "n_samples": 100,
        "seed": 42,
        "A_prior": [
            [
                10.0,
                1.0,
                1.0
            ],
            [
                1.0,
                10.0,
                1.0
            ],
            [
                1.0,
                1.0,
                10.0
            ]
        ],
        "B_prior": [
            [
                1.0,
                1.0,
                1.0
            ],
            [
                1.0,
                1.0,
                1.0
            ],
            [
                1.0,
                1.0,
                1.0
            ]
        ],
        "A_true": [
            [
                0.9,
                0.05,
                0.0
            ],
            [
                0.1,
                0.9,
                0.1
            ],
            [
                0.0,
                0.05,
                0.9
            ]
        ],
        "B_true": [
            [
                0.9,
                0.05,
                0.05
            ],
            [
                0.05,
                0.9,
                0.05
            ],
            [
                0.05,
                0.05,
                0.9
            ]
        ],
        "s_0": [
            1.0,
            0.0,
            0.0
        ],
        "q_A_expected": [
            [
                0.9,
                0.05,
                0.0
            ],
            [
                0.1,
                0.9,
                0.1
            ],
            [
                0.0,
                0.05,
                0.9
            ]
        ],
        "q_B_expected": [
            [
                0.9,
                0.05,
                0.05
            ],
            [
                0.05,
                0.9,
                0.05
            ],
            [
                0.05,
                0.05,
                0.9
            ]
        ]
    }
}