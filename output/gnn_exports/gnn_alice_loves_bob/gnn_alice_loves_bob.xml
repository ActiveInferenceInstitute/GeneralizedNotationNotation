<?xml version="1.0" ?>
<Alice_Loves_Bob_-_DisCoPy_Quantum_NLP_Example>
  <file_path>/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples/gnn_alice_loves_bob.md</file_path>
  <name>Alice Loves Bob - DisCoPy Quantum NLP Example</name>
  <metadata>
    <description>This GNN file represents the &quot;Alice loves Bob&quot; quantum NLP example from DisCoPy.
It's designed to be parsed by `discopy_translator_module` and produce a JAX-backed
DisCoPy diagram that evaluates to the expected amplitude.
The target amplitude for &quot;Alice loves Bob&quot; is [0.0 - 1.0j].</description>
  </metadata>
  <states>
    <states_item>
      <id>n</id>
      <dimensions>2</dimensions>
      <original_id>n</original_id>
    </states_item>
    <states_item>
      <id>s</id>
      <dimensions>1</dimensions>
      <original_id>s</original_id>
    </states_item>
    <states_item>
      <id>InitState_scalar</id>
      <dimensions>1</dimensions>
      <original_id>InitState_scalar</original_id>
    </states_item>
    <states_item>
      <id>QubitState_A</id>
      <dimensions>2</dimensions>
      <original_id>QubitState_A</original_id>
    </states_item>
    <states_item>
      <id>QubitState_L1</id>
      <dimensions>2</dimensions>
      <original_id>QubitState_L1</original_id>
    </states_item>
    <states_item>
      <id>QubitState_L2</id>
      <dimensions>2</dimensions>
      <original_id>QubitState_L2</original_id>
    </states_item>
    <states_item>
      <id>QubitState_B</id>
      <dimensions>2</dimensions>
      <original_id>QubitState_B</original_id>
    </states_item>
    <states_item>
      <id>Combined_4Qubit_State</id>
      <dimensions>16</dimensions>
      <original_id>Combined_4Qubit_State</original_id>
    </states_item>
    <states_item>
      <id>FinalScalarOutput</id>
      <dimensions>1</dimensions>
      <original_id>FinalScalarOutput</original_id>
    </states_item>
  </states>
  <parameters/>
  <initial_parameters/>
  <observations/>
  <transitions>
    <transitions_item>
      <sources>
        <sources_item>InitState_scalar</sources_item>
      </sources>
      <operator>&gt;</operator>
      <targets>
        <targets_item>Combined_4Qubit_State</targets_item>
      </targets>
      <attributes/>
    </transitions_item>
    <transitions_item>
      <sources>
        <sources_item>Combined_4Qubit_State</sources_item>
      </sources>
      <operator>&gt;</operator>
      <targets>
        <targets_item>FinalScalarOutput</targets_item>
      </targets>
      <attributes/>
    </transitions_item>
  </transitions>
  <ontology_annotations/>
  <equations_text/>
  <time_info/>
  <footer_text/>
  <signature/>
  <raw_sections>
    <GNNSection>AliceLovesBobDiscopy</GNNSection>
    <GNNVersionAndFlags>GNN v1
DisCoPyCompatible</GNNVersionAndFlags>
    <ModelName>Alice Loves Bob - DisCoPy Quantum NLP Example</ModelName>
    <ModelAnnotation>This GNN file represents the &quot;Alice loves Bob&quot; quantum NLP example from DisCoPy.
It's designed to be parsed by `discopy_translator_module` and produce a JAX-backed
DisCoPy diagram that evaluates to the expected amplitude.
The target amplitude for &quot;Alice loves Bob&quot; is [0.0 - 1.0j].</ModelAnnotation>
    <StateSpaceBlock># Abstract types (DisCoPy Ty) - dimensions indicate number of qubits (for 'n') or scalar (for 's')
n[2] # Noun type (1 qubit, Dim(2))
s[1] # Sentence type (0 qubits, Dim(1) - scalar)

# Intermediate states representing tensor products of qubits
# These are helper states for defining the diagram structure.
# Input state after word functorization: Alice @ Loves @ Bob
# n_A @ (n_L_r @ s_L @ n_L_l) @ n_B
# The 'loves' word itself has type n.r @ s @ n.l.
# Functor maps:
# F(Alice): () -&gt; n_A                  (Dim(1) -&gt; Dim(2))
# F(loves): () -&gt; n_L1 @ n_L2          (Dim(1) -&gt; Dim(4), representing 2 qubits for 'loves')
# F(Bob):   () -&gt; n_B                  (Dim(1) -&gt; Dim(2))
# Initial combined state before grammar:
InitState_scalar[1]                   # Overall scalar input to the full sentence
QubitState_A[2]                       # Qubit for Alice
QubitState_L1[2]                      # First qubit for Loves
QubitState_L2[2]                      # Second qubit for Loves
QubitState_B[2]                       # Qubit for Bob
Combined_4Qubit_State[16]             # Represents n_A @ n_L1 @ n_L2 @ n_B

# Final output state
FinalScalarOutput[1]                  # Output of type 's', scalar</StateSpaceBlock>
    <TensorDefinitions># BoxName | Dom | Cod | Initializer (JSON string for complex lists, or &quot;load:path/to/file.npy&quot;, &quot;random_normal&quot;, &quot;random_uniform&quot;)
# default_dtype: &quot;complex64&quot; # Will be set in translator if needed by initializer

InitState_scalar_to_Combined_4Qubit_State | 1 | 16 | &quot;[[0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,-1.0], [0.0,0.0], [0.0,-1.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0]]&quot;
# This tensor represents the DisCoPy operations:
# Alice_box @ Loves_box @ Bob_box &gt;&gt; Id(n) @ Cup(n, n.r) @ Id(s) @ Cup(n.l, n) @ Id(n)
# which simplifies to:
# Ket(0) @ verb_ansatz(0.5) @ Ket(1) &gt;&gt; grammar
# Ket(0) is [1,0]; Ket(1) is [0,1]
# verb_ansatz(0.5) for loves (complex64, shape (1,4)): jnp.array([0.70710677+0.j, 0.00000000+0.j, 0.00000000+0.j, 0.00000000-0.70710677j]) (approx)
#   Simplified from (Ket(0,0) &gt;&gt; H @ sqrt(2) @ Rx(0.5) &gt;&gt; CX).eval().array which is [[1,0,0,0],[0,1,0,0],[0,0,0,-1j],[0,0,1j,0]] * 0.5 (incorrect, this is H.eval() @ CX.eval() )
#   Actual verb_ansatz(0.5).eval().array is shape (4,) for dom=Dim(1) cod=Dim(4) or (1,4) if using Matrix
#   The example output for F(params0)(parsing['Alice loves Bob.']).eval() is Tensor(dom=Dim(1), cod=Dim(1), array=[0.-1.j])
#   The intermediate state Alice @ loves @ Bob has type n @ n.r @ s @ n.l @ n, which is 1+1+0+1+1 = 4 qubits = Dim(16)
#   The initial state being fed into the &quot;grammar&quot; part.
#   The GNN &quot;Initialize_Sentence_State&quot; is conceptualized as the state *after* Alice, Loves, Bob functors are applied,
#   before the main grammar cups. So it's already a Dim(16) state.
#   The example notebook shows: F(params0)(parsing['Alice loves Bob.']) which is
#   (Alice_circ @ Loves_circ @ Bob_circ) &gt;&gt; grammar_circ
#   Alice_circ = Ket(0) (dom=1, cod=2)
#   Loves_circ = verb_ansatz(0.5) (dom=1, cod=4)
#   Bob_circ = Ket(1) (dom=1, cod=2)
#   Tensor product: dom=1, cod= 2*4*2 = 16. The array is the tensor product of these, flattened.
#   This means the value [0.0+0.0j, ..., 0.0-1.0j, ...] for the &quot;sentence state&quot; IS the JAX array for this product.

Combined_4Qubit_State_to_FinalScalarOutput | 16 | 1 | &quot;[[1.0,0.0], [0.0,0.0], [0.0,0.0], [1.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [1.0,0.0], [0.0,0.0], [0.0,0.0], [1.0,0.0]]&quot;
# This tensor represents the grammar: Cup(n, n.r) @ Id(s) @ Cup(n.l, n)
# It takes the Dim(16) state (4 qubits) and outputs Dim(1) (scalar for sentence truth).
# The DisCoPy grammar object is: Cup(Dim(2), Dim(2).r) @ Id(Dim(1)) @ Cup(Dim(2).l, Dim(2))
# n = Ty('n') -&gt; Dim(2); s = Ty('s') -&gt; Dim(1)
# (n @ n.r @ s @ n.l @ n) &gt;&gt; grammar_cups --&gt; s
# Dim(2) @ Dim(2) @ Dim(1) @ Dim(2) @ Dim(2)  &gt;&gt; grammar_cups --&gt; Dim(1)
# Dim(16) &gt;&gt; grammar_cups --&gt; Dim(1)
# The array for Cup(Dim(2), Dim(2)) is [[1,0,0,1]]. Id(Dim(1)) is [1].
# So the grammar matrix is effectively a large contraction.
# The provided array is shape (1,16), but for discopy.Matrix(dom=16, cod=1, array=...) it needs (16,1)
# The parser should handle reshaping this from the JSON [[]] to the column vector.</TensorDefinitions>
    <Connections># Defines the sequence: InitState_scalar -&gt; [Box1] -&gt; Combined_4Qubit_State -&gt; [Box2] -&gt; FinalScalarOutput
# Box1 is InitState_scalar_to_Combined_4Qubit_State
# Box2 is Combined_4Qubit_State_to_FinalScalarOutput
InitState_scalar &gt; Combined_4Qubit_State
Combined_4Qubit_State &gt; FinalScalarOutput</Connections>
    <Footer>End of Alice Loves Bob GNN.</Footer>
  </raw_sections>
  <other_sections>
    <TensorDefinitions># BoxName | Dom | Cod | Initializer (JSON string for complex lists, or &quot;load:path/to/file.npy&quot;, &quot;random_normal&quot;, &quot;random_uniform&quot;)
# default_dtype: &quot;complex64&quot; # Will be set in translator if needed by initializer

InitState_scalar_to_Combined_4Qubit_State | 1 | 16 | &quot;[[0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,-1.0], [0.0,0.0], [0.0,-1.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0]]&quot;
# This tensor represents the DisCoPy operations:
# Alice_box @ Loves_box @ Bob_box &gt;&gt; Id(n) @ Cup(n, n.r) @ Id(s) @ Cup(n.l, n) @ Id(n)
# which simplifies to:
# Ket(0) @ verb_ansatz(0.5) @ Ket(1) &gt;&gt; grammar
# Ket(0) is [1,0]; Ket(1) is [0,1]
# verb_ansatz(0.5) for loves (complex64, shape (1,4)): jnp.array([0.70710677+0.j, 0.00000000+0.j, 0.00000000+0.j, 0.00000000-0.70710677j]) (approx)
#   Simplified from (Ket(0,0) &gt;&gt; H @ sqrt(2) @ Rx(0.5) &gt;&gt; CX).eval().array which is [[1,0,0,0],[0,1,0,0],[0,0,0,-1j],[0,0,1j,0]] * 0.5 (incorrect, this is H.eval() @ CX.eval() )
#   Actual verb_ansatz(0.5).eval().array is shape (4,) for dom=Dim(1) cod=Dim(4) or (1,4) if using Matrix
#   The example output for F(params0)(parsing['Alice loves Bob.']).eval() is Tensor(dom=Dim(1), cod=Dim(1), array=[0.-1.j])
#   The intermediate state Alice @ loves @ Bob has type n @ n.r @ s @ n.l @ n, which is 1+1+0+1+1 = 4 qubits = Dim(16)
#   The initial state being fed into the &quot;grammar&quot; part.
#   The GNN &quot;Initialize_Sentence_State&quot; is conceptualized as the state *after* Alice, Loves, Bob functors are applied,
#   before the main grammar cups. So it's already a Dim(16) state.
#   The example notebook shows: F(params0)(parsing['Alice loves Bob.']) which is
#   (Alice_circ @ Loves_circ @ Bob_circ) &gt;&gt; grammar_circ
#   Alice_circ = Ket(0) (dom=1, cod=2)
#   Loves_circ = verb_ansatz(0.5) (dom=1, cod=4)
#   Bob_circ = Ket(1) (dom=1, cod=2)
#   Tensor product: dom=1, cod= 2*4*2 = 16. The array is the tensor product of these, flattened.
#   This means the value [0.0+0.0j, ..., 0.0-1.0j, ...] for the &quot;sentence state&quot; IS the JAX array for this product.

Combined_4Qubit_State_to_FinalScalarOutput | 16 | 1 | &quot;[[1.0,0.0], [0.0,0.0], [0.0,0.0], [1.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [0.0,0.0], [1.0,0.0], [0.0,0.0], [0.0,0.0], [1.0,0.0]]&quot;
# This tensor represents the grammar: Cup(n, n.r) @ Id(s) @ Cup(n.l, n)
# It takes the Dim(16) state (4 qubits) and outputs Dim(1) (scalar for sentence truth).
# The DisCoPy grammar object is: Cup(Dim(2), Dim(2).r) @ Id(Dim(1)) @ Cup(Dim(2).l, Dim(2))
# n = Ty('n') -&gt; Dim(2); s = Ty('s') -&gt; Dim(1)
# (n @ n.r @ s @ n.l @ n) &gt;&gt; grammar_cups --&gt; s
# Dim(2) @ Dim(2) @ Dim(1) @ Dim(2) @ Dim(2)  &gt;&gt; grammar_cups --&gt; Dim(1)
# Dim(16) &gt;&gt; grammar_cups --&gt; Dim(1)
# The array for Cup(Dim(2), Dim(2)) is [[1,0,0,1]]. Id(Dim(1)) is [1].
# So the grammar matrix is effectively a large contraction.
# The provided array is shape (1,16), but for discopy.Matrix(dom=16, cod=1, array=...) it needs (16,1)
# The parser should handle reshaping this from the JSON [[]] to the column vector.</TensorDefinitions>
  </other_sections>
  <gnnsection/>
  <gnnversionandflags/>
  <footer>End of Alice Loves Bob GNN.</footer>
</Alice_Loves_Bob_-_DisCoPy_Quantum_NLP_Example>
