.........................F.....................ssss.............s....... [ 13%]
...............................ssssss................................... [ 26%]
...............s....................s....................s.............. [ 39%]
......................s.........ss.ss.......ss.ss...F......ss........... [ 52%]
.............................s................s.......sssssss........... [ 65%]
.........ssssss.ss.ss..s.ss.sssss...............................FF....F. [ 78%]
......sssssssssssss.sssssssssssss.sssssssssssss..................s...... [ 91%]
...............................................                          [100%]
=================================== FAILURES ===================================
___________________________ test_dependency_checking ___________________________

self = PurePosixPath('jaxlib/cuda')

    @property
    def _tail(self):
        try:
>           return self._tail_cached
                   ^^^^^^^^^^^^^^^^^
E           AttributeError: 'pathlib._local.PurePosixPath' object has no attribute '_tail_cached'

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/pathlib/_local.py:310: AttributeError

During handling of the above exception, another exception occurred:

    def test_dependency_checking():
        """Test dependency checking for all execution environments."""
        print("üîç Testing dependency checking...")
    
        # Test Python dependencies
        python_deps = ["numpy", "pymdp", "flax", "jax", "optax"]
        missing_python_deps = []
    
        for dep in python_deps:
            try:
>               __import__(dep)

src/execute/test_execution.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.13/site-packages/flax/__init__.py:24: in <module>
    from flax import core
.venv/lib/python3.13/site-packages/flax/core/__init__.py:15: in <module>
    from .axes_scan import broadcast as broadcast
.venv/lib/python3.13/site-packages/flax/core/axes_scan.py:20: in <module>
    import jax
.venv/lib/python3.13/site-packages/jax/__init__.py:25: in <module>
    from jax._src.cloud_tpu_init import cloud_tpu_init as _cloud_tpu_init
.venv/lib/python3.13/site-packages/jax/_src/cloud_tpu_init.py:20: in <module>
    from jax._src import config
.venv/lib/python3.13/site-packages/jax/_src/config.py:27: in <module>
    from jax._src.lib import guard_lib
.venv/lib/python3.13/site-packages/jax/_src/lib/__init__.py:135: in <module>
    import jaxlib.gpu_solver as gpu_solver  # pytype: disable=import-error  # noqa: F401
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/jaxlib/gpu_solver.py:19: in <module>
    _cusolver = import_from_plugin("cuda", "_solver")
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/jaxlib/plugin_support.py:49: in import_from_plugin
    return maybe_import_plugin_submodule(
.venv/lib/python3.13/site-packages/jaxlib/plugin_support.py:89: in maybe_import_plugin_submodule
    module = importlib.import_module(
/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1322: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:1262: in _find_spec
    ???
.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:100: in find_spec
    if self._early_rewrite_bailout(name, state):
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/_pytest/assertion/rewrite.py:211: in _early_rewrite_bailout
    path = PurePath(*parts).with_suffix(".py")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/pathlib/_abc.py:227: in with_suffix
    stem = self.stem
           ^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/pathlib/_abc.py:197: in stem
    name = self.name
           ^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/pathlib/_local.py:349: in name
    tail = self._tail
           ^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = PurePosixPath('jaxlib/cuda')

    @property
    def _tail(self):
        try:
            return self._tail_cached
        except AttributeError:
>           self._drv, self._root, self._tail_cached = self._parse_path(self._raw_path)
                                                                        ^^^^^^^^^^^^^^
E           RecursionError: maximum recursion depth exceeded

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/pathlib/_local.py:312: RecursionError
----------------------------- Captured stdout call -----------------------------
üîç Testing dependency checking...
  ‚úÖ numpy
  ‚úÖ pymdp
_________________ TestGUIFunctionality.test_headless_artifacts _________________

self = <src.tests.test_gui_functionality.TestGUIFunctionality object at 0x118ea5d10>
isolated_temp_dir = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpxmidofa8')

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_headless_artifacts(self, isolated_temp_dir):
        target = isolated_temp_dir / "input"
        output = isolated_temp_dir / "output"
        target.mkdir(parents=True, exist_ok=True)
        (target / "model.md").write_text("# Test\n")
        logger = _Logger()
        ok = run_gui(target_dir=target, output_dir=output, logger=logger, verbose=True, headless=True)
        assert ok
        status = output / "22_gui_output" / "gui_status.json"
        # run_gui uses get_output_dir_for_script, which nests under output dir passed to script.
        # In this headless call we passed output directly, so artifacts should exist under output/22_gui_output.
>       assert status.exists()
E       AssertionError: assert False
E        +  where False = exists()
E        +    where exists = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpxmidofa8/output/22_gui_output/gui_status.json').exists

src/tests/test_gui_functionality.py:36: AssertionError
____________ TestRecursionErrorRecovery.test_numpy_import_recovery _____________

self = <src.tests.test_pipeline_recovery.TestRecursionErrorRecovery object at 0x118fbdd10>
mock_environment = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpf7sfup5o')

    def test_numpy_import_recovery(self, mock_environment):
        """Test recovery from NumPy import recursion error.
    
        Patch numpy.typing module import itself to raise RecursionError first,
        then increase recursion limit and import again to simulate recovery.
        """
        with patch('numpy.typing', side_effect=RecursionError):
>           with pytest.raises(RecursionError):
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           Failed: DID NOT RAISE <class 'RecursionError'>

src/tests/test_pipeline_recovery.py:77: Failed

During handling of the above exception, another exception occurred:

self = <src.tests.test_pipeline_recovery.TestRecursionErrorRecovery object at 0x118fbdd10>
mock_environment = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpf7sfup5o')

    def test_numpy_import_recovery(self, mock_environment):
        """Test recovery from NumPy import recursion error.
    
        Patch numpy.typing module import itself to raise RecursionError first,
        then increase recursion limit and import again to simulate recovery.
        """
>       with patch('numpy.typing', side_effect=RecursionError):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/tests/test_pipeline_recovery.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1636: in __exit__
    if not self.create and (not hasattr(self.target, self.attribute) or
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/numpy/__init__.py:364: in __getattr__
    import numpy.typing as typing
.venv/lib/python3.13/site-packages/numpy/__init__.py:364: in __getattr__
    import numpy.typing as typing
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals & position)
_____________ TestRecursionErrorRecovery.test_render_step_recovery _____________

self = <unittest.mock._patch object at 0x11c6dd750>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
>           original = target.__dict__[name]
                       ^^^^^^^^^^^^^^^^^^^^^
E           KeyError: 'typing'

/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1457: KeyError

During handling of the above exception, another exception occurred:

self = <src.tests.test_pipeline_recovery.TestRecursionErrorRecovery object at 0x118fbde50>
mock_environment = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpm_e9njiu')
sample_gnn_file = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpm_e9njiu/input/test_model.md')

    def test_render_step_recovery(self, mock_environment, sample_gnn_file):
        """Test render step recovery from recursion errors."""
        from render.renderer import render_gnn_files
    
>       with patch('numpy.typing', side_effect=RecursionError):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/tests/test_pipeline_recovery.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1497: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1459: in get_original
    original = getattr(target, name, DEFAULT)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/numpy/__init__.py:364: in __getattr__
    import numpy.typing as typing
.venv/lib/python3.13/site-packages/numpy/__init__.py:364: in __getattr__
    import numpy.typing as typing
E   RecursionError: maximum recursion depth exceeded
!!! Recursion detected (same locals & position)
___________ TestHardwareInitializationRecovery.test_jax_cpu_fallback ___________

self = <src.tests.test_pipeline_recovery.TestHardwareInitializationRecovery object at 0x118fbe490>
mock_environment = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmp794u0vng')

    def test_jax_cpu_fallback(self, mock_environment):
        """Test JAX CPU fallback when TPU/GPU unavailable."""
        from execute.jax.jax_runner import initialize_jax_devices
    
        # Force TPU error
>       with patch('jax.devices', side_effect=RuntimeError("No TPU available")):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

src/tests/test_pipeline_recovery.py:169: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1481: in __enter__
    self.target = self.getter()
                  ^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/pkgutil.py:513: in resolve_name
    mod = importlib.import_module(modname)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:1026: in exec_module
    ???
<frozen importlib._bootstrap>:488: in _call_with_frames_removed
    ???
.venv/lib/python3.13/site-packages/jax/__init__.py:25: in <module>
    from jax._src.cloud_tpu_init import cloud_tpu_init as _cloud_tpu_init
.venv/lib/python3.13/site-packages/jax/_src/cloud_tpu_init.py:20: in <module>
    from jax._src import config
.venv/lib/python3.13/site-packages/jax/_src/config.py:27: in <module>
    from jax._src.lib import guard_lib
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    # Copyright 2018 The JAX Authors.
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     https://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    
    # This module is largely a wrapper around `jaxlib` that performs version
    # checking on import.
    
    from __future__ import annotations
    
    import importlib
    import gc
    import os
    import pathlib
    import re
    from types import ModuleType
    
    try:
      import jaxlib as jaxlib
    except ModuleNotFoundError as err:
      raise ModuleNotFoundError(
        'jax requires jaxlib to be installed. See '
        'https://github.com/jax-ml/jax#installation for installation instructions.'
        ) from err
    
    import jax.version
    from jax.version import _minimum_jaxlib_version as _minimum_jaxlib_version_str
    try:
      import jaxlib.version
    except Exception as err:
      # jaxlib is too old to have version number.
      msg = f'This version of jax requires jaxlib version >= {_minimum_jaxlib_version_str}.'
      raise ImportError(msg) from err
    
    
    # Checks the jaxlib version before importing anything else.
    # Returns the jaxlib version string.
    def check_jaxlib_version(jax_version: str, jaxlib_version: str,
                             minimum_jaxlib_version: str) -> tuple[int, ...]:
      # Regex to match a dotted version prefix 0.1.23.456.789 of a PEP440 version.
      # PEP440 allows a number of non-numeric suffixes, which we allow also.
      # We currently do not allow an epoch.
      version_regex = re.compile(r"[0-9]+(?:\.[0-9]+)*")
      def _parse_version(v: str) -> tuple[int, ...]:
        m = version_regex.match(v)
        if m is None:
          raise ValueError(f"Unable to parse jaxlib version '{v}'")
        return tuple(int(x) for x in m.group(0).split('.'))
    
      _jax_version = _parse_version(jax_version)
      _minimum_jaxlib_version = _parse_version(minimum_jaxlib_version)
      _jaxlib_version = _parse_version(jaxlib_version)
    
      if _jaxlib_version < _minimum_jaxlib_version:
        msg = (f'jaxlib is version {jaxlib_version}, but this version '
               f'of jax requires version >= {minimum_jaxlib_version}.')
        raise RuntimeError(msg)
    
      if _jaxlib_version > _jax_version:
        raise RuntimeError(
            f'jaxlib version {jaxlib_version} is newer than and '
            f'incompatible with jax version {jax_version}. Please '
            'update your jax and/or jaxlib packages.')
      return _jaxlib_version
    
    
    version_str = jaxlib.version.__version__
    version = check_jaxlib_version(
>     jax_version=jax.version.__version__,
                  ^^^^^^^^^^^
      jaxlib_version=jaxlib.version.__version__,
      minimum_jaxlib_version=jax.version._minimum_jaxlib_version)
E   AttributeError: partially initialized module 'jax' from '/Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/jax/__init__.py' has no attribute 'version' (most likely due to a circular import)

.venv/lib/python3.13/site-packages/jax/_src/lib/__init__.py:78: AttributeError
=============================== warnings summary ===============================
src/execute/pymdp/test_integration.py::test_gnn_parsing
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_integration.py::test_gnn_parsing returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/pymdp/test_integration.py::test_pymdp_renderer
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_integration.py::test_pymdp_renderer returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/pymdp/test_integration.py::test_pymdp_simulation
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_integration.py::test_pymdp_simulation returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/pymdp/test_integration.py::test_full_integration
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_integration.py::test_full_integration returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/pymdp/test_pymdp_utils.py::test_numpy_serialization
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_pymdp_utils.py::test_numpy_serialization returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/pymdp/test_pymdp_utils.py::test_gnn_parsing
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_pymdp_utils.py::test_gnn_parsing returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/pymdp/test_pymdp_utils.py::test_integration
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_pymdp_utils.py::test_integration returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/pymdp/test_pymdp_visualizer.py::test_visualizer_creation
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_pymdp_visualizer.py::test_visualizer_creation returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/pymdp/test_pymdp_visualizer.py::test_discrete_state_visualization
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_pymdp_visualizer.py::test_discrete_state_visualization returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/pymdp/test_pymdp_visualizer.py::test_belief_visualization
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_pymdp_visualizer.py::test_belief_visualization returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/pymdp/test_pymdp_visualizer.py::test_performance_metrics
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_pymdp_visualizer.py::test_performance_metrics returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/pymdp/test_pymdp_visualizer.py::test_action_visualization
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_pymdp_visualizer.py::test_action_visualization returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/pymdp/test_pymdp_visualizer.py::test_observation_visualization
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_pymdp_visualizer.py::test_observation_visualization returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/pymdp/test_pymdp_visualizer.py::test_episode_summary
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_pymdp_visualizer.py::test_episode_summary returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/pymdp/test_pymdp_visualizer.py::test_comprehensive_visualization
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_pymdp_visualizer.py::test_comprehensive_visualization returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/pymdp/test_visualization.py::test_visualizer
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_visualization.py::test_visualizer returned <class 'pathlib._local.PosixPath'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/pymdp/test_visualization.py::test_pipeline_integration
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/pymdp/test_visualization.py::test_pipeline_integration returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/execute/test_execution.py::test_full_execution
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/execute/test_execution.py::test_full_execution returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/gnn/testing/simple_round_trip_test.py::test_json_round_trip
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/gnn/testing/simple_round_trip_test.py::test_json_round_trip returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/gnn/testing/simple_round_trip_test.py::test_xml_round_trip
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/gnn/testing/simple_round_trip_test.py::test_xml_round_trip returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/render/discopy/test_improvements.py::test_discopy_improvements
  /Users/4d/Documents/GitHub/GeneralizedNotationNotation/.venv/lib/python3.13/site-packages/_pytest/python.py:161: PytestReturnNotNoneWarning: Test functions should return None, but src/render/discopy/test_improvements.py::test_discopy_improvements returned <class 'bool'>.
  Did you mean to use `assert` instead of `return`?
  See https://docs.pytest.org/en/stable/how-to/assert.html#return-not-none for more information.
    warnings.warn(

src/tests/test_main_orchestrator.py::TestArgumentParsing::test_argument_defaults
src/tests/test_main_orchestrator.py::TestArgumentParsing::test_argument_defaults
src/tests/test_main_orchestrator.py::TestArgumentParsing::test_argument_defaults
  /opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/argparse.py:1471: DeprecationWarning: 'type' is deprecated as of Python 3.12 and will be removed in Python 3.14.
    action = action_class(**kwargs)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED src/execute/test_execution.py::test_dependency_checking - RecursionErr...
FAILED src/tests/test_gui_functionality.py::TestGUIFunctionality::test_headless_artifacts
FAILED src/tests/test_pipeline_recovery.py::TestRecursionErrorRecovery::test_numpy_import_recovery
FAILED src/tests/test_pipeline_recovery.py::TestRecursionErrorRecovery::test_render_step_recovery
FAILED src/tests/test_pipeline_recovery.py::TestHardwareInitializationRecovery::test_jax_cpu_fallback
5 failed, 454 passed, 92 skipped, 24 warnings in 11.54s
