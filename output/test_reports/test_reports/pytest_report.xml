<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="4" failures="0" skipped="0" tests="4" time="11.744" timestamp="2025-07-21T12:32:46.419818-07:00" hostname="pop-os"><testcase classname="" name="src.tests.test_comprehensive_api" time="0.000"><error message="collection failure">src/tests/test_comprehensive_api.py:16: in &lt;module&gt;
    import src.gnn
src/gnn/__init__.py:13: in &lt;module&gt;
    from .schema_validator import (
src/gnn/schema_validator.py:51: in &lt;module&gt;
    from .testing.test_round_trip import RoundTripResult
src/gnn/testing/__init__.py:11: in &lt;module&gt;
    from .test_round_trip import ComprehensiveTestReport, RoundTripResult
&lt;frozen importlib._bootstrap&gt;:1027: in _find_and_load
    ???
&lt;frozen importlib._bootstrap&gt;:1006: in _find_and_load_unlocked
    ???
&lt;frozen importlib._bootstrap&gt;:688: in _load_unlocked
    ???
src/.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:186: in exec_module
    exec(co, module.__dict__)
src/gnn/testing/test_round_trip.py:172: in &lt;module&gt;
    from gnn.types import RoundTripResult, ComprehensiveTestReport
src/gnn/__init__.py:13: in &lt;module&gt;
    from .schema_validator import (
src/gnn/schema_validator.py:27: in &lt;module&gt;
    from .types import (
&lt;frozen importlib._bootstrap&gt;:1027: in _find_and_load
    ???
&lt;frozen importlib._bootstrap&gt;:1002: in _find_and_load_unlocked
    ???
&lt;frozen importlib._bootstrap&gt;:945: in _find_spec
    ???
src/.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:100: in find_spec
    if self._early_rewrite_bailout(name, state):
src/.venv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:211: in _early_rewrite_bailout
    path = PurePath(*parts).with_suffix(".py")
E   RecursionError: maximum recursion depth exceeded</error></testcase><testcase classname="" name="src.tests.test_export" time="0.000"><error message="collection failure">src/tests/test_export.py:6: in &lt;module&gt;
    from render.render import render_gnn_spec
src/render/__init__.py:14: in &lt;module&gt;
    from .render import render_gnn_spec, main
src/render/render.py:18: in &lt;module&gt;
    from .pymdp import render_gnn_to_pymdp
src/render/pymdp/__init__.py:5: in &lt;module&gt;
    from .pymdp_renderer import render_gnn_to_pymdp
src/render/pymdp/pymdp_renderer.py:22: in &lt;module&gt;
    from .pymdp_converter import GnnToPyMdpConverter
src/render/pymdp/pymdp_converter.py:16: in &lt;module&gt;
    from .pymdp_utils import (
src/render/pymdp/pymdp_utils.py:54: in &lt;module&gt;
    def format_list_recursive(data_list: list, current_indent: int, item_formatter: Callable[[Any, int], str]) -&gt; str:
/usr/lib/python3.10/typing.py:1206: in __getitem__
    return self.__getitem_inner__(params)
/usr/lib/python3.10/typing.py:309: in inner
    return cached(*args, **kwds)
/usr/lib/python3.10/typing.py:1219: in __getitem_inner__
    return self.copy_with(params)
/usr/lib/python3.10/typing.py:1189: in copy_with
    return _CallableGenericAlias(self.__origin__, params,
/usr/lib/python3.10/typing.py:1019: in __init__
    super().__init__(origin, inst=inst, name=name)
/usr/lib/python3.10/typing.py:948: in __init__
    self._inst = inst
/usr/lib/python3.10/typing.py:987: in __setattr__
    if _is_dunder(attr) or attr in {'_name', '_inst', '_nparams',
E   RecursionError: maximum recursion depth exceeded</error></testcase><testcase classname="" name="src.tests.test_gnn_type_checker" time="0.000"><error message="collection failure">src/tests/test_gnn_type_checker.py:20: in &lt;module&gt;
    from type_checker import GNNTypeChecker
src/type_checker/__init__.py:8: in &lt;module&gt;
    from .checker import (
src/type_checker/checker.py:26: in &lt;module&gt;
    from visualization.parser import GNNParser
src/visualization/__init__.py:8: in &lt;module&gt;
    from .visualizer import (
src/visualization/visualizer.py:13: in &lt;module&gt;
    import networkx as nx
src/.venv/lib/python3.10/site-packages/networkx/__init__.py:19: in &lt;module&gt;
    from networkx import utils
src/.venv/lib/python3.10/site-packages/coverage/control.py:417: in _should_trace
    disp = self._inorout.should_trace(filename, frame)
src/.venv/lib/python3.10/site-packages/coverage/inorout.py:353: in should_trace
    canonical = canonical_filename(filename)
src/.venv/lib/python3.10/site-packages/coverage/files.py:86: in canonical_filename
    cf = abs_file(cf)
src/.venv/lib/python3.10/site-packages/coverage/files.py:159: in abs_file
    return actual_path(os.path.abspath(os.path.realpath(path)))
/usr/lib/python3.10/posixpath.py:396: in realpath
    path, ok = _joinrealpath(filename[:0], filename, strict, {})
/usr/lib/python3.10/posixpath.py:402: in _joinrealpath
    if isinstance(path, bytes):
E   RecursionError: maximum recursion depth exceeded while calling a Python object</error></testcase><testcase classname="" name="src.tests.test_parsers" time="0.000"><error message="collection failure">src/tests/test_parsers.py:14: in &lt;module&gt;
    from gnn.parsers.markdown_parser import MarkdownGNNParser
src/gnn/__init__.py:13: in &lt;module&gt;
    from .schema_validator import (
src/gnn/schema_validator.py:43: in &lt;module&gt;
    from .parsers import GNNParsingSystem
src/gnn/parsers/__init__.py:49: in &lt;module&gt;
    from .unified_parser import UnifiedGNNParser, GNNFormat, ParseResult
src/gnn/parsers/unified_parser.py:18: in &lt;module&gt;
    from .common import (
src/gnn/parsers/common.py:224: in &lt;module&gt;
    class Section(ASTNode):
src/gnn/parsers/common.py:227: in Section
    content: List[ASTNode] = field(default_factory=list)
/usr/lib/python3.10/typing.py:309: in inner
    return cached(*args, **kwds)
/usr/lib/python3.10/typing.py:1145: in __getitem__
    return self.copy_with(params)
/usr/lib/python3.10/typing.py:1148: in copy_with
    return _GenericAlias(self.__origin__, params,
/usr/lib/python3.10/typing.py:1025: in __init__
    self.__parameters__ = _collect_type_vars(params, typevar_types=_typevar_types)
src/.venv/lib/python3.10/site-packages/typing_extensions.py:3140: in _collect_type_vars
    if _is_unpacked_typevartuple(t):
src/.venv/lib/python3.10/site-packages/typing_extensions.py:3109: in _is_unpacked_typevartuple
    if get_origin(x) is not Unpack:
/usr/lib/python3.10/typing.py:1919: in get_origin
    if isinstance(tp, (_BaseGenericAlias, GenericAlias,
E   RecursionError: maximum recursion depth exceeded in __instancecheck__</error></testcase></testsuite></testsuites>