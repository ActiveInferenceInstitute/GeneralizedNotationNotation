<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="51" skipped="4" tests="337" time="32.825" timestamp="2025-07-14T10:10:12.410531-07:00" hostname="timelock.local"><testcase classname="src.tests.test_comprehensive_api.TestGNNModule" name="test_module_imports" time="0.001" /><testcase classname="src.tests.test_comprehensive_api.TestGNNModule" name="test_get_module_info" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestGNNModule" name="test_validate_gnn_function" time="0.002" /><testcase classname="src.tests.test_comprehensive_api.TestGNNModule" name="test_feature_flags" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestExportModule" name="test_module_imports" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestExportModule" name="test_get_module_info" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestExportModule" name="test_get_supported_formats" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestExportModule" name="test_export_gnn_model_invalid_format" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestRenderModule" name="test_module_imports" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestRenderModule" name="test_get_module_info" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestRenderModule" name="test_get_available_renderers" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestRenderModule" name="test_feature_flags" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestSiteModule" name="test_module_imports" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestSiteModule" name="test_get_module_info" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestSiteModule" name="test_get_supported_file_types" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestSiteModule" name="test_generate_site_from_pipeline_output_nonexistent" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestSAPFModule" name="test_module_imports" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestSAPFModule" name="test_get_module_info" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestSAPFModule" name="test_get_audio_generation_options" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestSAPFModule" name="test_process_gnn_to_audio_invalid_input" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestOntologyModule" name="test_module_imports" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestOntologyModule" name="test_get_module_info" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestOntologyModule" name="test_get_ontology_processing_options" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestOntologyModule" name="test_process_gnn_ontology_nonexistent_file" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestOntologyModule" name="test_parse_gnn_ontology_section_empty" time="0.001" /><testcase classname="src.tests.test_comprehensive_api.TestTypeCheckerModule" name="test_module_imports" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestTypeCheckerModule" name="test_type_checker_instantiation" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestVisualizationModule" name="test_module_imports" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestVisualizationModule" name="test_visualizer_instantiation" time="0.003" /><testcase classname="src.tests.test_comprehensive_api.TestExecuteModule" name="test_module_imports" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestExecuteModule" name="test_executor_instantiation" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestLLMModule" name="test_module_imports" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestLLMModule" name="test_llm_processor_instantiation" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestMCPModule" name="test_module_imports" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestMCPModule" name="test_mcp_server_instantiation" time="0.022" /><testcase classname="src.tests.test_comprehensive_api.TestSetupModule" name="test_module_imports" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestSetupModule" name="test_setup_functions_exist" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestUtilsModule" name="test_module_imports" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestUtilsModule" name="test_utils_classes_instantiation" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestPipelineModule" name="test_module_imports" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestPipelineModule" name="test_pipeline_config" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestMCPIntegration" name="test_mcp_availability_flags" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestMCPIntegration" name="test_register_tools_functions" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestModuleConsistency" name="test_version_consistency" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestModuleConsistency" name="test_feature_flags_consistency" time="0.000" /><testcase classname="src.tests.test_comprehensive_api.TestModuleConsistency" name="test_module_info_consistency" time="0.001" /><testcase classname="src.tests.test_core_modules.TestGNNModuleComprehensive" name="test_gnn_module_imports" time="0.012"><failure message="Failed: Failed to import GNN module: cannot import name 'discover_gnn_files' from 'gnn' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/gnn/__init__.py)">self = &lt;src.tests.test_core_modules.TestGNNModuleComprehensive object at 0x1295e2c10&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_gnn_module_imports(self):
        """Test that GNN module can be imported and has expected structure."""
        try:
&gt;           from gnn import (
                discover_gnn_files, parse_gnn_file, validate_gnn_structure,
                process_gnn_directory, generate_gnn_report
            )
E           ImportError: cannot import name 'discover_gnn_files' from 'gnn' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/gnn/__init__.py)

src/tests/test_core_modules.py:52: ImportError

During handling of the above exception, another exception occurred:

self = &lt;src.tests.test_core_modules.TestGNNModuleComprehensive object at 0x1295e2c10&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_gnn_module_imports(self):
        """Test that GNN module can be imported and has expected structure."""
        try:
            from gnn import (
                discover_gnn_files, parse_gnn_file, validate_gnn_structure,
                process_gnn_directory, generate_gnn_report
            )
    
            # Test that functions are callable
            assert callable(discover_gnn_files), "discover_gnn_files should be callable"
            assert callable(parse_gnn_file), "parse_gnn_file should be callable"
            assert callable(validate_gnn_structure), "validate_gnn_structure should be callable"
            assert callable(process_gnn_directory), "process_gnn_directory should be callable"
            assert callable(generate_gnn_report), "generate_gnn_report should be callable"
    
            logging.info("GNN module imports validated")
    
        except ImportError as e:
&gt;           pytest.fail(f"Failed to import GNN module: {e}")
E           Failed: Failed to import GNN module: cannot import name 'discover_gnn_files' from 'gnn' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/gnn/__init__.py)

src/tests/test_core_modules.py:67: Failed</failure></testcase><testcase classname="src.tests.test_core_modules.TestGNNModuleComprehensive" name="test_gnn_file_discovery" time="0.003"><failure message="ImportError: cannot import name 'discover_gnn_files' from 'gnn' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/gnn/__init__.py)">self = &lt;src.tests.test_core_modules.TestGNNModuleComprehensive object at 0x1295e2e90&gt;
sample_gnn_files = {'empty_file': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpv00y6nq6/empty_file.md'), 'invalid_synta...'missing_sections': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpv00y6nq6/missing_sections.md'), ...}

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_gnn_file_discovery(self, sample_gnn_files):
        """Test GNN file discovery functionality."""
&gt;       from gnn import discover_gnn_files
E       ImportError: cannot import name 'discover_gnn_files' from 'gnn' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/gnn/__init__.py)

src/tests/test_core_modules.py:73: ImportError</failure></testcase><testcase classname="src.tests.test_core_modules.TestGNNModuleComprehensive" name="test_gnn_file_parsing" time="0.003"><failure message="ImportError: cannot import name 'parse_gnn_file' from 'gnn' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/gnn/__init__.py)">self = &lt;src.tests.test_core_modules.TestGNNModuleComprehensive object at 0x1295ec8a0&gt;
sample_gnn_files = {'empty_file': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpt7l13qps/empty_file.md'), 'invalid_synta...'missing_sections': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpt7l13qps/missing_sections.md'), ...}

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_gnn_file_parsing(self, sample_gnn_files):
        """Test GNN file parsing functionality."""
&gt;       from gnn import parse_gnn_file
E       ImportError: cannot import name 'parse_gnn_file' from 'gnn' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/gnn/__init__.py)

src/tests/test_core_modules.py:93: ImportError</failure></testcase><testcase classname="src.tests.test_core_modules.TestGNNModuleComprehensive" name="test_gnn_validation" time="0.002"><failure message="ImportError: cannot import name 'validate_gnn_structure' from 'gnn' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/gnn/__init__.py)">self = &lt;src.tests.test_core_modules.TestGNNModuleComprehensive object at 0x1295ec9d0&gt;
sample_gnn_files = {'empty_file': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmptb4_3f95/empty_file.md'), 'invalid_synta...'missing_sections': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmptb4_3f95/missing_sections.md'), ...}

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_gnn_validation(self, sample_gnn_files):
        """Test GNN structure validation."""
&gt;       from gnn import validate_gnn_structure
E       ImportError: cannot import name 'validate_gnn_structure' from 'gnn' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/gnn/__init__.py)

src/tests/test_core_modules.py:115: ImportError</failure></testcase><testcase classname="src.tests.test_core_modules.TestGNNModuleComprehensive" name="test_gnn_directory_processing" time="0.006"><failure message="ImportError: cannot import name 'process_gnn_directory' from 'gnn' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/gnn/__init__.py)">self = &lt;src.tests.test_core_modules.TestGNNModuleComprehensive object at 0x1295f5fd0&gt;
sample_gnn_files = {'empty_file': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpflyz3jo6/empty_file.md'), 'invalid_synta...'missing_sections': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpflyz3jo6/missing_sections.md'), ...}
isolated_temp_dir = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpt9_2yf_j')

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_gnn_directory_processing(self, sample_gnn_files, isolated_temp_dir):
        """Test GNN directory processing."""
&gt;       from gnn import process_gnn_directory, generate_gnn_report
E       ImportError: cannot import name 'process_gnn_directory' from 'gnn' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/gnn/__init__.py)

src/tests/test_core_modules.py:132: ImportError</failure></testcase><testcase classname="src.tests.test_core_modules.TestRenderModuleComprehensive" name="test_render_module_imports" time="0.006"><failure message="Failed: Failed to import render module: cannot import name 'render_pymdp_code' from 'render' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/render/__init__.py)">self = &lt;src.tests.test_core_modules.TestRenderModuleComprehensive object at 0x1295e2fd0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_render_module_imports(self):
        """Test that render module can be imported and has expected structure."""
        try:
&gt;           from render import (
                render_pymdp_code, render_rxinfer_code, render_discopy_code,
                render_jax_code, generate_render_report
            )
E           ImportError: cannot import name 'render_pymdp_code' from 'render' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/render/__init__.py)

src/tests/test_core_modules.py:164: ImportError

During handling of the above exception, another exception occurred:

self = &lt;src.tests.test_core_modules.TestRenderModuleComprehensive object at 0x1295e2fd0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_render_module_imports(self):
        """Test that render module can be imported and has expected structure."""
        try:
            from render import (
                render_pymdp_code, render_rxinfer_code, render_discopy_code,
                render_jax_code, generate_render_report
            )
    
            # Test that functions are callable
            assert callable(render_pymdp_code), "render_pymdp_code should be callable"
            assert callable(render_rxinfer_code), "render_rxinfer_code should be callable"
            assert callable(render_discopy_code), "render_discopy_code should be callable"
            assert callable(render_jax_code), "render_jax_code should be callable"
            assert callable(generate_render_report), "generate_render_report should be callable"
    
            logging.info("Render module imports validated")
    
        except ImportError as e:
&gt;           pytest.fail(f"Failed to import render module: {e}")
E           Failed: Failed to import render module: cannot import name 'render_pymdp_code' from 'render' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/render/__init__.py)

src/tests/test_core_modules.py:179: Failed</failure></testcase><testcase classname="src.tests.test_core_modules.TestRenderModuleComprehensive" name="test_pymdp_rendering" time="0.002"><failure message="ImportError: cannot import name 'render_pymdp_code' from 'render' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/render/__init__.py)">self = &lt;src.tests.test_core_modules.TestRenderModuleComprehensive object at 0x1295e3110&gt;
sample_gnn_files = {'empty_file': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmp9dk3i3n1/empty_file.md'), 'invalid_synta...'missing_sections': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmp9dk3i3n1/missing_sections.md'), ...}
isolated_temp_dir = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpu7adwd8n')

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_pymdp_rendering(self, sample_gnn_files, isolated_temp_dir):
        """Test PyMDP code rendering."""
&gt;       from render import render_pymdp_code
E       ImportError: cannot import name 'render_pymdp_code' from 'render' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/render/__init__.py)

src/tests/test_core_modules.py:185: ImportError</failure></testcase><testcase classname="src.tests.test_core_modules.TestRenderModuleComprehensive" name="test_rxinfer_rendering" time="0.002"><failure message="ImportError: cannot import name 'render_rxinfer_code' from 'render' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/render/__init__.py)">self = &lt;src.tests.test_core_modules.TestRenderModuleComprehensive object at 0x1295ecb00&gt;
sample_gnn_files = {'empty_file': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmp5gx3lhjt/empty_file.md'), 'invalid_synta...'missing_sections': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmp5gx3lhjt/missing_sections.md'), ...}
isolated_temp_dir = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpyycdrrja')

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_rxinfer_rendering(self, sample_gnn_files, isolated_temp_dir):
        """Test RxInfer code rendering."""
&gt;       from render import render_rxinfer_code
E       ImportError: cannot import name 'render_rxinfer_code' from 'render' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/render/__init__.py)

src/tests/test_core_modules.py:209: ImportError</failure></testcase><testcase classname="src.tests.test_core_modules.TestRenderModuleComprehensive" name="test_discopy_rendering" time="0.004"><failure message="ImportError: cannot import name 'render_discopy_code' from 'render' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/render/__init__.py)">self = &lt;src.tests.test_core_modules.TestRenderModuleComprehensive object at 0x1295ecc30&gt;
sample_gnn_files = {'empty_file': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpc4ne5vpn/empty_file.md'), 'invalid_synta...'missing_sections': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpc4ne5vpn/missing_sections.md'), ...}
isolated_temp_dir = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmp0b83wp6w')

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_discopy_rendering(self, sample_gnn_files, isolated_temp_dir):
        """Test DisCoPy code rendering."""
&gt;       from render import render_discopy_code
E       ImportError: cannot import name 'render_discopy_code' from 'render' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/render/__init__.py)

src/tests/test_core_modules.py:232: ImportError</failure></testcase><testcase classname="src.tests.test_core_modules.TestExecuteModuleComprehensive" name="test_execute_module_imports" time="0.002"><failure message="Failed: Failed to import execute module: cannot import name 'execute_script_safely' from 'execute' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/execute/__init__.py)">self = &lt;src.tests.test_core_modules.TestExecuteModuleComprehensive object at 0x1295e3250&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_execute_module_imports(self):
        """Test that execute module can be imported and has expected structure."""
        try:
&gt;           from execute import (
                execute_script_safely, validate_execution_environment,
                run_pymdp_simulation, run_rxinfer_simulation,
                generate_execution_report
            )
E           ImportError: cannot import name 'execute_script_safely' from 'execute' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/execute/__init__.py)

src/tests/test_core_modules.py:259: ImportError

During handling of the above exception, another exception occurred:

self = &lt;src.tests.test_core_modules.TestExecuteModuleComprehensive object at 0x1295e3250&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_execute_module_imports(self):
        """Test that execute module can be imported and has expected structure."""
        try:
            from execute import (
                execute_script_safely, validate_execution_environment,
                run_pymdp_simulation, run_rxinfer_simulation,
                generate_execution_report
            )
    
            # Test that functions are callable
            assert callable(execute_script_safely), "execute_script_safely should be callable"
            assert callable(validate_execution_environment), "validate_execution_environment should be callable"
            assert callable(run_pymdp_simulation), "run_pymdp_simulation should be callable"
            assert callable(run_rxinfer_simulation), "run_rxinfer_simulation should be callable"
            assert callable(generate_execution_report), "generate_execution_report should be callable"
    
            logging.info("Execute module imports validated")
    
        except ImportError as e:
&gt;           pytest.fail(f"Failed to import execute module: {e}")
E           Failed: Failed to import execute module: cannot import name 'execute_script_safely' from 'execute' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/execute/__init__.py)

src/tests/test_core_modules.py:275: Failed</failure></testcase><testcase classname="src.tests.test_core_modules.TestExecuteModuleComprehensive" name="test_execution_environment_validation" time="0.001"><failure message="ImportError: cannot import name 'validate_execution_environment' from 'execute' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/execute/__init__.py)">self = &lt;src.tests.test_core_modules.TestExecuteModuleComprehensive object at 0x1295e3390&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_execution_environment_validation(self):
        """Test execution environment validation."""
&gt;       from execute import validate_execution_environment
E       ImportError: cannot import name 'validate_execution_environment' from 'execute' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/execute/__init__.py)

src/tests/test_core_modules.py:281: ImportError</failure></testcase><testcase classname="src.tests.test_core_modules.TestExecuteModuleComprehensive" name="test_safe_script_execution" time="0.001"><failure message="ImportError: cannot import name 'execute_script_safely' from 'execute' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/execute/__init__.py)">self = &lt;src.tests.test_core_modules.TestExecuteModuleComprehensive object at 0x1295ecd60&gt;
mock_subprocess = &lt;function safe_subprocess.&lt;locals&gt;.safe_run at 0x129a1a480&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_safe_script_execution(self, mock_subprocess):
        """Test safe script execution."""
&gt;       from execute import execute_script_safely
E       ImportError: cannot import name 'execute_script_safely' from 'execute' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/execute/__init__.py)

src/tests/test_core_modules.py:299: ImportError</failure></testcase><testcase classname="src.tests.test_core_modules.TestLLMModuleComprehensive" name="test_llm_module_imports" time="0.001"><failure message="Failed: Failed to import LLM module: cannot import name 'generate_model_description' from 'llm' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/llm/__init__.py)">self = &lt;src.tests.test_core_modules.TestLLMModuleComprehensive object at 0x1295e34d0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_llm_module_imports(self):
        """Test that LLM module can be imported and has expected structure."""
        try:
&gt;           from llm import (
                analyze_gnn_model, generate_model_description,
                validate_model_structure, enhance_model_parameters,
                generate_llm_report
            )
E           ImportError: cannot import name 'generate_model_description' from 'llm' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/llm/__init__.py)

src/tests/test_core_modules.py:322: ImportError

During handling of the above exception, another exception occurred:

self = &lt;src.tests.test_core_modules.TestLLMModuleComprehensive object at 0x1295e34d0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_llm_module_imports(self):
        """Test that LLM module can be imported and has expected structure."""
        try:
            from llm import (
                analyze_gnn_model, generate_model_description,
                validate_model_structure, enhance_model_parameters,
                generate_llm_report
            )
    
            # Test that functions are callable
            assert callable(analyze_gnn_model), "analyze_gnn_model should be callable"
            assert callable(generate_model_description), "generate_model_description should be callable"
            assert callable(validate_model_structure), "validate_model_structure should be callable"
            assert callable(enhance_model_parameters), "enhance_model_parameters should be callable"
            assert callable(generate_llm_report), "generate_llm_report should be callable"
    
            logging.info("LLM module imports validated")
    
        except ImportError as e:
&gt;           pytest.fail(f"Failed to import LLM module: {e}")
E           Failed: Failed to import LLM module: cannot import name 'generate_model_description' from 'llm' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/llm/__init__.py)

src/tests/test_core_modules.py:338: Failed</failure></testcase><testcase classname="src.tests.test_core_modules.TestLLMModuleComprehensive" name="test_llm_model_analysis" time="12.286" /><testcase classname="src.tests.test_core_modules.TestLLMModuleComprehensive" name="test_llm_description_generation" time="0.001"><failure message="ImportError: cannot import name 'generate_model_description' from 'llm' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/llm/__init__.py)">self = &lt;src.tests.test_core_modules.TestLLMModuleComprehensive object at 0x1295ece90&gt;
mock_llm_provider = &lt;src.tests.conftest.mock_llm_provider.&lt;locals&gt;.MockLLMProvider object at 0x12afbc1a0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_llm_description_generation(self, mock_llm_provider):
        """Test LLM description generation."""
&gt;       from llm import generate_model_description
E       ImportError: cannot import name 'generate_model_description' from 'llm' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/llm/__init__.py)

src/tests/test_core_modules.py:368: ImportError</failure></testcase><testcase classname="src.tests.test_core_modules.TestMCPModuleComprehensive" name="test_mcp_module_imports" time="0.005"><failure message="Failed: Failed to import MCP module: cannot import name 'handle_mcp_request' from 'mcp' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/mcp/__init__.py)">self = &lt;src.tests.test_core_modules.TestMCPModuleComprehensive object at 0x1295e3750&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_mcp_module_imports(self):
        """Test that MCP module can be imported and has expected structure."""
        try:
&gt;           from mcp import (
                register_tools, get_available_tools, handle_mcp_request,
                start_mcp_server, generate_mcp_report
            )
E           ImportError: cannot import name 'handle_mcp_request' from 'mcp' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/mcp/__init__.py)

src/tests/test_core_modules.py:395: ImportError

During handling of the above exception, another exception occurred:

self = &lt;src.tests.test_core_modules.TestMCPModuleComprehensive object at 0x1295e3750&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_mcp_module_imports(self):
        """Test that MCP module can be imported and has expected structure."""
        try:
            from mcp import (
                register_tools, get_available_tools, handle_mcp_request,
                start_mcp_server, generate_mcp_report
            )
    
            # Test that functions are callable
            assert callable(register_tools), "register_tools should be callable"
            assert callable(get_available_tools), "get_available_tools should be callable"
            assert callable(handle_mcp_request), "handle_mcp_request should be callable"
            assert callable(start_mcp_server), "start_mcp_server should be callable"
            assert callable(generate_mcp_report), "generate_mcp_report should be callable"
    
            logging.info("MCP module imports validated")
    
        except ImportError as e:
&gt;           pytest.fail(f"Failed to import MCP module: {e}")
E           Failed: Failed to import MCP module: cannot import name 'handle_mcp_request' from 'mcp' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/mcp/__init__.py)

src/tests/test_core_modules.py:410: Failed</failure></testcase><testcase classname="src.tests.test_core_modules.TestMCPModuleComprehensive" name="test_mcp_tool_registration" time="0.006" /><testcase classname="src.tests.test_core_modules.TestMCPModuleComprehensive" name="test_mcp_request_handling" time="0.000"><failure message="ImportError: cannot import name 'handle_mcp_request' from 'mcp' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/mcp/__init__.py)">self = &lt;src.tests.test_core_modules.TestMCPModuleComprehensive object at 0x1295ecfc0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_mcp_request_handling(self):
        """Test MCP request handling."""
&gt;       from mcp import handle_mcp_request
E       ImportError: cannot import name 'handle_mcp_request' from 'mcp' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/mcp/__init__.py)

src/tests/test_core_modules.py:439: ImportError</failure></testcase><testcase classname="src.tests.test_core_modules.TestOntologyModuleComprehensive" name="test_ontology_module_imports" time="0.001"><failure message="Failed: Failed to import ontology module: cannot import name 'process_ontology' from 'ontology' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/ontology/__init__.py)">self = &lt;src.tests.test_core_modules.TestOntologyModuleComprehensive object at 0x1295e39d0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_ontology_module_imports(self):
        """Test that ontology module can be imported and has expected structure."""
        try:
&gt;           from ontology import (
                process_ontology, validate_ontology_terms,
                map_gnn_to_ontology, generate_ontology_report
            )
E           ImportError: cannot import name 'process_ontology' from 'ontology' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/ontology/__init__.py). Did you mean: 'process_gnn_ontology'?

src/tests/test_core_modules.py:466: ImportError

During handling of the above exception, another exception occurred:

self = &lt;src.tests.test_core_modules.TestOntologyModuleComprehensive object at 0x1295e39d0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_ontology_module_imports(self):
        """Test that ontology module can be imported and has expected structure."""
        try:
            from ontology import (
                process_ontology, validate_ontology_terms,
                map_gnn_to_ontology, generate_ontology_report
            )
    
            # Test that functions are callable
            assert callable(process_ontology), "process_ontology should be callable"
            assert callable(validate_ontology_terms), "validate_ontology_terms should be callable"
            assert callable(map_gnn_to_ontology), "map_gnn_to_ontology should be callable"
            assert callable(generate_ontology_report), "generate_ontology_report should be callable"
    
            logging.info("Ontology module imports validated")
    
        except ImportError as e:
&gt;           pytest.fail(f"Failed to import ontology module: {e}")
E           Failed: Failed to import ontology module: cannot import name 'process_ontology' from 'ontology' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/ontology/__init__.py)

src/tests/test_core_modules.py:480: Failed</failure></testcase><testcase classname="src.tests.test_core_modules.TestOntologyModuleComprehensive" name="test_ontology_processing" time="0.000"><failure message="ImportError: cannot import name 'process_ontology' from 'ontology' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/ontology/__init__.py). Did you mean: 'process_gnn_ontology'?">self = &lt;src.tests.test_core_modules.TestOntologyModuleComprehensive object at 0x1295e3b10&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_ontology_processing(self):
        """Test ontology processing."""
&gt;       from ontology import process_ontology
E       ImportError: cannot import name 'process_ontology' from 'ontology' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/ontology/__init__.py). Did you mean: 'process_gnn_ontology'?

src/tests/test_core_modules.py:486: ImportError</failure></testcase><testcase classname="src.tests.test_core_modules.TestOntologyModuleComprehensive" name="test_ontology_term_validation" time="0.000"><failure message="ImportError: cannot import name 'validate_ontology_terms' from 'ontology' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/ontology/__init__.py)">self = &lt;src.tests.test_core_modules.TestOntologyModuleComprehensive object at 0x1295ed0f0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_ontology_term_validation(self):
        """Test ontology term validation."""
&gt;       from ontology import validate_ontology_terms
E       ImportError: cannot import name 'validate_ontology_terms' from 'ontology' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/ontology/__init__.py)

src/tests/test_core_modules.py:504: ImportError</failure></testcase><testcase classname="src.tests.test_core_modules.TestSiteModuleComprehensive" name="test_site_module_imports" time="0.000"><failure message="Failed: Failed to import site module: cannot import name 'generate_site' from 'site' (/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site.py)">self = &lt;src.tests.test_core_modules.TestSiteModuleComprehensive object at 0x1295e3c50&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_site_module_imports(self):
        """Test that site module can be imported and has expected structure."""
        try:
&gt;           from site import (
                generate_site, create_html_report, generate_site_index,
                create_site_navigation, generate_site_report
            )
E           ImportError: cannot import name 'generate_site' from 'site' (/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site.py)

src/tests/test_core_modules.py:531: ImportError

During handling of the above exception, another exception occurred:

self = &lt;src.tests.test_core_modules.TestSiteModuleComprehensive object at 0x1295e3c50&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_site_module_imports(self):
        """Test that site module can be imported and has expected structure."""
        try:
            from site import (
                generate_site, create_html_report, generate_site_index,
                create_site_navigation, generate_site_report
            )
    
            # Test that functions are callable
            assert callable(generate_site), "generate_site should be callable"
            assert callable(create_html_report), "create_html_report should be callable"
            assert callable(generate_site_index), "generate_site_index should be callable"
            assert callable(create_site_navigation), "create_site_navigation should be callable"
            assert callable(generate_site_report), "generate_site_report should be callable"
    
            logging.info("Site module imports validated")
    
        except ImportError as e:
&gt;           pytest.fail(f"Failed to import site module: {e}")
E           Failed: Failed to import site module: cannot import name 'generate_site' from 'site' (/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site.py)

src/tests/test_core_modules.py:546: Failed</failure></testcase><testcase classname="src.tests.test_core_modules.TestSiteModuleComprehensive" name="test_site_generation" time="0.001"><failure message="ImportError: cannot import name 'generate_site' from 'site' (/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site.py)">self = &lt;src.tests.test_core_modules.TestSiteModuleComprehensive object at 0x1295e3d90&gt;
isolated_temp_dir = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpv9upc0gx')

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_site_generation(self, isolated_temp_dir):
        """Test site generation."""
&gt;       from site import generate_site
E       ImportError: cannot import name 'generate_site' from 'site' (/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site.py)

src/tests/test_core_modules.py:552: ImportError</failure></testcase><testcase classname="src.tests.test_core_modules.TestSiteModuleComprehensive" name="test_html_report_creation" time="0.001"><failure message="ImportError: cannot import name 'create_html_report' from 'site' (/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site.py)">self = &lt;src.tests.test_core_modules.TestSiteModuleComprehensive object at 0x1295ed220&gt;
isolated_temp_dir = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpjjoh4t6p')

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_html_report_creation(self, isolated_temp_dir):
        """Test HTML report creation."""
&gt;       from site import create_html_report
E       ImportError: cannot import name 'create_html_report' from 'site' (/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site.py)

src/tests/test_core_modules.py:580: ImportError</failure></testcase><testcase classname="src.tests.test_core_modules.TestSAPFModuleComprehensive" name="test_sapf_module_imports" time="0.004"><failure message="Failed: Failed to import SAPF module: cannot import name 'generate_sapf_audio' from 'sapf' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/sapf/__init__.py)">self = &lt;src.tests.test_core_modules.TestSAPFModuleComprehensive object at 0x1295e3ed0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_sapf_module_imports(self):
        """Test that SAPF module can be imported and has expected structure."""
        try:
&gt;           from sapf import (
                convert_gnn_to_sapf, generate_sapf_audio, validate_sapf_code,
                create_sapf_visualization, generate_sapf_report
            )
E           ImportError: cannot import name 'generate_sapf_audio' from 'sapf' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/sapf/__init__.py)

src/tests/test_core_modules.py:616: ImportError

During handling of the above exception, another exception occurred:

self = &lt;src.tests.test_core_modules.TestSAPFModuleComprehensive object at 0x1295e3ed0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_sapf_module_imports(self):
        """Test that SAPF module can be imported and has expected structure."""
        try:
            from sapf import (
                convert_gnn_to_sapf, generate_sapf_audio, validate_sapf_code,
                create_sapf_visualization, generate_sapf_report
            )
    
            # Test that functions are callable
            assert callable(convert_gnn_to_sapf), "convert_gnn_to_sapf should be callable"
            assert callable(generate_sapf_audio), "generate_sapf_audio should be callable"
            assert callable(validate_sapf_code), "validate_sapf_code should be callable"
            assert callable(create_sapf_visualization), "create_sapf_visualization should be callable"
            assert callable(generate_sapf_report), "generate_sapf_report should be callable"
    
            logging.info("SAPF module imports validated")
    
        except ImportError as e:
&gt;           pytest.fail(f"Failed to import SAPF module: {e}")
E           Failed: Failed to import SAPF module: cannot import name 'generate_sapf_audio' from 'sapf' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/sapf/__init__.py)

src/tests/test_core_modules.py:631: Failed</failure></testcase><testcase classname="src.tests.test_core_modules.TestSAPFModuleComprehensive" name="test_gnn_to_sapf_conversion" time="0.002" /><testcase classname="src.tests.test_core_modules.TestSAPFModuleComprehensive" name="test_sapf_audio_generation" time="0.001"><failure message="ImportError: cannot import name 'generate_sapf_audio' from 'sapf' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/sapf/__init__.py)">self = &lt;src.tests.test_core_modules.TestSAPFModuleComprehensive object at 0x1295ed350&gt;
isolated_temp_dir = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpa3adp_rh')

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_sapf_audio_generation(self, isolated_temp_dir):
        """Test SAPF audio generation."""
&gt;       from sapf import generate_sapf_audio
E       ImportError: cannot import name 'generate_sapf_audio' from 'sapf' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/sapf/__init__.py)

src/tests/test_core_modules.py:654: ImportError</failure></testcase><testcase classname="src.tests.test_core_modules.TestCoreModuleIntegration" name="test_module_coordination" time="0.005" /><testcase classname="src.tests.test_core_modules.TestCoreModuleIntegration" name="test_module_data_flow" time="0.003" /><testcase classname="src.tests.test_core_modules" name="test_core_module_completeness" time="0.000" /><testcase classname="src.tests.test_core_modules" name="test_core_module_performance" time="0.000" /><testcase classname="src.tests.test_environment.TestPythonEnvironment" name="test_python_version_compatibility" time="0.000" /><testcase classname="src.tests.test_environment.TestPythonEnvironment" name="test_python_path_configuration" time="0.000" /><testcase classname="src.tests.test_environment.TestPythonEnvironment" name="test_project_structure_validation" time="0.001" /><testcase classname="src.tests.test_environment.TestDependencyAvailability" name="test_core_python_modules" time="0.000" /><testcase classname="src.tests.test_environment.TestDependencyAvailability" name="test_testing_dependencies" time="0.000" /><testcase classname="src.tests.test_environment.TestDependencyAvailability" name="test_optional_dependencies_graceful_degradation" time="0.790" /><testcase classname="src.tests.test_environment.TestProjectConfiguration" name="test_requirements_file_validity" time="0.001" /><testcase classname="src.tests.test_environment.TestProjectConfiguration" name="test_pipeline_scripts_discovery" time="0.001" /><testcase classname="src.tests.test_environment.TestProjectConfiguration" name="test_utility_modules_availability" time="0.002" /><testcase classname="src.tests.test_environment.TestSystemResources" name="test_disk_space_availability" time="0.000" /><testcase classname="src.tests.test_environment.TestSystemResources" name="test_memory_availability" time="0.000" /><testcase classname="src.tests.test_environment.TestSystemResources" name="test_temporary_directory_access" time="0.001" /><testcase classname="src.tests.test_environment.TestEnvironmentVariables" name="test_test_mode_environment_variables" time="0.000" /><testcase classname="src.tests.test_environment.TestEnvironmentVariables" name="test_python_path_environment" time="0.000" /><testcase classname="src.tests.test_environment.TestEnvironmentVariables" name="test_test_configuration_environment" time="0.000" /><testcase classname="src.tests.test_environment.TestImportCapabilities" name="test_main_module_import" time="0.000" /><testcase classname="src.tests.test_environment.TestImportCapabilities" name="test_pipeline_step_imports" time="0.002" /><testcase classname="src.tests.test_environment.TestImportCapabilities" name="test_test_module_imports" time="0.000" /><testcase classname="src.tests.test_environment.TestEnvironmentIntegration" name="test_logging_system_integration" time="0.000" /><testcase classname="src.tests.test_environment.TestEnvironmentIntegration" name="test_path_resolution_integration" time="0.001" /><testcase classname="src.tests.test_environment.TestEnvironmentIntegration" name="test_test_environment_validation_integration" time="0.000" /><testcase classname="src.tests.test_environment" name="test_requirements_parsing" time="0.000" /><testcase classname="src.tests.test_environment" name="test_subprocess_execution_capability" time="0.001" /><testcase classname="src.tests.test_gnn_type_checker.TestGNNTypeChecker" name="test_check_directory" time="0.003" /><testcase classname="src.tests.test_gnn_type_checker.TestGNNTypeChecker" name="test_check_invalid_file" time="0.001"><failure message="ValueError: too many values to unpack (expected 3)">self = &lt;src.tests.test_gnn_type_checker.TestGNNTypeChecker testMethod=test_check_invalid_file&gt;

    def test_check_invalid_file(self):
        """Test checking an invalid GNN file."""
        with NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
            f.write(self.invalid_gnn_content)
            temp_file = f.name
    
        try:
&gt;           is_valid, errors, warnings = self.checker.check_file(temp_file)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^
E           ValueError: too many values to unpack (expected 3)

src/tests/test_gnn_type_checker.py:122: ValueError</failure></testcase><testcase classname="src.tests.test_gnn_type_checker.TestGNNTypeChecker" name="test_check_valid_file" time="0.001"><failure message="ValueError: too many values to unpack (expected 3)">self = &lt;src.tests.test_gnn_type_checker.TestGNNTypeChecker testMethod=test_check_valid_file&gt;

    def test_check_valid_file(self):
        """Test checking a valid GNN file."""
        with NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
            f.write(self.valid_gnn_content)
            temp_file = f.name
    
        try:
&gt;           is_valid, errors, warnings = self.checker.check_file(temp_file)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^
E           ValueError: too many values to unpack (expected 3)

src/tests/test_gnn_type_checker.py:108: ValueError</failure></testcase><testcase classname="src.tests.test_gnn_type_checker.TestGNNTypeChecker" name="test_generate_report" time="0.001"><failure message="AssertionError: 'Checked 2 files, 1 valid, 1 invalid' not found in '# GNN Type Checker Report\nGenerated: 2025-07-14 10:10:27\n\n## #x1F4CA Summary\n\n- **Total Files Checked:** 2\n- **Valid Files:** 1 ✅\n- **Invalid Files:** 1 ❌\n- **Total Errors:** 2\n- **Total Warnings:** 1\n- **Success Rate:** 50.0%\n\n## #x1F4C1 File Analysis\n\n### file1.md: ✅ VALID\n**Path:** `file1.md`\n**Warnings:**\n  - ⚠️ Warning 1\n\n### file2.md: ❌ INVALID\n**Path:** `file2.md`\n**Errors:**\n  - ❌ Error 1\n  - ❌ Error 2\n\n## #x1F3AF Overall Assessment\n\n✅ **1 files are valid**\n❌ **1 files have issues**\n⚠️ **1 warnings found** - Review recommended\n\n---\n*Report generated by GNN Type Checker v1.0*'">self = &lt;src.tests.test_gnn_type_checker.TestGNNTypeChecker testMethod=test_generate_report&gt;

    def test_generate_report(self):
        """Test generating a report from check results."""
        results = {
            "file1.md": {
                "is_valid": True,
                "errors": [],
                "warnings": ["Warning 1"]
            },
            "file2.md": {
                "is_valid": False,
                "errors": ["Error 1", "Error 2"],
                "warnings": []
            }
        }
    
        with NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
            temp_file = f.name
    
        try:
            # Get directory and filename from temp_file
            temp_file_path = Path(temp_file)
            output_dir = temp_file_path.parent
            report_filename = temp_file_path.name
    
            report = self.checker.generate_report(results, output_dir_base=output_dir, report_md_filename=report_filename)
    
            # Check that the report was written to the file
            self.assertTrue(os.path.exists(temp_file))
            with open(temp_file, 'r') as f:
                file_content = f.read()
                self.assertEqual(file_content, report)
    
            # Check report content
&gt;           self.assertIn("Checked 2 files, 1 valid, 1 invalid", report)
E           AssertionError: 'Checked 2 files, 1 valid, 1 invalid' not found in '# GNN Type Checker Report\nGenerated: 2025-07-14 10:10:27\n\n## #x1F4CA Summary\n\n- **Total Files Checked:** 2\n- **Valid Files:** 1 ✅\n- **Invalid Files:** 1 ❌\n- **Total Errors:** 2\n- **Total Warnings:** 1\n- **Success Rate:** 50.0%\n\n## #x1F4C1 File Analysis\n\n### file1.md: ✅ VALID\n**Path:** `file1.md`\n**Warnings:**\n  - ⚠️ Warning 1\n\n### file2.md: ❌ INVALID\n**Path:** `file2.md`\n**Errors:**\n  - ❌ Error 1\n  - ❌ Error 2\n\n## #x1F3AF Overall Assessment\n\n✅ **1 files are valid**\n❌ **1 files have issues**\n⚠️ **1 warnings found** - Review recommended\n\n---\n*Report generated by GNN Type Checker v1.0*'

src/tests/test_gnn_type_checker.py:189: AssertionError</failure></testcase><testcase classname="src.tests.test_main_orchestrator.TestMainOrchestratorImport" name="test_main_orchestrator_file_exists" time="0.001" /><testcase classname="src.tests.test_main_orchestrator.TestMainOrchestratorImport" name="test_main_orchestrator_imports" time="0.000" /><testcase classname="src.tests.test_main_orchestrator.TestMainOrchestratorImport" name="test_main_orchestrator_component_availability" time="0.000" /><testcase classname="src.tests.test_main_orchestrator.TestArgumentParsing" name="test_argument_parser_basic_functionality" time="0.000" /><testcase classname="src.tests.test_main_orchestrator.TestArgumentParsing" name="test_argument_validation" time="0.000" /><testcase classname="src.tests.test_main_orchestrator.TestArgumentParsing" name="test_argument_defaults" time="0.000" /><testcase classname="src.tests.test_main_orchestrator.TestPipelineScriptDiscovery" name="test_pipeline_script_discovery_logic" time="0.000" /><testcase classname="src.tests.test_main_orchestrator.TestPipelineScriptDiscovery" name="test_pipeline_script_sorting" time="0.000" /><testcase classname="src.tests.test_main_orchestrator.TestVirtualEnvironmentHandling" name="test_virtual_environment_detection" time="0.003" /><testcase classname="src.tests.test_main_orchestrator.TestVirtualEnvironmentHandling" name="test_python_executable_detection" time="0.000" /><testcase classname="src.tests.test_main_orchestrator.TestStepExecution" name="test_step_execution_interface" time="0.001" /><testcase classname="src.tests.test_main_orchestrator.TestStepExecution" name="test_step_argument_building" time="0.000" /><testcase classname="src.tests.test_main_orchestrator.TestPipelineCoordination" name="test_pipeline_coordination_flow" time="0.002" /><testcase classname="src.tests.test_main_orchestrator.TestPipelineCoordination" name="test_pipeline_configuration_consistency" time="0.000" /><testcase classname="src.tests.test_main_orchestrator.TestPerformanceTracking" name="test_system_info_collection" time="0.000" /><testcase classname="src.tests.test_main_orchestrator.TestPerformanceTracking" name="test_performance_metrics_structure" time="0.000" /><testcase classname="src.tests.test_main_orchestrator.TestOutputGeneration" name="test_output_directory_structure" time="0.001" /><testcase classname="src.tests.test_main_orchestrator.TestOutputGeneration" name="test_pipeline_summary_generation" time="0.000" /><testcase classname="src.tests.test_main_orchestrator.TestErrorHandlingAndRecovery" name="test_step_failure_handling" time="0.001" /><testcase classname="src.tests.test_main_orchestrator.TestErrorHandlingAndRecovery" name="test_graceful_degradation" time="0.000" /><testcase classname="src.tests.test_main_orchestrator.TestErrorHandlingAndRecovery" name="test_error_reporting" time="0.001" /><testcase classname="src.tests.test_main_orchestrator.TestConfigurationValidation" name="test_configuration_schema_validation" time="0.000" /><testcase classname="src.tests.test_main_orchestrator.TestConfigurationValidation" name="test_environment_variable_consistency" time="0.000" /><testcase classname="src.tests.test_main_orchestrator.TestEndToEndIntegration" name="test_minimal_pipeline_execution" time="0.002" /><testcase classname="src.tests.test_main_orchestrator.TestEndToEndIntegration" name="test_pipeline_with_failures" time="0.001" /><testcase classname="src.tests.test_main_orchestrator" name="test_main_orchestrator_help_functionality" time="0.000" /><testcase classname="src.tests.test_main_orchestrator" name="test_main_orchestrator_performance_characteristics" time="0.000" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptDiscovery" name="test_all_pipeline_scripts_exist" time="0.000" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptDiscovery" name="test_pipeline_script_structure[1_gnn.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptDiscovery" name="test_pipeline_script_structure[2_setup.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptDiscovery" name="test_pipeline_script_structure[3_tests.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptDiscovery" name="test_pipeline_script_structure[4_type_checker.py]" time="0.000" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptDiscovery" name="test_pipeline_script_structure[5_export.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptDiscovery" name="test_pipeline_script_structure[6_visualization.py]" time="0.000" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptDiscovery" name="test_pipeline_script_structure[7_mcp.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptDiscovery" name="test_pipeline_script_structure[8_ontology.py]" time="0.000" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptDiscovery" name="test_pipeline_script_structure[9_render.py]" time="0.000" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptDiscovery" name="test_pipeline_script_structure[10_execute.py]" time="0.000" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptDiscovery" name="test_pipeline_script_structure[11_llm.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptDiscovery" name="test_pipeline_script_structure[12_site.py]" time="0.000" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptDiscovery" name="test_pipeline_script_structure[13_sapf.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptImports" name="test_script_import_capability[1_gnn.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptImports" name="test_script_import_capability[2_setup.py]" time="0.002" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptImports" name="test_script_import_capability[3_tests.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptImports" name="test_script_import_capability[4_type_checker.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptImports" name="test_script_import_capability[5_export.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptImports" name="test_script_import_capability[6_visualization.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptImports" name="test_script_import_capability[7_mcp.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptImports" name="test_script_import_capability[8_ontology.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptImports" name="test_script_import_capability[9_render.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptImports" name="test_script_import_capability[10_execute.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptImports" name="test_script_import_capability[11_llm.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptImports" name="test_script_import_capability[12_site.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptImports" name="test_script_import_capability[13_sapf.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptExecution" name="test_script_execution_with_mocks[1_gnn.py]" time="0.002" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptExecution" name="test_script_execution_with_mocks[2_setup.py]" time="0.002" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptExecution" name="test_script_execution_with_mocks[3_tests.py]" time="0.002" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptExecution" name="test_script_execution_with_mocks[4_type_checker.py]" time="0.002" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptExecution" name="test_script_execution_with_mocks[5_export.py]" time="0.002" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptExecution" name="test_script_execution_with_mocks[6_visualization.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptExecution" name="test_script_execution_with_mocks[7_mcp.py]" time="0.004" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptExecution" name="test_script_execution_with_mocks[8_ontology.py]" time="0.002" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptExecution" name="test_script_execution_with_mocks[9_render.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptExecution" name="test_script_execution_with_mocks[10_execute.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptExecution" name="test_script_execution_with_mocks[11_llm.py]" time="0.002" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptExecution" name="test_script_execution_with_mocks[12_site.py]" time="0.002" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptExecution" name="test_script_execution_with_mocks[13_sapf.py]" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestStep1GNNComprehensive" name="test_step1_gnn_file_discovery" time="0.002" /><testcase classname="src.tests.test_pipeline_scripts.TestStep1GNNComprehensive" name="test_step1_gnn_validation" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestStep2SetupComprehensive" name="test_step2_environment_validation" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestStep4TypeCheckerComprehensive" name="test_step4_type_checking" time="0.002" /><testcase classname="src.tests.test_pipeline_scripts.TestStep5ExportComprehensive" name="test_step5_export_formats" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestStep6VisualizationComprehensive" name="test_step6_visualization_generation" time="0.002" /><testcase classname="src.tests.test_pipeline_scripts.TestStep7MCPComprehensive" name="test_step7_mcp_tools" time="0.000" /><testcase classname="src.tests.test_pipeline_scripts.TestStep8OntologyComprehensive" name="test_step8_ontology_processing" time="0.001"><failure message="ImportError: cannot import name 'process_ontology' from 'ontology' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/ontology/__init__.py). Did you mean: 'process_gnn_ontology'?">self = &lt;src.tests.test_pipeline_scripts.TestStep8OntologyComprehensive object at 0x1297116d0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_step8_ontology_processing(self):
        """Test ontology processing functionality."""
&gt;       from ontology import process_ontology, validate_ontology_terms
E       ImportError: cannot import name 'process_ontology' from 'ontology' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/ontology/__init__.py). Did you mean: 'process_gnn_ontology'?

src/tests/test_pipeline_scripts.py:393: ImportError</failure></testcase><testcase classname="src.tests.test_pipeline_scripts.TestStep9RenderComprehensive" name="test_step9_code_rendering" time="0.002"><failure message="ImportError: cannot import name 'render_pymdp_code' from 'render' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/render/__init__.py)">self = &lt;src.tests.test_pipeline_scripts.TestStep9RenderComprehensive object at 0x129711810&gt;
sample_gnn_files = {'empty_file': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpgyrfu2ku/empty_file.md'), 'invalid_synta...'missing_sections': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpgyrfu2ku/missing_sections.md'), ...}
isolated_temp_dir = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmpvspdrzbl')

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_step9_code_rendering(self, sample_gnn_files, isolated_temp_dir):
        """Test code rendering functionality."""
&gt;       from render import render_pymdp_code, render_rxinfer_code
E       ImportError: cannot import name 'render_pymdp_code' from 'render' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/render/__init__.py)

src/tests/test_pipeline_scripts.py:415: ImportError</failure></testcase><testcase classname="src.tests.test_pipeline_scripts.TestStep10ExecuteComprehensive" name="test_step10_execution_safety" time="0.001"><failure message="ImportError: cannot import name 'execute_script_safely' from 'execute' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/execute/__init__.py)">self = &lt;src.tests.test_pipeline_scripts.TestStep10ExecuteComprehensive object at 0x129711950&gt;
mock_subprocess = &lt;function safe_subprocess.&lt;locals&gt;.safe_run at 0x12ea64220&gt;
mock_dangerous_operations = {'dir_delete': &lt;MagicMock id='5079286512'&gt;, 'file_delete': &lt;MagicMock id='5079286176'&gt;, 'network': &lt;MagicMock id='5079287184'&gt;, 'remove': &lt;MagicMock id='5079286176'&gt;, ...}

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_step10_execution_safety(self, mock_subprocess, mock_dangerous_operations):
        """Test execution safety mechanisms."""
&gt;       from execute import execute_script_safely, validate_execution_environment
E       ImportError: cannot import name 'execute_script_safely' from 'execute' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/execute/__init__.py)

src/tests/test_pipeline_scripts.py:440: ImportError</failure></testcase><testcase classname="src.tests.test_pipeline_scripts.TestStep11LLMComprehensive" name="test_step11_llm_operations" time="0.001"><failure message="ImportError: cannot import name 'generate_model_description' from 'llm' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/llm/__init__.py)">self = &lt;src.tests.test_pipeline_scripts.TestStep11LLMComprehensive object at 0x129711a90&gt;
mock_llm_provider = &lt;src.tests.conftest.mock_llm_provider.&lt;locals&gt;.MockLLMProvider object at 0x12e933620&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_step11_llm_operations(self, mock_llm_provider):
        """Test LLM operations."""
&gt;       from llm import analyze_gnn_model, generate_model_description
E       ImportError: cannot import name 'generate_model_description' from 'llm' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/llm/__init__.py)

src/tests/test_pipeline_scripts.py:465: ImportError</failure></testcase><testcase classname="src.tests.test_pipeline_scripts.TestStep12SiteComprehensive" name="test_step12_site_generation" time="0.001"><failure message="ImportError: cannot import name 'generate_site' from 'site' (/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site.py)">self = &lt;src.tests.test_pipeline_scripts.TestStep12SiteComprehensive object at 0x129711bd0&gt;
isolated_temp_dir = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmp9ngzjzyg')

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_step12_site_generation(self, isolated_temp_dir):
        """Test site generation functionality."""
&gt;       from site import generate_site, create_html_report
E       ImportError: cannot import name 'generate_site' from 'site' (/opt/homebrew/Cellar/python@3.13/3.13.5/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site.py)

src/tests/test_pipeline_scripts.py:490: ImportError</failure></testcase><testcase classname="src.tests.test_pipeline_scripts.TestStep13SAPFComprehensive" name="test_step13_sapf_generation" time="0.002"><failure message="ImportError: cannot import name 'generate_sapf_audio' from 'sapf' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/sapf/__init__.py)">self = &lt;src.tests.test_pipeline_scripts.TestStep13SAPFComprehensive object at 0x129711d10&gt;
sample_gnn_files = {'empty_file': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmp7q6qgkmx/empty_file.md'), 'invalid_synta...'missing_sections': PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmp7q6qgkmx/missing_sections.md'), ...}
isolated_temp_dir = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmplmxi75ao')

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_step13_sapf_generation(self, sample_gnn_files, isolated_temp_dir):
        """Test SAPF audio generation."""
&gt;       from sapf import generate_sapf_audio, convert_gnn_to_sapf
E       ImportError: cannot import name 'generate_sapf_audio' from 'sapf' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/sapf/__init__.py)

src/tests/test_pipeline_scripts.py:515: ImportError</failure></testcase><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptIntegration" name="test_pipeline_script_coordination" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts.TestPipelineScriptIntegration" name="test_pipeline_argument_consistency" time="0.001" /><testcase classname="src.tests.test_pipeline_scripts" name="test_pipeline_script_completeness" time="0.000" /><testcase classname="src.tests.test_pipeline_scripts" name="test_pipeline_script_performance" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepCommonInterface" name="test_pipeline_step_discovery" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepCommonInterface" name="test_pipeline_step_file_structure[1]" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepCommonInterface" name="test_pipeline_step_file_structure[2]" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepCommonInterface" name="test_pipeline_step_file_structure[3]" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepCommonInterface" name="test_pipeline_step_file_structure[4]" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepCommonInterface" name="test_pipeline_step_file_structure[5]" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepCommonInterface" name="test_pipeline_step_file_structure[6]" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepCommonInterface" name="test_pipeline_step_file_structure[7]" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepCommonInterface" name="test_pipeline_step_file_structure[8]" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepCommonInterface" name="test_pipeline_step_file_structure[9]" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepCommonInterface" name="test_pipeline_step_file_structure[10]" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepCommonInterface" name="test_pipeline_step_file_structure[11]" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepCommonInterface" name="test_pipeline_step_file_structure[12]" time="0.000"><skipped type="pytest.skip" message="Step 12 script not found: /Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/12_discopy.py">/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/tests/test_pipeline_steps.py:110: Step 12 script not found: /Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/12_discopy.py</skipped></testcase><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepCommonInterface" name="test_pipeline_step_file_structure[13]" time="0.000"><skipped type="pytest.skip" message="Step 13 script not found: /Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/13_discopy_jax_eval.py">/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/tests/test_pipeline_steps.py:110: Step 13 script not found: /Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/13_discopy_jax_eval.py</skipped></testcase><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepCommonInterface" name="test_pipeline_step_file_structure[14]" time="0.000"><skipped type="pytest.skip" message="Step 14 script not found: /Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/14_site.py">/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/tests/test_pipeline_steps.py:110: Step 14 script not found: /Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/14_site.py</skipped></testcase><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepCommonInterface" name="test_pipeline_step_common_imports" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestStep1GNN" name="test_step1_basic_execution" time="0.002" /><testcase classname="src.tests.test_pipeline_steps.TestStep1GNN" name="test_step1_gnn_file_discovery" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestStep2Setup" name="test_step2_environment_validation" time="0.002" /><testcase classname="src.tests.test_pipeline_steps.TestStep2Setup" name="test_step2_dependency_checking" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestStep3Tests" name="test_step3_test_discovery" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestStep3Tests" name="test_step3_test_environment_integration" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestStep4GNNTypeChecker" name="test_step4_type_checking_execution" time="0.002" /><testcase classname="src.tests.test_pipeline_steps.TestStep4GNNTypeChecker" name="test_step4_validation_scenarios" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestStep5Export" name="test_step5_export_execution" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestStep5Export" name="test_step5_export_formats" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestStep6Visualization" name="test_step6_visualization_execution" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestStep6Visualization" name="test_step6_matplotlib_integration" time="0.174" /><testcase classname="src.tests.test_pipeline_steps.TestStep7MCP" name="test_step7_mcp_execution" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestStep7MCP" name="test_step7_tool_registration" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestStep8Ontology" name="test_step8_ontology_execution" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestStep8Ontology" name="test_step8_ontology_terms_file" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestStep9Render" name="test_step9_render_execution" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestStep9Render" name="test_step9_rendering_targets" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestStep10Execute" name="test_step10_execute_execution" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestStep10Execute" name="test_step10_execution_safety" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestStep11LLM" name="test_step11_llm_execution" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestStep11LLM" name="test_step11_llm_tasks" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestStep12DisCoPy" name="test_step12_discopy_execution" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestStep12DisCoPy" name="test_step12_categorical_concepts" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestStep13DiscopyJaxEval" name="test_step13_jax_execution" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestStep13DiscopyJaxEval" name="test_step13_jax_integration" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestStep14Site" name="test_step14_site_generation" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestStep14Site" name="test_step14_html_structure" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepExecution" name="test_step_argument_parsing" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepExecution" name="test_step_output_directory_creation" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepExecution" name="test_step_error_handling" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineStepExecution" name="test_step_logging_integration" time="0.001" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineIntegration" name="test_step_dependency_chain" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineIntegration" name="test_step_output_compatibility" time="0.000" /><testcase classname="src.tests.test_pipeline_steps.TestPipelineIntegration" name="test_pipeline_configuration_consistency" time="0.000" /><testcase classname="src.tests.test_pipeline_steps" name="test_pipeline_step_template_compliance" time="0.000" /><testcase classname="src.tests.test_pipeline_steps" name="test_pipeline_performance_characteristics" time="0.000" /><testcase classname="src.tests.test_sapf.TestSAPFGNNProcessor" name="test_processor_initialization" time="0.000" /><testcase classname="src.tests.test_sapf.TestSAPFGNNProcessor" name="test_parse_gnn_sections" time="0.001" /><testcase classname="src.tests.test_sapf.TestSAPFGNNProcessor" name="test_state_space_parsing_categories" time="0.000" /><testcase classname="src.tests.test_sapf.TestSAPFGNNProcessor" name="test_convert_to_sapf" time="0.001" /><testcase classname="src.tests.test_sapf.TestSAPFGNNProcessor" name="test_complexity_calculation" time="0.000" /><testcase classname="src.tests.test_sapf.TestSAPFGNNProcessor" name="test_model_signature_generation" time="0.000" /><testcase classname="src.tests.test_sapf.TestSAPFGNNProcessor" name="test_musical_scale_assignment" time="0.000" /><testcase classname="src.tests.test_sapf.TestSAPFCodeValidation" name="test_validate_sapf_code_valid" time="0.000" /><testcase classname="src.tests.test_sapf.TestSAPFCodeValidation" name="test_validate_sapf_code_invalid" time="0.000" /><testcase classname="src.tests.test_sapf.TestSAPFAudioGeneration" name="test_audio_generator_initialization" time="0.000" /><testcase classname="src.tests.test_sapf.TestSAPFAudioGeneration" name="test_analyze_sapf_code" time="0.001" /><testcase classname="src.tests.test_sapf.TestSAPFAudioGeneration" name="test_generate_oscillator_audio" time="0.000" /><testcase classname="src.tests.test_sapf.TestSAPFAudioGeneration" name="test_generate_envelope" time="0.001" /><testcase classname="src.tests.test_sapf.TestSAPFAudioGeneration" name="test_apply_lowpass_filter" time="0.001" /><testcase classname="src.tests.test_sapf.TestSAPFAudioGeneration" name="test_generate_from_sapf_mock" time="0.013" /><testcase classname="src.tests.test_sapf.TestSAPFStandaloneFunctions" name="test_convert_gnn_to_sapf_function" time="0.000" /><testcase classname="src.tests.test_sapf.TestSAPFStandaloneFunctions" name="test_generate_oscillator_audio_function" time="0.005" /><testcase classname="src.tests.test_sapf.TestSAPFStandaloneFunctions" name="test_apply_envelope_function" time="0.000" /><testcase classname="src.tests.test_sapf.TestSAPFStandaloneFunctions" name="test_mix_audio_channels_function" time="0.000" /><testcase classname="src.tests.test_sapf.TestSAPFMCPIntegration" name="test_register_sapf_tools" time="0.000" /><testcase classname="src.tests.test_sapf.TestSAPFMCPIntegration" name="test_handle_generate_sapf_code" time="0.001" /><testcase classname="src.tests.test_sapf.TestSAPFMCPIntegration" name="test_handle_validate_sapf_syntax" time="0.001" /><testcase classname="src.tests.test_sapf.TestSAPFErrorHandling" name="test_processor_with_invalid_gnn" time="0.000" /><testcase classname="src.tests.test_sapf.TestSAPFErrorHandling" name="test_audio_generator_error_handling" time="0.000" /><testcase classname="src.tests.test_sapf.TestSAPFErrorHandling" name="test_file_operation_failures" time="0.001" /><testcase classname="src.tests.test_sapf.TestSAPFIntegration" name="test_baseball_gnn_sapf_conversion" time="0.000"><skipped type="pytest.skip" message="Baseball GNN example not found">/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/tests/test_sapf.py:796: Baseball GNN example not found</skipped></testcase><testcase classname="src.tests.test_sapf.TestSAPFIntegration" name="test_existing_gnn_examples_sapf_conversion" time="0.001" /><testcase classname="src.tests.test_sapf" name="test_sapf_performance_characteristics" time="0.002" /><testcase classname="src.tests.test_sapf" name="test_sapf_module_completeness" time="0.000" /><testcase classname="src.tests.test_utilities.TestArgumentParsing" name="test_enhanced_argument_parser_import" time="0.000" /><testcase classname="src.tests.test_utilities.TestArgumentParsing" name="test_argument_parser_basic_functionality" time="0.000" /><testcase classname="src.tests.test_utilities.TestArgumentParsing" name="test_argument_parsing_fallback" time="0.000" /><testcase classname="src.tests.test_utilities.TestArgumentParsing" name="test_path_argument_conversion" time="0.000" /><testcase classname="src.tests.test_utilities.TestLoggingUtilities" name="test_logging_setup_import" time="0.000" /><testcase classname="src.tests.test_utilities.TestLoggingUtilities" name="test_step_logging_setup" time="0.000" /><testcase classname="src.tests.test_utilities.TestLoggingUtilities" name="test_logging_verbosity_control" time="0.000" /><testcase classname="src.tests.test_utilities.TestLoggingUtilities" name="test_step_logging_functions" time="0.000" /><testcase classname="src.tests.test_utilities.TestPathUtilities" name="test_path_validation_utilities" time="0.000" /><testcase classname="src.tests.test_utilities.TestPathUtilities" name="test_file_extension_validation" time="0.000" /><testcase classname="src.tests.test_utilities.TestPathUtilities" name="test_safe_file_operations" time="0.001" /><testcase classname="src.tests.test_utilities.TestPathUtilities" name="test_directory_creation_patterns" time="0.001" /><testcase classname="src.tests.test_utilities.TestPerformanceTracking" name="test_performance_tracker_import" time="0.000" /><testcase classname="src.tests.test_utilities.TestPerformanceTracking" name="test_performance_tracking_context_manager" time="0.011" /><testcase classname="src.tests.test_utilities.TestPerformanceTracking" name="test_timestamp_utilities" time="0.002" /><testcase classname="src.tests.test_utilities.TestPerformanceTracking" name="test_resource_monitoring_interface" time="0.102" /><testcase classname="src.tests.test_utilities.TestDependencyValidation" name="test_dependency_validator_import" time="0.000" /><testcase classname="src.tests.test_utilities.TestDependencyValidation" name="test_pipeline_dependency_checking" time="0.000" /><testcase classname="src.tests.test_utilities.TestDependencyValidation" name="test_optional_dependency_handling" time="0.001" /><testcase classname="src.tests.test_utilities.TestConfigurationUtilities" name="test_pipeline_config_import" time="0.000" /><testcase classname="src.tests.test_utilities.TestConfigurationUtilities" name="test_pipeline_configuration_structure" time="0.000" /><testcase classname="src.tests.test_utilities.TestConfigurationUtilities" name="test_step_metadata_structure" time="0.001" /><testcase classname="src.tests.test_utilities.TestUtilityIntegration" name="test_argument_parsing_and_logging_integration" time="0.000" /><testcase classname="src.tests.test_utilities.TestUtilityIntegration" name="test_path_and_configuration_integration" time="0.000" /><testcase classname="src.tests.test_utilities.TestUtilityIntegration" name="test_performance_and_logging_integration" time="0.011" /><testcase classname="src.tests.test_utilities.TestErrorHandlingUtilities" name="test_safe_import_patterns" time="0.000" /><testcase classname="src.tests.test_utilities.TestErrorHandlingUtilities" name="test_graceful_degradation_patterns" time="0.000" /><testcase classname="src.tests.test_utilities.TestErrorHandlingUtilities" name="test_error_recovery_mechanisms" time="0.000" /><testcase classname="src.tests.test_utilities.TestFileOperationUtilities" name="test_safe_file_reading" time="0.001" /><testcase classname="src.tests.test_utilities.TestFileOperationUtilities" name="test_safe_file_writing" time="0.001" /><testcase classname="src.tests.test_utilities.TestFileOperationUtilities" name="test_safe_json_operations" time="0.001" /><testcase classname="src.tests.test_utilities.TestConfigurationValidation" name="test_test_configuration_validation" time="0.000" /><testcase classname="src.tests.test_utilities.TestConfigurationValidation" name="test_environment_configuration_consistency" time="0.000" /><testcase classname="src.tests.test_utilities.TestConfigurationValidation" name="test_path_configuration_validation" time="0.000" /><testcase classname="src.tests.test_utilities.TestSystemIntegration" name="test_python_version_compatibility" time="0.000" /><testcase classname="src.tests.test_utilities.TestSystemIntegration" name="test_platform_compatibility" time="0.000" /><testcase classname="src.tests.test_utilities.TestSystemIntegration" name="test_resource_availability" time="0.001" /><testcase classname="src.tests.test_utilities" name="test_utility_module_completeness" time="0.000" /><testcase classname="src.tests.test_utilities" name="test_utility_performance_characteristics" time="0.005" /><testcase classname="src.tests.test_utility_modules.TestArgumentUtilsComprehensive" name="test_argument_utils_imports" time="0.000"><failure message="Failed: Failed to import argument utilities: cannot import name 'parse_step_arguments' from 'utils.argument_utils' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/argument_utils.py)">self = &lt;src.tests.test_utility_modules.TestArgumentUtilsComprehensive object at 0x129808910&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_argument_utils_imports(self):
        """Test that argument utilities can be imported and have expected structure."""
        try:
&gt;           from utils.argument_utils import (
                EnhancedArgumentParser, parse_step_arguments,
                validate_arguments, convert_path_arguments
            )
E           ImportError: cannot import name 'parse_step_arguments' from 'utils.argument_utils' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/argument_utils.py)

src/tests/test_utility_modules.py:52: ImportError

During handling of the above exception, another exception occurred:

self = &lt;src.tests.test_utility_modules.TestArgumentUtilsComprehensive object at 0x129808910&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_argument_utils_imports(self):
        """Test that argument utilities can be imported and have expected structure."""
        try:
            from utils.argument_utils import (
                EnhancedArgumentParser, parse_step_arguments,
                validate_arguments, convert_path_arguments
            )
    
            # Test that classes and functions are available
            assert EnhancedArgumentParser is not None, "EnhancedArgumentParser should be available"
            assert callable(parse_step_arguments), "parse_step_arguments should be callable"
            assert callable(validate_arguments), "validate_arguments should be callable"
            assert callable(convert_path_arguments), "convert_path_arguments should be callable"
    
            logging.info("Argument utilities imports validated")
    
        except ImportError as e:
&gt;           pytest.fail(f"Failed to import argument utilities: {e}")
E           Failed: Failed to import argument utilities: cannot import name 'parse_step_arguments' from 'utils.argument_utils' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/argument_utils.py)

src/tests/test_utility_modules.py:66: Failed</failure></testcase><testcase classname="src.tests.test_utility_modules.TestArgumentUtilsComprehensive" name="test_enhanced_argument_parser" time="0.000"><failure message="TypeError: EnhancedArgumentParser() takes no arguments">self = &lt;src.tests.test_utility_modules.TestArgumentUtilsComprehensive object at 0x129808b90&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_enhanced_argument_parser(self):
        """Test EnhancedArgumentParser functionality."""
        from utils.argument_utils import EnhancedArgumentParser
    
        # Test parser creation
&gt;       parser = EnhancedArgumentParser(description="Test parser")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: EnhancedArgumentParser() takes no arguments

src/tests/test_utility_modules.py:75: TypeError</failure></testcase><testcase classname="src.tests.test_utility_modules.TestArgumentUtilsComprehensive" name="test_step_argument_parsing" time="0.000"><failure message="ImportError: cannot import name 'parse_step_arguments' from 'utils.argument_utils' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/argument_utils.py)">self = &lt;src.tests.test_utility_modules.TestArgumentUtilsComprehensive object at 0x12977e8b0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_step_argument_parsing(self):
        """Test step argument parsing functionality."""
&gt;       from utils.argument_utils import parse_step_arguments
E       ImportError: cannot import name 'parse_step_arguments' from 'utils.argument_utils' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/argument_utils.py)

src/tests/test_utility_modules.py:95: ImportError</failure></testcase><testcase classname="src.tests.test_utility_modules.TestArgumentUtilsComprehensive" name="test_argument_validation" time="0.000"><failure message="ImportError: cannot import name 'validate_arguments' from 'utils.argument_utils' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/argument_utils.py)">self = &lt;src.tests.test_utility_modules.TestArgumentUtilsComprehensive object at 0x12977e9e0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_argument_validation(self):
        """Test argument validation functionality."""
&gt;       from utils.argument_utils import validate_arguments
E       ImportError: cannot import name 'validate_arguments' from 'utils.argument_utils' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/argument_utils.py)

src/tests/test_utility_modules.py:121: ImportError</failure></testcase><testcase classname="src.tests.test_utility_modules.TestLoggingUtilsComprehensive" name="test_logging_utils_imports" time="0.000"><failure message="Failed: Failed to import logging utilities: cannot import name 'setup_correlation_context' from 'utils.logging_utils' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/logging_utils.py)">self = &lt;src.tests.test_utility_modules.TestLoggingUtilsComprehensive object at 0x129808cd0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_logging_utils_imports(self):
        """Test that logging utilities can be imported and have expected structure."""
        try:
&gt;           from utils.logging_utils import (
                setup_step_logging, log_step_start, log_step_success,
                log_step_error, log_step_warning, setup_correlation_context
            )
E           ImportError: cannot import name 'setup_correlation_context' from 'utils.logging_utils' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/logging_utils.py)

src/tests/test_utility_modules.py:147: ImportError

During handling of the above exception, another exception occurred:

self = &lt;src.tests.test_utility_modules.TestLoggingUtilsComprehensive object at 0x129808cd0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_logging_utils_imports(self):
        """Test that logging utilities can be imported and have expected structure."""
        try:
            from utils.logging_utils import (
                setup_step_logging, log_step_start, log_step_success,
                log_step_error, log_step_warning, setup_correlation_context
            )
    
            # Test that functions are callable
            assert callable(setup_step_logging), "setup_step_logging should be callable"
            assert callable(log_step_start), "log_step_start should be callable"
            assert callable(log_step_success), "log_step_success should be callable"
            assert callable(log_step_error), "log_step_error should be callable"
            assert callable(log_step_warning), "log_step_warning should be callable"
            assert callable(setup_correlation_context), "setup_correlation_context should be callable"
    
            logging.info("Logging utilities imports validated")
    
        except ImportError as e:
&gt;           pytest.fail(f"Failed to import logging utilities: {e}")
E           Failed: Failed to import logging utilities: cannot import name 'setup_correlation_context' from 'utils.logging_utils' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/logging_utils.py)

src/tests/test_utility_modules.py:163: Failed</failure></testcase><testcase classname="src.tests.test_utility_modules.TestLoggingUtilsComprehensive" name="test_step_logging_setup" time="0.000" /><testcase classname="src.tests.test_utility_modules.TestLoggingUtilsComprehensive" name="test_step_logging_functions" time="0.000" /><testcase classname="src.tests.test_utility_modules.TestLoggingUtilsComprehensive" name="test_correlation_context" time="0.000"><failure message="ImportError: cannot import name 'setup_correlation_context' from 'utils.logging_utils' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/logging_utils.py)">self = &lt;src.tests.test_utility_modules.TestLoggingUtilsComprehensive object at 0x12977ec40&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_correlation_context(self):
        """Test correlation context functionality."""
&gt;       from utils.logging_utils import setup_correlation_context
E       ImportError: cannot import name 'setup_correlation_context' from 'utils.logging_utils' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/logging_utils.py)

src/tests/test_utility_modules.py:212: ImportError</failure></testcase><testcase classname="src.tests.test_utility_modules.TestConfigLoaderComprehensive" name="test_config_loader_imports" time="0.000"><failure message="Failed: Failed to import config loader: cannot import name 'save_config' from 'utils.config_loader' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/config_loader.py)">self = &lt;src.tests.test_utility_modules.TestConfigLoaderComprehensive object at 0x129808f50&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_config_loader_imports(self):
        """Test that config loader can be imported and has expected structure."""
        try:
&gt;           from utils.config_loader import (
                load_config, save_config, validate_config,
                get_config_value, set_config_value
            )
E           ImportError: cannot import name 'save_config' from 'utils.config_loader' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/config_loader.py). Did you mean: 'SiteConfig'?

src/tests/test_utility_modules.py:234: ImportError

During handling of the above exception, another exception occurred:

self = &lt;src.tests.test_utility_modules.TestConfigLoaderComprehensive object at 0x129808f50&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_config_loader_imports(self):
        """Test that config loader can be imported and has expected structure."""
        try:
            from utils.config_loader import (
                load_config, save_config, validate_config,
                get_config_value, set_config_value
            )
    
            # Test that functions are callable
            assert callable(load_config), "load_config should be callable"
            assert callable(save_config), "save_config should be callable"
            assert callable(validate_config), "validate_config should be callable"
            assert callable(get_config_value), "get_config_value should be callable"
            assert callable(set_config_value), "set_config_value should be callable"
    
            logging.info("Config loader imports validated")
    
        except ImportError as e:
&gt;           pytest.fail(f"Failed to import config loader: {e}")
E           Failed: Failed to import config loader: cannot import name 'save_config' from 'utils.config_loader' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/config_loader.py)

src/tests/test_utility_modules.py:249: Failed</failure></testcase><testcase classname="src.tests.test_utility_modules.TestConfigLoaderComprehensive" name="test_config_loading_and_saving" time="0.001"><failure message="ImportError: cannot import name 'save_config' from 'utils.config_loader' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/config_loader.py). Did you mean: 'SiteConfig'?">self = &lt;src.tests.test_utility_modules.TestConfigLoaderComprehensive object at 0x129809090&gt;
isolated_temp_dir = PosixPath('/var/folders/vc/rgmbpjpj0dbg61vr54xjskc80000gn/T/tmps8sb1ecz')

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_config_loading_and_saving(self, isolated_temp_dir):
        """Test configuration loading and saving."""
&gt;       from utils.config_loader import load_config, save_config
E       ImportError: cannot import name 'save_config' from 'utils.config_loader' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/config_loader.py). Did you mean: 'SiteConfig'?

src/tests/test_utility_modules.py:255: ImportError</failure></testcase><testcase classname="src.tests.test_utility_modules.TestConfigLoaderComprehensive" name="test_config_validation" time="0.000"><failure message="ImportError: cannot import name 'validate_config' from 'utils.config_loader' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/config_loader.py)">self = &lt;src.tests.test_utility_modules.TestConfigLoaderComprehensive object at 0x12977ed70&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_config_validation(self):
        """Test configuration validation."""
&gt;       from utils.config_loader import validate_config
E       ImportError: cannot import name 'validate_config' from 'utils.config_loader' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/config_loader.py)

src/tests/test_utility_modules.py:288: ImportError</failure></testcase><testcase classname="src.tests.test_utility_modules.TestConfigLoaderComprehensive" name="test_config_value_access" time="0.000"><failure message="ImportError: cannot import name 'get_config_value' from 'utils.config_loader' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/config_loader.py)">self = &lt;src.tests.test_utility_modules.TestConfigLoaderComprehensive object at 0x12977eea0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_config_value_access(self):
        """Test configuration value access."""
&gt;       from utils.config_loader import get_config_value, set_config_value
E       ImportError: cannot import name 'get_config_value' from 'utils.config_loader' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/config_loader.py)

src/tests/test_utility_modules.py:318: ImportError</failure></testcase><testcase classname="src.tests.test_utility_modules.TestDependencyValidatorComprehensive" name="test_dependency_validator_imports" time="0.000"><failure message="Failed: Failed to import dependency validator: cannot import name 'check_optional_dependencies' from 'utils.dependency_validator' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/dependency_validator.py)">self = &lt;src.tests.test_utility_modules.TestDependencyValidatorComprehensive object at 0x1298091d0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_dependency_validator_imports(self):
        """Test that dependency validator can be imported and has expected structure."""
        try:
&gt;           from utils.dependency_validator import (
                validate_pipeline_dependencies, check_optional_dependencies,
                get_dependency_status, install_missing_dependencies
            )
E           ImportError: cannot import name 'check_optional_dependencies' from 'utils.dependency_validator' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/dependency_validator.py)

src/tests/test_utility_modules.py:355: ImportError

During handling of the above exception, another exception occurred:

self = &lt;src.tests.test_utility_modules.TestDependencyValidatorComprehensive object at 0x1298091d0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_dependency_validator_imports(self):
        """Test that dependency validator can be imported and has expected structure."""
        try:
            from utils.dependency_validator import (
                validate_pipeline_dependencies, check_optional_dependencies,
                get_dependency_status, install_missing_dependencies
            )
    
            # Test that functions are callable
            assert callable(validate_pipeline_dependencies), "validate_pipeline_dependencies should be callable"
            assert callable(check_optional_dependencies), "check_optional_dependencies should be callable"
            assert callable(get_dependency_status), "get_dependency_status should be callable"
            assert callable(install_missing_dependencies), "install_missing_dependencies should be callable"
    
            logging.info("Dependency validator imports validated")
    
        except ImportError as e:
&gt;           pytest.fail(f"Failed to import dependency validator: {e}")
E           Failed: Failed to import dependency validator: cannot import name 'check_optional_dependencies' from 'utils.dependency_validator' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/dependency_validator.py)

src/tests/test_utility_modules.py:369: Failed</failure></testcase><testcase classname="src.tests.test_utility_modules.TestDependencyValidatorComprehensive" name="test_pipeline_dependency_validation" time="11.778" /><testcase classname="src.tests.test_utility_modules.TestDependencyValidatorComprehensive" name="test_optional_dependency_checking" time="0.001"><failure message="ImportError: cannot import name 'check_optional_dependencies' from 'utils.dependency_validator' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/dependency_validator.py)">self = &lt;src.tests.test_utility_modules.TestDependencyValidatorComprehensive object at 0x12977efd0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_optional_dependency_checking(self):
        """Test optional dependency checking."""
&gt;       from utils.dependency_validator import check_optional_dependencies
E       ImportError: cannot import name 'check_optional_dependencies' from 'utils.dependency_validator' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/dependency_validator.py)

src/tests/test_utility_modules.py:394: ImportError</failure></testcase><testcase classname="src.tests.test_utility_modules.TestDependencyValidatorComprehensive" name="test_dependency_status" time="0.000"><failure message="ImportError: cannot import name 'get_dependency_status' from 'utils.dependency_validator' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/dependency_validator.py)">self = &lt;src.tests.test_utility_modules.TestDependencyValidatorComprehensive object at 0x12977f100&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_dependency_status(self):
        """Test dependency status retrieval."""
&gt;       from utils.dependency_validator import get_dependency_status
E       ImportError: cannot import name 'get_dependency_status' from 'utils.dependency_validator' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/utils/dependency_validator.py)

src/tests/test_utility_modules.py:410: ImportError</failure></testcase><testcase classname="src.tests.test_utility_modules.TestPerformanceTrackerComprehensive" name="test_performance_tracker_imports" time="0.001"><failure message="Failed: Failed to import performance tracker: No module named 'utils.performance_tracker'">self = &lt;src.tests.test_utility_modules.TestPerformanceTrackerComprehensive object at 0x129809450&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_performance_tracker_imports(self):
        """Test that performance tracker can be imported and has expected structure."""
        try:
&gt;           from utils.performance_tracker import (
                track_operation, get_performance_metrics,
                start_performance_monitoring, stop_performance_monitoring,
                generate_performance_report
            )
E           ModuleNotFoundError: No module named 'utils.performance_tracker'

src/tests/test_utility_modules.py:432: ModuleNotFoundError

During handling of the above exception, another exception occurred:

self = &lt;src.tests.test_utility_modules.TestPerformanceTrackerComprehensive object at 0x129809450&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_performance_tracker_imports(self):
        """Test that performance tracker can be imported and has expected structure."""
        try:
            from utils.performance_tracker import (
                track_operation, get_performance_metrics,
                start_performance_monitoring, stop_performance_monitoring,
                generate_performance_report
            )
    
            # Test that functions are callable
            assert callable(track_operation), "track_operation should be callable"
            assert callable(get_performance_metrics), "get_performance_metrics should be callable"
            assert callable(start_performance_monitoring), "start_performance_monitoring should be callable"
            assert callable(stop_performance_monitoring), "stop_performance_monitoring should be callable"
            assert callable(generate_performance_report), "generate_performance_report should be callable"
    
            logging.info("Performance tracker imports validated")
    
        except ImportError as e:
&gt;           pytest.fail(f"Failed to import performance tracker: {e}")
E           Failed: Failed to import performance tracker: No module named 'utils.performance_tracker'

src/tests/test_utility_modules.py:448: Failed</failure></testcase><testcase classname="src.tests.test_utility_modules.TestPerformanceTrackerComprehensive" name="test_operation_tracking" time="0.000"><failure message="ModuleNotFoundError: No module named 'utils.performance_tracker'">self = &lt;src.tests.test_utility_modules.TestPerformanceTrackerComprehensive object at 0x129809590&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_operation_tracking(self):
        """Test operation tracking functionality."""
&gt;       from utils.performance_tracker import track_operation
E       ModuleNotFoundError: No module named 'utils.performance_tracker'

src/tests/test_utility_modules.py:454: ModuleNotFoundError</failure></testcase><testcase classname="src.tests.test_utility_modules.TestPerformanceTrackerComprehensive" name="test_performance_metrics" time="0.001"><failure message="ModuleNotFoundError: No module named 'utils.performance_tracker'">self = &lt;src.tests.test_utility_modules.TestPerformanceTrackerComprehensive object at 0x12977f230&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_performance_metrics(self):
        """Test performance metrics retrieval."""
&gt;       from utils.performance_tracker import get_performance_metrics
E       ModuleNotFoundError: No module named 'utils.performance_tracker'

src/tests/test_utility_modules.py:475: ModuleNotFoundError</failure></testcase><testcase classname="src.tests.test_utility_modules.TestPerformanceTrackerComprehensive" name="test_performance_monitoring" time="0.000"><failure message="ModuleNotFoundError: No module named 'utils.performance_tracker'">self = &lt;src.tests.test_utility_modules.TestPerformanceTrackerComprehensive object at 0x12977f360&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_performance_monitoring(self):
        """Test performance monitoring start/stop."""
&gt;       from utils.performance_tracker import start_performance_monitoring, stop_performance_monitoring
E       ModuleNotFoundError: No module named 'utils.performance_tracker'

src/tests/test_utility_modules.py:493: ModuleNotFoundError</failure></testcase><testcase classname="src.tests.test_utility_modules.TestPipelineConfigComprehensive" name="test_pipeline_config_imports" time="0.000"><failure message="Failed: Failed to import pipeline config: cannot import name 'validate_pipeline_config' from 'pipeline.config' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/pipeline/config.py)">self = &lt;src.tests.test_utility_modules.TestPipelineConfigComprehensive object at 0x1298096d0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_pipeline_config_imports(self):
        """Test that pipeline config can be imported and has expected structure."""
        try:
&gt;           from pipeline.config import (
                get_pipeline_config, STEP_METADATA, get_output_dir_for_script,
                validate_pipeline_config, update_pipeline_config
            )
E           ImportError: cannot import name 'validate_pipeline_config' from 'pipeline.config' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/pipeline/config.py). Did you mean: 'create_pipeline_config'?

src/tests/test_utility_modules.py:517: ImportError

During handling of the above exception, another exception occurred:

self = &lt;src.tests.test_utility_modules.TestPipelineConfigComprehensive object at 0x1298096d0&gt;

    @pytest.mark.unit
    @pytest.mark.safe_to_fail
    def test_pipeline_config_imports(self):
        """Test that pipeline config can be imported and has expected structure."""
        try:
            from pipeline.config import (
                get_pipeline_config, STEP_METADATA, get_output_dir_for_script,
                validate_pipeline_config, update_pipeline_config
            )
    
            # Test that functions are callable
            assert callable(get_pipeline_config), "get_pipeline_config should be callable"
            assert callable(get_output_dir_for_script), "get_output_dir_for_script should be callable"
            assert callable(validate_pipeline_config), "validate_pipeline_config should be callable"
            assert callable(update_pipeline_config), "update_pipeline_config should be callable"
    
            # Test that constants are available
            assert STEP_METADATA is not None, "STEP_METADATA should be available"
    
            logging.info("Pipeline config imports validated")
    
        except ImportError as e:
&gt;           pytest.fail(f"Failed to import pipeline config: {e}")
E           Failed: Failed to import pipeline config: cannot import name 'validate_pipeline_config' from 'pipeline.config' (/Users/4d/Documents/GitHub/GeneralizedNotationNotation/src/pipeline/config.py)

src/tests/test_utility_modules.py:534: Failed</failure></testcase><testcase classname="src.tests.test_utility_modules.TestPipelineConfigComprehensive" name="test_pipeline_config_retrieval" time="0.001" /><testcase classname="src.tests.test_utility_modules.TestPipelineConfigComprehensive" name="test_step_metadata_structure" time="0.000" /><testcase classname="src.tests.test_utility_modules.TestPipelineConfigComprehensive" name="test_output_directory_generation" time="0.000" /><testcase classname="src.tests.test_utility_modules.TestUtilityModuleIntegration" name="test_utility_coordination" time="0.001" /><testcase classname="src.tests.test_utility_modules.TestUtilityModuleIntegration" name="test_performance_and_logging_integration" time="0.000" /><testcase classname="src.tests.test_utility_modules" name="test_utility_module_completeness" time="0.000" /><testcase classname="src.tests.test_utility_modules" name="test_utility_module_performance" time="0.000" /></testsuite></testsuites>