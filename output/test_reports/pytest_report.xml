<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="28" skipped="0" tests="80" time="1.696" timestamp="2025-06-06T12:36:29.883806-07:00" hostname="pop"><testcase classname="src.tests.render.test_pymdp_converter.TestGnnToPyMdpConverterInitialization" name="test_initialization_agent_hyperparameter_storage" time="0.002" /><testcase classname="src.tests.render.test_pymdp_converter.TestGnnToPyMdpConverterInitialization" name="test_initialization_control_factor_parsing" time="0.000" /><testcase classname="src.tests.render.test_pymdp_converter.TestGnnToPyMdpConverterInitialization" name="test_initialization_empty_gnn_spec" time="0.000" /><testcase classname="src.tests.render.test_pymdp_converter.TestGnnToPyMdpConverterInitialization" name="test_initialization_matrix_specs_stored" time="0.000" /><testcase classname="src.tests.render.test_pymdp_converter.TestGnnToPyMdpConverterInitialization" name="test_initialization_missing_essential_blocks" time="0.000" /><testcase classname="src.tests.render.test_pymdp_converter.TestGnnToPyMdpConverterInitialization" name="test_initialization_mixed_direct_and_statespaceblock_precedence" time="0.000" /><testcase classname="src.tests.render.test_pymdp_converter.TestGnnToPyMdpConverterInitialization" name="test_initialization_state_and_obs_dimensions_direct" time="0.000" /><testcase classname="src.tests.render.test_pymdp_converter.TestGnnToPyMdpConverterInitialization" name="test_initialization_state_and_obs_dimensions_from_statespaceblock" time="0.000" /><testcase classname="src.tests.render.test_pymdp_converter.TestGnnToPyMdpConverterInitialization" name="test_initialization_with_minimal_spec" time="0.000" /><testcase classname="src.tests.render.test_pymdp_converter.TestGnnToPyMdpConverterInitialization" name="test_initialization_with_model_name_sanitization" time="0.000" /><testcase classname="src.tests.render.test_pymdp_converter.TestGnnToPyMdpConverterInitialization" name="test_initialization_with_stringified_direct_dimensions" time="0.000" /><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_A_matrix_invalid_spec" time="0.001"><failure message="AssertionError: False is not true">self = &lt;src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_A_matrix_invalid_spec&gt;

    def test_convert_A_matrix_invalid_spec(self):
        gnn_spec_mismatch = create_basic_gnn_spec(
            obs_modality_names=["Visual"], num_obs_modalities=[2],
            hidden_state_factor_names=["Location"], num_hidden_states_factors=[3],
            A_spec={"Visual": "np.array([[0.8, 0.1], [0.1, 0.8]])"} # 2x2, but expected 2x3
        )
        converter_mismatch = GnnToPyMdpConverter(gnn_spec_mismatch)
        a_matrix_str_mismatch = converter_mismatch.convert_A_matrix()
&gt;       self.assertTrue(any("Error processing A matrix for modality Visual" in log for log in converter_mismatch.conversion_log) or
                        any("Could not parse or validate matrix A_Visual" in log for log in converter_mismatch.conversion_log) or
                        any("shapes (2,2) and (2,3) not aligned" in log.lower() for log in converter_mismatch.conversion_log))
E       AssertionError: False is not true

src/tests/render/test_pymdp_converter.py:394: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_A_matrix_multiple_modalities_single_factor" time="0.001"><failure message="AssertionError: 'A_Visual = np.array([[0.8,0.1,0.0,0.1], [0.1,0.8,0.1,0.0]])' not found in 'A_Visual = utils.norm_dist(np.ones((2, 4)))\nA_Audio = utils.norm_dist(np.ones((3, 4)))\nA = np.empty(2, dtype=object)\nA[0] = A_Visual\nA[1] = A_Audio'">self = &lt;src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_A_matrix_multiple_modalities_single_factor&gt;

    def test_convert_A_matrix_multiple_modalities_single_factor(self):
        gnn_spec = create_basic_gnn_spec(
            obs_modality_names=["Visual", "Audio"], num_obs_modalities=[2, 3],
            hidden_state_factor_names=["Location"], num_hidden_states_factors=[4],
            A_spec={
                "Visual": "np.array([[0.8,0.1,0.0,0.1], [0.1,0.8,0.1,0.0]])", # 2x4
                "Audio": "np.array([[0.5,0.3,0.1,0.1], [0.3,0.4,0.2,0.1], [0.1,0.1,0.6,0.2]])" # 3x4
            }
        )
        converter = GnnToPyMdpConverter(gnn_spec)
        a_matrix_str = converter.convert_A_matrix()
    
&gt;       self.assertIn("A_Visual = np.array([[0.8,0.1,0.0,0.1], [0.1,0.8,0.1,0.0]])", a_matrix_str)
E       AssertionError: 'A_Visual = np.array([[0.8,0.1,0.0,0.1], [0.1,0.8,0.1,0.0]])' not found in 'A_Visual = utils.norm_dist(np.ones((2, 4)))\nA_Audio = utils.norm_dist(np.ones((3, 4)))\nA = np.empty(2, dtype=object)\nA[0] = A_Visual\nA[1] = A_Audio'

src/tests/render/test_pymdp_converter.py:367: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_A_matrix_numpy_array_input" time="0.002"><failure message="AssertionError: 'A_Sensor = np.array([[0.9, 0.1], [0.2, 0.8]])' not found in 'A_Sensor = np.array([[0.9,0.1],[0.2,0.8]])\nA = np.empty(1, dtype=object)\nA[0] = A_Sensor'">self = &lt;src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_A_matrix_numpy_array_input&gt;

    def test_convert_A_matrix_numpy_array_input(self):
        """Test A matrix conversion when the spec provides an actual np.ndarray."""
        gnn_spec = create_basic_gnn_spec(
            obs_modality_names=["Sensor"], num_obs_modalities=[2],
            hidden_state_factor_names=["Internal"], num_hidden_states_factors=[2],
            A_spec={"Sensor": np.array([[0.9, 0.1], [0.2, 0.8]])}
        )
        converter = GnnToPyMdpConverter(gnn_spec)
        a_matrix_str = converter.convert_A_matrix()
&gt;       self.assertIn("A_Sensor = np.array([[0.9, 0.1], [0.2, 0.8]])", a_matrix_str)
E       AssertionError: 'A_Sensor = np.array([[0.9, 0.1], [0.2, 0.8]])' not found in 'A_Sensor = np.array([[0.9,0.1],[0.2,0.8]])\nA = np.empty(1, dtype=object)\nA[0] = A_Sensor'

src/tests/render/test_pymdp_converter.py:419: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_A_matrix_single_modality_multiple_factors" time="0.001"><failure message="AssertionError: 'A_Sensor = np.random.rand(2, 2, 3)' not found in 'A_Sensor = utils.norm_dist(np.ones((2, 2, 3)))\nA = np.empty(1, dtype=object)\nA[0] = A_Sensor'">self = &lt;src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_A_matrix_single_modality_multiple_factors&gt;

    def test_convert_A_matrix_single_modality_multiple_factors(self):
        gnn_spec = create_basic_gnn_spec(
            obs_modality_names=["Sensor"], num_obs_modalities=[2], # 2 outcomes
            hidden_state_factor_names=["FactorA", "FactorB"], num_hidden_states_factors=[2, 3], # 2 states, 3 states
            A_spec={"Sensor": "np.random.rand(2, 2, 3)"} # Shape (num_outcomes, num_states_fA, num_states_fB)
        )
        converter = GnnToPyMdpConverter(gnn_spec)
        a_matrix_str = converter.convert_A_matrix()
    
&gt;       self.assertIn("A_Sensor = np.random.rand(2, 2, 3)", a_matrix_str)
E       AssertionError: 'A_Sensor = np.random.rand(2, 2, 3)' not found in 'A_Sensor = utils.norm_dist(np.ones((2, 2, 3)))\nA = np.empty(1, dtype=object)\nA[0] = A_Sensor'

src/tests/render/test_pymdp_converter.py:382: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_A_matrix_single_modality_single_factor" time="0.001"><failure message="AssertionError: 'A_Visual = np.array([[0.8, 0.1, 0.1], [0.1, 0.8, 0.1]])' not found in 'A_Visual = np.array([[0.8,0.1,0.1],[0.1,0.8,0.1]])\nA = np.empty(1, dtype=object)\nA[0] = A_Visual'">self = &lt;src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_A_matrix_single_modality_single_factor&gt;

    def test_convert_A_matrix_single_modality_single_factor(self):
        """Test A matrix conversion for a simple case: 1 obs modality, 1 state factor."""
        gnn_spec = create_basic_gnn_spec(
            obs_modality_names=["Visual"], num_obs_modalities=[2],
            hidden_state_factor_names=["Location"], num_hidden_states_factors=[3],
            A_spec={"Visual": "np.array([[0.8, 0.1, 0.1], [0.1, 0.8, 0.1]])"} # 2 obs_outcomes x 3 states
        )
        converter = GnnToPyMdpConverter(gnn_spec)
        a_matrix_str = converter.convert_A_matrix()
    
&gt;       self.assertIn("A_Visual = np.array([[0.8, 0.1, 0.1], [0.1, 0.8, 0.1]])", a_matrix_str)
E       AssertionError: 'A_Visual = np.array([[0.8, 0.1, 0.1], [0.1, 0.8, 0.1]])' not found in 'A_Visual = np.array([[0.8,0.1,0.1],[0.1,0.8,0.1]])\nA = np.empty(1, dtype=object)\nA[0] = A_Visual'

src/tests/render/test_pymdp_converter.py:351: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_B_matrix_invalid_spec" time="0.001"><failure message="AssertionError: False is not true">self = &lt;src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_B_matrix_invalid_spec&gt;

    def test_convert_B_matrix_invalid_spec(self):
        gnn_spec_mismatch = create_basic_gnn_spec(
            hidden_state_factor_names=["Position"], num_hidden_states_factors=[3],
            num_control_factors=[2], control_action_names_per_factor={0: ["Stay", "Move"]},
            B_spec={"Position": "np.array([[1,0],[0,1]])"} # Incorrect shape for B
        )
        converter_mismatch = GnnToPyMdpConverter(gnn_spec_mismatch)
        b_matrix_str_mismatch = converter_mismatch.convert_B_matrix()
&gt;       self.assertTrue(any("Error processing B matrix for factor Position" in log for log in converter_mismatch.conversion_log) or
                        any("Could not parse or validate matrix B_Position" in log for log in converter_mismatch.conversion_log))
E       AssertionError: False is not true

src/tests/render/test_pymdp_converter.py:475: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_B_matrix_multiple_factors_mixed_control" time="0.001"><failure message="AssertionError: 'B_Location = np.array([[[0.9,0.1],[0.1,0.9]], [[0.1,0.9],[0.9,0.1]]])' not found in 'B_Location = utils.norm_dist(np.ones(2, 2, 2))\nB_Tool = utils.norm_dist(np.eye(3)[:, :, np.newaxis])\nB = np.empty(2, dtype=object)\nB[0] = B_Location\nB[1] = B_Tool'">self = &lt;src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_B_matrix_multiple_factors_mixed_control&gt;

    def test_convert_B_matrix_multiple_factors_mixed_control(self):
        gnn_spec = create_basic_gnn_spec(
            hidden_state_factor_names=["Location", "Tool"], num_hidden_states_factors=[2, 3], # Loc:2 states, Tool:3 states
            num_control_factors=[2, 0], # Location controlled (2 actions), Tool not controlled
            control_action_names_per_factor={0: ["Left", "Right"]}, # Actions for Location
            B_spec={
                "Location": "np.array([[[0.9,0.1],[0.1,0.9]], [[0.1,0.9],[0.9,0.1]]])", # 2 actions x 2 states x 2 states
            }
        )
        converter = GnnToPyMdpConverter(gnn_spec)
        b_matrix_str = converter.convert_B_matrix()
    
&gt;       self.assertIn("B_Location = np.array([[[0.9,0.1],[0.1,0.9]], [[0.1,0.9],[0.9,0.1]]])", b_matrix_str)
E       AssertionError: 'B_Location = np.array([[[0.9,0.1],[0.1,0.9]], [[0.1,0.9],[0.9,0.1]]])' not found in 'B_Location = utils.norm_dist(np.ones(2, 2, 2))\nB_Tool = utils.norm_dist(np.eye(3)[:, :, np.newaxis])\nB = np.empty(2, dtype=object)\nB[0] = B_Location\nB[1] = B_Tool'

src/tests/render/test_pymdp_converter.py:448: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_B_matrix_numpy_array_input" time="0.001" /><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_B_matrix_single_factor_controlled" time="0.001"><failure message="AssertionError: 'B_Position = np.array([[[1,0,0],[0,1,0],[0,0,1]], [[0,1,0],[0,0,1],[1,0,0]]])' not found in 'B_Position = np.array([[[1,0,0],[0,1,0],[0,0,1]],[[0,1,0],[0,0,1],[1,0,0]]])\nB = np.empty(1, dtype=object)\nB[0] = B_Position'">self = &lt;src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_B_matrix_single_factor_controlled&gt;

    def test_convert_B_matrix_single_factor_controlled(self):
        gnn_spec = create_basic_gnn_spec(
            hidden_state_factor_names=["Position"], num_hidden_states_factors=[3],
            num_control_factors=[2], # 2 actions for Position factor
            control_action_names_per_factor={0: ["Stay", "Move"]},
            B_spec={"Position": "np.array([[[1,0,0],[0,1,0],[0,0,1]], [[0,1,0],[0,0,1],[1,0,0]]])"} # 2 actions x 3 states x 3 states
        )
        converter = GnnToPyMdpConverter(gnn_spec)
        b_matrix_str = converter.convert_B_matrix()
    
&gt;       self.assertIn("B_Position = np.array([[[1,0,0],[0,1,0],[0,0,1]], [[0,1,0],[0,0,1],[1,0,0]]])", b_matrix_str)
E       AssertionError: 'B_Position = np.array([[[1,0,0],[0,1,0],[0,0,1]], [[0,1,0],[0,0,1],[1,0,0]]])' not found in 'B_Position = np.array([[[1,0,0],[0,1,0],[0,0,1]],[[0,1,0],[0,0,1],[1,0,0]]])\nB = np.empty(1, dtype=object)\nB[0] = B_Position'

src/tests/render/test_pymdp_converter.py:432: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_C_vector_invalid_spec" time="0.001"><failure message="AssertionError: False is not true">self = &lt;src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_C_vector_invalid_spec&gt;

    def test_convert_C_vector_invalid_spec(self):
        gnn_spec_mismatch = create_basic_gnn_spec(
            obs_modality_names=["Reward"], num_obs_modalities=[3],
            C_spec={"Reward": "np.array([0.0, 1.0])"} # Mismatched size (2 vs 3)
        )
        converter_mismatch = GnnToPyMdpConverter(gnn_spec_mismatch)
        c_str_mismatch = converter_mismatch.convert_C_vector()
&gt;       self.assertTrue(any("Error processing C vector for modality Reward" in log for log in converter_mismatch.conversion_log))
E       AssertionError: False is not true

src/tests/render/test_pymdp_converter.py:525: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_C_vector_multiple_modalities" time="0.001"><failure message="AssertionError: 'C_Feedback = np.array([1.0, -1.0])' not found in 'C_Feedback = np.zeros(2)\nC_Score = np.array([0,10,20,30,0])\nC = np.empty(2, dtype=object)\nC[0] = C_Feedback\nC[1] = C_Score'">self = &lt;src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_C_vector_multiple_modalities&gt;

    def test_convert_C_vector_multiple_modalities(self):
        gnn_spec = create_basic_gnn_spec(
            obs_modality_names=["Feedback", "Score"], num_obs_modalities=[2, 5],
            C_spec={
                "Feedback": "np.array([1.0, -1.0])",
                "Score": "np.array([0, 10, 20, 30, 0])"
            }
        )
        converter = GnnToPyMdpConverter(gnn_spec)
        c_vector_str = converter.convert_C_vector()
&gt;       self.assertIn("C_Feedback = np.array([1.0, -1.0])", c_vector_str)
E       AssertionError: 'C_Feedback = np.array([1.0, -1.0])' not found in 'C_Feedback = np.zeros(2)\nC_Score = np.array([0,10,20,30,0])\nC = np.empty(2, dtype=object)\nC[0] = C_Feedback\nC[1] = C_Score'

src/tests/render/test_pymdp_converter.py:512: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_C_vector_single_modality" time="0.001"><failure message="AssertionError: 'C_Reward = np.array([0.0, 1.0, -1.0])' not found in 'C_Reward = np.zeros(3)\nC = np.empty(1, dtype=object)\nC[0] = C_Reward'">self = &lt;src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_C_vector_single_modality&gt;

    def test_convert_C_vector_single_modality(self):
        gnn_spec = create_basic_gnn_spec(
            obs_modality_names=["Reward"], num_obs_modalities=[3], # 3 outcomes for Reward modality
            C_spec={"Reward": "np.array([0.0, 1.0, -1.0])"}
        )
        converter = GnnToPyMdpConverter(gnn_spec)
        c_vector_str = converter.convert_C_vector()
&gt;       self.assertIn("C_Reward = np.array([0.0, 1.0, -1.0])", c_vector_str)
E       AssertionError: 'C_Reward = np.array([0.0, 1.0, -1.0])' not found in 'C_Reward = np.zeros(3)\nC = np.empty(1, dtype=object)\nC[0] = C_Reward'

src/tests/render/test_pymdp_converter.py:498: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_D_vector_invalid_spec" time="0.001"><failure message="AssertionError: False is not true">self = &lt;src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_D_vector_invalid_spec&gt;

    def test_convert_D_vector_invalid_spec(self):
        gnn_spec_mismatch = create_basic_gnn_spec(
            hidden_state_factor_names=["Belief"], num_hidden_states_factors=[4],
            D_spec={"Belief": "np.array([0.1, 0.9])"} # Mismatched size (2 vs 4)
        )
        converter_mismatch = GnnToPyMdpConverter(gnn_spec_mismatch)
        d_str_mismatch = converter_mismatch.convert_D_vector()
&gt;       self.assertTrue(any("Error processing D vector for factor Belief" in log for log in converter_mismatch.conversion_log))
E       AssertionError: False is not true

src/tests/render/test_pymdp_converter.py:573: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_D_vector_multiple_factors" time="0.001"><failure message="AssertionError: 'D_Location = np.array([0.8, 0.2])' not found in 'D_Location = np.array([0.8,0.2])\nD_Topic = np.array([0.5,0.25,0.25])\nD = np.empty(2, dtype=object)\nD[0] = D_Location\nD[1] = D_Topic'">self = &lt;src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_D_vector_multiple_factors&gt;

    def test_convert_D_vector_multiple_factors(self):
        gnn_spec = create_basic_gnn_spec(
            hidden_state_factor_names=["Location", "Topic"], num_hidden_states_factors=[2, 3],
            D_spec={
                "Location": "np.array([0.8, 0.2])",
                "Topic": "np.array([0.5, 0.25, 0.25])"
            }
        )
        converter = GnnToPyMdpConverter(gnn_spec)
        d_vector_str = converter.convert_D_vector()
&gt;       self.assertIn("D_Location = np.array([0.8, 0.2])", d_vector_str)
E       AssertionError: 'D_Location = np.array([0.8, 0.2])' not found in 'D_Location = np.array([0.8,0.2])\nD_Topic = np.array([0.5,0.25,0.25])\nD = np.empty(2, dtype=object)\nD[0] = D_Location\nD[1] = D_Topic'

src/tests/render/test_pymdp_converter.py:560: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_D_vector_single_factor" time="0.001"><failure message="AssertionError: 'D_Belief = np.array([0.1, 0.2, 0.3, 0.4])' not found in 'D_Belief = np.array([0.1,0.2,0.3,0.4])\nD = np.empty(1, dtype=object)\nD[0] = D_Belief'">self = &lt;src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_D_vector_single_factor&gt;

    def test_convert_D_vector_single_factor(self):
        gnn_spec = create_basic_gnn_spec(
            hidden_state_factor_names=["Belief"], num_hidden_states_factors=[4],
            D_spec={"Belief": "np.array([0.1, 0.2, 0.3, 0.4])"}
        )
        converter = GnnToPyMdpConverter(gnn_spec)
        d_vector_str = converter.convert_D_vector()
&gt;       self.assertIn("D_Belief = np.array([0.1, 0.2, 0.3, 0.4])", d_vector_str)
E       AssertionError: 'D_Belief = np.array([0.1, 0.2, 0.3, 0.4])' not found in 'D_Belief = np.array([0.1,0.2,0.3,0.4])\nD = np.empty(1, dtype=object)\nD[0] = D_Belief'

src/tests/render/test_pymdp_converter.py:546: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_E_vector" time="0.000" /><testcase classname="src.tests.render.test_pymdp_converter.TestMatrixConversion" name="test_convert_E_vector_invalid_spec" time="0.000"><failure message="AssertionError: 'E = None' not found in '# E vector set to None due to no E specification.'">self = &lt;src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_E_vector_invalid_spec&gt;

    def test_convert_E_vector_invalid_spec(self):
        gnn_spec_no_E = create_basic_gnn_spec(
             hidden_state_factor_names=["S1"], num_hidden_states_factors=[2],
             num_control_factors=[2], control_action_names_per_factor={0: ["a1", "a2"]},
             E_spec=None
        )
        converter_no_E = GnnToPyMdpConverter(gnn_spec_no_E)
        e_str_no_E = converter_no_E.convert_E_vector()
&gt;       self.assertIn("E = None", e_str_no_E)
E       AssertionError: 'E = None' not found in '# E vector set to None due to no E specification.'

src/tests/render/test_pymdp_converter.py:608: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestAgentAndUsageCodeGeneration" name="test_extract_agent_hyperparameters" time="0.000"><failure message="AssertionError: {} is not None">self = &lt;src.tests.render.test_pymdp_converter.TestAgentAndUsageCodeGeneration testMethod=test_extract_agent_hyperparameters&gt;

    def test_extract_agent_hyperparameters(self):
        base_spec = create_basic_gnn_spec() # Minimal spec
    
        # Scenario 1: No hyperparameters specified
        converter_no_params = GnnToPyMdpConverter(base_spec)
        agent_p, policy_p, qs_init_p = converter_no_params.extract_agent_hyperparameters()
&gt;       self.assertIsNone(agent_p)
E       AssertionError: {} is not None

src/tests/render/test_pymdp_converter.py:631: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestAgentAndUsageCodeGeneration" name="test_generate_agent_instantiation_code_basic" time="0.000" /><testcase classname="src.tests.render.test_pymdp_converter.TestAgentAndUsageCodeGeneration" name="test_generate_agent_instantiation_code_with_action_names" time="0.000"><failure message="AssertionError: 'agent = Agent(' not found in '# Cannot instantiate agent: missing modalities or state factors'">self = &lt;src.tests.render.test_pymdp_converter.TestAgentAndUsageCodeGeneration testMethod=test_generate_agent_instantiation_code_with_action_names&gt;

    def test_generate_agent_instantiation_code_with_action_names(self):
        gnn_spec = create_basic_gnn_spec(
            hidden_state_factor_names=["S1"], num_hidden_states_factors=[2],
            num_control_factors=[2],
            control_action_names_per_factor={0: ["Up", "Down"]} # Factor 0 is S1
        )
        converter = GnnToPyMdpConverter(gnn_spec)
        _ = converter.convert_A_matrix(); _ = converter.convert_B_matrix(); _ = converter.convert_C_vector(); _ = converter.convert_D_vector()
    
        agent_code = converter.generate_agent_instantiation_code()
    
&gt;       self.assertIn("agent = Agent(", agent_code)
E       AssertionError: 'agent = Agent(' not found in '# Cannot instantiate agent: missing modalities or state factors'

src/tests/render/test_pymdp_converter.py:755: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestAgentAndUsageCodeGeneration" name="test_generate_agent_instantiation_code_with_hyperparams" time="0.001"><failure message="UnboundLocalError: cannot access local variable 'qs_initial_arg_for_agent' where it is not associated with a value">self = &lt;src.tests.render.test_pymdp_converter.TestAgentAndUsageCodeGeneration testMethod=test_generate_agent_instantiation_code_with_hyperparams&gt;

    def test_generate_agent_instantiation_code_with_hyperparams(self):
        hyperparams = {
            "agent_params": {"planning_horizon": 1, "use_param_info_gain": False},
            "policy_params": {"initial_action_selection": "random"},
            "qs_initial_params": {"method": "fixed", "values": "np.array([0.1,0.9])"} # qs_initial will be handled by qs_initial arg
        }
        gnn_spec = create_basic_gnn_spec(
            obs_modality_names=["O"], num_obs_modalities=[2],
            hidden_state_factor_names=["S"], num_hidden_states_factors=[2],
            agent_hyperparameters=hyperparams
        )
        converter = GnnToPyMdpConverter(gnn_spec)
        # Process matrices and extract hyperparams
        _ = converter.convert_A_matrix(); _ = converter.convert_B_matrix(); _ = converter.convert_C_vector(); _ = converter.convert_D_vector()
        extracted_agent_params, extracted_policy_params, extracted_qs_initial_params = converter.extract_agent_hyperparameters()
    
        # The qs_initial_params are used to generate a qs_initial numpy array string
        # which is then passed to generate_agent_instantiation_code
        qs_initial_str = None
        if extracted_qs_initial_params and extracted_qs_initial_params.get("method") == "fixed":
            qs_initial_val_str = extracted_qs_initial_params.get("values")
            if qs_initial_val_str:
                qs_initial_str = (
                    f"initial_qs_S = {qs_initial_val_str}\n"
                    f"initial_qs = np.empty(1, dtype=object)\n"
                    f"initial_qs[0] = initial_qs_S"
                )
                converter.script_parts["preamble_vars"].append(qs_initial_str)
                qs_initial_arg_for_agent = "initial_qs"
            else:
                qs_initial_arg_for_agent = None
    
        agent_code = converter.generate_agent_instantiation_code(
            agent_params=extracted_agent_params,
            policy_params=extracted_policy_params,
&gt;           qs_initial=qs_initial_arg_for_agent # Pass the name of the variable holding initial_qs
        )
E       UnboundLocalError: cannot access local variable 'qs_initial_arg_for_agent' where it is not associated with a value

src/tests/render/test_pymdp_converter.py:735: UnboundLocalError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestAgentAndUsageCodeGeneration" name="test_generate_example_usage_code" time="0.001"><failure message="AssertionError: '# --- Example Usage for TestModel ---' not found in '\n# Example usage of the agent\nif __name__ == &quot;__main__&quot;:\n    \n    # --- Example Usage ---\n    if __name__ == \'__main__\':\n        # Initialize agent (already done above)\n        # agent = TestModel  # Agent is already instantiated above as \'agent\'\n        print(f&quot;Agent \'TestModel\' initialized with {agent.num_factors if hasattr(agent, \'num_factors\') else \'N/A\'} factors and {agent.num_modalities if hasattr(agent, \'num_modalities\') else \'N/A\'} modalities.&quot;)\n        o_current = [0] # Example initial observation (e.g. first outcome for each modality)\n        s_current = [0] # Example initial true states for simulation\n        T = 5 # Number of timesteps\n        A_gen_process = copy.deepcopy(A)\n        B_gen_process = copy.deepcopy(B)\n    \n        for t_step in range(T):\n            print(f&quot;\\n--- Timestep {t_step + 1} ---&quot;)\n            if o_current is not None:\n                for g_idx, o_val in enumerate(o_current):\n                    print(f&quot;Observation ({obs_names[g_idx] if obs_names else f\'Modality {g_idx}\'}): {o_val}&quot;)\n            # Infer states\n            qs_current = agent.infer_states(o_current)\n            if qs_current is not None:\n                for f_idx, q_val in enumerate(qs_current):\n                    print(f&quot;Beliefs about {state_names[f_idx] if state_names else f\'Factor {f_idx}\'}: {q_val}&quot;)\n    \n            # Infer policies and sample action\n            q_pi_current, efe_current = agent.infer_policies()\n            if hasattr(agent, \'q_pi\') and agent.q_pi is not None:\n                print(f&quot;Posterior over policies (q_pi): {agent.q_pi}&quot;)\n            if efe_current is not None:\n                print(f&quot;Expected Free Energy (EFE): {efe_current}&quot;)\n            action_agent = agent.sample_action()\n            # Map agent\'s action (on control factors) to full environment action vector\n            action_env = np.zeros(num_factors, dtype=int)\n            if control_fac_idx and action_agent is not None:\n                for i, cf_idx in enumerate(control_fac_idx):\n                    action_env[cf_idx] = int(action_agent[i])\n            # Construct action names for printing\n            action_names_str_list = []\n            if control_fac_idx and action_agent is not None:\n                for i, cf_idx in enumerate(control_fac_idx):\n                    factor_action_name_list = agent.action_names.get(cf_idx, []) if hasattr(agent, \'action_names\') and isinstance(agent.action_names, dict) else []\n                    action_idx_on_factor = int(action_agent[i])\n                    if factor_action_name_list and action_idx_on_factor &lt; len(factor_action_name_list):\n                        action_names_str_list.append(f&quot;{state_names[cf_idx] if state_names else f\'Factor {cf_idx}\'}: {factor_action_name_list[action_idx_on_factor]} (idx {action_idx_on_factor})&quot;)\n                    else:\n                        action_names_str_list.append(f&quot;{state_names[cf_idx] if state_names else f\'Factor {cf_idx}\'}: Action idx {action_idx_on_factor}&quot;)\n            print(f&quot;Action taken: {\', \'.join(action_names_str_list) if action_names_str_list else \'No controllable actions or names not found\'}&quot;)\n    \n            # Update true states of the environment based on action\n            s_next = np.zeros(num_factors, dtype=int)\n            if s_current is not None and B_gen_process is not None:\n                for f_idx in range(num_factors):\n                    # B_gen_process[f_idx] shape: (num_states[f_idx], num_states[f_idx], num_actions_for_this_factor_or_1)\n                    action_for_factor = action_env[f_idx] if f_idx in control_fac_idx else 0\n                    s_next[f_idx] = utils.sample(B_gen_process[f_idx][:, s_current[f_idx], action_for_factor])\n            s_current = s_next.tolist()\n            if s_current is not None:\n                for f_idx, s_val in enumerate(s_current):\n                    print(f&quot;New true state ({state_names[f_idx] if state_names else f\'Factor {f_idx}\'}): {s_val}&quot;)\n    \n            # Generate next observation based on new true states\n            o_next = np.zeros(num_modalities, dtype=int)\n            if s_current is not None and A_gen_process is not None:\n                for g_idx in range(num_modalities):\n                    # A_gen_process[g_idx] shape: (num_obs[g_idx], num_states[0], num_states[1], ...)\n                    # Construct index for A matrix: (outcome_idx, s_f0, s_f1, ...)\n                    prob_vector = A_gen_process[g_idx][:, s_current[0]]\n                    o_next[g_idx] = utils.sample(prob_vector)\n            o_current = o_next.tolist()\n    \n        print(f&quot;\\nSimulation finished after {T} timesteps.&quot;)'">self = &lt;src.tests.render.test_pymdp_converter.TestAgentAndUsageCodeGeneration testMethod=test_generate_example_usage_code&gt;

    def test_generate_example_usage_code(self):
        gnn_spec = create_basic_gnn_spec(
            obs_modality_names=["ObsModality"], num_obs_modalities=[3],
            hidden_state_factor_names=["StateFactor"], num_hidden_states_factors=[2],
            num_control_factors=[2], control_action_names_per_factor={0: ["Action1", "Action2"]}
        )
        converter = GnnToPyMdpConverter(gnn_spec)
        # Ensure necessary attributes are set (as if matrices were converted)
        converter.num_modalities = 1
        converter.num_factors = 1
        # converter.num_obs = [3] # Already set by create_basic_gnn_spec -&gt; __init__
        # converter.num_states = [2] # Already set
    
        example_code_lines = converter.generate_example_usage_code()
    
        self.assertIsInstance(example_code_lines, list)
        self.assertTrue(len(example_code_lines) &gt; 0)
    
        example_code_str = "\n".join(example_code_lines)
&gt;       self.assertIn(f"# --- Example Usage for {converter.model_name} ---", example_code_str)
E       AssertionError: '# --- Example Usage for TestModel ---' not found in '\n# Example usage of the agent\nif __name__ == "__main__":\n    \n    # --- Example Usage ---\n    if __name__ == \'__main__\':\n        # Initialize agent (already done above)\n        # agent = TestModel  # Agent is already instantiated above as \'agent\'\n        print(f"Agent \'TestModel\' initialized with {agent.num_factors if hasattr(agent, \'num_factors\') else \'N/A\'} factors and {agent.num_modalities if hasattr(agent, \'num_modalities\') else \'N/A\'} modalities.")\n        o_current = [0] # Example initial observation (e.g. first outcome for each modality)\n        s_current = [0] # Example initial true states for simulation\n        T = 5 # Number of timesteps\n        A_gen_process = copy.deepcopy(A)\n        B_gen_process = copy.deepcopy(B)\n    \n        for t_step in range(T):\n            print(f"\\n--- Timestep {t_step + 1} ---")\n            if o_current is not None:\n                for g_idx, o_val in enumerate(o_current):\n                    print(f"Observation ({obs_names[g_idx] if obs_names else f\'Modality {g_idx}\'}): {o_val}")\n            # Infer states\n            qs_current = agent.infer_states(o_current)\n            if qs_current is not None:\n                for f_idx, q_val in enumerate(qs_current):\n                    print(f"Beliefs about {state_names[f_idx] if state_names else f\'Factor {f_idx}\'}: {q_val}")\n    \n            # Infer policies and sample action\n            q_pi_current, efe_current = agent.infer_policies()\n            if hasattr(agent, \'q_pi\') and agent.q_pi is not None:\n                print(f"Posterior over policies (q_pi): {agent.q_pi}")\n            if efe_current is not None:\n                print(f"Expected Free Energy (EFE): {efe_current}")\n            action_agent = agent.sample_action()\n            # Map agent\'s action (on control factors) to full environment action vector\n            action_env = np.zeros(num_factors, dtype=int)\n            if control_fac_idx and action_agent is not None:\n                for i, cf_idx in enumerate(control_fac_idx):\n                    action_env[cf_idx] = int(action_agent[i])\n            # Construct action names for printing\n            action_names_str_list = []\n            if control_fac_idx and action_agent is not None:\n                for i, cf_idx in enumerate(control_fac_idx):\n                    factor_action_name_list = agent.action_names.get(cf_idx, []) if hasattr(agent, \'action_names\') and isinstance(agent.action_names, dict) else []\n                    action_idx_on_factor = int(action_agent[i])\n                    if factor_action_name_list and action_idx_on_factor &lt; len(factor_action_name_list):\n                        action_names_str_list.append(f"{state_names[cf_idx] if state_names else f\'Factor {cf_idx}\'}: {factor_action_name_list[action_idx_on_factor]} (idx {action_idx_on_factor})")\n                    else:\n                        action_names_str_list.append(f"{state_names[cf_idx] if state_names else f\'Factor {cf_idx}\'}: Action idx {action_idx_on_factor}")\n            print(f"Action taken: {\', \'.join(action_names_str_list) if action_names_str_list else \'No controllable actions or names not found\'}")\n    \n            # Update true states of the environment based on action\n            s_next = np.zeros(num_factors, dtype=int)\n            if s_current is not None and B_gen_process is not None:\n                for f_idx in range(num_factors):\n                    # B_gen_process[f_idx] shape: (num_states[f_idx], num_states[f_idx], num_actions_for_this_factor_or_1)\n                    action_for_factor = action_env[f_idx] if f_idx in control_fac_idx else 0\n                    s_next[f_idx] = utils.sample(B_gen_process[f_idx][:, s_current[f_idx], action_for_factor])\n            s_current = s_next.tolist()\n            if s_current is not None:\n                for f_idx, s_val in enumerate(s_current):\n                    print(f"New true state ({state_names[f_idx] if state_names else f\'Factor {f_idx}\'}): {s_val}")\n    \n            # Generate next observation based on new true states\n            o_next = np.zeros(num_modalities, dtype=int)\n            if s_current is not None and A_gen_process is not None:\n                for g_idx in range(num_modalities):\n                    # A_gen_process[g_idx] shape: (num_obs[g_idx], num_states[0], num_states[1], ...)\n                    # Construct index for A matrix: (outcome_idx, s_f0, s_f1, ...)\n                    prob_vector = A_gen_process[g_idx][:, s_current[0]]\n                    o_next[g_idx] = utils.sample(prob_vector)\n            o_current = o_next.tolist()\n    \n        print(f"\\nSimulation finished after {T} timesteps.")'

src/tests/render/test_pymdp_converter.py:778: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestFullScriptGeneration" name="test_get_full_python_script_minimal" time="0.001"><failure message="AssertionError: '# --- GNN Model: MinimalAgent ---' not found in '#!/usr/bin/env python3\n&quot;&quot;&quot;\nPyMDP Agent Script - MinimalAgent\n\nGenerated by GNN PyMDP Renderer\n&quot;&quot;&quot;\n\n# =============================================================================\n# WARNING: This is an automatically generated script from GNN\n# If no matrix parameters were provided in the GNN spec, this script will\n# contain minimal placeholder matrices that may not execute correctly.\n# It is intended for basic structure only and may need manual adjustment.\n# =============================================================================\n\nimport numpy as np\nfrom pymdp.agent import Agent\nfrom pymdp import utils\nfrom pymdp import maths\nimport copy\nimport sys\nimport inspect\nimport traceback\n\n\n\n# --- GNN to PyMDP Conversion Summary ---\n# INFO: Starting GNN data extraction.\n# INFO: Using direct \'num_obs_modalities\' from GNN spec: [2]\n# INFO: Observation dimensions (num_obs) derived directly from gnn_spec.num_obs_modalities: [2]\n# INFO: Observation names derived directly from gnn_spec.obs_modality_names: [\'O\']\n# INFO: Using direct \'num_hidden_states_factors\' from GNN spec: [2]\n# INFO: State dimensions (num_states) derived directly from gnn_spec.num_hidden_states_factors: [2]\n# INFO: State names derived directly from gnn_spec.hidden_state_factor_names: [\'S\']\n# INFO: No control factors found in StateSpaceBlock.HiddenStateFactors.\n# INFO: Finished GNN data extraction.\n# INFO: Matrix definitions not generated yet. Generating matrices...\n# INFO: E_vector: No E (policy prior) specification found. Defaulting to None.\n# INFO: Agent instantiation code not generated yet. Generating...\n# --- End of GNN to PyMDP Conversion Summary ---\n\n\nnum_obs = [2]\nnum_modalities = 1\nobs_names = [&quot;O&quot;]\nnum_states = [2]\nnum_factors = 1\nstate_names = [&quot;S&quot;]\ncontrol_fac_idx = []\nnum_controls = [1]\n\nA_O = utils.norm_dist(np.ones((2, 2)))\nA = np.empty(1, dtype=object)\nA[0] = A_O\nB_S = utils.norm_dist(np.eye(2)[:, :, np.newaxis])\nB = np.empty(1, dtype=object)\nB[0] = B_S\nC_O = np.zeros(2)\nC = np.empty(1, dtype=object)\nC[0] = C_O\nD_S = np.ones(2) / 2.0\nD = np.empty(1, dtype=object)\nD[0] = D_S\nE = None\n\nagent = Agent(\n    A=A,\n    B=B,\n    C=C,\n    D=D,\n    E=E\n)\n\n# Set action names as agent attribute\nagent.action_names = {}\n\n\nprint(\'--- PyMDP Runtime Debug ---\')\ntry:\n    import pymdp\n    import inspect \n    import traceback \n    import ast\n\n    # try:\n    #     print(f\'AGENT_SCRIPT: Imported pymdp version: {pymdp.__version__}\') # Commented out\n    # except AttributeError:\n    #     print(\'AGENT_SCRIPT: pymdp.__version__ attribute not found.\') # Commented out\n    # print(f\'AGENT_SCRIPT: pymdp module location: {pymdp.__file__}\') # Commented out\n    from pymdp.agent import Agent\n    print(f\'AGENT_SCRIPT: Imported Agent: {Agent}\')\n    print(f\'AGENT_SCRIPT: Agent module location: {inspect.getfile(Agent)}\')\n    print(\'AGENT_SCRIPT: Checking for required variables in global scope:\')\n    print(f&quot;  AGENT_SCRIPT: A = {A if \'A\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: B = {B if \'B\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: C = {C if \'C\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: D = {D if \'D\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: E = {E if \'E\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: control_fac_idx = {control_fac_idx if \'control_fac_idx\' in globals() else \'Not Defined\'}&quot;)\n    print(\'  AGENT_SCRIPT: action_names = {}\')\n    print(\'  AGENT_SCRIPT: qs_initial = None\')\n    print(\'  AGENT_SCRIPT: agent_hyperparams = {}\')\n    print(\'AGENT_SCRIPT: Attempting to instantiate agent with defined parameters for debug...\')\n    \n    local_agent_hyperparams_str_val = \'{}\'\n\n    agent_params_for_debug = {}\n    if local_agent_hyperparams_str_val and local_agent_hyperparams_str_val.strip() and local_agent_hyperparams_str_val.strip() != \'{}\':\n        try:\n            agent_params_for_debug = ast.literal_eval(local_agent_hyperparams_str_val)\n            if not isinstance(agent_params_for_debug, dict):\n                print(&quot;AGENT_SCRIPT: Debug - Parsed agent_hyperparams_dict_str (\'&quot; + local_agent_hyperparams_str_val + &quot;\') was not a dict.&quot;)\n                agent_params_for_debug = {} \n        except Exception as e_hyper_parse:\n            print(&quot;AGENT_SCRIPT: Debug - Error parsing agent_hyperparams_dict_str (\'&quot; + local_agent_hyperparams_str_val + &quot;\'): &quot; + str(e_hyper_parse))\n            agent_params_for_debug = {}\n    else:\n        print(&quot;AGENT_SCRIPT: Debug - agent_hyperparams_dict_str (\'&quot; + local_agent_hyperparams_str_val + &quot;\') is empty or \'{}\'. Using empty dict for debug agent.&quot;)\n    \n    debug_params_copy = {k: v for k, v in agent_params_for_debug.items() if not (isinstance(v, str) and v == \'None\')}\n    temp_agent = Agent(**debug_params_copy)\n    print(f\'AGENT_SCRIPT: Debug agent successfully instantiated: {temp_agent}\')\nexcept Exception as e_debug:\n    print(f\'AGENT_SCRIPT: Error during PyMDP runtime debug: {e_debug}\')\n    print(&quot;AGENT_SCRIPT: Traceback:&quot;)\n    print(traceback.format_exc())\nprint(\'--- End PyMDP Runtime Debug ---\')\n'">self = &lt;src.tests.render.test_pymdp_converter.TestFullScriptGeneration testMethod=test_get_full_python_script_minimal&gt;

    def test_get_full_python_script_minimal(self):
        gnn_spec = create_basic_gnn_spec(
            model_name="MinimalAgent",
            obs_modality_names=["O"], num_obs_modalities=[2],
            hidden_state_factor_names=["S"], num_hidden_states_factors=[2]
        )
        converter = GnnToPyMdpConverter(gnn_spec)
        script_content = converter.get_full_python_script(include_example_usage=False)
    
        self.assertIsInstance(script_content, str)
        self.assertIn("import numpy as np", script_content)
        self.assertIn("from pymdp.agent import Agent", script_content)
&gt;       self.assertIn("# --- GNN Model: MinimalAgent ---", script_content)
E       AssertionError: '# --- GNN Model: MinimalAgent ---' not found in '#!/usr/bin/env python3\n"""\nPyMDP Agent Script - MinimalAgent\n\nGenerated by GNN PyMDP Renderer\n"""\n\n# =============================================================================\n# WARNING: This is an automatically generated script from GNN\n# If no matrix parameters were provided in the GNN spec, this script will\n# contain minimal placeholder matrices that may not execute correctly.\n# It is intended for basic structure only and may need manual adjustment.\n# =============================================================================\n\nimport numpy as np\nfrom pymdp.agent import Agent\nfrom pymdp import utils\nfrom pymdp import maths\nimport copy\nimport sys\nimport inspect\nimport traceback\n\n\n\n# --- GNN to PyMDP Conversion Summary ---\n# INFO: Starting GNN data extraction.\n# INFO: Using direct \'num_obs_modalities\' from GNN spec: [2]\n# INFO: Observation dimensions (num_obs) derived directly from gnn_spec.num_obs_modalities: [2]\n# INFO: Observation names derived directly from gnn_spec.obs_modality_names: [\'O\']\n# INFO: Using direct \'num_hidden_states_factors\' from GNN spec: [2]\n# INFO: State dimensions (num_states) derived directly from gnn_spec.num_hidden_states_factors: [2]\n# INFO: State names derived directly from gnn_spec.hidden_state_factor_names: [\'S\']\n# INFO: No control factors found in StateSpaceBlock.HiddenStateFactors.\n# INFO: Finished GNN data extraction.\n# INFO: Matrix definitions not generated yet. Generating matrices...\n# INFO: E_vector: No E (policy prior) specification found. Defaulting to None.\n# INFO: Agent instantiation code not generated yet. Generating...\n# --- End of GNN to PyMDP Conversion Summary ---\n\n\nnum_obs = [2]\nnum_modalities = 1\nobs_names = ["O"]\nnum_states = [2]\nnum_factors = 1\nstate_names = ["S"]\ncontrol_fac_idx = []\nnum_controls = [1]\n\nA_O = utils.norm_dist(np.ones((2, 2)))\nA = np.empty(1, dtype=object)\nA[0] = A_O\nB_S = utils.norm_dist(np.eye(2)[:, :, np.newaxis])\nB = np.empty(1, dtype=object)\nB[0] = B_S\nC_O = np.zeros(2)\nC = np.empty(1, dtype=object)\nC[0] = C_O\nD_S = np.ones(2) / 2.0\nD = np.empty(1, dtype=object)\nD[0] = D_S\nE = None\n\nagent = Agent(\n    A=A,\n    B=B,\n    C=C,\n    D=D,\n    E=E\n)\n\n# Set action names as agent attribute\nagent.action_names = {}\n\n\nprint(\'--- PyMDP Runtime Debug ---\')\ntry:\n    import pymdp\n    import inspect \n    import traceback \n    import ast\n\n    # try:\n    #     print(f\'AGENT_SCRIPT: Imported pymdp version: {pymdp.__version__}\') # Commented out\n    # except AttributeError:\n    #     print(\'AGENT_SCRIPT: pymdp.__version__ attribute not found.\') # Commented out\n    # print(f\'AGENT_SCRIPT: pymdp module location: {pymdp.__file__}\') # Commented out\n    from pymdp.agent import Agent\n    print(f\'AGENT_SCRIPT: Imported Agent: {Agent}\')\n    print(f\'AGENT_SCRIPT: Agent module location: {inspect.getfile(Agent)}\')\n    print(\'AGENT_SCRIPT: Checking for required variables in global scope:\')\n    print(f"  AGENT_SCRIPT: A = {A if \'A\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: B = {B if \'B\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: C = {C if \'C\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: D = {D if \'D\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: E = {E if \'E\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: control_fac_idx = {control_fac_idx if \'control_fac_idx\' in globals() else \'Not Defined\'}")\n    print(\'  AGENT_SCRIPT: action_names = {}\')\n    print(\'  AGENT_SCRIPT: qs_initial = None\')\n    print(\'  AGENT_SCRIPT: agent_hyperparams = {}\')\n    print(\'AGENT_SCRIPT: Attempting to instantiate agent with defined parameters for debug...\')\n    \n    local_agent_hyperparams_str_val = \'{}\'\n\n    agent_params_for_debug = {}\n    if local_agent_hyperparams_str_val and local_agent_hyperparams_str_val.strip() and local_agent_hyperparams_str_val.strip() != \'{}\':\n        try:\n            agent_params_for_debug = ast.literal_eval(local_agent_hyperparams_str_val)\n            if not isinstance(agent_params_for_debug, dict):\n                print("AGENT_SCRIPT: Debug - Parsed agent_hyperparams_dict_str (\'" + local_agent_hyperparams_str_val + "\') was not a dict.")\n                agent_params_for_debug = {} \n        except Exception as e_hyper_parse:\n            print("AGENT_SCRIPT: Debug - Error parsing agent_hyperparams_dict_str (\'" + local_agent_hyperparams_str_val + "\'): " + str(e_hyper_parse))\n            agent_params_for_debug = {}\n    else:\n        print("AGENT_SCRIPT: Debug - agent_hyperparams_dict_str (\'" + local_agent_hyperparams_str_val + "\') is empty or \'{}\'. Using empty dict for debug agent.")\n    \n    debug_params_copy = {k: v for k, v in agent_params_for_debug.items() if not (isinstance(v, str) and v == \'None\')}\n    temp_agent = Agent(**debug_params_copy)\n    print(f\'AGENT_SCRIPT: Debug agent successfully instantiated: {temp_agent}\')\nexcept Exception as e_debug:\n    print(f\'AGENT_SCRIPT: Error during PyMDP runtime debug: {e_debug}\')\n    print("AGENT_SCRIPT: Traceback:")\n    print(traceback.format_exc())\nprint(\'--- End PyMDP Runtime Debug ---\')\n'

src/tests/render/test_pymdp_converter.py:800: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestFullScriptGeneration" name="test_get_full_python_script_no_example_usage" time="0.001"><failure message="AssertionError: '# --- GNN Model: NoExample ---' not found in '#!/usr/bin/env python3\n&quot;&quot;&quot;\nPyMDP Agent Script - NoExample\n\nGenerated by GNN PyMDP Renderer\n&quot;&quot;&quot;\n\n# =============================================================================\n# WARNING: This is an automatically generated script from GNN\n# If no matrix parameters were provided in the GNN spec, this script will\n# contain minimal placeholder matrices that may not execute correctly.\n# It is intended for basic structure only and may need manual adjustment.\n# =============================================================================\n\nimport numpy as np\nfrom pymdp.agent import Agent\nfrom pymdp import utils\nfrom pymdp import maths\nimport copy\nimport sys\nimport inspect\nimport traceback\n\n\n\n# --- GNN to PyMDP Conversion Summary ---\n# INFO: Starting GNN data extraction.\n# INFO: Observation dimensions derived from StateSpaceBlock.ObservationModalities (dict format): []\n# INFO: Observation names derived from StateSpaceBlock.ObservationModalities (dict format): []\n# INFO: State dimensions derived from StateSpaceBlock.HiddenStateFactors (dict format): []\n# INFO: State names derived from StateSpaceBlock.HiddenStateFactors (dict format): []\n# INFO: Finished GNN data extraction.\n# INFO: Matrix definitions not generated yet. Generating matrices...\n# INFO: A_matrix: No observation modalities defined. \'A\' will be None.\n# INFO: B_matrix: No hidden state factors defined. \'B\' will be None.\n# INFO: C_vector: No observation modalities defined. \'C\' will be None.\n# INFO: D_vector: No hidden state factors defined. \'D\' will be None.\n# INFO: E_vector: No E (policy prior) specification found. Defaulting to None.\n# INFO: Agent instantiation code not generated yet. Generating...\n# ERROR: Cannot generate agent instantiation with no observation modalities or hidden state factors.\n# --- End of GNN to PyMDP Conversion Summary ---\n\n\ncontrol_fac_idx = []\nnum_controls = []\n\nA = None\nB = None\nC = None\nD = None\nE = None\n\nA = None # No modalities or states defined\nB = None # No state factors defined\nC = None # No modalities defined\nD = None # No state factors defined\n\n\nprint(\'--- PyMDP Runtime Debug ---\')\ntry:\n    import pymdp\n    import inspect \n    import traceback \n    import ast\n\n    # try:\n    #     print(f\'AGENT_SCRIPT: Imported pymdp version: {pymdp.__version__}\') # Commented out\n    # except AttributeError:\n    #     print(\'AGENT_SCRIPT: pymdp.__version__ attribute not found.\') # Commented out\n    # print(f\'AGENT_SCRIPT: pymdp module location: {pymdp.__file__}\') # Commented out\n    from pymdp.agent import Agent\n    print(f\'AGENT_SCRIPT: Imported Agent: {Agent}\')\n    print(f\'AGENT_SCRIPT: Agent module location: {inspect.getfile(Agent)}\')\n    print(\'AGENT_SCRIPT: Checking for required variables in global scope:\')\n    print(f&quot;  AGENT_SCRIPT: A = {A if \'A\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: B = {B if \'B\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: C = {C if \'C\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: D = {D if \'D\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: E = {E if \'E\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: control_fac_idx = {control_fac_idx if \'control_fac_idx\' in globals() else \'Not Defined\'}&quot;)\n    print(\'  AGENT_SCRIPT: action_names = {}\')\n    print(\'  AGENT_SCRIPT: qs_initial = None\')\n    print(\'  AGENT_SCRIPT: agent_hyperparams = {}\')\n    print(\'AGENT_SCRIPT: Attempting to instantiate agent with defined parameters for debug...\')\n    \n    local_agent_hyperparams_str_val = \'{}\'\n\n    agent_params_for_debug = {}\n    if local_agent_hyperparams_str_val and local_agent_hyperparams_str_val.strip() and local_agent_hyperparams_str_val.strip() != \'{}\':\n        try:\n            agent_params_for_debug = ast.literal_eval(local_agent_hyperparams_str_val)\n            if not isinstance(agent_params_for_debug, dict):\n                print(&quot;AGENT_SCRIPT: Debug - Parsed agent_hyperparams_dict_str (\'&quot; + local_agent_hyperparams_str_val + &quot;\') was not a dict.&quot;)\n                agent_params_for_debug = {} \n        except Exception as e_hyper_parse:\n            print(&quot;AGENT_SCRIPT: Debug - Error parsing agent_hyperparams_dict_str (\'&quot; + local_agent_hyperparams_str_val + &quot;\'): &quot; + str(e_hyper_parse))\n            agent_params_for_debug = {}\n    else:\n        print(&quot;AGENT_SCRIPT: Debug - agent_hyperparams_dict_str (\'&quot; + local_agent_hyperparams_str_val + &quot;\') is empty or \'{}\'. Using empty dict for debug agent.&quot;)\n    \n    debug_params_copy = {k: v for k, v in agent_params_for_debug.items() if not (isinstance(v, str) and v == \'None\')}\n    temp_agent = Agent(**debug_params_copy)\n    print(f\'AGENT_SCRIPT: Debug agent successfully instantiated: {temp_agent}\')\nexcept Exception as e_debug:\n    print(f\'AGENT_SCRIPT: Error during PyMDP runtime debug: {e_debug}\')\n    print(&quot;AGENT_SCRIPT: Traceback:&quot;)\n    print(traceback.format_exc())\nprint(\'--- End PyMDP Runtime Debug ---\')\n'">self = &lt;src.tests.render.test_pymdp_converter.TestFullScriptGeneration testMethod=test_get_full_python_script_no_example_usage&gt;

    def test_get_full_python_script_no_example_usage(self):
        gnn_spec = create_basic_gnn_spec(model_name="NoExample")
        converter = GnnToPyMdpConverter(gnn_spec)
        script_content = converter.get_full_python_script(include_example_usage=False)
    
&gt;       self.assertIn("# --- GNN Model: NoExample ---", script_content)
E       AssertionError: '# --- GNN Model: NoExample ---' not found in '#!/usr/bin/env python3\n"""\nPyMDP Agent Script - NoExample\n\nGenerated by GNN PyMDP Renderer\n"""\n\n# =============================================================================\n# WARNING: This is an automatically generated script from GNN\n# If no matrix parameters were provided in the GNN spec, this script will\n# contain minimal placeholder matrices that may not execute correctly.\n# It is intended for basic structure only and may need manual adjustment.\n# =============================================================================\n\nimport numpy as np\nfrom pymdp.agent import Agent\nfrom pymdp import utils\nfrom pymdp import maths\nimport copy\nimport sys\nimport inspect\nimport traceback\n\n\n\n# --- GNN to PyMDP Conversion Summary ---\n# INFO: Starting GNN data extraction.\n# INFO: Observation dimensions derived from StateSpaceBlock.ObservationModalities (dict format): []\n# INFO: Observation names derived from StateSpaceBlock.ObservationModalities (dict format): []\n# INFO: State dimensions derived from StateSpaceBlock.HiddenStateFactors (dict format): []\n# INFO: State names derived from StateSpaceBlock.HiddenStateFactors (dict format): []\n# INFO: Finished GNN data extraction.\n# INFO: Matrix definitions not generated yet. Generating matrices...\n# INFO: A_matrix: No observation modalities defined. \'A\' will be None.\n# INFO: B_matrix: No hidden state factors defined. \'B\' will be None.\n# INFO: C_vector: No observation modalities defined. \'C\' will be None.\n# INFO: D_vector: No hidden state factors defined. \'D\' will be None.\n# INFO: E_vector: No E (policy prior) specification found. Defaulting to None.\n# INFO: Agent instantiation code not generated yet. Generating...\n# ERROR: Cannot generate agent instantiation with no observation modalities or hidden state factors.\n# --- End of GNN to PyMDP Conversion Summary ---\n\n\ncontrol_fac_idx = []\nnum_controls = []\n\nA = None\nB = None\nC = None\nD = None\nE = None\n\nA = None # No modalities or states defined\nB = None # No state factors defined\nC = None # No modalities defined\nD = None # No state factors defined\n\n\nprint(\'--- PyMDP Runtime Debug ---\')\ntry:\n    import pymdp\n    import inspect \n    import traceback \n    import ast\n\n    # try:\n    #     print(f\'AGENT_SCRIPT: Imported pymdp version: {pymdp.__version__}\') # Commented out\n    # except AttributeError:\n    #     print(\'AGENT_SCRIPT: pymdp.__version__ attribute not found.\') # Commented out\n    # print(f\'AGENT_SCRIPT: pymdp module location: {pymdp.__file__}\') # Commented out\n    from pymdp.agent import Agent\n    print(f\'AGENT_SCRIPT: Imported Agent: {Agent}\')\n    print(f\'AGENT_SCRIPT: Agent module location: {inspect.getfile(Agent)}\')\n    print(\'AGENT_SCRIPT: Checking for required variables in global scope:\')\n    print(f"  AGENT_SCRIPT: A = {A if \'A\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: B = {B if \'B\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: C = {C if \'C\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: D = {D if \'D\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: E = {E if \'E\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: control_fac_idx = {control_fac_idx if \'control_fac_idx\' in globals() else \'Not Defined\'}")\n    print(\'  AGENT_SCRIPT: action_names = {}\')\n    print(\'  AGENT_SCRIPT: qs_initial = None\')\n    print(\'  AGENT_SCRIPT: agent_hyperparams = {}\')\n    print(\'AGENT_SCRIPT: Attempting to instantiate agent with defined parameters for debug...\')\n    \n    local_agent_hyperparams_str_val = \'{}\'\n\n    agent_params_for_debug = {}\n    if local_agent_hyperparams_str_val and local_agent_hyperparams_str_val.strip() and local_agent_hyperparams_str_val.strip() != \'{}\':\n        try:\n            agent_params_for_debug = ast.literal_eval(local_agent_hyperparams_str_val)\n            if not isinstance(agent_params_for_debug, dict):\n                print("AGENT_SCRIPT: Debug - Parsed agent_hyperparams_dict_str (\'" + local_agent_hyperparams_str_val + "\') was not a dict.")\n                agent_params_for_debug = {} \n        except Exception as e_hyper_parse:\n            print("AGENT_SCRIPT: Debug - Error parsing agent_hyperparams_dict_str (\'" + local_agent_hyperparams_str_val + "\'): " + str(e_hyper_parse))\n            agent_params_for_debug = {}\n    else:\n        print("AGENT_SCRIPT: Debug - agent_hyperparams_dict_str (\'" + local_agent_hyperparams_str_val + "\') is empty or \'{}\'. Using empty dict for debug agent.")\n    \n    debug_params_copy = {k: v for k, v in agent_params_for_debug.items() if not (isinstance(v, str) and v == \'None\')}\n    temp_agent = Agent(**debug_params_copy)\n    print(f\'AGENT_SCRIPT: Debug agent successfully instantiated: {temp_agent}\')\nexcept Exception as e_debug:\n    print(f\'AGENT_SCRIPT: Error during PyMDP runtime debug: {e_debug}\')\n    print("AGENT_SCRIPT: Traceback:")\n    print(traceback.format_exc())\nprint(\'--- End PyMDP Runtime Debug ---\')\n'

src/tests/render/test_pymdp_converter.py:861: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestFullScriptGeneration" name="test_get_full_python_script_with_all_elements" time="0.002"><failure message="AssertionError: '# --- GNN Model: ComplexAgent ---' not found in '#!/usr/bin/env python3\n&quot;&quot;&quot;\nPyMDP Agent Script - ComplexAgent\n\nGenerated by GNN PyMDP Renderer\n&quot;&quot;&quot;\n\n# =============================================================================\n# WARNING: This is an automatically generated script from GNN\n# If no matrix parameters were provided in the GNN spec, this script will\n# contain minimal placeholder matrices that may not execute correctly.\n# It is intended for basic structure only and may need manual adjustment.\n# =============================================================================\n\nimport numpy as np\nfrom pymdp.agent import Agent\nfrom pymdp import utils\nfrom pymdp import maths\nimport copy\nimport sys\nimport inspect\nimport traceback\n\n\n\n# --- GNN to PyMDP Conversion Summary ---\n# INFO: Starting GNN data extraction.\n# INFO: Using direct \'num_obs_modalities\' from GNN spec: [2, 3]\n# INFO: Observation dimensions (num_obs) derived directly from gnn_spec.num_obs_modalities: [2, 3]\n# INFO: Observation names derived directly from gnn_spec.obs_modality_names: [\'Visual\', \'Audio\']\n# INFO: Using direct \'num_hidden_states_factors\' from GNN spec: [4, 2]\n# INFO: State dimensions (num_states) derived directly from gnn_spec.num_hidden_states_factors: [4, 2]\n# INFO: State names derived directly from gnn_spec.hidden_state_factor_names: [\'Location\', \'Context\']\n# INFO: Control dimensions derived directly from gnn_spec.num_control_factors: [3, 0]\n# INFO: Action names for control factor 0 derived directly from gnn_spec.control_action_names_per_factor.\n# WARNING: A_matrix spec is a single dict but multiple modalities expected. Wrapping in list.\n# WARNING: B_matrix spec is a single dict but multiple factors expected. Wrapping in list.\n# INFO: Finished GNN data extraction.\n# INFO: Matrix definitions not generated yet. Generating matrices...\n# ERROR: C_vector (modality Visual): ast.literal_eval failed. String \'np.zeros(2)...\'. malformed node or string on line 1: &lt;ast.Call object at 0x78e2b09c3c50&gt;\n# INFO: C_vector (modality Visual): Failed to parse array data string. Using default.\n# ERROR: C_vector (modality Audio): ast.literal_eval failed. String \'np.zeros(3)...\'. malformed node or string on line 1: &lt;ast.Call object at 0x78e2b09c0b50&gt;\n# INFO: C_vector (modality Audio): Failed to parse array data string. Using default.\n# DEBUG: D_vector (factor Location): Detected numpy expression with operations. Preserving as code.\n# ERROR: D_vector (factor Location): Shape mismatch. Expected (4,), got (). Using default uniform.\n# DEBUG: D_vector (factor Context): Detected numpy expression with operations. Preserving as code.\n# ERROR: D_vector (factor Context): Shape mismatch. Expected (2,), got (). Using default uniform.\n# DEBUG: E_vector (policy_prior): Detected numpy expression with operations. Preserving as code.\n# INFO: Agent instantiation code not generated yet. Generating...\n# INFO: Example usage code not generated yet. Generating...\n# --- End of GNN to PyMDP Conversion Summary ---\n\n\nnum_obs = [2, 3]\nnum_modalities = 2\nobs_names = [&quot;Visual&quot;, &quot;Audio&quot;]\nnum_states = [4, 2]\nnum_factors = 2\nstate_names = [&quot;Location&quot;, &quot;Context&quot;]\ncontrol_fac_idx = [0]\nnum_controls = [3, 1]\n\nA_Visual = utils.norm_dist(np.ones((2, 4, 2)))\nA_Audio = utils.norm_dist(np.ones((3, 4, 2)))\nA = np.empty(2, dtype=object)\nA[0] = A_Visual\nA[1] = A_Audio\nB_Location = utils.norm_dist(np.ones(4, 4, 3))\nB_Context = utils.norm_dist(np.eye(2)[:, :, np.newaxis])\nB = np.empty(2, dtype=object)\nB[0] = B_Location\nB[1] = B_Context\nC_Visual = np.zeros(2)\nC_Audio = np.zeros(3)\nC = np.empty(2, dtype=object)\nC[0] = C_Visual\nC[1] = C_Audio\nD_Location = np.ones(4) / 4.0\nD_Context = np.ones(2) / 2.0\nD = np.empty(2, dtype=object)\nD[0] = D_Location\nD[1] = D_Context\nE_policy_prior = np.ones(10)/10.0\nE = E_policy_prior\n\nagent = Agent(\n    A=A,\n    B=B,\n    C=C,\n    D=D,\n    E=E,\n    control_fac_idx=[0]\n)\n\n# Set action names as agent attribute\nagent.action_names = {0: [\'L\', \'R\', \'S\']}\n\n\n# Example usage of the agent\nif __name__ == &quot;__main__&quot;:\n    \n    # --- Example Usage ---\n    if __name__ == \'__main__\':\n        # Initialize agent (already done above)\n        # agent = ComplexAgent  # Agent is already instantiated above as \'agent\'\n        print(f&quot;Agent \'ComplexAgent\' initialized with {agent.num_factors if hasattr(agent, \'num_factors\') else \'N/A\'} factors and {agent.num_modalities if hasattr(agent, \'num_modalities\') else \'N/A\'} modalities.&quot;)\n        o_current = [0, 0] # Example initial observation (e.g. first outcome for each modality)\n        s_current = [0, 0] # Example initial true states for simulation\n        T = 5 # Number of timesteps\n        A_gen_process = copy.deepcopy(A)\n        B_gen_process = copy.deepcopy(B)\n    \n        for t_step in range(T):\n            print(f&quot;\\n--- Timestep {t_step + 1} ---&quot;)\n            if o_current is not None:\n                for g_idx, o_val in enumerate(o_current):\n                    print(f&quot;Observation ({obs_names[g_idx] if obs_names else f\'Modality {g_idx}\'}): {o_val}&quot;)\n            # Infer states\n            qs_current = agent.infer_states(o_current)\n            if qs_current is not None:\n                for f_idx, q_val in enumerate(qs_current):\n                    print(f&quot;Beliefs about {state_names[f_idx] if state_names else f\'Factor {f_idx}\'}: {q_val}&quot;)\n    \n            # Infer policies and sample action\n            q_pi_current, efe_current = agent.infer_policies()\n            if hasattr(agent, \'q_pi\') and agent.q_pi is not None:\n                print(f&quot;Posterior over policies (q_pi): {agent.q_pi}&quot;)\n            if efe_current is not None:\n                print(f&quot;Expected Free Energy (EFE): {efe_current}&quot;)\n            action_agent = agent.sample_action()\n            # Map agent\'s action (on control factors) to full environment action vector\n            action_env = np.zeros(num_factors, dtype=int)\n            if control_fac_idx and action_agent is not None:\n                for i, cf_idx in enumerate(control_fac_idx):\n                    action_env[cf_idx] = int(action_agent[i])\n            # Construct action names for printing\n            action_names_str_list = []\n            if control_fac_idx and action_agent is not None:\n                for i, cf_idx in enumerate(control_fac_idx):\n                    factor_action_name_list = agent.action_names.get(cf_idx, []) if hasattr(agent, \'action_names\') and isinstance(agent.action_names, dict) else []\n                    action_idx_on_factor = int(action_agent[i])\n                    if factor_action_name_list and action_idx_on_factor &lt; len(factor_action_name_list):\n                        action_names_str_list.append(f&quot;{state_names[cf_idx] if state_names else f\'Factor {cf_idx}\'}: {factor_action_name_list[action_idx_on_factor]} (idx {action_idx_on_factor})&quot;)\n                    else:\n                        action_names_str_list.append(f&quot;{state_names[cf_idx] if state_names else f\'Factor {cf_idx}\'}: Action idx {action_idx_on_factor}&quot;)\n            print(f&quot;Action taken: {\', \'.join(action_names_str_list) if action_names_str_list else \'No controllable actions or names not found\'}&quot;)\n    \n            # Update true states of the environment based on action\n            s_next = np.zeros(num_factors, dtype=int)\n            if s_current is not None and B_gen_process is not None:\n                for f_idx in range(num_factors):\n                    # B_gen_process[f_idx] shape: (num_states[f_idx], num_states[f_idx], num_actions_for_this_factor_or_1)\n                    action_for_factor = action_env[f_idx] if f_idx in control_fac_idx else 0\n                    s_next[f_idx] = utils.sample(B_gen_process[f_idx][:, s_current[f_idx], action_for_factor])\n            s_current = s_next.tolist()\n            if s_current is not None:\n                for f_idx, s_val in enumerate(s_current):\n                    print(f&quot;New true state ({state_names[f_idx] if state_names else f\'Factor {f_idx}\'}): {s_val}&quot;)\n    \n            # Generate next observation based on new true states\n            o_next = np.zeros(num_modalities, dtype=int)\n            if s_current is not None and A_gen_process is not None:\n                for g_idx in range(num_modalities):\n                    # A_gen_process[g_idx] shape: (num_obs[g_idx], num_states[0], num_states[1], ...)\n                    # Construct index for A matrix: (outcome_idx, s_f0, s_f1, ...)\n                    prob_vector = A_gen_process[g_idx][:, s_current[0], s_current[1]]\n                    o_next[g_idx] = utils.sample(prob_vector)\n            o_current = o_next.tolist()\n    \n        print(f&quot;\\nSimulation finished after {T} timesteps.&quot;)\n\n\nprint(\'--- PyMDP Runtime Debug ---\')\ntry:\n    import pymdp\n    import inspect \n    import traceback \n    import ast\n\n    # try:\n    #     print(f\'AGENT_SCRIPT: Imported pymdp version: {pymdp.__version__}\') # Commented out\n    # except AttributeError:\n    #     print(\'AGENT_SCRIPT: pymdp.__version__ attribute not found.\') # Commented out\n    # print(f\'AGENT_SCRIPT: pymdp module location: {pymdp.__file__}\') # Commented out\n    from pymdp.agent import Agent\n    print(f\'AGENT_SCRIPT: Imported Agent: {Agent}\')\n    print(f\'AGENT_SCRIPT: Agent module location: {inspect.getfile(Agent)}\')\n    print(\'AGENT_SCRIPT: Checking for required variables in global scope:\')\n    print(f&quot;  AGENT_SCRIPT: A = {A if \'A\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: B = {B if \'B\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: C = {C if \'C\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: D = {D if \'D\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: E = {E if \'E\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: control_fac_idx = {control_fac_idx if \'control_fac_idx\' in globals() else \'Not Defined\'}&quot;)\n    print(\'  AGENT_SCRIPT: action_names = {0: [\'L\', \'R\', \'S\']}\')\n    print(\'  AGENT_SCRIPT: qs_initial = None\')\n    print(\'  AGENT_SCRIPT: agent_hyperparams = {}\')\n    print(\'AGENT_SCRIPT: Attempting to instantiate agent with defined parameters for debug...\')\n    \n    local_agent_hyperparams_str_val = \'{}\'\n\n    agent_params_for_debug = {}\n    if local_agent_hyperparams_str_val and local_agent_hyperparams_str_val.strip() and local_agent_hyperparams_str_val.strip() != \'{}\':\n        try:\n            agent_params_for_debug = ast.literal_eval(local_agent_hyperparams_str_val)\n            if not isinstance(agent_params_for_debug, dict):\n                print(&quot;AGENT_SCRIPT: Debug - Parsed agent_hyperparams_dict_str (\'&quot; + local_agent_hyperparams_str_val + &quot;\') was not a dict.&quot;)\n                agent_params_for_debug = {} \n        except Exception as e_hyper_parse:\n            print(&quot;AGENT_SCRIPT: Debug - Error parsing agent_hyperparams_dict_str (\'&quot; + local_agent_hyperparams_str_val + &quot;\'): &quot; + str(e_hyper_parse))\n            agent_params_for_debug = {}\n    else:\n        print(&quot;AGENT_SCRIPT: Debug - agent_hyperparams_dict_str (\'&quot; + local_agent_hyperparams_str_val + &quot;\') is empty or \'{}\'. Using empty dict for debug agent.&quot;)\n    \n    debug_params_copy = {k: v for k, v in agent_params_for_debug.items() if not (isinstance(v, str) and v == \'None\')}\n    temp_agent = Agent(**debug_params_copy)\n    print(f\'AGENT_SCRIPT: Debug agent successfully instantiated: {temp_agent}\')\nexcept Exception as e_debug:\n    print(f\'AGENT_SCRIPT: Error during PyMDP runtime debug: {e_debug}\')\n    print(&quot;AGENT_SCRIPT: Traceback:&quot;)\n    print(traceback.format_exc())\nprint(\'--- End PyMDP Runtime Debug ---\')\n'">self = &lt;src.tests.render.test_pymdp_converter.TestFullScriptGeneration testMethod=test_get_full_python_script_with_all_elements&gt;

    def test_get_full_python_script_with_all_elements(self):
        hyperparams = {
            "agent_params": {"planning_horizon": 2},
            "policy_params": {"initial_action_selection": "boltzmann"}
        }
        gnn_spec = create_basic_gnn_spec(
            model_name="ComplexAgent",
            obs_modality_names=["Visual", "Audio"], num_obs_modalities=[2,3],
            hidden_state_factor_names=["Location", "Context"], num_hidden_states_factors=[4,2],
            num_control_factors=[3,0], control_action_names_per_factor={0:["L","R","S"]},
            A_spec={
                "Visual": "np.random.rand(2,4,2)",
                "Audio": "np.random.rand(3,4,2)"
            },
            B_spec={
                "Location": "np.random.rand(3,4,4)", # Controlled
                # Context is not controlled, will get identity
            },
            C_spec={"Visual": "np.zeros(2)", "Audio": "np.zeros(3)"},
            D_spec={"Location": "np.ones(4)/4.0", "Context": "np.ones(2)/2.0"},
            E_spec={"policy_prior": "np.ones(10)/10.0"}, # Assuming 10 policies for test
            agent_hyperparameters=hyperparams
        )
        converter = GnnToPyMdpConverter(gnn_spec)
        script_content = converter.get_full_python_script(include_example_usage=True)
    
        self.assertIn("import numpy as np", script_content)
        self.assertIn("from pymdp.agent import Agent", script_content)
&gt;       self.assertIn("# --- GNN Model: ComplexAgent ---", script_content)
E       AssertionError: '# --- GNN Model: ComplexAgent ---' not found in '#!/usr/bin/env python3\n"""\nPyMDP Agent Script - ComplexAgent\n\nGenerated by GNN PyMDP Renderer\n"""\n\n# =============================================================================\n# WARNING: This is an automatically generated script from GNN\n# If no matrix parameters were provided in the GNN spec, this script will\n# contain minimal placeholder matrices that may not execute correctly.\n# It is intended for basic structure only and may need manual adjustment.\n# =============================================================================\n\nimport numpy as np\nfrom pymdp.agent import Agent\nfrom pymdp import utils\nfrom pymdp import maths\nimport copy\nimport sys\nimport inspect\nimport traceback\n\n\n\n# --- GNN to PyMDP Conversion Summary ---\n# INFO: Starting GNN data extraction.\n# INFO: Using direct \'num_obs_modalities\' from GNN spec: [2, 3]\n# INFO: Observation dimensions (num_obs) derived directly from gnn_spec.num_obs_modalities: [2, 3]\n# INFO: Observation names derived directly from gnn_spec.obs_modality_names: [\'Visual\', \'Audio\']\n# INFO: Using direct \'num_hidden_states_factors\' from GNN spec: [4, 2]\n# INFO: State dimensions (num_states) derived directly from gnn_spec.num_hidden_states_factors: [4, 2]\n# INFO: State names derived directly from gnn_spec.hidden_state_factor_names: [\'Location\', \'Context\']\n# INFO: Control dimensions derived directly from gnn_spec.num_control_factors: [3, 0]\n# INFO: Action names for control factor 0 derived directly from gnn_spec.control_action_names_per_factor.\n# WARNING: A_matrix spec is a single dict but multiple modalities expected. Wrapping in list.\n# WARNING: B_matrix spec is a single dict but multiple factors expected. Wrapping in list.\n# INFO: Finished GNN data extraction.\n# INFO: Matrix definitions not generated yet. Generating matrices...\n# ERROR: C_vector (modality Visual): ast.literal_eval failed. String \'np.zeros(2)...\'. malformed node or string on line 1: &lt;ast.Call object at 0x78e2b09c3c50&gt;\n# INFO: C_vector (modality Visual): Failed to parse array data string. Using default.\n# ERROR: C_vector (modality Audio): ast.literal_eval failed. String \'np.zeros(3)...\'. malformed node or string on line 1: &lt;ast.Call object at 0x78e2b09c0b50&gt;\n# INFO: C_vector (modality Audio): Failed to parse array data string. Using default.\n# DEBUG: D_vector (factor Location): Detected numpy expression with operations. Preserving as code.\n# ERROR: D_vector (factor Location): Shape mismatch. Expected (4,), got (). Using default uniform.\n# DEBUG: D_vector (factor Context): Detected numpy expression with operations. Preserving as code.\n# ERROR: D_vector (factor Context): Shape mismatch. Expected (2,), got (). Using default uniform.\n# DEBUG: E_vector (policy_prior): Detected numpy expression with operations. Preserving as code.\n# INFO: Agent instantiation code not generated yet. Generating...\n# INFO: Example usage code not generated yet. Generating...\n# --- End of GNN to PyMDP Conversion Summary ---\n\n\nnum_obs = [2, 3]\nnum_modalities = 2\nobs_names = ["Visual", "Audio"]\nnum_states = [4, 2]\nnum_factors = 2\nstate_names = ["Location", "Context"]\ncontrol_fac_idx = [0]\nnum_controls = [3, 1]\n\nA_Visual = utils.norm_dist(np.ones((2, 4, 2)))\nA_Audio = utils.norm_dist(np.ones((3, 4, 2)))\nA = np.empty(2, dtype=object)\nA[0] = A_Visual\nA[1] = A_Audio\nB_Location = utils.norm_dist(np.ones(4, 4, 3))\nB_Context = utils.norm_dist(np.eye(2)[:, :, np.newaxis])\nB = np.empty(2, dtype=object)\nB[0] = B_Location\nB[1] = B_Context\nC_Visual = np.zeros(2)\nC_Audio = np.zeros(3)\nC = np.empty(2, dtype=object)\nC[0] = C_Visual\nC[1] = C_Audio\nD_Location = np.ones(4) / 4.0\nD_Context = np.ones(2) / 2.0\nD = np.empty(2, dtype=object)\nD[0] = D_Location\nD[1] = D_Context\nE_policy_prior = np.ones(10)/10.0\nE = E_policy_prior\n\nagent = Agent(\n    A=A,\n    B=B,\n    C=C,\n    D=D,\n    E=E,\n    control_fac_idx=[0]\n)\n\n# Set action names as agent attribute\nagent.action_names = {0: [\'L\', \'R\', \'S\']}\n\n\n# Example usage of the agent\nif __name__ == "__main__":\n    \n    # --- Example Usage ---\n    if __name__ == \'__main__\':\n        # Initialize agent (already done above)\n        # agent = ComplexAgent  # Agent is already instantiated above as \'agent\'\n        print(f"Agent \'ComplexAgent\' initialized with {agent.num_factors if hasattr(agent, \'num_factors\') else \'N/A\'} factors and {agent.num_modalities if hasattr(agent, \'num_modalities\') else \'N/A\'} modalities.")\n        o_current = [0, 0] # Example initial observation (e.g. first outcome for each modality)\n        s_current = [0, 0] # Example initial true states for simulation\n        T = 5 # Number of timesteps\n        A_gen_process = copy.deepcopy(A)\n        B_gen_process = copy.deepcopy(B)\n    \n        for t_step in range(T):\n            print(f"\\n--- Timestep {t_step + 1} ---")\n            if o_current is not None:\n                for g_idx, o_val in enumerate(o_current):\n                    print(f"Observation ({obs_names[g_idx] if obs_names else f\'Modality {g_idx}\'}): {o_val}")\n            # Infer states\n            qs_current = agent.infer_states(o_current)\n            if qs_current is not None:\n                for f_idx, q_val in enumerate(qs_current):\n                    print(f"Beliefs about {state_names[f_idx] if state_names else f\'Factor {f_idx}\'}: {q_val}")\n    \n            # Infer policies and sample action\n            q_pi_current, efe_current = agent.infer_policies()\n            if hasattr(agent, \'q_pi\') and agent.q_pi is not None:\n                print(f"Posterior over policies (q_pi): {agent.q_pi}")\n            if efe_current is not None:\n                print(f"Expected Free Energy (EFE): {efe_current}")\n            action_agent = agent.sample_action()\n            # Map agent\'s action (on control factors) to full environment action vector\n            action_env = np.zeros(num_factors, dtype=int)\n            if control_fac_idx and action_agent is not None:\n                for i, cf_idx in enumerate(control_fac_idx):\n                    action_env[cf_idx] = int(action_agent[i])\n            # Construct action names for printing\n            action_names_str_list = []\n            if control_fac_idx and action_agent is not None:\n                for i, cf_idx in enumerate(control_fac_idx):\n                    factor_action_name_list = agent.action_names.get(cf_idx, []) if hasattr(agent, \'action_names\') and isinstance(agent.action_names, dict) else []\n                    action_idx_on_factor = int(action_agent[i])\n                    if factor_action_name_list and action_idx_on_factor &lt; len(factor_action_name_list):\n                        action_names_str_list.append(f"{state_names[cf_idx] if state_names else f\'Factor {cf_idx}\'}: {factor_action_name_list[action_idx_on_factor]} (idx {action_idx_on_factor})")\n                    else:\n                        action_names_str_list.append(f"{state_names[cf_idx] if state_names else f\'Factor {cf_idx}\'}: Action idx {action_idx_on_factor}")\n            print(f"Action taken: {\', \'.join(action_names_str_list) if action_names_str_list else \'No controllable actions or names not found\'}")\n    \n            # Update true states of the environment based on action\n            s_next = np.zeros(num_factors, dtype=int)\n            if s_current is not None and B_gen_process is not None:\n                for f_idx in range(num_factors):\n                    # B_gen_process[f_idx] shape: (num_states[f_idx], num_states[f_idx], num_actions_for_this_factor_or_1)\n                    action_for_factor = action_env[f_idx] if f_idx in control_fac_idx else 0\n                    s_next[f_idx] = utils.sample(B_gen_process[f_idx][:, s_current[f_idx], action_for_factor])\n            s_current = s_next.tolist()\n            if s_current is not None:\n                for f_idx, s_val in enumerate(s_current):\n                    print(f"New true state ({state_names[f_idx] if state_names else f\'Factor {f_idx}\'}): {s_val}")\n    \n            # Generate next observation based on new true states\n            o_next = np.zeros(num_modalities, dtype=int)\n            if s_current is not None and A_gen_process is not None:\n                for g_idx in range(num_modalities):\n                    # A_gen_process[g_idx] shape: (num_obs[g_idx], num_states[0], num_states[1], ...)\n                    # Construct index for A matrix: (outcome_idx, s_f0, s_f1, ...)\n                    prob_vector = A_gen_process[g_idx][:, s_current[0], s_current[1]]\n                    o_next[g_idx] = utils.sample(prob_vector)\n            o_current = o_next.tolist()\n    \n        print(f"\\nSimulation finished after {T} timesteps.")\n\n\nprint(\'--- PyMDP Runtime Debug ---\')\ntry:\n    import pymdp\n    import inspect \n    import traceback \n    import ast\n\n    # try:\n    #     print(f\'AGENT_SCRIPT: Imported pymdp version: {pymdp.__version__}\') # Commented out\n    # except AttributeError:\n    #     print(\'AGENT_SCRIPT: pymdp.__version__ attribute not found.\') # Commented out\n    # print(f\'AGENT_SCRIPT: pymdp module location: {pymdp.__file__}\') # Commented out\n    from pymdp.agent import Agent\n    print(f\'AGENT_SCRIPT: Imported Agent: {Agent}\')\n    print(f\'AGENT_SCRIPT: Agent module location: {inspect.getfile(Agent)}\')\n    print(\'AGENT_SCRIPT: Checking for required variables in global scope:\')\n    print(f"  AGENT_SCRIPT: A = {A if \'A\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: B = {B if \'B\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: C = {C if \'C\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: D = {D if \'D\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: E = {E if \'E\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: control_fac_idx = {control_fac_idx if \'control_fac_idx\' in globals() else \'Not Defined\'}")\n    print(\'  AGENT_SCRIPT: action_names = {0: [\'L\', \'R\', \'S\']}\')\n    print(\'  AGENT_SCRIPT: qs_initial = None\')\n    print(\'  AGENT_SCRIPT: agent_hyperparams = {}\')\n    print(\'AGENT_SCRIPT: Attempting to instantiate agent with defined parameters for debug...\')\n    \n    local_agent_hyperparams_str_val = \'{}\'\n\n    agent_params_for_debug = {}\n    if local_agent_hyperparams_str_val and local_agent_hyperparams_str_val.strip() and local_agent_hyperparams_str_val.strip() != \'{}\':\n        try:\n            agent_params_for_debug = ast.literal_eval(local_agent_hyperparams_str_val)\n            if not isinstance(agent_params_for_debug, dict):\n                print("AGENT_SCRIPT: Debug - Parsed agent_hyperparams_dict_str (\'" + local_agent_hyperparams_str_val + "\') was not a dict.")\n                agent_params_for_debug = {} \n        except Exception as e_hyper_parse:\n            print("AGENT_SCRIPT: Debug - Error parsing agent_hyperparams_dict_str (\'" + local_agent_hyperparams_str_val + "\'): " + str(e_hyper_parse))\n            agent_params_for_debug = {}\n    else:\n        print("AGENT_SCRIPT: Debug - agent_hyperparams_dict_str (\'" + local_agent_hyperparams_str_val + "\') is empty or \'{}\'. Using empty dict for debug agent.")\n    \n    debug_params_copy = {k: v for k, v in agent_params_for_debug.items() if not (isinstance(v, str) and v == \'None\')}\n    temp_agent = Agent(**debug_params_copy)\n    print(f\'AGENT_SCRIPT: Debug agent successfully instantiated: {temp_agent}\')\nexcept Exception as e_debug:\n    print(f\'AGENT_SCRIPT: Error during PyMDP runtime debug: {e_debug}\')\n    print("AGENT_SCRIPT: Traceback:")\n    print(traceback.format_exc())\nprint(\'--- End PyMDP Runtime Debug ---\')\n'

src/tests/render/test_pymdp_converter.py:834: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestHelperMethodsIndirectly" name="test_parse_string_to_literal_invalid_inputs" time="0.001"><failure message="AssertionError: [1, 2] is not None : Expected None for invalid input: np.array([1, 2])">self = &lt;src.tests.render.test_pymdp_converter.TestHelperMethodsIndirectly testMethod=test_parse_string_to_literal_invalid_inputs&gt;

    def test_parse_string_to_literal_invalid_inputs(self):
        converter = GnnToPyMdpConverter(create_basic_gnn_spec())
        invalid_cases = [
            "np.array([1, 2])", # Not a literal
            "some_function()",   # Not a literal
            "[1, 2",             # Syntax error
            "{'a': 1",           # Syntax error
            "1.2.3",             # Not valid Python
            "\"unclosed string",
            "",                  # Empty string
            "  "                 # Whitespace only
        ]
        for invalid_input in invalid_cases:
            with self.subTest(invalid_input=invalid_input):
                result = converter._parse_string_to_literal(invalid_input, "test_invalid")
&gt;               self.assertIsNone(result, f"Expected None for invalid input: {invalid_input}")
E               AssertionError: [1, 2] is not None : Expected None for invalid input: np.array([1, 2])

src/tests/render/test_pymdp_converter.py:906: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_converter.TestHelperMethodsIndirectly" name="test_parse_string_to_literal_valid_inputs" time="0.001" /><testcase classname="src.tests.render.test_pymdp_templates.TestGenerateFileHeader" name="test_header_generation" time="0.000" /><testcase classname="src.tests.render.test_pymdp_templates.TestGenerateConversionSummary" name="test_summary_empty_entries" time="0.000" /><testcase classname="src.tests.render.test_pymdp_templates.TestGenerateConversionSummary" name="test_summary_with_entries" time="0.000" /><testcase classname="src.tests.render.test_pymdp_templates.TestGenerateDebugBlock" name="test_debug_block_generation_all_defined" time="0.000" /><testcase classname="src.tests.render.test_pymdp_templates.TestGenerateDebugBlock" name="test_debug_block_generation_none_values" time="0.000"><failure message="AssertionError: 'action_names = Not Defined' not found in '\nprint(\'--- PyMDP Runtime Debug ---\')\ntry:\n    import pymdp\n    import inspect \n    import traceback \n    import ast\n\n    # try:\n    #     print(f\'AGENT_SCRIPT: Imported pymdp version: {pymdp.__version__}\') # Commented out\n    # except AttributeError:\n    #     print(\'AGENT_SCRIPT: pymdp.__version__ attribute not found.\') # Commented out\n    # print(f\'AGENT_SCRIPT: pymdp module location: {pymdp.__file__}\') # Commented out\n    from pymdp.agent import Agent\n    print(f\'AGENT_SCRIPT: Imported Agent: {Agent}\')\n    print(f\'AGENT_SCRIPT: Agent module location: {inspect.getfile(Agent)}\')\n    print(\'AGENT_SCRIPT: Checking for required variables in global scope:\')\n    print(f&quot;  AGENT_SCRIPT: A = {A if \'A\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: B = {B if \'B\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: C = {C if \'C\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: D = {D if \'D\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: E = {E if \'E\' in globals() else \'Not Defined\'}&quot;)\n    print(f&quot;  AGENT_SCRIPT: control_fac_idx = {control_fac_idx if \'control_fac_idx\' in globals() else \'Not Defined\'}&quot;)\n    print(\'  AGENT_SCRIPT: action_names = None\')\n    print(\'  AGENT_SCRIPT: qs_initial = None\')\n    print(\'  AGENT_SCRIPT: agent_hyperparams = {}\')\n    print(\'AGENT_SCRIPT: Attempting to instantiate agent with defined parameters for debug...\')\n    \n    local_agent_hyperparams_str_val = \'{}\'\n\n    agent_params_for_debug = {}\n    if local_agent_hyperparams_str_val and local_agent_hyperparams_str_val.strip() and local_agent_hyperparams_str_val.strip() != \'{}\':\n        try:\n            agent_params_for_debug = ast.literal_eval(local_agent_hyperparams_str_val)\n            if not isinstance(agent_params_for_debug, dict):\n                print(&quot;AGENT_SCRIPT: Debug - Parsed agent_hyperparams_dict_str (\'&quot; + local_agent_hyperparams_str_val + &quot;\') was not a dict.&quot;)\n                agent_params_for_debug = {} \n        except Exception as e_hyper_parse:\n            print(&quot;AGENT_SCRIPT: Debug - Error parsing agent_hyperparams_dict_str (\'&quot; + local_agent_hyperparams_str_val + &quot;\'): &quot; + str(e_hyper_parse))\n            agent_params_for_debug = {}\n    else:\n        print(&quot;AGENT_SCRIPT: Debug - agent_hyperparams_dict_str (\'&quot; + local_agent_hyperparams_str_val + &quot;\') is empty or \'{}\'. Using empty dict for debug agent.&quot;)\n    \n    debug_params_copy = {k: v for k, v in agent_params_for_debug.items() if not (isinstance(v, str) and v == \'None\')}\n    temp_agent = Agent(**debug_params_copy)\n    print(f\'AGENT_SCRIPT: Debug agent successfully instantiated: {temp_agent}\')\nexcept Exception as e_debug:\n    print(f\'AGENT_SCRIPT: Error during PyMDP runtime debug: {e_debug}\')\n    print(&quot;AGENT_SCRIPT: Traceback:&quot;)\n    print(traceback.format_exc())\nprint(\'--- End PyMDP Runtime Debug ---\')\n'">self = &lt;src.tests.render.test_pymdp_templates.TestGenerateDebugBlock testMethod=test_debug_block_generation_none_values&gt;

    def test_debug_block_generation_none_values(self):
        action_names_str = "None" # Representing it as the string "None"
        qs_initial_str = "None"
        agent_hyperparams_str = "{}" # Empty dict string
    
        debug_block = generate_debug_block(action_names_str, qs_initial_str, agent_hyperparams_str)
&gt;       self.assertIn(f"action_names = Not Defined", debug_block) # Template logic for None/empty
E       AssertionError: 'action_names = Not Defined' not found in '\nprint(\'--- PyMDP Runtime Debug ---\')\ntry:\n    import pymdp\n    import inspect \n    import traceback \n    import ast\n\n    # try:\n    #     print(f\'AGENT_SCRIPT: Imported pymdp version: {pymdp.__version__}\') # Commented out\n    # except AttributeError:\n    #     print(\'AGENT_SCRIPT: pymdp.__version__ attribute not found.\') # Commented out\n    # print(f\'AGENT_SCRIPT: pymdp module location: {pymdp.__file__}\') # Commented out\n    from pymdp.agent import Agent\n    print(f\'AGENT_SCRIPT: Imported Agent: {Agent}\')\n    print(f\'AGENT_SCRIPT: Agent module location: {inspect.getfile(Agent)}\')\n    print(\'AGENT_SCRIPT: Checking for required variables in global scope:\')\n    print(f"  AGENT_SCRIPT: A = {A if \'A\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: B = {B if \'B\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: C = {C if \'C\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: D = {D if \'D\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: E = {E if \'E\' in globals() else \'Not Defined\'}")\n    print(f"  AGENT_SCRIPT: control_fac_idx = {control_fac_idx if \'control_fac_idx\' in globals() else \'Not Defined\'}")\n    print(\'  AGENT_SCRIPT: action_names = None\')\n    print(\'  AGENT_SCRIPT: qs_initial = None\')\n    print(\'  AGENT_SCRIPT: agent_hyperparams = {}\')\n    print(\'AGENT_SCRIPT: Attempting to instantiate agent with defined parameters for debug...\')\n    \n    local_agent_hyperparams_str_val = \'{}\'\n\n    agent_params_for_debug = {}\n    if local_agent_hyperparams_str_val and local_agent_hyperparams_str_val.strip() and local_agent_hyperparams_str_val.strip() != \'{}\':\n        try:\n            agent_params_for_debug = ast.literal_eval(local_agent_hyperparams_str_val)\n            if not isinstance(agent_params_for_debug, dict):\n                print("AGENT_SCRIPT: Debug - Parsed agent_hyperparams_dict_str (\'" + local_agent_hyperparams_str_val + "\') was not a dict.")\n                agent_params_for_debug = {} \n        except Exception as e_hyper_parse:\n            print("AGENT_SCRIPT: Debug - Error parsing agent_hyperparams_dict_str (\'" + local_agent_hyperparams_str_val + "\'): " + str(e_hyper_parse))\n            agent_params_for_debug = {}\n    else:\n        print("AGENT_SCRIPT: Debug - agent_hyperparams_dict_str (\'" + local_agent_hyperparams_str_val + "\') is empty or \'{}\'. Using empty dict for debug agent.")\n    \n    debug_params_copy = {k: v for k, v in agent_params_for_debug.items() if not (isinstance(v, str) and v == \'None\')}\n    temp_agent = Agent(**debug_params_copy)\n    print(f\'AGENT_SCRIPT: Debug agent successfully instantiated: {temp_agent}\')\nexcept Exception as e_debug:\n    print(f\'AGENT_SCRIPT: Error during PyMDP runtime debug: {e_debug}\')\n    print("AGENT_SCRIPT: Traceback:")\n    print(traceback.format_exc())\nprint(\'--- End PyMDP Runtime Debug ---\')\n'

src/tests/render/test_pymdp_templates.py:67: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_templates.TestGenerateExampleUsageTemplate" name="test_basic_usage_generation" time="0.000" /><testcase classname="src.tests.render.test_pymdp_templates.TestGenerateExampleUsageTemplate" name="test_usage_boolean_flags" time="0.001" /><testcase classname="src.tests.render.test_pymdp_templates.TestGenerateExampleUsageTemplate" name="test_usage_multiple_modalities_factors" time="0.000" /><testcase classname="src.tests.render.test_pymdp_templates.TestGenerateExampleUsageTemplate" name="test_usage_no_modalities_no_factors" time="0.000" /><testcase classname="src.tests.render.test_pymdp_templates.TestGeneratePlaceholderMatrices" name="test_multiple_modalities_factors" time="0.000" /><testcase classname="src.tests.render.test_pymdp_templates.TestGeneratePlaceholderMatrices" name="test_single_modality_single_factor" time="0.000" /><testcase classname="src.tests.render.test_pymdp_templates.TestGeneratePlaceholderMatrices" name="test_zero_modalities_factors" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestNumpyArrayToString" name="test_1d_array" time="0.001" /><testcase classname="src.tests.render.test_pymdp_utils.TestNumpyArrayToString" name="test_2d_array" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestNumpyArrayToString" name="test_3d_array" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestNumpyArrayToString" name="test_array_with_object_dtype" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestNumpyArrayToString" name="test_empty_array" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestNumpyArrayToString" name="test_none_input" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestNumpyArrayToString" name="test_scalar_array" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestFormatListRecursive" name="test_empty_list" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestFormatListRecursive" name="test_flat_list_numpy_arrays" time="0.001"><failure message="AssertionError: '[\nnp.array([1,2]),\nnp.array([3,4])\n]' != '[np.array([1,2]),np.array([3,4])]'&#10;+ [np.array([1,2]),np.array([3,4])]&#10;- [&#10;- np.array([1,2]),&#10;- np.array([3,4])&#10;- ]">self = &lt;src.tests.render.test_pymdp_utils.TestFormatListRecursive testMethod=test_flat_list_numpy_arrays&gt;

    def test_flat_list_numpy_arrays(self):
        data = [np.array([1,2]), np.array([3,4])] # 2 items, simple, might be single line
        expected = "[np.array([1,2]),np.array([3,4])]"
        result = format_list_recursive(data, 0, self._dummy_item_formatter)
&gt;       self.assertEqual(result.replace(" ", ""), expected.replace(" ", ""))
E       AssertionError: '[\nnp.array([1,2]),\nnp.array([3,4])\n]' != '[np.array([1,2]),np.array([3,4])]'
E       + [np.array([1,2]),np.array([3,4])]
E       - [
E       - np.array([1,2]),
E       - np.array([3,4])
E       - ]

src/tests/render/test_pymdp_utils.py:106: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_utils.TestFormatListRecursive" name="test_flat_list_simple_items" time="0.001"><failure message="AssertionError: &quot;[\n1,\n'hello',\nTrue\n]&quot; != &quot;[1,'hello',True]&quot;&#10;+ [1,'hello',True]&#10;- [&#10;- 1,&#10;- 'hello',&#10;- True&#10;- ]">self = &lt;src.tests.render.test_pymdp_utils.TestFormatListRecursive testMethod=test_flat_list_simple_items&gt;

    def test_flat_list_simple_items(self):
        data = [1, "hello", True]
        expected = "[1,\'hello\',True]" # No spaces after comma due to _numpy_array_to_string changes for items
&gt;       self.assertEqual(format_list_recursive(data, 0, self._dummy_item_formatter).replace(" ", ""), expected.replace(" ", ""))
E       AssertionError: "[\n1,\n'hello',\nTrue\n]" != "[1,'hello',True]"
E       + [1,'hello',True]
E       - [
E       - 1,
E       - 'hello',
E       - True
E       - ]

src/tests/render/test_pymdp_utils.py:87: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_utils.TestFormatListRecursive" name="test_indentation_multiline" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestFormatListRecursive" name="test_nested_list_numpy_arrays_multiline" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestGeneratePyMDPMatrixDefinition" name="test_data_is_none" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestGeneratePyMDPMatrixDefinition" name="test_data_is_preformatted_string" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestGeneratePyMDPMatrixDefinition" name="test_normal_array_conversion_error" time="0.001" /><testcase classname="src.tests.render.test_pymdp_utils.TestGeneratePyMDPMatrixDefinition" name="test_normal_array_from_list" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestGeneratePyMDPMatrixDefinition" name="test_normal_array_from_numpy" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestGeneratePyMDPMatrixDefinition" name="test_object_array_empty_or_all_none_list" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestGeneratePyMDPMatrixDefinition" name="test_object_array_list_of_numpy" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestGeneratePyMDPMatrixDefinition" name="test_object_array_list_with_none" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestGeneratePyMDPMatrixDefinition" name="test_object_array_non_convertible_item" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestGeneratePyMDPMatrixDefinition" name="test_unexpected_data_type_handled_as_string_or_repr" time="0.001"><failure message="AssertionError: &quot;# Note: Data for I_dict is of unexpected type &lt;class 'dict'&gt;&quot; not found in &quot;I_dict = {'a': 1}&quot;">self = &lt;src.tests.render.test_pymdp_utils.TestGeneratePyMDPMatrixDefinition testMethod=test_unexpected_data_type_handled_as_string_or_repr&gt;

    def test_unexpected_data_type_handled_as_string_or_repr(self):
        data_dict = {'a': 1}
        result_dict = generate_pymdp_matrix_definition("I_dict", data_dict)
&gt;       self.assertIn("# Note: Data for I_dict is of unexpected type &lt;class 'dict'&gt;", result_dict)
E       AssertionError: "# Note: Data for I_dict is of unexpected type &lt;class 'dict'&gt;" not found in "I_dict = {'a': 1}"

src/tests/render/test_pymdp_utils.py:207: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_utils.TestGeneratePyMDPAgentInstantiation" name="test_all_parameters" time="0.001"><failure message="AssertionError: False is not true">self = &lt;src.tests.render.test_pymdp_utils.TestGeneratePyMDPAgentInstantiation testMethod=test_all_parameters&gt;

    def test_all_parameters(self):
        model_params = {"A": "A_m", "B": "B_m", "C": "C_m", "D": "D_m"}
        action_names_val = {0: ['L', 'R'], 1: ['U', 'D']}
        qs_initial_val_str = "initial_qs_var"
    
        result = generate_pymdp_agent_instantiation(
            agent_name="complex_agent",
            model_params=model_params,
            control_fac_idx_list=[0, 1],
            policy_len=5,
            use_utility=True,
            use_states_info_gain=False,
            use_param_info_gain=True,
            action_selection="bayesian_model_reduction",
            action_names=action_names_val,
            qs_initial=qs_initial_val_str,
            learning_params={'lr_pA': 0.1, 'lr_pB': 0.2, 'use_BMA': False},
            algorithm_params={'num_iter': 10, 'policy_sep_prior': True}
        )
    
        expected_param_order_independent_check = {
            "A": "A_m", "B": "B_m", "C": "C_m", "D": "D_m",
            "control_fac_idx": repr([0, 1]),
            "policy_len": repr(5),
            "use_utility": repr(True),
            "use_states_info_gain": repr(False),
            "use_param_info_gain": repr(True),
            "action_selection": repr("bayesian_model_reduction"), # action_selection value is a string
            "action_names": repr(action_names_val),
            "qs_initial": qs_initial_val_str, # This is a variable name
            "lr_pA": repr(0.1),
            "lr_pB": repr(0.2),
            "use_BMA": repr(False),
            "num_iter": repr(10),
            "policy_sep_prior": repr(True)
        }
    
        self.assertTrue(result.startswith("complex_agent = Agent("))
&gt;       self.assertTrue(result.endswith(")"))
E       AssertionError: False is not true

src/tests/render/test_pymdp_utils.py:273: AssertionError</failure></testcase><testcase classname="src.tests.render.test_pymdp_utils.TestGeneratePyMDPAgentInstantiation" name="test_basic_instantiation" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestGeneratePyMDPAgentInstantiation" name="test_no_optional_params" time="0.000" /><testcase classname="src.tests.render.test_pymdp_utils.TestGeneratePyMDPAgentInstantiation" name="test_qs_initial_as_list_of_arrays" time="0.001" /><testcase classname="src.tests.test_gnn_type_checker.TestGNNTypeChecker" name="test_check_directory" time="0.002" /><testcase classname="src.tests.test_gnn_type_checker.TestGNNTypeChecker" name="test_check_invalid_file" time="0.001" /><testcase classname="src.tests.test_gnn_type_checker.TestGNNTypeChecker" name="test_check_valid_file" time="0.000" /><testcase classname="src.tests.test_gnn_type_checker.TestGNNTypeChecker" name="test_generate_report" time="0.008" /></testsuite></testsuites>