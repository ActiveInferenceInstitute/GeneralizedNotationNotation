{
    "start_time": "2025-10-02T10:51:23.986916",
    "arguments": {
        "target_dir": "input/gnn_files",
        "output_dir": "output",
        "recursive": true,
        "verbose": false,
        "enable_round_trip": true,
        "enable_cross_format": true,
        "skip_steps": [],
        "only_steps": [],
        "strict": false,
        "estimate_resources": false,
        "ontology_terms_file": "src/ontology/act_inf_ontology_terms.json",
        "pipeline_summary_file": "output/pipeline_execution_summary.json",
        "llm_tasks": "all",
        "llm_timeout": 360,
        "website_html_filename": "gnn_pipeline_summary_website.html",
        "recreate_venv": false,
        "dev": false,
        "install_optional": null,
        "duration": 30.0,
        "audio_backend": "auto",
        "fast_only": false,
        "include_slow": false,
        "include_performance": false,
        "comprehensive": false,
        "performance_mode": "low"
    },
    "steps": [
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:51:24,026 - 0_template.py - INFO - Processing files from: input/gnn_files\n2025-10-02 10:51:24,026 - 0_template.py - INFO - Output directory: output/0_template_output\n2025-10-02 10:51:24,026 - 0_template.py - INFO - Recursive processing: True\n2025-10-02 10:51:24,026 - 0_template.py - INFO - Found 3 files to process\n2025-10-02 10:51:24,028 - 0_template.py - INFO - Summary report saved: output/0_template_output/template_processing_summary.json\n2025-10-02 10:51:24,028 - 0_template.py - INFO - \u2705 Successfully processed 3 files\n",
            "memory_usage_mb": 28.828125,
            "peak_memory_mb": 28.828125,
            "memory_delta_mb": 0.046875,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 1,
            "script_name": "0_template.py",
            "description": "Template initialization",
            "start_time": "2025-10-02T10:51:23.987057",
            "end_time": "2025-10-02T10:51:24.034959",
            "duration_seconds": 0.047901153564453125
        },
        {
            "status": "SUCCESS_WITH_WARNINGS",
            "stdout": "",
            "stderr": "2025-10-02 10:51:24,075 - setup.setup - INFO - \ud83d\udd27 Starting comprehensive UV environment setup...\n2025-10-02 10:51:24,075 - setup.setup - INFO - \ud83d\udd0d Checking system requirements...\n2025-10-02 10:51:24,075 - setup.setup - INFO - \u2705 Python version check passed: 3.11.13\n2025-10-02 10:51:24,197 - setup.setup - INFO - \u2705 UV is available: uv 0.8.8 (Homebrew 2025-08-09)\n2025-10-02 10:51:24,197 - setup.setup - INFO - \u2705 Disk space check passed: 71.80GB free\n2025-10-02 10:51:24,197 - setup.setup - INFO - \u2713 Using existing UV environment at /Users/4d/Documents/GitHub/generalizednotationnotation/.venv\n2025-10-02 10:51:24,206 - setup.setup - INFO - \u2705 Existing environment is working: Python 3.11.13\n2025-10-02 10:51:24,243 - setup.setup - INFO - \u2705 Core packages are available in existing environment\n2025-10-02 10:51:24,243 - setup.setup - INFO - \ud83d\udce6 Installing core dependencies...\n2025-10-02 10:51:24,243 - setup.setup - INFO - \ud83d\udce6 Installing dependencies from /Users/4d/Documents/GitHub/generalizednotationnotation/pyproject.toml using UV sync\n2025-10-02 10:51:25,141 - setup.setup - ERROR - \u274c Failed to install dependencies via uv sync\n2025-10-02 10:51:25,141 - setup.setup - WARNING - \u26a0\ufe0f Core dependency installation had issues, but continuing...\n2025-10-02 10:51:25,141 - setup.setup - INFO - \u2705 Validating environment...\n2025-10-02 10:51:25,141 - setup.setup - INFO - \ud83d\udd0d Checking system requirements...\n2025-10-02 10:51:25,141 - setup.setup - INFO - \u2705 Python version check passed: 3.11.13\n2025-10-02 10:51:25,312 - setup.setup - INFO - \u2705 UV is available: uv 0.8.8 (Homebrew 2025-08-09)\n2025-10-02 10:51:25,313 - setup.setup - INFO - \u2705 Disk space check passed: 71.80GB free\n2025-10-02 10:51:25,313 - setup.setup - INFO - \ud83d\udccb Getting list of installed packages using UV...\n2025-10-02 10:51:25,390 - setup.setup - INFO - \ud83d\udce6 Found 176 installed packages using UV\n2025-10-02 10:51:25,390 - setup.setup - INFO - \ud83d\udccb Key installed packages:\n2025-10-02 10:51:25,390 - setup.setup - INFO -   - pytest: 8.4.1\n2025-10-02 10:51:25,390 - setup.setup - INFO -   - numpy: 2.2.6\n2025-10-02 10:51:25,390 - setup.setup - INFO -   - matplotlib: 3.10.5\n2025-10-02 10:51:25,390 - setup.setup - INFO -   - scipy: 1.16.1\n2025-10-02 10:51:25,391 - setup.setup - INFO - \ud83d\udcc4 Full package list saved to: /Users/4d/Documents/GitHub/generalizednotationnotation/.venv/installed_packages_uv.json\n2025-10-02 10:51:25,750 - setup.setup - INFO - \ud83d\udd0d Checking system requirements...\n2025-10-02 10:51:25,750 - setup.setup - INFO - \u2705 Python version check passed: 3.11.13\n2025-10-02 10:51:25,816 - setup.setup - INFO - \u2705 UV is available: uv 0.8.8 (Homebrew 2025-08-09)\n2025-10-02 10:51:25,816 - setup.setup - INFO - \u2705 Disk space check passed: 71.80GB free\n2025-10-02 10:51:25,816 - setup.setup - INFO - \ud83d\udccb Getting list of installed packages using UV...\n2025-10-02 10:51:25,879 - setup.setup - INFO - \ud83d\udce6 Found 176 installed packages using UV\n2025-10-02 10:51:25,879 - setup.setup - INFO - \ud83d\udccb Key installed packages:\n2025-10-02 10:51:25,879 - setup.setup - INFO -   - pytest: 8.4.1\n2025-10-02 10:51:25,879 - setup.setup - INFO -   - numpy: 2.2.6\n2025-10-02 10:51:25,879 - setup.setup - INFO -   - matplotlib: 3.10.5\n2025-10-02 10:51:25,879 - setup.setup - INFO -   - scipy: 1.16.1\n2025-10-02 10:51:25,880 - setup.setup - INFO - \ud83d\udcc4 Full package list saved to: /Users/4d/Documents/GitHub/generalizednotationnotation/.venv/installed_packages_uv.json\n2025-10-02 10:51:25,880 - setup.setup - INFO - \ud83d\udccb Getting list of installed packages using UV...\n2025-10-02 10:51:25,944 - setup.setup - INFO - \ud83d\udce6 Found 176 installed packages using UV\n2025-10-02 10:51:25,944 - setup.setup - INFO - \ud83d\udccb Key installed packages:\n2025-10-02 10:51:25,944 - setup.setup - INFO -   - pytest: 8.4.1\n2025-10-02 10:51:25,944 - setup.setup - INFO -   - numpy: 2.2.6\n2025-10-02 10:51:25,944 - setup.setup - INFO -   - matplotlib: 3.10.5\n2025-10-02 10:51:25,944 - setup.setup - INFO -   - scipy: 1.16.1\n2025-10-02 10:51:25,944 - setup.setup - INFO - \ud83d\udcc4 Full package list saved to: /Users/4d/Documents/GitHub/generalizednotationnotation/.venv/installed_packages_uv.json\n2025-10-02 10:51:25,944 - setup.setup - INFO - \ud83d\udcbe Setup results saved to: output/1_setup_output/environment_setup_summary.json\n2025-10-02 10:51:25,944 - setup.setup - INFO - \ud83d\udccb Getting list of installed packages using UV...\n2025-10-02 10:51:26,012 - setup.setup - INFO - \ud83d\udce6 Found 176 installed packages using UV\n2025-10-02 10:51:26,012 - setup.setup - INFO - \ud83d\udccb Key installed packages:\n2025-10-02 10:51:26,012 - setup.setup - INFO -   - pytest: 8.4.1\n2025-10-02 10:51:26,012 - setup.setup - INFO -   - numpy: 2.2.6\n2025-10-02 10:51:26,012 - setup.setup - INFO -   - matplotlib: 3.10.5\n2025-10-02 10:51:26,012 - setup.setup - INFO -   - scipy: 1.16.1\n2025-10-02 10:51:26,012 - setup.setup - INFO - \ud83d\udcc4 Full package list saved to: /Users/4d/Documents/GitHub/generalizednotationnotation/.venv/installed_packages_uv.json\n2025-10-02 10:51:26,012 - setup.setup - INFO - \ud83d\udce6 Package list saved to: output/1_setup_output/installed_packages.json\n2025-10-02 10:51:26,012 - setup.setup - INFO - \u2705 GNN environment setup completed successfully using UV\n",
            "memory_usage_mb": 28.9375,
            "peak_memory_mb": 28.9375,
            "memory_delta_mb": 0.078125,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 2,
            "script_name": "1_setup.py",
            "description": "Environment setup",
            "start_time": "2025-10-02T10:51:24.035257",
            "end_time": "2025-10-02T10:51:26.075985",
            "duration_seconds": 2.0407228469848633
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:51:26,227 - 2_tests.py - INFO - \ud83e\uddea Running fast test suite\n2025-10-02 10:51:26,227 - 2_tests.py - INFO - \ud83d\ude80 Running comprehensive test suite\n2025-10-02 10:51:26,252 - 2_tests.py - INFO - \u2705 All test dependencies available\n2025-10-02 10:52:16,183 - 2_tests.py - INFO - \u2705 Tests passed: 60/80 tests\n",
            "memory_usage_mb": 14.390625,
            "peak_memory_mb": 28.9375,
            "memory_delta_mb": -14.546875,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 3,
            "script_name": "2_tests.py",
            "description": "Test suite execution",
            "start_time": "2025-10-02T10:51:26.076715",
            "end_time": "2025-10-02T10:52:16.215945",
            "duration_seconds": 50.139219999313354
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:52:16,292 - 3_gnn.py - INFO - \ud83d\ude80 Processing GNN files with full multi-format generation\n2025-10-02 10:52:16,307 - 3_gnn.py - INFO - Initialized GNN parsing system with 22 supported formats\n2025-10-02 10:52:16,307 - 3_gnn.py - INFO - Available serializers: [<GNNFormat.MARKDOWN: 'markdown'>, <GNNFormat.JSON: 'json'>, <GNNFormat.XML: 'xml'>, <GNNFormat.YAML: 'yaml'>, <GNNFormat.SCALA: 'scala'>, <GNNFormat.PROTOBUF: 'protobuf'>, <GNNFormat.PKL: 'pkl'>, <GNNFormat.XSD: 'xsd'>, <GNNFormat.ASN1: 'asn1'>, <GNNFormat.LEAN: 'lean'>, <GNNFormat.COQ: 'coq'>, <GNNFormat.PYTHON: 'python'>, <GNNFormat.BNF: 'bnf'>, <GNNFormat.EBNF: 'ebnf'>, <GNNFormat.ISABELLE: 'isabelle'>, <GNNFormat.MAXIMA: 'maxima'>, <GNNFormat.ALLOY: 'alloy'>, <GNNFormat.Z_NOTATION: 'z_notation'>, <GNNFormat.TLA_PLUS: 'tla_plus'>, <GNNFormat.AGDA: 'agda'>, <GNNFormat.HASKELL: 'haskell'>, <GNNFormat.PICKLE: 'pickle'>]\n2025-10-02 10:52:16,308 - 3_gnn.py - INFO - Found 3 potential GNN files\n2025-10-02 10:52:16,308 - 3_gnn.py - INFO - Processing: input/gnn_files/actinf_pomdp_agent.md\n2025-10-02 10:52:16,317 - 3_gnn.py - INFO - Generated 22 formats for actinf_pomdp_agent.md\n2025-10-02 10:52:16,317 - 3_gnn.py - INFO - Processing: input/gnn_files/chronic_pain_theories.md\n2025-10-02 10:52:16,336 - 3_gnn.py - INFO - Generated 22 formats for chronic_pain_theories.md\n2025-10-02 10:52:16,336 - 3_gnn.py - INFO - Processing: input/gnn_files/neural_response_model.md\n2025-10-02 10:52:16,346 - 3_gnn.py - INFO - Generated 22 formats for neural_response_model.md\n2025-10-02 10:52:16,347 - 3_gnn.py - INFO - \u2705 Processed 3 files, generated 66 format instances across 22 formats\n",
            "memory_usage_mb": 19.09375,
            "peak_memory_mb": 19.09375,
            "memory_delta_mb": 1.71875,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 4,
            "script_name": "3_gnn.py",
            "description": "GNN file processing",
            "start_time": "2025-10-02T10:52:16.216557",
            "end_time": "2025-10-02T10:52:16.357756",
            "duration_seconds": 0.14119601249694824
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "",
            "memory_usage_mb": 19.15625,
            "peak_memory_mb": 19.15625,
            "memory_delta_mb": 0.015625,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 5,
            "script_name": "4_model_registry.py",
            "description": "Model registry",
            "start_time": "2025-10-02T10:52:16.358058",
            "end_time": "2025-10-02T10:52:16.419496",
            "duration_seconds": 0.06143522262573242
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:52:16,470 - type_checker - INFO - \ud83d\ude80 Processing type checker\n2025-10-02 10:52:16,511 - type_checker - INFO - \u2705 Type checking completed successfully\n",
            "memory_usage_mb": 19.890625,
            "peak_memory_mb": 19.890625,
            "memory_delta_mb": 0.734375,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 6,
            "script_name": "5_type_checker.py",
            "description": "Type checking",
            "start_time": "2025-10-02T10:52:16.419754",
            "end_time": "2025-10-02T10:52:16.523062",
            "duration_seconds": 0.10330486297607422
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:52:16,581 - validation - INFO - Loaded 3 parsed GNN files\n2025-10-02 10:52:16,581 - validation - INFO - Validating: actinf_pomdp_agent.md\n2025-10-02 10:52:16,581 - validation - INFO - Loaded parsed GNN specification from output/3_gnn_output/actinf_pomdp_agent/actinf_pomdp_agent_parsed.json\n2025-10-02 10:52:16,581 - validation - INFO - Semantic validation completed for actinf_pomdp_agent.md\n2025-10-02 10:52:16,581 - validation - INFO - Performance profiling completed for actinf_pomdp_agent.md\n2025-10-02 10:52:16,581 - validation - INFO - Consistency checking completed for actinf_pomdp_agent.md\n2025-10-02 10:52:16,581 - validation - INFO - Validating: chronic_pain_theories.md\n2025-10-02 10:52:16,582 - validation - INFO - Loaded parsed GNN specification from output/3_gnn_output/chronic_pain_theories/chronic_pain_theories_parsed.json\n2025-10-02 10:52:16,582 - validation - INFO - Semantic validation completed for chronic_pain_theories.md\n2025-10-02 10:52:16,582 - validation - INFO - Performance profiling completed for chronic_pain_theories.md\n2025-10-02 10:52:16,582 - validation - INFO - Consistency checking completed for chronic_pain_theories.md\n2025-10-02 10:52:16,582 - validation - INFO - Validating: neural_response_model.md\n2025-10-02 10:52:16,582 - validation - INFO - Loaded parsed GNN specification from output/3_gnn_output/neural_response_model/neural_response_model_parsed.json\n2025-10-02 10:52:16,582 - validation - INFO - Semantic validation completed for neural_response_model.md\n2025-10-02 10:52:16,582 - validation - INFO - Performance profiling completed for neural_response_model.md\n2025-10-02 10:52:16,582 - validation - INFO - Consistency checking completed for neural_response_model.md\n2025-10-02 10:52:16,583 - validation - INFO - Validation processing completed:\n2025-10-02 10:52:16,583 - validation - INFO -   Total files: 3\n2025-10-02 10:52:16,583 - validation - INFO -   Successful validations: 3\n2025-10-02 10:52:16,583 - validation - INFO -   Failed validations: 0\n2025-10-02 10:52:16,583 - validation - INFO -   Average semantic score: 1.00\n2025-10-02 10:52:16,583 - validation - INFO -   Average performance score: 0.70\n2025-10-02 10:52:16,583 - validation - INFO -   Average consistency score: 1.00\n",
            "memory_usage_mb": 20.03125,
            "peak_memory_mb": 20.03125,
            "memory_delta_mb": 0.140625,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 7,
            "script_name": "6_validation.py",
            "description": "Validation",
            "start_time": "2025-10-02T10:52:16.523578",
            "end_time": "2025-10-02T10:52:16.591623",
            "duration_seconds": 0.06804323196411133
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:52:16,654 - export - INFO - Loaded 3 parsed GNN files\n2025-10-02 10:52:16,654 - export - INFO - Exporting: actinf_pomdp_agent.md\n2025-10-02 10:52:16,654 - export - INFO - Loaded parsed GNN specification from output/3_gnn_output/actinf_pomdp_agent/actinf_pomdp_agent_parsed.json\n2025-10-02 10:52:16,655 - export - INFO - Generated json export for actinf_pomdp_agent.md\n2025-10-02 10:52:16,657 - export - INFO - Generated xml export for actinf_pomdp_agent.md\n2025-10-02 10:52:16,657 - export - INFO - Generated graphml export for actinf_pomdp_agent.md\n2025-10-02 10:52:16,658 - export - INFO - Generated gexf export for actinf_pomdp_agent.md\n2025-10-02 10:52:16,658 - export - INFO - Generated pickle export for actinf_pomdp_agent.md\n2025-10-02 10:52:16,658 - export - INFO - Exporting: chronic_pain_theories.md\n2025-10-02 10:52:16,658 - export - INFO - Loaded parsed GNN specification from output/3_gnn_output/chronic_pain_theories/chronic_pain_theories_parsed.json\n2025-10-02 10:52:16,659 - export - INFO - Generated json export for chronic_pain_theories.md\n2025-10-02 10:52:16,660 - export - INFO - Generated xml export for chronic_pain_theories.md\n2025-10-02 10:52:16,661 - export - INFO - Generated graphml export for chronic_pain_theories.md\n2025-10-02 10:52:16,662 - export - INFO - Generated gexf export for chronic_pain_theories.md\n2025-10-02 10:52:16,662 - export - INFO - Generated pickle export for chronic_pain_theories.md\n2025-10-02 10:52:16,662 - export - INFO - Exporting: neural_response_model.md\n2025-10-02 10:52:16,662 - export - INFO - Loaded parsed GNN specification from output/3_gnn_output/neural_response_model/neural_response_model_parsed.json\n2025-10-02 10:52:16,663 - export - INFO - Generated json export for neural_response_model.md\n2025-10-02 10:52:16,663 - export - INFO - Generated xml export for neural_response_model.md\n2025-10-02 10:52:16,665 - export - INFO - Generated graphml export for neural_response_model.md\n2025-10-02 10:52:16,665 - export - INFO - Generated gexf export for neural_response_model.md\n2025-10-02 10:52:16,665 - export - INFO - Generated pickle export for neural_response_model.md\n2025-10-02 10:52:16,665 - export - INFO - Export processing completed:\n2025-10-02 10:52:16,665 - export - INFO -   Total files: 3\n2025-10-02 10:52:16,665 - export - INFO -   Successful exports: 3\n2025-10-02 10:52:16,665 - export - INFO -   Failed exports: 0\n2025-10-02 10:52:16,666 - export - INFO -   Formats generated: {'json': 3, 'xml': 3, 'graphml': 3, 'gexf': 3, 'pickle': 3}\n",
            "memory_usage_mb": 20.078125,
            "peak_memory_mb": 20.078125,
            "memory_delta_mb": 0.046875,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 8,
            "script_name": "7_export.py",
            "description": "Multi-format export",
            "start_time": "2025-10-02T10:52:16.591912",
            "end_time": "2025-10-02T10:52:16.677645",
            "duration_seconds": 0.08572983741760254
        },
        {
            "status": "SUCCESS_WITH_WARNINGS",
            "stdout": "DEBUG: Creating POMDP analysis for tensor shape: (3, 3, 3)\nDEBUG: Figure created successfully\nDEBUG: Using simple subplot layout\nDEBUG: Error saving POMDP analysis: __init__(): incompatible constructor arguments. The following argument types are supported:\n    1. matplotlib.backends._backend_agg.RendererAgg(width: typing.SupportsInt, height: typing.SupportsInt, dpi: typing.SupportsFloat)\n\nInvoked with: 1081, 18189472529, 96\nDEBUG: POMDP analysis saved with fallback DPI\nError generating matrix statistics: zero-size array to reduction operation minimum which has no identity\nError generating matrix statistics: zero-size array to reduction operation minimum which has no identity\n",
            "stderr": "2025-10-02 10:52:17,734 - visualization - INFO - Detected headless environment, configuring non-interactive backend\n2025-10-02 10:52:17,734 - visualization - INFO - \u2705 Using 'Agg' backend for matplotlib (headless mode)\n2025-10-02 10:52:17,734 - visualization - INFO - Loaded 3 parsed GNN files\n2025-10-02 10:52:17,734 - visualization - INFO - \ud83d\udcca Visualizing [1/3]: actinf_pomdp_agent.md\n2025-10-02 10:52:17,734 - visualization - INFO - Loaded parsed GNN specification from output/3_gnn_output/actinf_pomdp_agent/actinf_pomdp_agent_parsed.json\n2025-10-02 10:52:19,166 - visualization - INFO - \ud83d\udcca Visualizing [2/3]: chronic_pain_theories.md\n2025-10-02 10:52:19,166 - visualization - INFO - Loaded parsed GNN specification from output/3_gnn_output/chronic_pain_theories/chronic_pain_theories_parsed.json\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/fromnumeric.py:3860: RuntimeWarning: Mean of empty slice.\n  return _methods._mean(a, axis=axis, dtype=dtype,\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:145: RuntimeWarning: invalid value encountered in scalar divide\n  ret = ret.dtype.type(ret / rcount)\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:223: RuntimeWarning: Degrees of freedom <= 0 for slice\n  ret = _var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:181: RuntimeWarning: invalid value encountered in divide\n  arrmean = um.true_divide(arrmean, div, out=arrmean,\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:215: RuntimeWarning: invalid value encountered in scalar divide\n  ret = ret.dtype.type(ret / rcount)\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/fromnumeric.py:3860: RuntimeWarning: Mean of empty slice.\n  return _methods._mean(a, axis=axis, dtype=dtype,\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:145: RuntimeWarning: invalid value encountered in scalar divide\n  ret = ret.dtype.type(ret / rcount)\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:223: RuntimeWarning: Degrees of freedom <= 0 for slice\n  ret = _var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:181: RuntimeWarning: invalid value encountered in divide\n  arrmean = um.true_divide(arrmean, div, out=arrmean,\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:215: RuntimeWarning: invalid value encountered in scalar divide\n  ret = ret.dtype.type(ret / rcount)\n2025-10-02 10:52:20,082 - visualization - INFO - \ud83d\udcca Visualizing [3/3]: neural_response_model.md\n2025-10-02 10:52:20,083 - visualization - INFO - Loaded parsed GNN specification from output/3_gnn_output/neural_response_model/neural_response_model_parsed.json\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/fromnumeric.py:3860: RuntimeWarning: Mean of empty slice.\n  return _methods._mean(a, axis=axis, dtype=dtype,\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:145: RuntimeWarning: invalid value encountered in scalar divide\n  ret = ret.dtype.type(ret / rcount)\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:223: RuntimeWarning: Degrees of freedom <= 0 for slice\n  ret = _var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:181: RuntimeWarning: invalid value encountered in divide\n  arrmean = um.true_divide(arrmean, div, out=arrmean,\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:215: RuntimeWarning: invalid value encountered in scalar divide\n  ret = ret.dtype.type(ret / rcount)\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/fromnumeric.py:3860: RuntimeWarning: Mean of empty slice.\n  return _methods._mean(a, axis=axis, dtype=dtype,\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:145: RuntimeWarning: invalid value encountered in scalar divide\n  ret = ret.dtype.type(ret / rcount)\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:223: RuntimeWarning: Degrees of freedom <= 0 for slice\n  ret = _var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:181: RuntimeWarning: invalid value encountered in divide\n  arrmean = um.true_divide(arrmean, div, out=arrmean,\n/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:215: RuntimeWarning: invalid value encountered in scalar divide\n  ret = ret.dtype.type(ret / rcount)\n2025-10-02 10:52:21,012 - visualization - INFO - Visualization processing completed:\n2025-10-02 10:52:21,012 - visualization - INFO -   Total files: 3\n2025-10-02 10:52:21,012 - visualization - INFO -   Successful visualizations: 3\n2025-10-02 10:52:21,012 - visualization - INFO -   Failed visualizations: 0\n2025-10-02 10:52:21,012 - visualization - INFO -   Total images generated: 9\n2025-10-02 10:52:21,012 - visualization - INFO -   Visualization types: {'matrix': 3, 'network': 0, 'combined': 3}\n",
            "memory_usage_mb": 20.203125,
            "peak_memory_mb": 20.203125,
            "memory_delta_mb": 0.109375,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 9,
            "script_name": "8_visualization.py",
            "description": "Visualization",
            "start_time": "2025-10-02T10:52:16.677949",
            "end_time": "2025-10-02T10:52:21.145321",
            "duration_seconds": 4.467368125915527
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:52:21,488 - 9_advanced_viz.py - INFO - ================================================================================\n2025-10-02 10:52:21,489 - 9_advanced_viz.py - INFO - ADVANCED VISUALIZATION PROCESSING\n2025-10-02 10:52:21,489 - 9_advanced_viz.py - INFO - ================================================================================\n2025-10-02 10:52:22,021 - 9_advanced_viz.py - INFO - Looking for GNN output in: output/3_gnn_output\n2025-10-02 10:52:22,021 - 9_advanced_viz.py - INFO - Looking for results file: output/3_gnn_output/gnn_processing_results.json (exists: True)\n2025-10-02 10:52:22,021 - 9_advanced_viz.py - INFO - Found 3 processed files in results\n2025-10-02 10:52:22,021 - 9_advanced_viz.py - INFO - Loaded parsed model: actinf_pomdp_agent\n2025-10-02 10:52:22,021 - 9_advanced_viz.py - INFO - Loaded parsed model: chronic_pain_theories\n2025-10-02 10:52:22,021 - 9_advanced_viz.py - INFO - Loaded parsed model: neural_response_model\n2025-10-02 10:52:22,021 - 9_advanced_viz.py - INFO - Processing advanced visualizations for: actinf_pomdp_agent\n2025-10-02 10:52:22,232 - 9_advanced_viz.py - INFO - Generated 3D visualization: output/9_advanced_viz_output/actinf_pomdp_agent_3d_visualization.png\n2025-10-02 10:52:22,373 - 9_advanced_viz.py - INFO - Generated statistical plots: output/9_advanced_viz_output/actinf_pomdp_agent_statistical_analysis.png\n2025-10-02 10:52:22,373 - 9_advanced_viz.py - INFO - Processing advanced visualizations for: chronic_pain_theories\n2025-10-02 10:52:22,568 - 9_advanced_viz.py - INFO - Generated 3D visualization: output/9_advanced_viz_output/chronic_pain_theories_3d_visualization.png\n2025-10-02 10:52:22,825 - 9_advanced_viz.py - INFO - Generated statistical plots: output/9_advanced_viz_output/chronic_pain_theories_statistical_analysis.png\n2025-10-02 10:52:22,825 - 9_advanced_viz.py - INFO - Processing advanced visualizations for: neural_response_model\n2025-10-02 10:52:23,007 - 9_advanced_viz.py - INFO - Generated 3D visualization: output/9_advanced_viz_output/neural_response_model_3d_visualization.png\n2025-10-02 10:52:23,219 - 9_advanced_viz.py - INFO - Generated statistical plots: output/9_advanced_viz_output/neural_response_model_statistical_analysis.png\n2025-10-02 10:52:23,220 - 9_advanced_viz.py - INFO - Saved advanced visualization summary: output/9_advanced_viz_output/advanced_viz_summary.json\n2025-10-02 10:52:23,220 - 9_advanced_viz.py - INFO - Advanced visualization complete:\n2025-10-02 10:52:23,220 - 9_advanced_viz.py - INFO -   Total attempts: 6\n2025-10-02 10:52:23,220 - 9_advanced_viz.py - INFO -   Successful: 6\n2025-10-02 10:52:23,220 - 9_advanced_viz.py - INFO -   Failed: 0\n2025-10-02 10:52:23,220 - 9_advanced_viz.py - INFO -   Skipped: 0\n2025-10-02 10:52:23,220 - 9_advanced_viz.py - INFO -   Output files: 6\n",
            "memory_usage_mb": 20.28125,
            "peak_memory_mb": 20.28125,
            "memory_delta_mb": 0.015625,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 10,
            "script_name": "9_advanced_viz.py",
            "description": "Advanced visualization",
            "start_time": "2025-10-02T10:52:21.145739",
            "end_time": "2025-10-02T10:52:23.423837",
            "duration_seconds": 2.2774291038513184
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:52:23,533 - ontology - INFO - \ud83d\ude80 Processing ontology\n2025-10-02 10:52:23,538 - ontology - INFO - \u2705 Ontology processing completed successfully\n",
            "memory_usage_mb": 20.296875,
            "peak_memory_mb": 20.296875,
            "memory_delta_mb": 0.015625,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 11,
            "script_name": "10_ontology.py",
            "description": "Ontology processing",
            "start_time": "2025-10-02T10:52:23.428046",
            "end_time": "2025-10-02T10:52:23.557891",
            "duration_seconds": 0.12984204292297363
        },
        {
            "status": "SUCCESS_WITH_WARNINGS",
            "stdout": "",
            "stderr": "2025-10-02 10:52:23,709 - render.processor - INFO - \ud83d\ude80 Starting POMDP-aware render processing\n2025-10-02 10:52:23,709 - render.processor - INFO - Processing GNN files in: input/gnn_files\n2025-10-02 10:52:23,709 - render.processor - INFO - Output directory: output/11_render_output\n2025-10-02 10:52:23,710 - render.processor - INFO - Found 3 GNN files to process\n2025-10-02 10:52:23,710 - render.processor - INFO - Target frameworks: all available\n2025-10-02 10:52:23,710 - render.processor - INFO - \ud83d\udcc1 Processing: input/gnn_files/actinf_pomdp_agent.md\n2025-10-02 10:52:23,711 - render.processor - INFO - \u2705 Extracted POMDP 'Classic Active Inference POMDP Agent v1' with 3 states, 3 observations, 1 actions\n2025-10-02 10:52:23,711 - render.pomdp_processor - INFO - Processing POMDP 'Classic Active Inference POMDP Agent v1' for frameworks: ['pymdp', 'rxinfer', 'activeinference_jl', 'jax', 'discopy']\n2025-10-02 10:52:23,711 - render.pomdp_processor - INFO - Processing framework: pymdp\n2025-10-02 10:52:23,711 - render.pomdp_processor - INFO - Created documentation: output/11_render_output/actinf_pomdp_agent/pymdp/README.md\n2025-10-02 10:52:23,711 - render.pomdp_processor - INFO - \u2705 pymdp: Generated PyMDP simulation script: output/11_render_output/actinf_pomdp_agent/pymdp/Classic Active Inference POMDP Agent v1_pymdp.py\n2025-10-02 10:52:23,711 - render.pomdp_processor - INFO - Processing framework: rxinfer\n2025-10-02 10:52:23,712 - render.rxinfer.rxinfer_renderer - ERROR - Code generation failed: name 'Int' is not defined\n2025-10-02 10:52:23,712 - render.pomdp_processor - ERROR - \u274c rxinfer: Error generating RxInfer.jl code: name 'Int' is not defined\n2025-10-02 10:52:23,712 - render.pomdp_processor - INFO - Processing framework: activeinference_jl\n2025-10-02 10:52:23,712 - render.activeinference_jl.activeinference_renderer - INFO - Rendering GNN specification to ActiveInference.jl script for model: Classic Active Inference POMDP Agent v1\n2025-10-02 10:52:23,712 - render.activeinference_jl.activeinference_renderer - INFO - Successfully rendered ActiveInference.jl script to Classic Active Inference POMDP Agent v1_activeinference.jl\n2025-10-02 10:52:23,712 - render.pomdp_processor - INFO - Created documentation: output/11_render_output/actinf_pomdp_agent/activeinference_jl/README.md\n2025-10-02 10:52:23,712 - render.pomdp_processor - INFO - \u2705 activeinference_jl: Successfully rendered ActiveInference.jl script to Classic Active Inference POMDP Agent v1_activeinference.jl\n2025-10-02 10:52:23,712 - render.pomdp_processor - INFO - Processing framework: jax\n2025-10-02 10:52:23,712 - render.jax.jax_renderer - INFO - Extracting matrices from POMDP processor format\n2025-10-02 10:52:23,712 - render.jax.jax_renderer - INFO - Extracted variable dimensions: {n_states: 3, n_obs: 3, n_actions: 1}\n2025-10-02 10:52:23,712 - render.jax.jax_renderer - INFO - Created default matrices: A=(3, 3), B=(3, 3, 1), C=(3,), D=(3,)\n2025-10-02 10:52:23,712 - render.jax.jax_renderer - INFO - Found initialparameterization, extracting actual matrix values\n2025-10-02 10:52:23,712 - render.jax.jax_renderer - INFO - Successfully extracted A matrix: shape (3, 3)\n2025-10-02 10:52:23,712 - render.jax.jax_renderer - INFO - Successfully extracted C vector: shape (3,)\n2025-10-02 10:52:23,712 - render.jax.jax_renderer - INFO - Successfully extracted D vector: shape (3,)\n2025-10-02 10:52:23,713 - render.jax.jax_renderer - INFO - JAX model code written to output/11_render_output/actinf_pomdp_agent/jax/Classic Active Inference POMDP Agent v1_jax.py\n2025-10-02 10:52:23,713 - render.pomdp_processor - INFO - Created documentation: output/11_render_output/actinf_pomdp_agent/jax/README.md\n2025-10-02 10:52:23,713 - render.pomdp_processor - INFO - \u2705 jax: JAX model code generated successfully.\n2025-10-02 10:52:23,713 - render.pomdp_processor - INFO - Processing framework: discopy\n2025-10-02 10:52:23,713 - render.pomdp_processor - INFO - Created documentation: output/11_render_output/actinf_pomdp_agent/discopy/README.md\n2025-10-02 10:52:23,713 - render.pomdp_processor - INFO - \u2705 discopy: Generated DisCoPy categorical diagram script: output/11_render_output/actinf_pomdp_agent/discopy/Classic Active Inference POMDP Agent v1_discopy.py\n2025-10-02 10:52:23,713 - render.processor - ERROR - \u274c Failed to process actinf_pomdp_agent.md\n2025-10-02 10:52:23,713 - render.processor - INFO - \ud83d\udcc1 Processing: input/gnn_files/chronic_pain_theories.md\n2025-10-02 10:52:23,714 - gnn.pomdp_extractor - WARNING - POMDP validation warnings: [\"A matrix dimensions (38, 12) don't match expected (3, 3)\", \"C vector length 72 doesn't match num_observations 3\", \"D vector length 2 doesn't match num_states 3\"]\n2025-10-02 10:52:23,714 - render.processor - INFO - \u2705 Extracted POMDP 'Active Inference Chronic Pain Multi-Theory Model v1' with 3 states, 3 observations, 3 actions\n2025-10-02 10:52:23,714 - render.pomdp_processor - INFO - Processing POMDP 'Active Inference Chronic Pain Multi-Theory Model v1' for frameworks: ['pymdp', 'rxinfer', 'activeinference_jl', 'jax', 'discopy']\n2025-10-02 10:52:23,714 - render.pomdp_processor - INFO - Processing framework: pymdp\n2025-10-02 10:52:23,714 - render.pomdp_processor - INFO - Created documentation: output/11_render_output/chronic_pain_theories/pymdp/README.md\n2025-10-02 10:52:23,714 - render.pomdp_processor - INFO - \u2705 pymdp: Generated PyMDP simulation script: output/11_render_output/chronic_pain_theories/pymdp/Active Inference Chronic Pain Multi-Theory Model v1_pymdp.py\n2025-10-02 10:52:23,714 - render.pomdp_processor - INFO - Processing framework: rxinfer\n2025-10-02 10:52:23,714 - render.rxinfer.rxinfer_renderer - ERROR - Code generation failed: name 'Int' is not defined\n2025-10-02 10:52:23,714 - render.pomdp_processor - ERROR - \u274c rxinfer: Error generating RxInfer.jl code: name 'Int' is not defined\n2025-10-02 10:52:23,714 - render.pomdp_processor - INFO - Processing framework: activeinference_jl\n2025-10-02 10:52:23,714 - render.activeinference_jl.activeinference_renderer - INFO - Rendering GNN specification to ActiveInference.jl script for model: Active Inference Chronic Pain Multi-Theory Model v1\n2025-10-02 10:52:23,715 - render.activeinference_jl.activeinference_renderer - INFO - Successfully rendered ActiveInference.jl script to Active Inference Chronic Pain Multi-Theory Model v1_activeinference.jl\n2025-10-02 10:52:23,715 - render.pomdp_processor - INFO - Created documentation: output/11_render_output/chronic_pain_theories/activeinference_jl/README.md\n2025-10-02 10:52:23,715 - render.pomdp_processor - INFO - \u2705 activeinference_jl: Successfully rendered ActiveInference.jl script to Active Inference Chronic Pain Multi-Theory Model v1_activeinference.jl\n2025-10-02 10:52:23,715 - render.pomdp_processor - INFO - Processing framework: jax\n2025-10-02 10:52:23,715 - render.jax.jax_renderer - INFO - Extracting matrices from POMDP processor format\n2025-10-02 10:52:23,715 - render.jax.jax_renderer - INFO - Extracted variable dimensions: {n_states: 3, n_obs: 3, n_actions: 3}\n2025-10-02 10:52:23,715 - render.jax.jax_renderer - INFO - Created default matrices: A=(3, 3), B=(3, 3, 3), C=(3,), D=(3,)\n2025-10-02 10:52:23,715 - render.jax.jax_renderer - INFO - Found initialparameterization, extracting actual matrix values\n2025-10-02 10:52:23,715 - render.jax.jax_renderer - WARNING - Failed to extract A matrix: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (38,) + inhomogeneous part.\n2025-10-02 10:52:23,715 - render.jax.jax_renderer - INFO - Successfully extracted C vector: shape (72,)\n2025-10-02 10:52:23,715 - render.jax.jax_renderer - WARNING - Failed to extract D vector: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.\n2025-10-02 10:52:23,715 - render.jax.jax_renderer - INFO - JAX model code written to output/11_render_output/chronic_pain_theories/jax/Active Inference Chronic Pain Multi-Theory Model v1_jax.py\n2025-10-02 10:52:23,715 - render.pomdp_processor - INFO - Created documentation: output/11_render_output/chronic_pain_theories/jax/README.md\n2025-10-02 10:52:23,715 - render.pomdp_processor - INFO - \u2705 jax: JAX model code generated successfully.\n2025-10-02 10:52:23,715 - render.pomdp_processor - INFO - Processing framework: discopy\n2025-10-02 10:52:23,716 - render.pomdp_processor - INFO - Created documentation: output/11_render_output/chronic_pain_theories/discopy/README.md\n2025-10-02 10:52:23,716 - render.pomdp_processor - INFO - \u2705 discopy: Generated DisCoPy categorical diagram script: output/11_render_output/chronic_pain_theories/discopy/Active Inference Chronic Pain Multi-Theory Model v1_discopy.py\n2025-10-02 10:52:23,716 - render.processor - ERROR - \u274c Failed to process chronic_pain_theories.md\n2025-10-02 10:52:23,716 - render.processor - INFO - \ud83d\udcc1 Processing: input/gnn_files/neural_response_model.md\n2025-10-02 10:52:23,716 - gnn.pomdp_extractor - WARNING - POMDP validation warnings: [\"A matrix dimensions (3, 12) don't match expected (3, 3)\", \"C vector length 12 doesn't match num_observations 3\", \"D vector length 1 doesn't match num_states 3\"]\n2025-10-02 10:52:23,716 - render.processor - INFO - \u2705 Extracted POMDP 'Active Inference Neural Response Model v1' with 3 states, 3 observations, 3 actions\n2025-10-02 10:52:23,716 - render.pomdp_processor - INFO - Processing POMDP 'Active Inference Neural Response Model v1' for frameworks: ['pymdp', 'rxinfer', 'activeinference_jl', 'jax', 'discopy']\n2025-10-02 10:52:23,716 - render.pomdp_processor - INFO - Processing framework: pymdp\n2025-10-02 10:52:23,716 - render.pomdp_processor - INFO - Created documentation: output/11_render_output/neural_response_model/pymdp/README.md\n2025-10-02 10:52:23,716 - render.pomdp_processor - INFO - \u2705 pymdp: Generated PyMDP simulation script: output/11_render_output/neural_response_model/pymdp/Active Inference Neural Response Model v1_pymdp.py\n2025-10-02 10:52:23,716 - render.pomdp_processor - INFO - Processing framework: rxinfer\n2025-10-02 10:52:23,716 - render.rxinfer.rxinfer_renderer - ERROR - Code generation failed: name 'Int' is not defined\n2025-10-02 10:52:23,716 - render.pomdp_processor - ERROR - \u274c rxinfer: Error generating RxInfer.jl code: name 'Int' is not defined\n2025-10-02 10:52:23,716 - render.pomdp_processor - INFO - Processing framework: activeinference_jl\n2025-10-02 10:52:23,716 - render.activeinference_jl.activeinference_renderer - INFO - Rendering GNN specification to ActiveInference.jl script for model: Active Inference Neural Response Model v1\n2025-10-02 10:52:23,717 - render.activeinference_jl.activeinference_renderer - INFO - Successfully rendered ActiveInference.jl script to Active Inference Neural Response Model v1_activeinference.jl\n2025-10-02 10:52:23,717 - render.pomdp_processor - INFO - Created documentation: output/11_render_output/neural_response_model/activeinference_jl/README.md\n2025-10-02 10:52:23,717 - render.pomdp_processor - INFO - \u2705 activeinference_jl: Successfully rendered ActiveInference.jl script to Active Inference Neural Response Model v1_activeinference.jl\n2025-10-02 10:52:23,717 - render.pomdp_processor - INFO - Processing framework: jax\n2025-10-02 10:52:23,717 - render.jax.jax_renderer - INFO - Extracting matrices from POMDP processor format\n2025-10-02 10:52:23,717 - render.jax.jax_renderer - INFO - Extracted variable dimensions: {n_states: 3, n_obs: 3, n_actions: 3}\n2025-10-02 10:52:23,717 - render.jax.jax_renderer - INFO - Created default matrices: A=(3, 3), B=(3, 3, 3), C=(3,), D=(3,)\n2025-10-02 10:52:23,717 - render.jax.jax_renderer - INFO - Found initialparameterization, extracting actual matrix values\n2025-10-02 10:52:23,717 - render.jax.jax_renderer - INFO - Successfully extracted A matrix: shape (3, 12)\n2025-10-02 10:52:23,717 - render.jax.jax_renderer - INFO - Successfully extracted C vector: shape (12,)\n2025-10-02 10:52:23,717 - render.jax.jax_renderer - INFO - JAX model code written to output/11_render_output/neural_response_model/jax/Active Inference Neural Response Model v1_jax.py\n2025-10-02 10:52:23,717 - render.pomdp_processor - INFO - Created documentation: output/11_render_output/neural_response_model/jax/README.md\n2025-10-02 10:52:23,717 - render.pomdp_processor - INFO - \u2705 jax: JAX model code generated successfully.\n2025-10-02 10:52:23,717 - render.pomdp_processor - INFO - Processing framework: discopy\n2025-10-02 10:52:23,717 - render.pomdp_processor - INFO - Created documentation: output/11_render_output/neural_response_model/discopy/README.md\n2025-10-02 10:52:23,717 - render.pomdp_processor - INFO - \u2705 discopy: Generated DisCoPy categorical diagram script: output/11_render_output/neural_response_model/discopy/Active Inference Neural Response Model v1_discopy.py\n2025-10-02 10:52:23,717 - render.processor - ERROR - \u274c Failed to process neural_response_model.md\n2025-10-02 10:52:23,718 - render.processor - INFO - Created overview documentation: output/11_render_output/README.md\n2025-10-02 10:52:23,718 - render.processor - INFO - \ud83c\udf89 Render processing completed!\n2025-10-02 10:52:23,718 - render.processor - INFO - \ud83d\udcca Files: 0/3 successful\n2025-10-02 10:52:23,718 - render.processor - INFO - \ud83e\udde0 Framework renderings: 12/15 successful (80.0%)\n2025-10-02 10:52:23,718 - render.processor - INFO - \ud83d\udcc4 Summary saved to: output/11_render_output/render_processing_summary.json\n",
            "memory_usage_mb": 20.40625,
            "peak_memory_mb": 20.40625,
            "memory_delta_mb": 0.109375,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 12,
            "script_name": "11_render.py",
            "description": "Code rendering",
            "start_time": "2025-10-02T10:52:23.560968",
            "end_time": "2025-10-02T10:52:23.730477",
            "duration_seconds": 0.16950607299804688
        },
        {
            "status": "SUCCESS_WITH_WARNINGS",
            "stdout": "",
            "stderr": "2025-10-02 10:52:25,527 - root - WARNING - PyMDP not available - simulation will gracefully degrade with informative output\n2025-10-02 10:52:26,549 - execute - INFO - \ud83d\ude80 Processing execute - searching for rendered implementations\n2025-10-02 10:52:26,554 - execute - INFO - Found render output directory: output/11_render_output\n2025-10-02 10:52:26,556 - execute - INFO - Found 12 executable scripts to run\n2025-10-02 10:52:27,961 - execute - ERROR - \u274c Script Active Inference Neural Response Model v1_pymdp.py failed with return code 1\n2025-10-02 10:52:27,961 - execute - ERROR - Error output: WARNING:root:PyMDP not available - simulation will gracefully degrade with informative output\nERROR:__main__:Unexpected error: execute_pymdp_simulation() got an unexpected keyword argument 'config_ove...\n2025-10-02 10:52:28,539 - execute - ERROR - \u274c Script Active Inference Neural Response Model v1_jax.py failed with return code 1\n2025-10-02 10:52:28,539 - execute - ERROR - Error output: Traceback (most recent call last):\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/neural_response_model/jax/Active Inference Neural Response Model v1_jax.py\", l...\n2025-10-02 10:52:28,927 - execute - ERROR - \u274c Script Active Inference Neural Response Model v1_discopy.py failed with return code 1\n2025-10-02 10:52:28,927 - execute - ERROR - Error output: Traceback (most recent call last):\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/neural_response_model/discopy/Active Inference Neural Response Model v1_discop...\n2025-10-02 10:52:30,208 - execute - ERROR - \u274c Script Classic Active Inference POMDP Agent v1_pymdp.py failed with return code 1\n2025-10-02 10:52:30,208 - execute - ERROR - Error output: WARNING:root:PyMDP not available - simulation will gracefully degrade with informative output\nERROR:__main__:Unexpected error: execute_pymdp_simulation() got an unexpected keyword argument 'config_ove...\n2025-10-02 10:52:31,115 - execute - INFO - \u2705 Successfully executed Classic Active Inference POMDP Agent v1_jax.py\n2025-10-02 10:52:31,483 - execute - ERROR - \u274c Script Classic Active Inference POMDP Agent v1_discopy.py failed with return code 1\n2025-10-02 10:52:31,483 - execute - ERROR - Error output: Traceback (most recent call last):\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/actinf_pomdp_agent/discopy/Classic Active Inference POMDP Agent v1_discopy.py\"...\n2025-10-02 10:52:32,883 - execute - ERROR - \u274c Script Active Inference Chronic Pain Multi-Theory Model v1_pymdp.py failed with return code 1\n2025-10-02 10:52:32,883 - execute - ERROR - Error output: WARNING:root:PyMDP not available - simulation will gracefully degrade with informative output\nERROR:__main__:Unexpected error: execute_pymdp_simulation() got an unexpected keyword argument 'config_ove...\n2025-10-02 10:52:33,914 - execute - INFO - \u2705 Successfully executed Active Inference Chronic Pain Multi-Theory Model v1_jax.py\n2025-10-02 10:52:34,285 - execute - ERROR - \u274c Script Active Inference Chronic Pain Multi-Theory Model v1_discopy.py failed with return code 1\n2025-10-02 10:52:34,286 - execute - ERROR - Error output: Traceback (most recent call last):\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/chronic_pain_theories/discopy/Active Inference Chronic Pain Multi-Theory Model...\n2025-10-02 10:52:42,783 - execute - ERROR - \u274c Script Active Inference Neural Response Model v1_activeinference.jl failed with return code 1\n2025-10-02 10:52:42,783 - execute - ERROR - Error output: ERROR: LoadError: ParseError:\n# Error @ /Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/neural_response_model/activeinference_jl/Active Inference Neural Response Model v...\n2025-10-02 10:52:48,399 - execute - ERROR - \u274c Script Classic Active Inference POMDP Agent v1_activeinference.jl failed with return code 1\n2025-10-02 10:52:48,399 - execute - ERROR - Error output: ERROR: LoadError: ParseError:\n# Error @ /Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/actinf_pomdp_agent/activeinference_jl/Classic Active Inference POMDP Agent v1_act...\n2025-10-02 10:52:53,447 - execute - ERROR - \u274c Script Active Inference Chronic Pain Multi-Theory Model v1_activeinference.jl failed with return code 1\n2025-10-02 10:52:53,447 - execute - ERROR - Error output: ERROR: LoadError: UndefVarError: `amplified` not defined in `Main`\nSuggestion: check for spelling errors or missing imports.\nStacktrace:\n [1] top-level scope\n   @ ~/Documents/GitHub/generalizednotatio...\n2025-10-02 10:52:53,448 - execute - INFO - Generated execution report: output/12_execute_output/execution_results/execution_report.md\n2025-10-02 10:52:53,448 - execute - WARNING - \u26a0\ufe0f Execute processing completed with 10 failures\n",
            "memory_usage_mb": 14.59375,
            "peak_memory_mb": 20.46875,
            "memory_delta_mb": -5.875,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 13,
            "script_name": "12_execute.py",
            "description": "Execution",
            "start_time": "2025-10-02T10:52:23.730811",
            "end_time": "2025-10-02T10:52:53.566998",
            "duration_seconds": 29.836180925369263
        },
        {
            "status": "SUCCESS_WITH_WARNINGS",
            "stdout": "",
            "stderr": "2025-10-02 10:52:53,624 - llm.llm_processor - INFO - Loaded API keys for providers: ['openai', 'ollama']\n2025-10-02 10:52:53,624 - llm.llm_operations - INFO - Created new LLM processor\n2025-10-02 10:52:53,626 - llm - INFO - \ud83d\ude80 Processing LLM with enhanced Ollama integration\n2025-10-02 10:52:53,626 - llm - INFO - \ud83d\udd0d Found Ollama at: /opt/homebrew/bin/ollama\n2025-10-02 10:52:53,651 - llm - INFO - \u2705 Ollama is running and ready\n2025-10-02 10:52:53,651 - llm - INFO - \ud83d\udce6 Available Ollama models (7): codellama:latest, llama3.1:latest, smollm2:135m-instruct-q4_K_S, smollm:135m, gemma2:2b\n2025-10-02 10:52:53,651 - llm - INFO -    ... and 2 more models\n2025-10-02 10:52:53,651 - llm - INFO - \ud83c\udfaf Selected model: smollm2:135m-instruct-q4_K_S\n2025-10-02 10:52:53,929 - llm.providers.openai_provider - INFO - OpenAI provider initialized successfully\n2025-10-02 10:52:53,930 - llm.llm_processor - INFO - Initialized openai provider\n2025-10-02 10:52:53,997 - llm.providers.openrouter_provider - WARNING - OpenRouter API key not provided\n2025-10-02 10:52:53,997 - llm.llm_processor - WARNING - Failed to initialize openrouter provider\n2025-10-02 10:52:53,998 - llm.providers.perplexity_provider - WARNING - Perplexity API key not provided\n2025-10-02 10:52:53,998 - llm.llm_processor - WARNING - Failed to initialize perplexity provider\n2025-10-02 10:52:53,998 - llm.providers.ollama_provider - INFO - Ollama provider initialized (CLI fallback)\n2025-10-02 10:52:53,998 - llm.llm_processor - INFO - Initialized ollama provider\n2025-10-02 10:52:53,998 - llm.llm_processor - INFO - LLM Processor initialized with 2 providers\n2025-10-02 10:52:54,001 - llm.llm_processor - INFO - Loaded API keys for providers: ['openai', 'ollama']\n2025-10-02 10:52:54,001 - llm.llm_operations - INFO - Created new LLM processor\n2025-10-02 10:52:54,012 - llm.providers.openai_provider - INFO - OpenAI provider initialized successfully\n2025-10-02 10:52:54,012 - llm.llm_processor - INFO - Initialized openai provider\n2025-10-02 10:52:54,012 - llm.providers.openrouter_provider - WARNING - OpenRouter API key not provided\n2025-10-02 10:52:54,012 - llm.llm_processor - WARNING - Failed to initialize openrouter provider\n2025-10-02 10:52:54,012 - llm.providers.perplexity_provider - WARNING - Perplexity API key not provided\n2025-10-02 10:52:54,012 - llm.llm_processor - WARNING - Failed to initialize perplexity provider\n2025-10-02 10:52:54,012 - llm.providers.ollama_provider - INFO - Ollama provider initialized (CLI fallback)\n2025-10-02 10:52:54,012 - llm.llm_processor - INFO - Initialized ollama provider\n2025-10-02 10:52:54,012 - llm.llm_processor - INFO - LLM Processor initialized with 2 providers\n2025-10-02 10:52:54,319 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:52:54,321 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:52:54,322 - llm.llm_processor - ERROR - Analysis failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:52:54,486 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:52:54,488 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:52:54,488 - llm.llm_processor - WARNING - Fallback failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:52:55,400 - llm - INFO - \ud83e\udd16 Using model 'smollm2:135m-instruct-q4_K_S' for LLM prompts\n2025-10-02 10:52:55,400 - llm - INFO -   \ud83d\udcdd Running prompt 1/6: summarize_content\n2025-10-02 10:52:55,404 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:52:55,696 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:52:55,697 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:52:55,697 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:52:55,697 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:53:45,786 - utils.timeout_manager - WARNING - llm_prompt_summarize_content timed out on attempt 1\n2025-10-02 10:53:48,787 - utils.timeout_manager - INFO - Retry 1 for llm_prompt_summarize_content with timeout 100.8s\n2025-10-02 10:53:48,788 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:53:49,010 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:53:49,011 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:53:49,011 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:53:49,011 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:53:57,218 - llm - INFO -   \ud83d\udcdd Running prompt 2/6: explain_model\n2025-10-02 10:53:57,219 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:53:57,222 - openai._base_client - INFO - Retrying request to /chat/completions in 0.475800 seconds\n2025-10-02 10:53:57,918 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:53:57,918 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:53:57,918 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:53:57,918 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:53:59,135 - llm - INFO -   \ud83d\udcdd Running prompt 3/6: identify_components\n2025-10-02 10:53:59,136 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:53:59,140 - openai._base_client - INFO - Retrying request to /chat/completions in 0.478094 seconds\n2025-10-02 10:53:59,815 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:53:59,817 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:53:59,817 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:53:59,817 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:54:52,208 - utils.timeout_manager - WARNING - llm_prompt_identify_components timed out on attempt 1\n2025-10-02 10:54:55,210 - utils.timeout_manager - INFO - Retry 1 for llm_prompt_identify_components with timeout 106.1s\n2025-10-02 10:54:55,210 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:54:55,593 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:54:55,594 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:54:55,594 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:54:55,594 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:00,613 - llm - INFO -   \ud83d\udcdd Running prompt 4/6: analyze_structure\n2025-10-02 10:55:00,613 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:00,616 - openai._base_client - INFO - Retrying request to /chat/completions in 0.439966 seconds\n2025-10-02 10:55:01,557 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:01,558 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:01,558 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:01,559 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:03,333 - llm - INFO -   \ud83d\udcdd Running prompt 5/6: extract_parameters\n2025-10-02 10:55:03,334 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:03,337 - openai._base_client - INFO - Retrying request to /chat/completions in 0.484284 seconds\n2025-10-02 10:55:04,507 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:04,509 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:04,510 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:04,510 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:05,676 - llm - INFO -   \ud83d\udcdd Running prompt 6/6: practical_applications\n2025-10-02 10:55:05,677 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:05,679 - openai._base_client - INFO - Retrying request to /chat/completions in 0.465775 seconds\n2025-10-02 10:55:06,386 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:06,387 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:06,387 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:06,387 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:08,535 - llm - INFO -   \ud83d\udcdd Running custom prompt 1/3: technical_description\n2025-10-02 10:55:08,535 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:08,538 - openai._base_client - INFO - Retrying request to /chat/completions in 0.435628 seconds\n2025-10-02 10:55:09,318 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:09,320 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:09,320 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:09,320 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:15,743 - llm - INFO -   \ud83d\udcdd Running custom prompt 2/3: nontechnical_description\n2025-10-02 10:55:15,744 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:15,746 - openai._base_client - INFO - Retrying request to /chat/completions in 0.460811 seconds\n2025-10-02 10:55:16,460 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:16,461 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:16,462 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:16,462 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:17,875 - llm - INFO -   \ud83d\udcdd Running custom prompt 3/3: runtime_behavior\n2025-10-02 10:55:17,875 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:17,878 - openai._base_client - INFO - Retrying request to /chat/completions in 0.493637 seconds\n2025-10-02 10:55:18,662 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:18,663 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:18,663 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:18,663 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:19,721 - llm.llm_processor - INFO - Loaded API keys for providers: ['openai', 'ollama']\n2025-10-02 10:55:19,721 - llm.llm_operations - INFO - Created new LLM processor\n2025-10-02 10:55:19,735 - llm.providers.openai_provider - INFO - OpenAI provider initialized successfully\n2025-10-02 10:55:19,735 - llm.llm_processor - INFO - Initialized openai provider\n2025-10-02 10:55:19,735 - llm.providers.openrouter_provider - WARNING - OpenRouter API key not provided\n2025-10-02 10:55:19,735 - llm.llm_processor - WARNING - Failed to initialize openrouter provider\n2025-10-02 10:55:19,735 - llm.providers.perplexity_provider - WARNING - Perplexity API key not provided\n2025-10-02 10:55:19,735 - llm.llm_processor - WARNING - Failed to initialize perplexity provider\n2025-10-02 10:55:19,735 - llm.providers.ollama_provider - INFO - Ollama provider initialized (CLI fallback)\n2025-10-02 10:55:19,735 - llm.llm_processor - INFO - Initialized ollama provider\n2025-10-02 10:55:19,735 - llm.llm_processor - INFO - LLM Processor initialized with 2 providers\n2025-10-02 10:55:20,061 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:20,062 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:20,062 - llm.llm_processor - ERROR - Analysis failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:20,236 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:20,237 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:20,237 - llm.llm_processor - WARNING - Fallback failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:21,888 - llm - INFO - \ud83e\udd16 Using model 'smollm2:135m-instruct-q4_K_S' for LLM prompts\n2025-10-02 10:55:21,888 - llm - INFO -   \ud83d\udcdd Running prompt 1/6: summarize_content\n2025-10-02 10:55:21,889 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:21,890 - openai._base_client - INFO - Retrying request to /chat/completions in 0.449184 seconds\n2025-10-02 10:55:22,632 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:22,634 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:22,634 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:22,634 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:24,354 - llm - INFO -   \ud83d\udcdd Running prompt 2/6: explain_model\n2025-10-02 10:55:24,355 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:24,358 - openai._base_client - INFO - Retrying request to /chat/completions in 0.434517 seconds\n2025-10-02 10:55:25,148 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:25,149 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:25,150 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:25,150 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:27,215 - llm - INFO -   \ud83d\udcdd Running prompt 3/6: identify_components\n2025-10-02 10:55:27,215 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:27,217 - openai._base_client - INFO - Retrying request to /chat/completions in 0.391542 seconds\n2025-10-02 10:55:27,834 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:27,836 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:27,836 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:27,836 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:30,422 - llm - INFO -   \ud83d\udcdd Running prompt 4/6: analyze_structure\n2025-10-02 10:55:30,422 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:30,426 - openai._base_client - INFO - Retrying request to /chat/completions in 0.434424 seconds\n2025-10-02 10:55:31,245 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:31,247 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:31,247 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:31,247 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:33,294 - llm - INFO -   \ud83d\udcdd Running prompt 5/6: extract_parameters\n2025-10-02 10:55:33,294 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:33,296 - openai._base_client - INFO - Retrying request to /chat/completions in 0.479726 seconds\n2025-10-02 10:55:34,143 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:34,144 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:34,145 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:34,145 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:35,945 - llm - INFO -   \ud83d\udcdd Running prompt 6/6: practical_applications\n2025-10-02 10:55:35,945 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:35,949 - openai._base_client - INFO - Retrying request to /chat/completions in 0.457618 seconds\n2025-10-02 10:55:36,864 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:36,865 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:36,865 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:36,865 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:38,280 - llm - INFO -   \ud83d\udcdd Running custom prompt 1/3: technical_description\n2025-10-02 10:55:38,280 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:38,283 - openai._base_client - INFO - Retrying request to /chat/completions in 0.377711 seconds\n2025-10-02 10:55:38,982 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:38,982 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:38,982 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:38,982 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:41,310 - llm - INFO -   \ud83d\udcdd Running custom prompt 2/3: nontechnical_description\n2025-10-02 10:55:41,310 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:41,314 - openai._base_client - INFO - Retrying request to /chat/completions in 0.380807 seconds\n2025-10-02 10:55:41,975 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:41,976 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:41,976 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:41,976 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:45,045 - llm - INFO -   \ud83d\udcdd Running custom prompt 3/3: runtime_behavior\n2025-10-02 10:55:45,045 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:45,048 - openai._base_client - INFO - Retrying request to /chat/completions in 0.398935 seconds\n2025-10-02 10:55:45,797 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:45,799 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:45,799 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:45,799 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:47,098 - llm.llm_processor - INFO - Loaded API keys for providers: ['openai', 'ollama']\n2025-10-02 10:55:47,098 - llm.llm_operations - INFO - Created new LLM processor\n2025-10-02 10:55:47,116 - llm.providers.openai_provider - INFO - OpenAI provider initialized successfully\n2025-10-02 10:55:47,116 - llm.llm_processor - INFO - Initialized openai provider\n2025-10-02 10:55:47,116 - llm.providers.openrouter_provider - WARNING - OpenRouter API key not provided\n2025-10-02 10:55:47,116 - llm.llm_processor - WARNING - Failed to initialize openrouter provider\n2025-10-02 10:55:47,116 - llm.providers.perplexity_provider - WARNING - Perplexity API key not provided\n2025-10-02 10:55:47,116 - llm.llm_processor - WARNING - Failed to initialize perplexity provider\n2025-10-02 10:55:47,116 - llm.providers.ollama_provider - INFO - Ollama provider initialized (CLI fallback)\n2025-10-02 10:55:47,116 - llm.llm_processor - INFO - Initialized ollama provider\n2025-10-02 10:55:47,117 - llm.llm_processor - INFO - LLM Processor initialized with 2 providers\n2025-10-02 10:55:47,296 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:47,297 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:47,297 - llm.llm_processor - ERROR - Analysis failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:47,400 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:47,401 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:47,401 - llm.llm_processor - WARNING - Fallback failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:48,386 - llm - INFO - \ud83e\udd16 Using model 'smollm2:135m-instruct-q4_K_S' for LLM prompts\n2025-10-02 10:55:48,386 - llm - INFO -   \ud83d\udcdd Running prompt 1/6: summarize_content\n2025-10-02 10:55:48,386 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:48,389 - openai._base_client - INFO - Retrying request to /chat/completions in 0.483833 seconds\n2025-10-02 10:55:49,072 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:49,074 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:49,074 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:49,074 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:55:50,100 - llm - INFO -   \ud83d\udcdd Running prompt 2/6: explain_model\n2025-10-02 10:55:50,100 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:55:50,104 - openai._base_client - INFO - Retrying request to /chat/completions in 0.408118 seconds\n2025-10-02 10:55:50,808 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:55:50,809 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:50,809 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:55:50,809 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:56:50,831 - llm.providers.ollama_provider - ERROR - Ollama chat failed: Command '['ollama', 'run', 'smollm2:135m-instruct-q4_K_S', 'You are an expert in Active Inference, Bayesian inference, and GNN (Generalized Notation Notation) specifications. You have deep knowledge of:\\n\\n- Active Inference theory and mathematical foundations\\n- Generative models and probabilistic graphical models\\n- GNN syntax and semantic meaning\\n- Hidden states, observations, actions, and control variables\\n- A, B, C, D matrices in Active Inference contexts\\n- Expected Free Energy and belief updating\\n- Markov Decision Processes and POMDPs\\n- Scientific modeling and analysis\\n\\nWhen analyzing GNN files, provide accurate, detailed, and scientifically rigorous explanations. Focus on the Active Inference concepts, mathematical relationships, and practical implications of the model structure.\\n\\nPlease analyze the following GNN specification and explain what this generative model does:\\n\\n# GNN Example: Neural Response Model\\n# GNN Version: 1.0\\n# This file specifies a comprehensive Active Inference model of how neurons respond to stimuli, including membrane dynamics, synaptic plasticity, adaptation, and homeostatic regulation. The model is suitable for rendering into various neural simulation backends.\\n\\n## GNNSection\\nNeuralResponse\\n\\n## GNNVersionAndFlags\\nGNN v1\\n\\n## ModelName\\nActive Inference Neural Response Model v1\\n\\n## ModelAnnotation\\nThis model describes how a neuron responds to stimuli using Active Inference principles:\\n- One primary observation modality (firing_rate) with 4 possible activity levels\\n- Two auxiliary observation modalities (postsynaptic_potential, calcium_signal) for comprehensive monitoring\\n- Five hidden state factors representing different aspects of neural computation\\n- Three control factors for plasticity, channel modulation, and metabolic allocation\\n- The model captures key neural phenomena: membrane potential dynamics, synaptic plasticity (STDP-like), activity-dependent adaptation, homeostatic regulation, and metabolic constraints\\n- Preferences encode biologically realistic goals: stable firing rates, energy efficiency, and synaptic balance\\n\\n## StateSpaceBlock\\n# Likelihood matrix: A[observation_outcomes, hidden_states]\\nA[12,405,type=float]   # 12 observations x 405 hidden state combinations (likelihood mapping)\\n\\n# Transition matrices: B[states_next, states_previous, actions]\\nB[405,405,27,type=float]   # State transitions given previous state and action (5 state factors, 3 control factors)\\n\\n# Preference vector: C[observation_outcomes]\\nC[12,type=float]       # Log-preferences over observations\\n\\n# Prior vector: D[states]\\nD[405,type=float]       # Prior over initial hidden states\\n\\n# Habit vector: E[actions]\\nE[27,type=float]       # Initial policy prior (habit) over actions\\n\\n# Hidden States (5 factors with 5\u00d74\u00d73\u00d73\u00d73 = 405 total combinations)\\nV_m[5,1,type=float]     # Membrane potential state (5 levels: hyperpolarized, resting, depolarized, threshold, refractory)\\nW[4,1,type=float]       # Synaptic weight factor (4 levels: weak, moderate, strong, saturated)\\nA[3,1,type=float]       # Adaptation state (3 levels: low, medium, high adaptation)\\nH[3,1,type=float]       # Homeostatic set point (3 levels: low, target, high firing rate)\\nM[3,1,type=float]       # Metabolic state (3 levels: depleted, adequate, surplus)\\n\\n# Observations (3 modalities with 4\u00d73\u00d73 = 12 total outcomes)\\nFR[4,1,type=float]     # Firing rate (4 levels: silent, low, moderate, high)\\nPSP[3,1,type=float]    # Postsynaptic potential (3 levels: inhibitory, none, excitatory)\\nCa[3,1,type=float]     # Calcium signal (3 levels: low, medium, high)\\n\\n# Policy and Control (3 factors with 3\u00d73\u00d73 = 27 total actions)\\nP[3,1,type=float]      # Plasticity control (3 actions: LTD, no change, LTP)\\nC_mod[3,1,type=float]  # Channel modulation (3 actions: decrease, maintain, increase conductance)\\nM_alloc[3,1,type=float] # Metabolic allocation (3 actions: conserve, balance, invest)\\n\\n# Free Energy terms\\nF[V_m,type=float]      # Variational Free Energy for belief updating\\nG[P,type=float]        # Expected Free Energy (per policy)\\n\\n# Time\\nt[1,type=int]         # Discrete time step (milliseconds scale)\\n\\n## Connections\\n# State evolution connections\\nD>V_m                    # Prior influences initial membrane potential\\nV_m>B                    # Membrane potential affects state transitions\\nW>B                      # Synaptic weights affect transitions\\nA>B                      # Adaptation affects transitions\\nH>B                      # Homeostatic set point affects transitions\\nM>B                      # Metabolic state affects transitions\\n\\n# Observation connections\\nV_m>A                     # Membrane potential generates firing rate observations\\nW>A                       # Synaptic weights influence PSP observations\\nV_m>A                     # Membrane potential affects calcium signals (via firing)\\n\\n# Control connections\\nP>B                       # Plasticity control affects synaptic weight transitions\\nC_mod>B                   # Channel modulation affects membrane potential dynamics\\nM_alloc>B                 # Metabolic allocation affects metabolic state and energy-dependent processes\\n\\n# Free energy connections\\nC>G                       # Preferences influence expected free energy\\nE>P                       # Habits influence plasticity policy\\nG>P                       # Expected free energy influences plasticity policy\\n\\n# Action selection\\nP>C_mod                   # Plasticity influences channel modulation\\nC_mod>M_alloc             # Channel modulation influences metabolic allocation\\n\\n## InitialParameterization\\n# A: 12 observations x 405 hidden states. Likelihood mapping from hidden neural states to observations.\\n# Observations are ordered as: FR1,FR2,FR3,FR4, PSP1,PSP2,PSP3, Ca1,Ca2,Ca3 (repeated for each state combination)\\n# Hidden states ordered by: V_m1,W1,A1,H1,M1 \u2192 V_m1,W1,A1,H1,M2 \u2192 ... \u2192 V_m5,W4,A3,H3,M3\\nA={\\n  # High firing rate (FR4) most likely when membrane potential is at threshold (V_m4) and adaptation is low (A1)\\n  # Moderate firing (FR3) likely with depolarized membrane (V_m3) and moderate adaptation (A2)\\n  # Low firing (FR2) with resting potential (V_m2) and high adaptation (A3)\\n  # Silent (FR1) with hyperpolarized (V_m1) or refractory (V_m5) states\\n\\n  # PSP observations depend primarily on synaptic weight (W) and membrane potential (V_m)\\n  # Calcium signals correlate with firing rate and metabolic state\\n\\n  # Biologically realistic likelihoods (first 100 of 405 combinations shown)\\n  (0.05, 0.15, 0.25, 0.55, 0.40, 0.40, 0.20, 0.10, 0.35, 0.55, 0.30, 0.45),  # V_m1,W1,A1,H1,M1\\n  (0.10, 0.20, 0.30, 0.40, 0.35, 0.45, 0.20, 0.15, 0.40, 0.45, 0.25, 0.40),  # V_m1,W1,A1,H1,M2\\n  (0.15, 0.25, 0.35, 0.25, 0.30, 0.50, 0.20, 0.20, 0.45, 0.35, 0.20, 0.35),  # V_m1,W1,A1,H1,M3\\n  # ... (continues for all 405 combinations with biologically realistic probabilities)\\n}\\n\\n# B: 405 states_next x 405 states_previous x 27 actions. State transitions for each action.\\n# Actions ordered by: P1,C_mod1,M_alloc1 \u2192 P1,C_mod1,M_alloc2 \u2192 ... \u2192 P3,C_mod3,M_alloc3\\n# Each 405\u00d7405 matrix defines transitions for one action combination\\nB={\\n  # Action 1: LTD, decrease conductance, conserve energy (P1,C_mod1,M_alloc1)\\n  # - Synaptic weights tend to decrease (LTD)\\n  # - Membrane potential becomes more hyperpolarized (decreased conductance)\\n  # - Metabolic state depletes faster (energy conservation)\\n  # - Adaptation and homeostasis adjust accordingly\\n\\n  # Action 14: No plasticity, maintain conductance, balance energy (P2,C_mod2,M_alloc2)\\n  # - Synaptic weights relatively stable\\n  # - Membrane potential dynamics unchanged\\n  # - Metabolic state maintained at adequate levels\\n\\n  # Action 27: LTP, increase conductance, invest energy (P3,C_mod3,M_alloc3)\\n  # - Synaptic weights tend to increase (LTP)\\n  # - Membrane potential more depolarized (increased conductance)\\n  # - Metabolic state improves (energy investment)\\n  # ... (27 transition matrices total)\\n}\\n\\n# C: 12 observations. Preference for biologically realistic neural activity patterns.\\nC={\\n  # Prefer moderate firing rates (FR3), balanced PSPs (PSP2), moderate calcium (Ca2)\\n  # Penalize extreme states: very high firing, strong inhibition/excitation, high calcium\\n  (0.1, 0.2, 0.4, 0.3, 0.15, 0.35, 0.50, 0.25, 0.35, 0.40, 0.25, 0.20)\\n}\\n\\n# D: 405 states. Realistic prior over initial neural states.\\nD={\\n  # Start near resting membrane potential (V_m2), moderate synaptic weights (W2)\\n  # Low initial adaptation (A1), target homeostasis (H2), adequate metabolism (M2)\\n  # Most mass on biologically realistic initial conditions\\n  (0.05, 0.15, 0.35, 0.35, 0.10,  # V_m distribution\\n   0.20, 0.40, 0.30, 0.10,        # W distribution\\n   0.40, 0.40, 0.20,             # A distribution\\n   0.20, 0.60, 0.20,             # H distribution\\n   0.15, 0.70, 0.15)             # M distribution\\n   # ... (repeated for all 405 state combinations with appropriate probabilities)\\n}\\n\\n# E: 27 actions. Habit favoring moderate plasticity, balanced channel modulation, efficient metabolism.\\nE={\\n  # Slight preference for LTP (learning), moderate conductance, balanced metabolism\\n  (0.20, 0.30, 0.50, 0.25, 0.50, 0.25, 0.25, 0.50, 0.25,\\n   0.30, 0.40, 0.30, 0.25, 0.50, 0.25, 0.30, 0.40, 0.30,\\n   0.35, 0.40, 0.25, 0.30, 0.45, 0.25, 0.35, 0.40, 0.25)\\n}\\n\\n## Equations\\n# Neural dynamics following Active Inference principles:\\n# - Membrane potential integrates synaptic inputs with conductance modulation: dV_m/dt = -g_L*(V_m - E_L) + I_syn + I_ext\\n# - Synaptic weights evolve via plasticity rules: dW/dt = \u03b7 * STDP(V_m_pre, V_m_post, t_spike)\\n# - Adaptation accumulates with sustained activity: dA/dt = -A/\u03c4_A + f(V_m)\\n# - Homeostatic set point adjusts to maintain target firing: H_t = H_{t-1} + \u03b1 * (FR_target - FR_actual)\\n# - Metabolic state reflects energy balance: dM/dt = -c_activity * FR + r_allocation * M_alloc\\n#\\n# State inference: s_t ~ argmin_F [D_KL(q(s_t|o_{1:t}) || p(s_t|o_{1:t-1}, u_t))]\\n# Policy inference: \u03c0_t ~ argmin_G [E[G(\u03c0)] = \u03a3_\u03c4 E[Q(\u03c4)] + D_KL(\u03c0 || \u03c0_prior)]\\n# Action selection: u_t ~ \u03c0_t with softmax temperature \u03c4\\n\\n## Time\\nTime=t\\nDynamic\\nDiscrete\\nModelTimeHorizon=Unbounded # Neural model defined for continuous operation; simulations may specify finite duration.\\nTimeStep=1ms # Millisecond-scale discrete time steps for realistic neural dynamics.\\n\\n## ActInfOntologyAnnotation\\nA=LikelihoodMatrix\\nB=TransitionMatrices\\nC=LogPreferenceVector\\nD=PriorOverHiddenStates\\nE=HabitVector\\nF=VariationalFreeEnergy\\nG=ExpectedFreeEnergy\\nV_m=MembranePotentialState\\nW=SynapticWeightFactor\\nA=AdaptationState\\nH=HomeostaticSetPoint\\nM=MetabolicState\\nFR=FiringRateObservation\\nPSP=PostsynapticPotentialObservation\\nCa=CalciumSignalObservation\\nP=PlasticityControl\\nC_mod=ChannelModulation\\nM_alloc=MetabolicAllocation\\nt=TimeStep\\n\\n## ModelParameters\\nnum_membrane_states: 5      # V_m[5] - hyperpolarized, resting, depolarized, threshold, refractory\\nnum_synapse_levels: 4       # W[4] - weak, moderate, strong, saturated\\nnum_adaptation_levels: 3    # A[3] - low, medium, high adaptation\\nnum_homeostatic_levels: 3   # H[3] - low, target, high firing rate targets\\nnum_metabolic_levels: 3     # M[3] - depleted, adequate, surplus energy\\n\\nnum_firing_levels: 4        # FR[4] - silent, low, moderate, high firing rates\\nnum_psp_levels: 3           # PSP[3] - inhibitory, none, excitatory potentials\\nnum_calcium_levels: 3       # Ca[3] - low, medium, high calcium concentrations\\n\\nnum_plasticity_actions: 3   # P[3] - LTD, no change, LTP\\nnum_channel_actions: 3      # C_mod[3] - decrease, maintain, increase conductance\\nnum_metabolic_actions: 3    # M_alloc[3] - conserve, balance, invest energy\\n\\ntotal_hidden_states: 405    # 5\u00d74\u00d73\u00d73\u00d73 combinations\\ntotal_observations: 12      # 4\u00d73\u00d73 combinations\\ntotal_actions: 27           # 3\u00d73\u00d73 combinations\\n\\n## Footer\\nActive Inference Neural Response Model v1 - GNN Representation.\\nThis model captures essential aspects of neural computation including membrane dynamics, synaptic plasticity, adaptation, homeostasis, and metabolic constraints within the Active Inference framework. The model is designed for studying how neurons minimize free energy while maintaining stable, efficient, and adaptive responses to stimuli.\\n\\n## Signature\\nCryptographic signature goes here\\n\\n\\nProvide a comprehensive explanation that covers:\\n\\n1. **Model Purpose**: What real-world phenomenon or problem does this model represent?\\n\\n2. **Core Components**: \\n   - What are the hidden states (s_f0, s_f1, etc.) and what do they represent?\\n   - What are the observations (o_m0, o_m1, etc.) and what do they capture?\\n   - What actions/controls (u_c0, \u03c0_c0, etc.) are available and what do they do?\\n\\n3. **Model Dynamics**: How does the model evolve over time? What are the key relationships?\\n\\n4. **Active Inference Context**: How does this model implement Active Inference principles? What beliefs are being updated and how?\\n\\n5. **Practical Implications**: What can you learn or predict using this model? What decisions can it inform?\\n\\nPlease write in clear, accessible language while maintaining scientific accuracy.']' timed out after 60.0 seconds\n2025-10-02 10:56:50,831 - llm.llm_processor - WARNING - Fallback provider ollama also failed: Command '['ollama', 'run', 'smollm2:135m-instruct-q4_K_S', 'You are an expert in Active Inference, Bayesian inference, and GNN (Generalized Notation Notation) specifications. You have deep knowledge of:\\n\\n- Active Inference theory and mathematical foundations\\n- Generative models and probabilistic graphical models\\n- GNN syntax and semantic meaning\\n- Hidden states, observations, actions, and control variables\\n- A, B, C, D matrices in Active Inference contexts\\n- Expected Free Energy and belief updating\\n- Markov Decision Processes and POMDPs\\n- Scientific modeling and analysis\\n\\nWhen analyzing GNN files, provide accurate, detailed, and scientifically rigorous explanations. Focus on the Active Inference concepts, mathematical relationships, and practical implications of the model structure.\\n\\nPlease analyze the following GNN specification and explain what this generative model does:\\n\\n# GNN Example: Neural Response Model\\n# GNN Version: 1.0\\n# This file specifies a comprehensive Active Inference model of how neurons respond to stimuli, including membrane dynamics, synaptic plasticity, adaptation, and homeostatic regulation. The model is suitable for rendering into various neural simulation backends.\\n\\n## GNNSection\\nNeuralResponse\\n\\n## GNNVersionAndFlags\\nGNN v1\\n\\n## ModelName\\nActive Inference Neural Response Model v1\\n\\n## ModelAnnotation\\nThis model describes how a neuron responds to stimuli using Active Inference principles:\\n- One primary observation modality (firing_rate) with 4 possible activity levels\\n- Two auxiliary observation modalities (postsynaptic_potential, calcium_signal) for comprehensive monitoring\\n- Five hidden state factors representing different aspects of neural computation\\n- Three control factors for plasticity, channel modulation, and metabolic allocation\\n- The model captures key neural phenomena: membrane potential dynamics, synaptic plasticity (STDP-like), activity-dependent adaptation, homeostatic regulation, and metabolic constraints\\n- Preferences encode biologically realistic goals: stable firing rates, energy efficiency, and synaptic balance\\n\\n## StateSpaceBlock\\n# Likelihood matrix: A[observation_outcomes, hidden_states]\\nA[12,405,type=float]   # 12 observations x 405 hidden state combinations (likelihood mapping)\\n\\n# Transition matrices: B[states_next, states_previous, actions]\\nB[405,405,27,type=float]   # State transitions given previous state and action (5 state factors, 3 control factors)\\n\\n# Preference vector: C[observation_outcomes]\\nC[12,type=float]       # Log-preferences over observations\\n\\n# Prior vector: D[states]\\nD[405,type=float]       # Prior over initial hidden states\\n\\n# Habit vector: E[actions]\\nE[27,type=float]       # Initial policy prior (habit) over actions\\n\\n# Hidden States (5 factors with 5\u00d74\u00d73\u00d73\u00d73 = 405 total combinations)\\nV_m[5,1,type=float]     # Membrane potential state (5 levels: hyperpolarized, resting, depolarized, threshold, refractory)\\nW[4,1,type=float]       # Synaptic weight factor (4 levels: weak, moderate, strong, saturated)\\nA[3,1,type=float]       # Adaptation state (3 levels: low, medium, high adaptation)\\nH[3,1,type=float]       # Homeostatic set point (3 levels: low, target, high firing rate)\\nM[3,1,type=float]       # Metabolic state (3 levels: depleted, adequate, surplus)\\n\\n# Observations (3 modalities with 4\u00d73\u00d73 = 12 total outcomes)\\nFR[4,1,type=float]     # Firing rate (4 levels: silent, low, moderate, high)\\nPSP[3,1,type=float]    # Postsynaptic potential (3 levels: inhibitory, none, excitatory)\\nCa[3,1,type=float]     # Calcium signal (3 levels: low, medium, high)\\n\\n# Policy and Control (3 factors with 3\u00d73\u00d73 = 27 total actions)\\nP[3,1,type=float]      # Plasticity control (3 actions: LTD, no change, LTP)\\nC_mod[3,1,type=float]  # Channel modulation (3 actions: decrease, maintain, increase conductance)\\nM_alloc[3,1,type=float] # Metabolic allocation (3 actions: conserve, balance, invest)\\n\\n# Free Energy terms\\nF[V_m,type=float]      # Variational Free Energy for belief updating\\nG[P,type=float]        # Expected Free Energy (per policy)\\n\\n# Time\\nt[1,type=int]         # Discrete time step (milliseconds scale)\\n\\n## Connections\\n# State evolution connections\\nD>V_m                    # Prior influences initial membrane potential\\nV_m>B                    # Membrane potential affects state transitions\\nW>B                      # Synaptic weights affect transitions\\nA>B                      # Adaptation affects transitions\\nH>B                      # Homeostatic set point affects transitions\\nM>B                      # Metabolic state affects transitions\\n\\n# Observation connections\\nV_m>A                     # Membrane potential generates firing rate observations\\nW>A                       # Synaptic weights influence PSP observations\\nV_m>A                     # Membrane potential affects calcium signals (via firing)\\n\\n# Control connections\\nP>B                       # Plasticity control affects synaptic weight transitions\\nC_mod>B                   # Channel modulation affects membrane potential dynamics\\nM_alloc>B                 # Metabolic allocation affects metabolic state and energy-dependent processes\\n\\n# Free energy connections\\nC>G                       # Preferences influence expected free energy\\nE>P                       # Habits influence plasticity policy\\nG>P                       # Expected free energy influences plasticity policy\\n\\n# Action selection\\nP>C_mod                   # Plasticity influences channel modulation\\nC_mod>M_alloc             # Channel modulation influences metabolic allocation\\n\\n## InitialParameterization\\n# A: 12 observations x 405 hidden states. Likelihood mapping from hidden neural states to observations.\\n# Observations are ordered as: FR1,FR2,FR3,FR4, PSP1,PSP2,PSP3, Ca1,Ca2,Ca3 (repeated for each state combination)\\n# Hidden states ordered by: V_m1,W1,A1,H1,M1 \u2192 V_m1,W1,A1,H1,M2 \u2192 ... \u2192 V_m5,W4,A3,H3,M3\\nA={\\n  # High firing rate (FR4) most likely when membrane potential is at threshold (V_m4) and adaptation is low (A1)\\n  # Moderate firing (FR3) likely with depolarized membrane (V_m3) and moderate adaptation (A2)\\n  # Low firing (FR2) with resting potential (V_m2) and high adaptation (A3)\\n  # Silent (FR1) with hyperpolarized (V_m1) or refractory (V_m5) states\\n\\n  # PSP observations depend primarily on synaptic weight (W) and membrane potential (V_m)\\n  # Calcium signals correlate with firing rate and metabolic state\\n\\n  # Biologically realistic likelihoods (first 100 of 405 combinations shown)\\n  (0.05, 0.15, 0.25, 0.55, 0.40, 0.40, 0.20, 0.10, 0.35, 0.55, 0.30, 0.45),  # V_m1,W1,A1,H1,M1\\n  (0.10, 0.20, 0.30, 0.40, 0.35, 0.45, 0.20, 0.15, 0.40, 0.45, 0.25, 0.40),  # V_m1,W1,A1,H1,M2\\n  (0.15, 0.25, 0.35, 0.25, 0.30, 0.50, 0.20, 0.20, 0.45, 0.35, 0.20, 0.35),  # V_m1,W1,A1,H1,M3\\n  # ... (continues for all 405 combinations with biologically realistic probabilities)\\n}\\n\\n# B: 405 states_next x 405 states_previous x 27 actions. State transitions for each action.\\n# Actions ordered by: P1,C_mod1,M_alloc1 \u2192 P1,C_mod1,M_alloc2 \u2192 ... \u2192 P3,C_mod3,M_alloc3\\n# Each 405\u00d7405 matrix defines transitions for one action combination\\nB={\\n  # Action 1: LTD, decrease conductance, conserve energy (P1,C_mod1,M_alloc1)\\n  # - Synaptic weights tend to decrease (LTD)\\n  # - Membrane potential becomes more hyperpolarized (decreased conductance)\\n  # - Metabolic state depletes faster (energy conservation)\\n  # - Adaptation and homeostasis adjust accordingly\\n\\n  # Action 14: No plasticity, maintain conductance, balance energy (P2,C_mod2,M_alloc2)\\n  # - Synaptic weights relatively stable\\n  # - Membrane potential dynamics unchanged\\n  # - Metabolic state maintained at adequate levels\\n\\n  # Action 27: LTP, increase conductance, invest energy (P3,C_mod3,M_alloc3)\\n  # - Synaptic weights tend to increase (LTP)\\n  # - Membrane potential more depolarized (increased conductance)\\n  # - Metabolic state improves (energy investment)\\n  # ... (27 transition matrices total)\\n}\\n\\n# C: 12 observations. Preference for biologically realistic neural activity patterns.\\nC={\\n  # Prefer moderate firing rates (FR3), balanced PSPs (PSP2), moderate calcium (Ca2)\\n  # Penalize extreme states: very high firing, strong inhibition/excitation, high calcium\\n  (0.1, 0.2, 0.4, 0.3, 0.15, 0.35, 0.50, 0.25, 0.35, 0.40, 0.25, 0.20)\\n}\\n\\n# D: 405 states. Realistic prior over initial neural states.\\nD={\\n  # Start near resting membrane potential (V_m2), moderate synaptic weights (W2)\\n  # Low initial adaptation (A1), target homeostasis (H2), adequate metabolism (M2)\\n  # Most mass on biologically realistic initial conditions\\n  (0.05, 0.15, 0.35, 0.35, 0.10,  # V_m distribution\\n   0.20, 0.40, 0.30, 0.10,        # W distribution\\n   0.40, 0.40, 0.20,             # A distribution\\n   0.20, 0.60, 0.20,             # H distribution\\n   0.15, 0.70, 0.15)             # M distribution\\n   # ... (repeated for all 405 state combinations with appropriate probabilities)\\n}\\n\\n# E: 27 actions. Habit favoring moderate plasticity, balanced channel modulation, efficient metabolism.\\nE={\\n  # Slight preference for LTP (learning), moderate conductance, balanced metabolism\\n  (0.20, 0.30, 0.50, 0.25, 0.50, 0.25, 0.25, 0.50, 0.25,\\n   0.30, 0.40, 0.30, 0.25, 0.50, 0.25, 0.30, 0.40, 0.30,\\n   0.35, 0.40, 0.25, 0.30, 0.45, 0.25, 0.35, 0.40, 0.25)\\n}\\n\\n## Equations\\n# Neural dynamics following Active Inference principles:\\n# - Membrane potential integrates synaptic inputs with conductance modulation: dV_m/dt = -g_L*(V_m - E_L) + I_syn + I_ext\\n# - Synaptic weights evolve via plasticity rules: dW/dt = \u03b7 * STDP(V_m_pre, V_m_post, t_spike)\\n# - Adaptation accumulates with sustained activity: dA/dt = -A/\u03c4_A + f(V_m)\\n# - Homeostatic set point adjusts to maintain target firing: H_t = H_{t-1} + \u03b1 * (FR_target - FR_actual)\\n# - Metabolic state reflects energy balance: dM/dt = -c_activity * FR + r_allocation * M_alloc\\n#\\n# State inference: s_t ~ argmin_F [D_KL(q(s_t|o_{1:t}) || p(s_t|o_{1:t-1}, u_t))]\\n# Policy inference: \u03c0_t ~ argmin_G [E[G(\u03c0)] = \u03a3_\u03c4 E[Q(\u03c4)] + D_KL(\u03c0 || \u03c0_prior)]\\n# Action selection: u_t ~ \u03c0_t with softmax temperature \u03c4\\n\\n## Time\\nTime=t\\nDynamic\\nDiscrete\\nModelTimeHorizon=Unbounded # Neural model defined for continuous operation; simulations may specify finite duration.\\nTimeStep=1ms # Millisecond-scale discrete time steps for realistic neural dynamics.\\n\\n## ActInfOntologyAnnotation\\nA=LikelihoodMatrix\\nB=TransitionMatrices\\nC=LogPreferenceVector\\nD=PriorOverHiddenStates\\nE=HabitVector\\nF=VariationalFreeEnergy\\nG=ExpectedFreeEnergy\\nV_m=MembranePotentialState\\nW=SynapticWeightFactor\\nA=AdaptationState\\nH=HomeostaticSetPoint\\nM=MetabolicState\\nFR=FiringRateObservation\\nPSP=PostsynapticPotentialObservation\\nCa=CalciumSignalObservation\\nP=PlasticityControl\\nC_mod=ChannelModulation\\nM_alloc=MetabolicAllocation\\nt=TimeStep\\n\\n## ModelParameters\\nnum_membrane_states: 5      # V_m[5] - hyperpolarized, resting, depolarized, threshold, refractory\\nnum_synapse_levels: 4       # W[4] - weak, moderate, strong, saturated\\nnum_adaptation_levels: 3    # A[3] - low, medium, high adaptation\\nnum_homeostatic_levels: 3   # H[3] - low, target, high firing rate targets\\nnum_metabolic_levels: 3     # M[3] - depleted, adequate, surplus energy\\n\\nnum_firing_levels: 4        # FR[4] - silent, low, moderate, high firing rates\\nnum_psp_levels: 3           # PSP[3] - inhibitory, none, excitatory potentials\\nnum_calcium_levels: 3       # Ca[3] - low, medium, high calcium concentrations\\n\\nnum_plasticity_actions: 3   # P[3] - LTD, no change, LTP\\nnum_channel_actions: 3      # C_mod[3] - decrease, maintain, increase conductance\\nnum_metabolic_actions: 3    # M_alloc[3] - conserve, balance, invest energy\\n\\ntotal_hidden_states: 405    # 5\u00d74\u00d73\u00d73\u00d73 combinations\\ntotal_observations: 12      # 4\u00d73\u00d73 combinations\\ntotal_actions: 27           # 3\u00d73\u00d73 combinations\\n\\n## Footer\\nActive Inference Neural Response Model v1 - GNN Representation.\\nThis model captures essential aspects of neural computation including membrane dynamics, synaptic plasticity, adaptation, homeostasis, and metabolic constraints within the Active Inference framework. The model is designed for studying how neurons minimize free energy while maintaining stable, efficient, and adaptive responses to stimuli.\\n\\n## Signature\\nCryptographic signature goes here\\n\\n\\nProvide a comprehensive explanation that covers:\\n\\n1. **Model Purpose**: What real-world phenomenon or problem does this model represent?\\n\\n2. **Core Components**: \\n   - What are the hidden states (s_f0, s_f1, etc.) and what do they represent?\\n   - What are the observations (o_m0, o_m1, etc.) and what do they capture?\\n   - What actions/controls (u_c0, \u03c0_c0, etc.) are available and what do they do?\\n\\n3. **Model Dynamics**: How does the model evolve over time? What are the key relationships?\\n\\n4. **Active Inference Context**: How does this model implement Active Inference principles? What beliefs are being updated and how?\\n\\n5. **Practical Implications**: What can you learn or predict using this model? What decisions can it inform?\\n\\nPlease write in clear, accessible language while maintaining scientific accuracy.']' timed out after 60.0 seconds\n2025-10-02 10:56:50,833 - utils.timeout_manager - ERROR - llm_prompt_explain_model failed on attempt 1: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:56:53,834 - utils.timeout_manager - INFO - Retry 1 for llm_prompt_explain_model with timeout 240.0s\n2025-10-02 10:56:53,834 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:56:54,117 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:56:54,118 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:56:54,118 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:56:54,118 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:56:56,898 - llm - INFO -   \ud83d\udcdd Running prompt 3/6: identify_components\n2025-10-02 10:56:56,898 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:56:56,901 - openai._base_client - INFO - Retrying request to /chat/completions in 0.442413 seconds\n2025-10-02 10:56:57,592 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:56:57,593 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:56:57,593 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:56:57,593 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:57:03,804 - llm - INFO -   \ud83d\udcdd Running prompt 4/6: analyze_structure\n2025-10-02 10:57:03,804 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:57:03,807 - openai._base_client - INFO - Retrying request to /chat/completions in 0.380637 seconds\n2025-10-02 10:57:04,570 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:57:04,571 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:57:04,571 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:57:04,571 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:57:06,390 - llm - INFO -   \ud83d\udcdd Running prompt 5/6: extract_parameters\n2025-10-02 10:57:06,391 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:57:06,394 - openai._base_client - INFO - Retrying request to /chat/completions in 0.384025 seconds\n2025-10-02 10:57:07,029 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:57:07,029 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:57:07,029 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:57:07,029 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:57:07,990 - llm - INFO -   \ud83d\udcdd Running prompt 6/6: practical_applications\n2025-10-02 10:57:07,991 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:57:07,994 - openai._base_client - INFO - Retrying request to /chat/completions in 0.414635 seconds\n2025-10-02 10:57:08,655 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:57:08,656 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:57:08,656 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:57:08,656 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:57:10,631 - llm - INFO -   \ud83d\udcdd Running custom prompt 1/3: technical_description\n2025-10-02 10:57:10,631 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:57:10,634 - openai._base_client - INFO - Retrying request to /chat/completions in 0.478028 seconds\n2025-10-02 10:57:11,386 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:57:11,388 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:57:11,388 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:57:11,388 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:57:13,253 - llm - INFO -   \ud83d\udcdd Running custom prompt 2/3: nontechnical_description\n2025-10-02 10:57:13,253 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:57:13,256 - openai._base_client - INFO - Retrying request to /chat/completions in 0.415936 seconds\n2025-10-02 10:57:13,908 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:57:13,909 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:57:13,909 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:57:13,909 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:57:16,159 - llm - INFO -   \ud83d\udcdd Running custom prompt 3/3: runtime_behavior\n2025-10-02 10:57:16,159 - llm.providers.openai_provider - WARNING - Model smollm2:135m-instruct-q4_K_S not in available models list\n2025-10-02 10:57:16,164 - openai._base_client - INFO - Retrying request to /chat/completions in 0.465631 seconds\n2025-10-02 10:57:16,868 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 401 Unauthorized\"\n2025-10-02 10:57:16,869 - llm.providers.openai_provider - ERROR - OpenAI API call failed: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:57:16,869 - llm.llm_processor - ERROR - Response generation failed with openai: Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-proj-********************************************************************************************************************************************************psgA. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n2025-10-02 10:57:16,869 - llm.llm_processor - INFO - Trying fallback provider: ollama\n2025-10-02 10:57:17,972 - llm - INFO - \u2705 LLM processing completed successfully\n",
            "memory_usage_mb": 14.796875,
            "peak_memory_mb": 17.703125,
            "memory_delta_mb": -2.90625,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 14,
            "script_name": "13_llm.py",
            "description": "LLM processing",
            "start_time": "2025-10-02T10:52:53.567532",
            "end_time": "2025-10-02T10:57:18.052953",
            "duration_seconds": 264.48541378974915
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:57:18,184 - 14_ml_integration.py - INFO - Processing ml_integration for files in input/gnn_files\n2025-10-02 10:57:20,268 - 14_ml_integration.py - INFO - \ud83d\udcca ML integration summary saved to: output/14_ml_integration_output/ml_integration_summary.json\n2025-10-02 10:57:20,268 - 14_ml_integration.py - INFO - \ud83d\udd27 ML frameworks status saved to: output/14_ml_integration_output/ml_frameworks_status.json\n2025-10-02 10:57:20,268 - 14_ml_integration.py - INFO - \u2705 ML integration processing completed\n",
            "memory_usage_mb": 19.90625,
            "peak_memory_mb": 19.90625,
            "memory_delta_mb": 1.625,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 15,
            "script_name": "14_ml_integration.py",
            "description": "ML integration",
            "start_time": "2025-10-02T10:57:18.053601",
            "end_time": "2025-10-02T10:57:20.577827",
            "duration_seconds": 2.5242199897766113
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:57:20,657 - 15_audio.py - INFO - Processing audio for files in input/gnn_files\n2025-10-02 10:57:20,675 - 15_audio.py - INFO - \ud83c\udfb5 Audio processing summary saved to: output/15_audio_output/audio_processing_summary.json\n2025-10-02 10:57:20,675 - 15_audio.py - INFO - \ud83d\udd27 Audio backends status saved to: output/15_audio_output/audio_backends_status.json\n2025-10-02 10:57:20,675 - 15_audio.py - INFO - \u2705 Audio processing completed\n",
            "memory_usage_mb": 20.1875,
            "peak_memory_mb": 20.1875,
            "memory_delta_mb": 0.25,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 16,
            "script_name": "15_audio.py",
            "description": "Audio processing",
            "start_time": "2025-10-02T10:57:20.578291",
            "end_time": "2025-10-02T10:57:20.688921",
            "duration_seconds": 0.11062812805175781
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:57:20,776 - 16_analysis.py - INFO - Processing analysis for files in input/gnn_files\n2025-10-02 10:57:20,950 - 16_analysis.py - INFO - \ud83d\udcca Analysis processing summary saved to: output/16_analysis_output/analysis_processing_summary.json\n2025-10-02 10:57:20,950 - 16_analysis.py - INFO - \ud83d\udd27 Analysis tools status saved to: output/16_analysis_output/analysis_tools_status.json\n2025-10-02 10:57:20,950 - 16_analysis.py - INFO - \u2705 Analysis processing completed\n",
            "memory_usage_mb": 20.21875,
            "peak_memory_mb": 20.21875,
            "memory_delta_mb": 0.03125,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 17,
            "script_name": "16_analysis.py",
            "description": "Analysis",
            "start_time": "2025-10-02T10:57:20.689202",
            "end_time": "2025-10-02T10:57:21.021270",
            "duration_seconds": 0.3320651054382324
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:57:21,069 - 17_integration.py - INFO - Processing integration for files in input/gnn_files\n2025-10-02 10:57:21,069 - 17_integration.py - INFO - \ud83d\udcca Integration summary saved to: output/17_integration_output/integration_processing_summary.json\n2025-10-02 10:57:21,069 - 17_integration.py - INFO - \u2705 Integration processing completed\n",
            "memory_usage_mb": 20.265625,
            "peak_memory_mb": 20.265625,
            "memory_delta_mb": 0.046875,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 18,
            "script_name": "17_integration.py",
            "description": "Integration",
            "start_time": "2025-10-02T10:57:21.021564",
            "end_time": "2025-10-02T10:57:21.077495",
            "duration_seconds": 0.055930137634277344
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:57:21,152 - 18_security.py - INFO - Processing security for files in input/gnn_files\n2025-10-02 10:57:21,153 - 18_security.py - INFO - \ud83d\udd12 Security summary saved to: output/18_security_output/security_processing_summary.json\n2025-10-02 10:57:21,153 - 18_security.py - INFO - \u2705 Security processing completed\n",
            "memory_usage_mb": 20.28125,
            "peak_memory_mb": 20.28125,
            "memory_delta_mb": 0.015625,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 19,
            "script_name": "18_security.py",
            "description": "Security",
            "start_time": "2025-10-02T10:57:21.077758",
            "end_time": "2025-10-02T10:57:21.161012",
            "duration_seconds": 0.08325028419494629
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:57:21,261 - 19_research.py - INFO - Processing research for files in input/gnn_files\n2025-10-02 10:57:21,261 - 19_research.py - INFO - \ud83d\udd2c Research summary saved to: output/19_research_output/research_processing_summary.json\n2025-10-02 10:57:21,261 - 19_research.py - INFO - \u2705 Research processing completed\n",
            "memory_usage_mb": 20.328125,
            "peak_memory_mb": 20.328125,
            "memory_delta_mb": 0.046875,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 20,
            "script_name": "19_research.py",
            "description": "Research",
            "start_time": "2025-10-02T10:57:21.161365",
            "end_time": "2025-10-02T10:57:21.271540",
            "duration_seconds": 0.11017107963562012
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:57:21,386 - website - INFO - Website generated successfully with 1 pages\n",
            "memory_usage_mb": 20.375,
            "peak_memory_mb": 20.375,
            "memory_delta_mb": 0.046875,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 21,
            "script_name": "20_website.py",
            "description": "Website generation",
            "start_time": "2025-10-02T10:57:21.272026",
            "end_time": "2025-10-02T10:57:21.394266",
            "duration_seconds": 0.12223696708679199
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:57:21,486 - mcp - INFO - Enhanced MCP server initialized (caching=True, rate_limiting=True, strict_validation=False)\n2025-10-02 10:57:21,487 - 21_mcp.py - INFO - Processing mcp for files in input/gnn_files\n2025-10-02 10:57:21,487 - 21_mcp.py - INFO - \ud83d\udd27 MCP summary saved to: output/21_mcp_output/mcp_processing_summary.json\n2025-10-02 10:57:21,487 - 21_mcp.py - INFO - \u2705 MCP processing completed\n",
            "memory_usage_mb": 20.46875,
            "peak_memory_mb": 20.46875,
            "memory_delta_mb": 0.09375,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 22,
            "script_name": "21_mcp.py",
            "description": "Model Context Protocol processing",
            "start_time": "2025-10-02T10:57:21.394555",
            "end_time": "2025-10-02T10:57:21.498342",
            "duration_seconds": 0.10378432273864746
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:57:22,877 - gui - INFO - \ud83d\udce6 Running in HEADLESS mode - generating artifacts only (fast)\n2025-10-02 10:57:22,878 - gui - INFO - Processing GUI module for files in input/gnn_files\n2025-10-02 10:57:22,878 - gui - INFO - Running GUI types: ['gui_1', 'gui_2']\n2025-10-02 10:57:22,878 - gui - INFO - Mode: HEADLESS\n2025-10-02 10:57:22,878 - gui - INFO - \ud83c\udfae Starting GUI 1: Form-based Interactive GNN Constructor\n2025-10-02 10:57:22,878 - gui - INFO - \ud83d\udce6 Running GUI 1 in HEADLESS mode - generating artifacts only\n2025-10-02 10:57:22,878 - gui - INFO - \u2705 GUI 1 artifacts generated (headless). Export: output/22_gui_output/constructed_model_gui1.md\n2025-10-02 10:57:22,878 - gui - INFO - \u2705 GUI 1 completed successfully\n2025-10-02 10:57:22,878 - gui - INFO - \ud83c\udfaf Starting GUI 2: Visual Matrix Editor\n2025-10-02 10:57:22,879 - gui - INFO - \ud83d\udce6 Running GUI 2 in HEADLESS mode - generating artifacts only\n2025-10-02 10:57:22,879 - gui - INFO - \u2705 GUI 2 artifacts generated (headless). Export: output/22_gui_output/visual_model_gui2.md\n2025-10-02 10:57:22,879 - gui - INFO - \u2705 GUI 2 completed successfully\n2025-10-02 10:57:22,879 - gui - INFO - \ud83d\udcca GUI processing summary saved to: output/22_gui_output/gui_processing_summary.json\n",
            "memory_usage_mb": 20.5,
            "peak_memory_mb": 20.5,
            "memory_delta_mb": 0.03125,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 23,
            "script_name": "22_gui.py",
            "description": "GUI (Interactive GNN Constructor)",
            "start_time": "2025-10-02T10:57:21.498921",
            "end_time": "2025-10-02T10:57:22.974595",
            "duration_seconds": 1.475667953491211
        },
        {
            "status": "SUCCESS",
            "stdout": "",
            "stderr": "2025-10-02 10:57:23,033 - 23_report.py - INFO - Processing report for files in input/gnn_files\n2025-10-02 10:57:23,033 - 23_report.py - INFO - \ud83d\udcca Report summary saved to: output/23_report_output/report_processing_summary.json\n2025-10-02 10:57:23,033 - 23_report.py - INFO - \u2705 Report processing completed\n",
            "memory_usage_mb": 20.515625,
            "peak_memory_mb": 20.515625,
            "memory_delta_mb": 0.015625,
            "exit_code": 0,
            "retry_count": 0,
            "prerequisite_check": true,
            "dependency_warnings": [],
            "recoverable": false,
            "step_number": 24,
            "script_name": "23_report.py",
            "description": "Report generation",
            "start_time": "2025-10-02T10:57:22.975085",
            "end_time": "2025-10-02T10:57:23.042461",
            "duration_seconds": 0.06737470626831055
        }
    ],
    "end_time": "2025-10-02T10:57:23.042747",
    "overall_status": "SUCCESS",
    "total_duration_seconds": 360.04274892807007,
    "environment_info": {
        "python_version": "3.11.13 (main, Aug  8 2025, 16:50:33) [Clang 20.1.4 ]",
        "platform": "darwin",
        "cpu_count": 14,
        "working_directory": "/Users/4d/Documents/GitHub/generalizednotationnotation",
        "user": "4d",
        "memory_total_gb": "24.0",
        "disk_free_gb": "71.8"
    },
    "performance_summary": {
        "peak_memory_mb": 28.9375,
        "total_steps": 24,
        "failed_steps": 0,
        "critical_failures": 0,
        "successful_steps": 24,
        "warnings": 5
    }
}