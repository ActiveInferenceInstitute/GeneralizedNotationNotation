{
    "start_time": "2025-05-28T05:51:02.895711",
    "arguments": {
        "target_dir": "/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples",
        "output_dir": "/home/trim/Documents/GitHub/GeneralizedNotationNotation/output",
        "recursive": true,
        "skip_steps": "",
        "only_steps": "7",
        "verbose": true,
        "strict": false,
        "estimate_resources": true,
        "ontology_terms_file": "/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/ontology/act_inf_ontology_terms.json",
        "llm_tasks": "all",
        "llm_timeout": 60,
        "pipeline_summary_file": "/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/pipeline_execution_summary.json",
        "site_html_filename": "gnn_pipeline_summary_site.html",
        "discopy_gnn_input_dir": null,
        "discopy_jax_gnn_input_dir": null,
        "discopy_jax_seed": 0
    },
    "steps": [
        {
            "step_number": 1,
            "script_name": "1_gnn",
            "status": "SKIPPED",
            "start_time": null,
            "end_time": null,
            "duration_seconds": null,
            "details": "Skipped due to --only-steps filter.",
            "stdout": "",
            "stderr": ""
        },
        {
            "step_number": 2,
            "script_name": "2_setup",
            "status": "SKIPPED",
            "start_time": null,
            "end_time": null,
            "duration_seconds": null,
            "details": "Skipped due to --only-steps filter.",
            "stdout": "",
            "stderr": ""
        },
        {
            "step_number": 3,
            "script_name": "3_tests",
            "status": "SKIPPED",
            "start_time": null,
            "end_time": null,
            "duration_seconds": null,
            "details": "Skipped due to --only-steps filter.",
            "stdout": "",
            "stderr": ""
        },
        {
            "step_number": 4,
            "script_name": "4_gnn_type_checker",
            "status": "SKIPPED",
            "start_time": null,
            "end_time": null,
            "duration_seconds": null,
            "details": "Skipped due to --only-steps filter.",
            "stdout": "",
            "stderr": ""
        },
        {
            "step_number": 5,
            "script_name": "5_export",
            "status": "SKIPPED",
            "start_time": null,
            "end_time": null,
            "duration_seconds": null,
            "details": "Skipped due to --only-steps filter.",
            "stdout": "",
            "stderr": ""
        },
        {
            "step_number": 6,
            "script_name": "6_visualization",
            "status": "SKIPPED",
            "start_time": null,
            "end_time": null,
            "duration_seconds": null,
            "details": "Skipped due to --only-steps filter.",
            "stdout": "",
            "stderr": ""
        },
        {
            "step_number": 7,
            "script_name": "7_mcp",
            "status": "SUCCESS",
            "start_time": "2025-05-28T05:51:02.896151",
            "end_time": "2025-05-28T05:51:05.596213",
            "duration_seconds": 2.700062,
            "details": "",
            "stdout": "",
            "stderr": "WARNING:root:Could not directly import MCPTool from src.mcp. This might be okay if loaded by the main MCP system.\nERROR:mcp:Failed to load MCP module src.site.mcp: cannot import name 'MCPSchema' from 'src.mcp.mcp' (/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/mcp/mcp.py)\nDEBUG:__main__:Logger '__main__' level set to DEBUG by setup_standalone_logging.\nDEBUG:__main__:Verbose logging enabled for standalone run of 7_mcp.py, including core MCP modules.\nDEBUG:__main__:Script logger '__main__' level set to DEBUG.\nINFO:__main__:\u25b6\ufe0f  Starting Step 7: MCP Operations (7_mcp.py)\nDEBUG:__main__:  Parsing options (from main.py or standalone):\nDEBUG:__main__:    Effective MCP Core Directory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/mcp\nDEBUG:__main__:    Effective Project Source Root (for module scanning): /home/trim/Documents/GitHub/GeneralizedNotationNotation/src\nDEBUG:__main__:    Output directory for MCP report: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output\nDEBUG:__main__:    Verbose: True\nDEBUG:__main__:Set logger 'mcp' to DEBUG for MCP operations.\nINFO:__main__:    \ud83d\ude80 Initializing MCP system to load registered tool descriptions...\nDEBUG:mcp:MCP modules already discovered. Skipping redundant discovery.\nINFO:mcp:MCP system initialized using project's internal MCP components. SDK Status: Using project's internal MCP implementation.\nINFO:__main__:    \u2705 MCP system initialization process completed successfully (SDK status OK, all modules loaded).\nINFO:__main__:  \ud83d\udd0e Processing MCP integration checks and method discovery...\nDEBUG:__main__:    \ud83d\udcd6 MCP Core Directory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/mcp\nDEBUG:__main__:    \ud83c\udfd7\ufe0f Project Source Root for modules: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src\nDEBUG:__main__:    Checking for core MCP files...\nDEBUG:__main__:      \ud83d\udcd6 Core MCP file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/mcp/mcp.py (20304 bytes)\nDEBUG:__main__:      \ud83d\udcd6 Core MCP file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/mcp/meta_mcp.py (4954 bytes)\nDEBUG:__main__:      \ud83d\udcd6 Core MCP file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/mcp/cli.py (4644 bytes)\nDEBUG:__main__:      \ud83d\udcd6 Core MCP file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/mcp/server_stdio.py (7620 bytes)\nDEBUG:__main__:      \ud83d\udcd6 Core MCP file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/mcp/server_http.py (7731 bytes)\nDEBUG:__main__:      Processing module: export\nDEBUG:__main__:        \u2705 MCP integration file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/export/mcp.py (7976 bytes)\nDEBUG:__main__:          Found registered MCP tool: export_gnn_to_json(gnn_file_path, output_file_path) - Description: Exports a GNN model to JSON format.\nDEBUG:__main__:          Found registered MCP tool: export_gnn_to_xml(gnn_file_path, output_file_path) - Description: Exports a GNN model to XML format.\nDEBUG:__main__:          Found registered MCP tool: export_gnn_to_plaintext_summary(gnn_file_path, output_file_path) - Description: Exports a GNN model to a human-readable plain text summary.\nDEBUG:__main__:          Found registered MCP tool: export_gnn_to_plaintext_dsl(gnn_file_path, output_file_path) - Description: Exports a GNN model back to its GNN DSL plain text format.\nDEBUG:__main__:          Found registered MCP tool: export_gnn_to_gexf(gnn_file_path, output_file_path) - Description: Exports a GNN model to GEXF graph format (requires NetworkX).\nDEBUG:__main__:          Found registered MCP tool: export_gnn_to_graphml(gnn_file_path, output_file_path) - Description: Exports a GNN model to GraphML graph format (requires NetworkX).\nDEBUG:__main__:          Found registered MCP tool: export_gnn_to_json_adjacency_list(gnn_file_path, output_file_path) - Description: Exports a GNN model to JSON Adjacency List graph format (requires NetworkX).\nDEBUG:__main__:          Found registered MCP tool: export_gnn_to_python_pickle(gnn_file_path, output_file_path) - Description: Serializes a GNN model to a Python pickle file.\nDEBUG:__main__:      \ud83d\udc0d Parsing for MCP methods in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/export/mcp.py\nDEBUG:__main__:        Found method: _handle_export(export_func, gnn_file_path, output_file_path, format_name, requires_nx) - \"Generic helper to run an export function and handle common exceptions.\"...\nDEBUG:__main__:        Found method: export_gnn_to_json_mcp(gnn_file_path, output_file_path) - \"\"...\nDEBUG:__main__:        Found method: export_gnn_to_xml_mcp(gnn_file_path, output_file_path) - \"\"...\nDEBUG:__main__:        Found method: export_gnn_to_plaintext_summary_mcp(gnn_file_path, output_file_path) - \"\"...\nDEBUG:__main__:        Found method: export_gnn_to_plaintext_dsl_mcp(gnn_file_path, output_file_path) - \"\"...\nDEBUG:__main__:        Found method: export_gnn_to_gexf_mcp(gnn_file_path, output_file_path) - \"\"...\nDEBUG:__main__:        Found method: export_gnn_to_graphml_mcp(gnn_file_path, output_file_path) - \"\"...\nDEBUG:__main__:        Found method: export_gnn_to_json_adjacency_list_mcp(gnn_file_path, output_file_path) - \"\"...\nDEBUG:__main__:        Found method: export_gnn_to_python_pickle_mcp(gnn_file_path, output_file_path) - \"\"...\nDEBUG:__main__:        Found method: register_tools(mcp_instance) - \"Registers all GNN export tools with the MCP instance.\"...\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): _handle_export(export_func, gnn_file_path, output_file_path, format_name, requires_nx) - Docstring: Generic helper to run an export function and handle common exceptions.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): export_gnn_to_json_mcp(gnn_file_path, output_file_path) - Docstring: \nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): export_gnn_to_xml_mcp(gnn_file_path, output_file_path) - Docstring: \nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): export_gnn_to_plaintext_summary_mcp(gnn_file_path, output_file_path) - Docstring: \nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): export_gnn_to_plaintext_dsl_mcp(gnn_file_path, output_file_path) - Docstring: \nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): export_gnn_to_gexf_mcp(gnn_file_path, output_file_path) - Docstring: \nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): export_gnn_to_graphml_mcp(gnn_file_path, output_file_path) - Docstring: \nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): export_gnn_to_json_adjacency_list_mcp(gnn_file_path, output_file_path) - Docstring: \nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): export_gnn_to_python_pickle_mcp(gnn_file_path, output_file_path) - Docstring: \nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): register_tools(mcp_instance) - Docstring: Registers all GNN export tools with the MCP instance.\nDEBUG:__main__:      Processing module: gnn\nDEBUG:__main__:        \u2705 MCP integration file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/mcp.py (4122 bytes)\nDEBUG:__main__:          Found registered MCP tool: get_gnn_documentation(doc_name) - Description: Retrieve the content of a GNN core documentation file (e.g., syntax, file structure).\nDEBUG:__main__:      \ud83d\udc0d Parsing for MCP methods in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/mcp.py\nDEBUG:__main__:        Found method: get_gnn_documentation(doc_name) - \"Retrieve content of a GNN documentation file.\"...\nDEBUG:__main__:        Found method: _retrieve_gnn_doc_resource(uri) - \"Retrieve GNN documentation resource by URI.\"...\nDEBUG:__main__:        Found method: register_tools(mcp_instance) - \"Register GNN documentation tools and resources with the MCP.\"...\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): _retrieve_gnn_doc_resource(uri) - Docstring: Retrieve GNN documentation resource by URI.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): register_tools(mcp_instance) - Docstring: Register GNN documentation tools and resources with the MCP.\nDEBUG:__main__:      Processing module: gnn_type_checker\nDEBUG:__main__:        \u2705 MCP integration file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn_type_checker/mcp.py (10921 bytes)\nDEBUG:__main__:          Found registered MCP tool: type_check_gnn_file(file_path) - Description: Runs the GNN type checker on a specified GNN model file.\nDEBUG:__main__:          Found registered MCP tool: type_check_gnn_directory(dir_path, recursive, output_dir_base, report_md_filename) - Description: Runs the GNN type checker on all GNN files in a specified directory. If output_dir_base is provided, reports are generated.\nDEBUG:__main__:          Found registered MCP tool: estimate_resources_for_gnn_file(file_path) - Description: Estimates computational resources (memory, inference, storage) for a GNN model file.\nDEBUG:__main__:          Found registered MCP tool: estimate_resources_for_gnn_directory(dir_path, recursive) - Description: Estimates computational resources for all GNN files in a specified directory.\nDEBUG:__main__:      \ud83d\udc0d Parsing for MCP methods in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn_type_checker/mcp.py\nDEBUG:__main__:        Found method: type_check_gnn_file_mcp(file_path) - \"Run the GNN type checker on a single GNN file. Exposed via MCP.\"...\nDEBUG:__main__:        Found method: type_check_gnn_directory_mcp(dir_path, recursive, output_dir_base, report_md_filename) - \"Run the GNN type checker on all GNN files in a directory. Exposed via MCP.\"...\nDEBUG:__main__:        Found method: estimate_resources_for_gnn_file_mcp(file_path) - \"Estimate computational resources for a single GNN file. Exposed via MCP.\"...\nDEBUG:__main__:        Found method: estimate_resources_for_gnn_directory_mcp(dir_path, recursive) - \"Estimate resources for all GNN files in a directory. Exposed via MCP.\"...\nDEBUG:__main__:        Found method: register_tools(mcp_instance) - \"Register GNN type checker and resource estimator tools with the MCP.\"...\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): type_check_gnn_file_mcp(file_path) - Docstring: Run the GNN type checker on a single GNN file. Exposed via MCP.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): type_check_gnn_directory_mcp(dir_path, recursive, output_dir_base, report_md_filename) - Docstring: Run the GNN type checker on all GNN files in a directory. Exposed via MCP.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): estimate_resources_for_gnn_file_mcp(file_path) - Docstring: Estimate computational resources for a single GNN file. Exposed via MCP.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): estimate_resources_for_gnn_directory_mcp(dir_path, recursive) - Docstring: Estimate resources for all GNN files in a directory. Exposed via MCP.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): register_tools(mcp_instance) - Docstring: Register GNN type checker and resource estimator tools with the MCP.\nDEBUG:__main__:      Processing module: ontology\nDEBUG:__main__:        \u2705 MCP integration file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/ontology/mcp.py (13473 bytes)\nDEBUG:__main__:      \ud83d\udc0d Parsing for MCP methods in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/ontology/mcp.py\nDEBUG:__main__:        Found method: get_mcp_interface() - \"Returns the MCP interface for the Ontology module.\"...\nDEBUG:__main__:        Found method: parse_gnn_ontology_section(gnn_file_content, verbose) - \"Parses the 'ActInfOntologyAnnotation' section from GNN file content.\"...\nDEBUG:__main__:        Found method: load_defined_ontology_terms(ontology_terms_path, verbose) - \"Loads defined ontological terms from a JSON file.\"...\nDEBUG:__main__:        Found method: validate_annotations(parsed_annotations, defined_terms, verbose) - \"Validates parsed GNN annotations against a set of defined ontological terms.\"...\nDEBUG:__main__:        Found method: generate_ontology_report_for_file(gnn_file_path, parsed_annotations, validation_results) - \"Generates a markdown formatted report string for a single GNN file's ontology annotations.\"...\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): get_mcp_interface() - Docstring: Returns the MCP interface for the Ontology module.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): parse_gnn_ontology_section(gnn_file_content, verbose) - Docstring: Parses the 'ActInfOntologyAnnotation' section from GNN file content.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): load_defined_ontology_terms(ontology_terms_path, verbose) - Docstring: Loads defined ontological terms from a JSON file.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): validate_annotations(parsed_annotations, defined_terms, verbose) - Docstring: Validates parsed GNN annotations against a set of defined ontological terms.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): generate_ontology_report_for_file(gnn_file_path, parsed_annotations, validation_results) - Docstring: Generates a markdown formatted report string for a single GNN file's ontology annotations.\nDEBUG:__main__:      Processing module: setup\nDEBUG:__main__:        \u2705 MCP integration file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/setup/mcp.py (4257 bytes)\nDEBUG:__main__:          Found registered MCP tool: ensure_directory_exists(directory_path) - Description: Ensures a directory exists, creating it if necessary. Returns the absolute path.\nDEBUG:__main__:          Found registered MCP tool: find_project_gnn_files(search_directory, recursive) - Description: Finds all GNN (.md) files in a specified directory within the project.\nDEBUG:__main__:          Found registered MCP tool: get_standard_output_paths(base_output_directory) - Description: Gets a dictionary of standard output directory paths (e.g., for type_check, visualization), creating them if needed.\nDEBUG:__main__:      \ud83d\udc0d Parsing for MCP methods in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/setup/mcp.py\nDEBUG:__main__:        Found method: ensure_directory_exists_mcp(directory_path) - \"Ensure a directory exists, creating it if necessary. Exposed via MCP.\"...\nDEBUG:__main__:        Found method: find_project_gnn_files_mcp(search_directory, recursive) - \"Find all GNN (.md) files in a directory. Exposed via MCP.\"...\nDEBUG:__main__:        Found method: get_standard_output_paths_mcp(base_output_directory) - \"Get standard output paths for the pipeline. Exposed via MCP.\"...\nDEBUG:__main__:        Found method: register_tools(mcp_instance) - \"Register setup utility tools with the MCP.\"...\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): ensure_directory_exists_mcp(directory_path) - Docstring: Ensure a directory exists, creating it if necessary. Exposed via MCP.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): find_project_gnn_files_mcp(search_directory, recursive) - Docstring: Find all GNN (.md) files in a directory. Exposed via MCP.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): get_standard_output_paths_mcp(base_output_directory) - Docstring: Get standard output paths for the pipeline. Exposed via MCP.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): register_tools(mcp_instance) - Docstring: Register setup utility tools with the MCP.\nDEBUG:__main__:      Processing module: tests\nDEBUG:__main__:        \u2705 MCP integration file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/tests/mcp.py (7083 bytes)\nDEBUG:__main__:          Found registered MCP tool: run_gnn_type_checker(file_path) - Description: Run the GNN type checker on a specific file (via test module).\nDEBUG:__main__:          Found registered MCP tool: run_gnn_type_checker_on_directory(dir_path, report_file) - Description: Run the GNN type checker on all GNN files in a directory (via test module).\nDEBUG:__main__:          Found registered MCP tool: run_gnn_unit_tests() - Description: Run the GNN unit tests and return results.\nDEBUG:__main__:      \ud83d\udc0d Parsing for MCP methods in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/tests/mcp.py\nDEBUG:__main__:        Found method: run_type_checker_on_file(file_path) - \"Run the GNN type checker on a file.\"...\nDEBUG:__main__:        Found method: run_type_checker_on_directory(dir_path, report_file) - \"Run the GNN type checker on a directory of files.\"...\nDEBUG:__main__:        Found method: run_unit_tests() - \"Run the GNN unit tests.\"...\nDEBUG:__main__:        Found method: get_test_report(uri) - \"Retrieve a test report by URI.\"...\nDEBUG:__main__:        Found method: register_tools(mcp) - \"Register test tools with the MCP.\"...\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): run_type_checker_on_file(file_path) - Docstring: Run the GNN type checker on a file.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): run_type_checker_on_directory(dir_path, report_file) - Docstring: Run the GNN type checker on a directory of files.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): run_unit_tests() - Docstring: Run the GNN unit tests.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): get_test_report(uri) - Docstring: Retrieve a test report by URI.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): register_tools(mcp) - Docstring: Register test tools with the MCP.\nDEBUG:__main__:      Processing module: visualization\nDEBUG:__main__:        \u2705 MCP integration file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/visualization/mcp.py (5934 bytes)\nDEBUG:__main__:          Found registered MCP tool: visualize_gnn_file(file_path, output_dir) - Description: Generate visualizations for a specific GNN file.\nDEBUG:__main__:          Found registered MCP tool: visualize_gnn_directory(dir_path, output_dir) - Description: Visualize all GNN files in a directory\nDEBUG:__main__:          Found registered MCP tool: parse_gnn_file(file_path) - Description: Parse a GNN file without visualization\nDEBUG:__main__:      \ud83d\udc0d Parsing for MCP methods in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/visualization/mcp.py\nDEBUG:__main__:        Found method: visualize_file(file_path, output_dir) - \"Visualize a GNN file through MCP.\"...\nDEBUG:__main__:        Found method: visualize_directory(dir_path, output_dir) - \"Visualize all GNN files in a directory through MCP.\"...\nDEBUG:__main__:        Found method: parse_gnn_file(file_path) - \"Parse a GNN file without visualization through MCP.\"...\nDEBUG:__main__:        Found method: get_visualization_results(uri) - \"Retrieve visualization results by URI.\"...\nDEBUG:__main__:        Found method: register_tools(mcp) - \"Register visualization tools with the MCP.\"...\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): visualize_file(file_path, output_dir) - Docstring: Visualize a GNN file through MCP.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): visualize_directory(dir_path, output_dir) - Docstring: Visualize all GNN files in a directory through MCP.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): get_visualization_results(uri) - Docstring: Retrieve visualization results by URI.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): register_tools(mcp) - Docstring: Register visualization tools with the MCP.\nDEBUG:__main__:      Processing module: llm\nDEBUG:__main__:        \u2705 MCP integration file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/llm/mcp.py (19238 bytes)\nDEBUG:__main__:          Found registered MCP tool: llm.summarize_gnn_file(file_path_str, user_prompt_suffix) - Description: Reads a GNN specification file and uses an LLM to generate a concise summary of its content. Optionally, a user prompt suffix can refine the summary focus.\nDEBUG:__main__:          Found registered MCP tool: llm.explain_gnn_file(file_path_str, aspect_to_explain) - Description: Reads a GNN specification file and uses an LLM to generate an explanation of its content. Can focus on a specific aspect if provided.\nDEBUG:__main__:          Found registered MCP tool: llm.generate_professional_summary(file_path_str, experiment_details, target_audience) - Description: Reads a GNN file and optional experiment details, then uses an LLM to generate a professional summary suitable for reports or papers.\nDEBUG:__main__:      \ud83d\udc0d Parsing for MCP methods in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/llm/mcp.py\nDEBUG:__main__:        Found method: initialize_llm_module(mcp_instance_ref) - \"Initializes the LLM module, loads API key, and updates MCP status.\"...\nDEBUG:__main__:        Found method: summarize_gnn_file_content(file_path_str, user_prompt_suffix) - \"Reads a GNN file, sends its content to an LLM, and returns a summary.\"...\nDEBUG:__main__:        Found method: explain_gnn_file_content(file_path_str, aspect_to_explain) - \"Reads a GNN file, sends its content to an LLM, and returns an explanation.\"...\nDEBUG:__main__:        Found method: generate_professional_summary_from_gnn(file_path_str, experiment_details, target_audience) - \"Generates a professional summary of a GNN model and its experimental context.\"...\nDEBUG:__main__:        Found method: register_tools(mcp_instance_ref) - \"\"...\nDEBUG:__main__:        Found method: ensure_llm_tools_registered(mcp_instance_ref) - \"Ensures that LLM tools are registered with the provided MCP instance.\"...\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): initialize_llm_module(mcp_instance_ref) - Docstring: Initializes the LLM module, loads API key, and updates MCP status.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): summarize_gnn_file_content(file_path_str, user_prompt_suffix) - Docstring: Reads a GNN file, sends its content to an LLM, and returns a summary.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): explain_gnn_file_content(file_path_str, aspect_to_explain) - Docstring: Reads a GNN file, sends its content to an LLM, and returns an explanation.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): generate_professional_summary_from_gnn(file_path_str, experiment_details, target_audience) - Docstring: Generates a professional summary of a GNN model and its experimental context.\nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): register_tools(mcp_instance_ref) - Docstring: \nDEBUG:__main__:          Found AST method (not a direct MCP tool or already listed): ensure_llm_tools_registered(mcp_instance_ref) - Docstring: Ensures that LLM tools are registered with the provided MCP instance.\nDEBUG:__main__:  \u2705 MCP integration and API report saved: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/mcp_processing_step/7_mcp_integration_report.md (41841 bytes)\nINFO:__main__:\u2705 Step 7: MCP Operations (7_mcp.py) - COMPLETED (Report generated; check report for details on findings)\n"
        },
        {
            "step_number": 8,
            "script_name": "8_ontology",
            "status": "SKIPPED",
            "start_time": null,
            "end_time": null,
            "duration_seconds": null,
            "details": "Skipped due to --only-steps filter.",
            "stdout": "",
            "stderr": ""
        },
        {
            "step_number": 9,
            "script_name": "9_render",
            "status": "SKIPPED",
            "start_time": null,
            "end_time": null,
            "duration_seconds": null,
            "details": "Skipped due to --only-steps filter.",
            "stdout": "",
            "stderr": ""
        },
        {
            "step_number": 10,
            "script_name": "10_execute",
            "status": "SKIPPED",
            "start_time": null,
            "end_time": null,
            "duration_seconds": null,
            "details": "Skipped due to --only-steps filter.",
            "stdout": "",
            "stderr": ""
        },
        {
            "step_number": 11,
            "script_name": "11_llm",
            "status": "SKIPPED",
            "start_time": null,
            "end_time": null,
            "duration_seconds": null,
            "details": "Skipped due to --only-steps filter.",
            "stdout": "",
            "stderr": ""
        },
        {
            "step_number": 12,
            "script_name": "12_discopy",
            "status": "SKIPPED",
            "start_time": null,
            "end_time": null,
            "duration_seconds": null,
            "details": "Skipped due to --only-steps filter.",
            "stdout": "",
            "stderr": ""
        },
        {
            "step_number": 13,
            "script_name": "13_discopy_jax_eval",
            "status": "SKIPPED",
            "start_time": null,
            "end_time": null,
            "duration_seconds": null,
            "details": "Skipped due to --only-steps filter.",
            "stdout": "",
            "stderr": ""
        },
        {
            "step_number": 14,
            "script_name": "15_site",
            "status": "SKIPPED",
            "start_time": null,
            "end_time": null,
            "duration_seconds": null,
            "details": "Skipped due to --only-steps filter.",
            "stdout": "",
            "stderr": ""
        }
    ],
    "end_time": "2025-05-28T05:51:05.596630",
    "overall_status": "SUCCESS"
}