{
    "start_time": "2025-06-06T13:41:20.325765",
    "arguments": {
        "target_dir": "/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples",
        "output_dir": "/home/trim/Documents/GitHub/GeneralizedNotationNotation/output",
        "recursive": true,
        "skip_steps": "",
        "only_steps": "",
        "verbose": true,
        "strict": false,
        "estimate_resources": true,
        "ontology_terms_file": "/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/ontology/act_inf_ontology_terms.json",
        "llm_tasks": "all",
        "llm_timeout": 60,
        "pipeline_summary_file": "/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/pipeline_execution_summary.json",
        "site_html_filename": "gnn_pipeline_summary_site.html",
        "discopy_gnn_input_dir": null,
        "discopy_jax_gnn_input_dir": null,
        "discopy_jax_seed": 0,
        "recreate_venv": false,
        "dev": false
    },
    "steps": [
        {
            "step_number": 1,
            "script_name": "1_gnn.py",
            "status": "SUCCESS",
            "start_time": "2025-06-06T13:41:20.327103",
            "end_time": "2025-06-06T13:41:20.389580",
            "duration_seconds": 0.062477,
            "details": "",
            "stdout": "2025-06-06 13:41:20,370 - __main__ - DEBUG - Script logger '__main__' level set to DEBUG.\n2025-06-06 13:41:20,370 - __main__ - DEBUG - Project root determined for path relativization: /home/trim/Documents/GitHub/GeneralizedNotationNotation\n2025-06-06 13:41:20,371 - __main__ - INFO - GNN Step 1: Target directory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples\n2025-06-06 13:41:20,371 - __main__ - INFO - GNN Step 1: Output directory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output\n2025-06-06 13:41:20,371 - __main__ - INFO - GNN Step 1: Recursive: True\n2025-06-06 13:41:20,371 - __main__ - INFO - GNN Step 1: Verbose: True\n2025-06-06 13:41:20,371 - __main__ - INFO - Starting GNN file processing for directory: 'src/gnn/examples'\n2025-06-06 13:41:20,371 - __main__ - INFO - Recursive mode enabled: searching in subdirectories.\n2025-06-06 13:41:20,371 - __main__ - DEBUG - Ensured output directory exists: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_processing_step\n2025-06-06 13:41:20,371 - __main__ - DEBUG - Searching for GNN files matching pattern '**/*.md' in '/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples'\n2025-06-06 13:41:20,371 - __main__ - INFO - Found 2 .md file(s) to process in 'src/gnn/examples'.\n2025-06-06 13:41:20,371 - __main__ - DEBUG - Processing file: src/gnn/examples/pymdp_pomdp_agent.md\n2025-06-06 13:41:20,371 - __main__ - DEBUG - Successfully read content from src/gnn/examples/pymdp_pomdp_agent.md.\n2025-06-06 13:41:20,372 - __main__ - DEBUG -   Found '## ModelName' header in src/gnn/examples/pymdp_pomdp_agent.md\n2025-06-06 13:41:20,372 - __main__ - DEBUG -     Extracted ModelName: 'Multifactor PyMDP Agent v1' from src/gnn/examples/pymdp_pomdp_agent.md\n2025-06-06 13:41:20,372 - __main__ - DEBUG -   StateSpaceBlock section not found in src/gnn/examples/pymdp_pomdp_agent.md\n2025-06-06 13:41:20,372 - __main__ - DEBUG -     Content snippet for src/gnn/examples/pymdp_pomdp_agent.md (up to 500 chars) where StateSpaceBlock was not found:\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple observation modalities and hidden state fac\n2025-06-06 13:41:20,372 - __main__ - DEBUG -   Connections section not found in src/gnn/examples/pymdp_pomdp_agent.md\n2025-06-06 13:41:20,372 - __main__ - DEBUG -     Content snippet for src/gnn/examples/pymdp_pomdp_agent.md (up to 500 chars) where Connections was not found:\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple observation modalities and hidden state fac\n2025-06-06 13:41:20,372 - __main__ - DEBUG -   Found ModelParameters section in src/gnn/examples/pymdp_pomdp_agent.md\n2025-06-06 13:41:20,375 - __main__ - DEBUG -     Parsed ModelParameter: num_hidden_states_factors = [2, 3]\n2025-06-06 13:41:20,375 - __main__ - DEBUG -     Parsed ModelParameter: num_obs_modalities = [3, 3, 3]\n2025-06-06 13:41:20,375 - __main__ - DEBUG -     Parsed ModelParameter: num_control_factors = [1, 3]\n2025-06-06 13:41:20,375 - __main__ - DEBUG - Processing file: src/gnn/examples/rxinfer_multiagent_gnn.md\n2025-06-06 13:41:20,375 - __main__ - DEBUG - Successfully read content from src/gnn/examples/rxinfer_multiagent_gnn.md.\n2025-06-06 13:41:20,375 - __main__ - DEBUG -   Found '## ModelName' header in src/gnn/examples/rxinfer_multiagent_gnn.md\n2025-06-06 13:41:20,375 - __main__ - DEBUG -     Extracted ModelName: 'Multi-agent Trajectory Planning' from src/gnn/examples/rxinfer_multiagent_gnn.md\n2025-06-06 13:41:20,375 - __main__ - DEBUG -   StateSpaceBlock section not found in src/gnn/examples/rxinfer_multiagent_gnn.md\n2025-06-06 13:41:20,375 - __main__ - DEBUG -     Content snippet for src/gnn/examples/rxinfer_multiagent_gnn.md (up to 500 chars) where StateSpaceBlock was not found:\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represents a multi-agent trajectory planning scenario i\n2025-06-06 13:41:20,375 - __main__ - DEBUG -   Connections section not found in src/gnn/examples/rxinfer_multiagent_gnn.md\n2025-06-06 13:41:20,375 - __main__ - DEBUG -     Content snippet for src/gnn/examples/rxinfer_multiagent_gnn.md (up to 500 chars) where Connections was not found:\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represents a multi-agent trajectory planning scenario i\n2025-06-06 13:41:20,375 - __main__ - DEBUG -   Found ModelParameters section in src/gnn/examples/rxinfer_multiagent_gnn.md\n2025-06-06 13:41:20,376 - __main__ - INFO - GNN discovery report saved to: output/gnn_processing_step/1_gnn_discovery_report.md\n2025-06-06 13:41:20,376 - __main__ - INFO - Step 1_gnn completed successfully.\n",
            "stderr": ""
        },
        {
            "step_number": 2,
            "script_name": "2_setup.py",
            "status": "SUCCESS",
            "start_time": "2025-06-06T13:41:20.389660",
            "end_time": "2025-06-06T13:41:22.879013",
            "duration_seconds": 2.489353,
            "details": "",
            "stdout": "2025-06-06 13:41:20,437 - __main__ - DEBUG - Script logger '__main__' level set to DEBUG.\n2025-06-06 13:41:20,438 - __main__ - INFO - \u25b6\ufe0f Starting Step 2: Setup\n2025-06-06 13:41:20,438 - __main__ - DEBUG -   Parsed arguments for setup: Namespace(target_dir=PosixPath('/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples'), output_dir=PosixPath('/home/trim/Documents/GitHub/GeneralizedNotationNotation/output'), verbose=True, recreate_venv=False, dev=False)\n2025-06-06 13:41:20,438 - __main__ - INFO - \ud83d\udcca Gathering environment information...\n2025-06-06 13:41:20,438 - __main__ - INFO - --- Environment Information ---\n2025-06-06 13:41:20,438 - __main__ - INFO - Python version: 3.12.2 | packaged by conda-forge | (main, Feb 16 2024, 20:50:58) [GCC 12.3.0]\n2025-06-06 13:41:20,438 - __main__ - INFO - Python executable: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/.venv/bin/python\n2025-06-06 13:41:20,440 - __main__ - INFO - Operating system: Linux-6.12.10-76061203-generic-x86_64-with-glibc2.35\n2025-06-06 13:41:20,440 - __main__ - DEBUG - Checking virtual environment status...\n2025-06-06 13:41:20,441 - __main__ - INFO - Virtual environment: Active at /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/.venv\n2025-06-06 13:41:20,441 - __main__ - INFO -   - Python: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/.venv/bin/python\n2025-06-06 13:41:20,441 - __main__ - INFO -   - Pip: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/.venv/bin/pip\n2025-06-06 13:41:20,441 - __main__ - DEBUG - Checking system dependencies...\n2025-06-06 13:41:20,635 - __main__ - INFO - System dependencies:\n2025-06-06 13:41:20,635 - __main__ - INFO -   - pip: \u2713 Available\n2025-06-06 13:41:20,635 - __main__ - INFO -   - venv: \u2713 Available\n2025-06-06 13:41:20,635 - __main__ - INFO -   - graphviz: \u2717 Not found\n2025-06-06 13:41:20,635 - __main__ - INFO - -----------------------------\n2025-06-06 13:41:20,635 - __main__ - DEBUG -   Phase 1: Verifying project directories...\n2025-06-06 13:41:20,635 - __main__ - INFO - \ud83d\udd0d Verifying directories...\n2025-06-06 13:41:20,635 - __main__ - DEBUG - Searching for GNN files in /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples...\n2025-06-06 13:41:20,636 - __main__ - DEBUG -   Found 0 GNN .md files (recursively in target: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples)\n2025-06-06 13:41:20,636 - __main__ - WARNING - \u26a0\ufe0f Warning: No GNN files found in /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples. This might be expected if you're planning to create them later.\n2025-06-06 13:41:20,636 - __main__ - INFO - \ud83d\udcc1 Creating output directory structure...\n2025-06-06 13:41:20,636 - __main__ - INFO - \u2705 Output directory structure verified/created: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output\n2025-06-06 13:41:20,637 - __main__ - DEBUG -   \ud83d\udcc4 Directory structure info saved to: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/directory_structure.json\n2025-06-06 13:41:20,637 - __main__ - INFO -   \u2705 Project directories verified successfully.\n2025-06-06 13:41:20,637 - __main__ - INFO -   Phase 2: Setting up Python virtual environment and dependencies...\n2025-06-06 13:41:20,637 - __main__ - INFO -   \u23f3 This may take a few minutes, especially if installing dependencies...\n2025-06-06 13:41:20,637 - __main__ - DEBUG -   \ud83d\udc0d Calling perform_full_setup from src/setup/setup.py\n2025-06-06 13:41:20,637 - __main__ - INFO -   \ud83d\udce6 Setup config: recreate_venv=False, install_dev=False\n2025-06-06 13:41:20,637 - INFO - \ud83d\ude80 Starting environment setup...\n2025-06-06 13:41:20,637 - INFO - \ud83d\udcc1 Project root: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src\n2025-06-06 13:41:20,637 - INFO - \u2699\ufe0f Configuration: verbose=True, recreate_venv=False, dev=False\n2025-06-06 13:41:20,637 - INFO - \n\ud83d\udccb Phase 1/3: Checking system requirements...\n2025-06-06 13:41:20,637 - INFO - \ud83d\udd0d Checking system requirements...\n2025-06-06 13:41:20,637 - INFO - \u2705 Python version check passed: 3.12.2\n2025-06-06 13:41:20,637 - DEBUG - Checking pip availability...\n2025-06-06 13:41:20,637 - DEBUG - Running command: '/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/.venv/bin/python -m pip --version' in /home/trim/Documents/GitHub/GeneralizedNotationNotation/src\n2025-06-06 13:41:20,791 - DEBUG - Stdout:\npip 25.1.1 from /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/.venv/lib/python3.12/site-packages/pip (python 3.12)\n2025-06-06 13:41:20,792 - INFO - \u2705 pip is available: pip 25.1.1 from /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/.venv/lib/python3.12/site-packages/pip (python 3.12)\n2025-06-06 13:41:20,792 - DEBUG - Checking venv module availability...\n2025-06-06 13:41:20,792 - DEBUG - Running command: '/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/.venv/bin/python -c import venv' in /home/trim/Documents/GitHub/GeneralizedNotationNotation/src\n2025-06-06 13:41:20,820 - INFO - \u2705 venv module is available\n2025-06-06 13:41:20,820 - INFO - \u2705 Disk space check passed: 61.47GB free\n2025-06-06 13:41:20,820 - INFO - \u2705 System requirements check passed\n2025-06-06 13:41:20,820 - INFO - \n\ud83d\udccb Phase 2/3: Setting up virtual environment...\n2025-06-06 13:41:20,820 - INFO - \u2713 Using existing virtual environment at /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/.venv\n2025-06-06 13:41:20,820 - INFO - \u2705 Virtual environment setup completed in 0.0s\n2025-06-06 13:41:20,820 - INFO - \n\ud83d\udccb Phase 3/3: Installing dependencies...\n2025-06-06 13:41:20,820 - INFO - \u23f3 This may take several minutes...\n2025-06-06 13:41:20,820 - INFO - \ud83d\udce6 Installing dependencies from /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt...\n2025-06-06 13:41:20,820 - INFO - \ud83d\udce6 Upgrading pip in virtual environment...\n2025-06-06 13:41:21,179 - DEBUG - Requirement already satisfied: pip in ./.venv/lib/python3.12/site-packages (25.1.1)\n2025-06-06 13:41:21,546 - INFO - \ud83d\udce6 Installing main dependencies (this may take several minutes)...\n2025-06-06 13:41:21,879 - DEBUG - Requirement already satisfied: graphviz>=0.20.1 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 2)) (0.20.3)\n2025-06-06 13:41:21,879 - DEBUG - Requirement already satisfied: matplotlib>=3.7.1 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 3)) (3.10.3)\n2025-06-06 13:41:21,879 - DEBUG - Requirement already satisfied: networkx>=3.1 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 4)) (3.5)\n2025-06-06 13:41:21,880 - DEBUG - Requirement already satisfied: numpy>=1.24.3 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 5)) (2.2.6)\n2025-06-06 13:41:21,880 - DEBUG - Requirement already satisfied: pandas>=2.0.1 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 6)) (2.2.3)\n2025-06-06 13:41:21,880 - DEBUG - Requirement already satisfied: pytest>=7.3.1 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 7)) (8.3.5)\n2025-06-06 13:41:21,880 - DEBUG - Requirement already satisfied: scipy>=1.10.1 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 8)) (1.15.3)\n2025-06-06 13:41:21,881 - DEBUG - Requirement already satisfied: inferactively-pymdp<0.1.0 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (0.0.7.1)\n2025-06-06 13:41:21,881 - DEBUG - Requirement already satisfied: openai>=1.0.0 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 14)) (1.79.0)\n2025-06-06 13:41:21,881 - DEBUG - Requirement already satisfied: python-dotenv>=1.0.0 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 15)) (1.1.0)\n2025-06-06 13:41:21,882 - DEBUG - Requirement already satisfied: Markdown>=3.4.3 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 18)) (3.8)\n2025-06-06 13:41:21,882 - DEBUG - Requirement already satisfied: httpx>=0.27.0 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 21)) (0.28.1)\n2025-06-06 13:41:21,882 - DEBUG - Requirement already satisfied: altair>=5.0.1 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 24)) (5.5.0)\n2025-06-06 13:41:21,883 - DEBUG - Requirement already satisfied: discopy>=1.0.0 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 25)) (1.2.0)\n2025-06-06 13:41:21,883 - DEBUG - Requirement already satisfied: jax>=0.4.20 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 28)) (0.6.0)\n2025-06-06 13:41:21,883 - DEBUG - Requirement already satisfied: jaxlib>=0.4.20 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 29)) (0.6.0)\n2025-06-06 13:41:21,883 - DEBUG - Requirement already satisfied: pytest-cov>=4.1.0 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 33)) (6.1.1)\n2025-06-06 13:41:21,884 - DEBUG - Requirement already satisfied: pytest-mock>=3.10.0 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 34)) (3.14.1)\n2025-06-06 13:41:21,884 - DEBUG - Requirement already satisfied: flake8>=6.0.0 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 37)) (7.2.0)\n2025-06-06 13:41:21,884 - DEBUG - Requirement already satisfied: mypy>=1.3.0 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 38)) (1.16.0)\n2025-06-06 13:41:21,885 - DEBUG - Requirement already satisfied: black>=23.3.0 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 39)) (25.1.0)\n2025-06-06 13:41:21,885 - DEBUG - Requirement already satisfied: isort>=5.12.0 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 40)) (6.0.1)\n2025-06-06 13:41:21,885 - DEBUG - Requirement already satisfied: sphinx>=7.0.1 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 43)) (8.2.3)\n2025-06-06 13:41:21,886 - DEBUG - Requirement already satisfied: sphinx-rtd-theme>=1.2.0 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 44)) (3.0.2)\n2025-06-06 13:41:21,886 - DEBUG - Requirement already satisfied: ipython>=8.13.2 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 47)) (9.2.0)\n2025-06-06 13:41:21,886 - DEBUG - Requirement already satisfied: ipdb>=0.13.13 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 48)) (0.13.13)\n2025-06-06 13:41:21,886 - DEBUG - Requirement already satisfied: types-requests>=2.30.0.0 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 51)) (2.32.0.20250602)\n2025-06-06 13:41:21,887 - DEBUG - Requirement already satisfied: types-Markdown>=3.4.2.9 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 52)) (3.8.0.20250415)\n2025-06-06 13:41:21,887 - DEBUG - Requirement already satisfied: py-spy>=0.3.14 in ./.venv/lib/python3.12/site-packages (from -r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 55)) (0.4.0)\n2025-06-06 13:41:21,888 - DEBUG - Requirement already satisfied: attrs>=20.3.0 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (25.3.0)\n2025-06-06 13:41:21,889 - DEBUG - Requirement already satisfied: cycler>=0.10.0 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (0.12.1)\n2025-06-06 13:41:21,889 - DEBUG - Requirement already satisfied: iniconfig>=1.1.1 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (2.1.0)\n2025-06-06 13:41:21,889 - DEBUG - Requirement already satisfied: kiwisolver>=1.3.1 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (1.4.8)\n2025-06-06 13:41:21,890 - DEBUG - Requirement already satisfied: nose>=1.3.7 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (1.3.7)\n2025-06-06 13:41:21,891 - DEBUG - Requirement already satisfied: openpyxl>=3.0.7 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (3.1.5)\n2025-06-06 13:41:21,891 - DEBUG - Requirement already satisfied: packaging>=20.8 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (25.0)\n2025-06-06 13:41:21,892 - DEBUG - Requirement already satisfied: Pillow>=8.2.0 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (11.2.1)\n2025-06-06 13:41:21,893 - DEBUG - Requirement already satisfied: pluggy>=0.13.1 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (1.6.0)\n2025-06-06 13:41:21,893 - DEBUG - Requirement already satisfied: py>=1.10.0 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (1.11.0)\n2025-06-06 13:41:21,894 - DEBUG - Requirement already satisfied: pyparsing>=2.4.7 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (3.2.3)\n2025-06-06 13:41:21,894 - DEBUG - Requirement already satisfied: python-dateutil>=2.8.1 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (2.9.0.post0)\n2025-06-06 13:41:21,895 - DEBUG - Requirement already satisfied: pytz>=2020.5 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (2025.2)\n2025-06-06 13:41:21,895 - DEBUG - Requirement already satisfied: seaborn>=0.11.1 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (0.13.2)\n2025-06-06 13:41:21,896 - DEBUG - Requirement already satisfied: six>=1.15.0 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (1.17.0)\n2025-06-06 13:41:21,896 - DEBUG - Requirement already satisfied: toml>=0.10.2 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (0.10.2)\n2025-06-06 13:41:21,897 - DEBUG - Requirement already satisfied: typing-extensions>=3.7.4.3 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (4.13.2)\n2025-06-06 13:41:21,897 - DEBUG - Requirement already satisfied: xlsxwriter>=1.4.3 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (3.2.3)\n2025-06-06 13:41:21,898 - DEBUG - Requirement already satisfied: myst-nb>=0.13.1 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (1.2.0)\n2025-06-06 13:41:21,898 - DEBUG - Requirement already satisfied: autograd>=1.3 in ./.venv/lib/python3.12/site-packages (from inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (1.8.0)\n2025-06-06 13:41:21,901 - DEBUG - Requirement already satisfied: contourpy>=1.0.1 in ./.venv/lib/python3.12/site-packages (from matplotlib>=3.7.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 3)) (1.3.2)\n2025-06-06 13:41:21,901 - DEBUG - Requirement already satisfied: fonttools>=4.22.0 in ./.venv/lib/python3.12/site-packages (from matplotlib>=3.7.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 3)) (4.58.2)\n2025-06-06 13:41:21,914 - DEBUG - Requirement already satisfied: tzdata>=2022.7 in ./.venv/lib/python3.12/site-packages (from pandas>=2.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 6)) (2025.2)\n2025-06-06 13:41:21,930 - DEBUG - Requirement already satisfied: anyio<5,>=3.5.0 in ./.venv/lib/python3.12/site-packages (from openai>=1.0.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 14)) (4.9.0)\n2025-06-06 13:41:21,930 - DEBUG - Requirement already satisfied: distro<2,>=1.7.0 in ./.venv/lib/python3.12/site-packages (from openai>=1.0.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 14)) (1.9.0)\n2025-06-06 13:41:21,931 - DEBUG - Requirement already satisfied: jiter<1,>=0.4.0 in ./.venv/lib/python3.12/site-packages (from openai>=1.0.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 14)) (0.10.0)\n2025-06-06 13:41:21,932 - DEBUG - Requirement already satisfied: pydantic<3,>=1.9.0 in ./.venv/lib/python3.12/site-packages (from openai>=1.0.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 14)) (2.11.4)\n2025-06-06 13:41:21,932 - DEBUG - Requirement already satisfied: sniffio in ./.venv/lib/python3.12/site-packages (from openai>=1.0.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 14)) (1.3.1)\n2025-06-06 13:41:21,932 - DEBUG - Requirement already satisfied: tqdm>4 in ./.venv/lib/python3.12/site-packages (from openai>=1.0.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 14)) (4.67.1)\n2025-06-06 13:41:21,934 - DEBUG - Requirement already satisfied: certifi in ./.venv/lib/python3.12/site-packages (from httpx>=0.27.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 21)) (2025.4.26)\n2025-06-06 13:41:21,934 - DEBUG - Requirement already satisfied: httpcore==1.* in ./.venv/lib/python3.12/site-packages (from httpx>=0.27.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 21)) (1.0.9)\n2025-06-06 13:41:21,935 - DEBUG - Requirement already satisfied: idna in ./.venv/lib/python3.12/site-packages (from httpx>=0.27.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 21)) (3.10)\n2025-06-06 13:41:21,940 - DEBUG - Requirement already satisfied: h11>=0.16 in ./.venv/lib/python3.12/site-packages (from httpcore==1.*->httpx>=0.27.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 21)) (0.16.0)\n2025-06-06 13:41:21,943 - DEBUG - Requirement already satisfied: annotated-types>=0.6.0 in ./.venv/lib/python3.12/site-packages (from pydantic<3,>=1.9.0->openai>=1.0.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 14)) (0.7.0)\n2025-06-06 13:41:21,944 - DEBUG - Requirement already satisfied: pydantic-core==2.33.2 in ./.venv/lib/python3.12/site-packages (from pydantic<3,>=1.9.0->openai>=1.0.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 14)) (2.33.2)\n2025-06-06 13:41:21,944 - DEBUG - Requirement already satisfied: typing-inspection>=0.4.0 in ./.venv/lib/python3.12/site-packages (from pydantic<3,>=1.9.0->openai>=1.0.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 14)) (0.4.0)\n2025-06-06 13:41:21,950 - DEBUG - Requirement already satisfied: jinja2 in ./.venv/lib/python3.12/site-packages (from altair>=5.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 24)) (3.1.6)\n2025-06-06 13:41:21,951 - DEBUG - Requirement already satisfied: jsonschema>=3.0 in ./.venv/lib/python3.12/site-packages (from altair>=5.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 24)) (4.23.0)\n2025-06-06 13:41:21,951 - DEBUG - Requirement already satisfied: narwhals>=1.14.2 in ./.venv/lib/python3.12/site-packages (from altair>=5.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 24)) (1.40.0)\n2025-06-06 13:41:21,959 - DEBUG - Requirement already satisfied: ml_dtypes>=0.5.0 in ./.venv/lib/python3.12/site-packages (from jax>=0.4.20->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 28)) (0.5.1)\n2025-06-06 13:41:21,960 - DEBUG - Requirement already satisfied: opt_einsum in ./.venv/lib/python3.12/site-packages (from jax>=0.4.20->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 28)) (3.4.0)\n2025-06-06 13:41:21,965 - DEBUG - Requirement already satisfied: coverage>=7.5 in ./.venv/lib/python3.12/site-packages (from coverage[toml]>=7.5->pytest-cov>=4.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 33)) (7.8.2)\n2025-06-06 13:41:21,968 - DEBUG - Requirement already satisfied: mccabe<0.8.0,>=0.7.0 in ./.venv/lib/python3.12/site-packages (from flake8>=6.0.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 37)) (0.7.0)\n2025-06-06 13:41:21,969 - DEBUG - Requirement already satisfied: pycodestyle<2.14.0,>=2.13.0 in ./.venv/lib/python3.12/site-packages (from flake8>=6.0.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 37)) (2.13.0)\n2025-06-06 13:41:21,969 - DEBUG - Requirement already satisfied: pyflakes<3.4.0,>=3.3.0 in ./.venv/lib/python3.12/site-packages (from flake8>=6.0.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 37)) (3.3.2)\n2025-06-06 13:41:21,973 - DEBUG - Requirement already satisfied: mypy_extensions>=1.0.0 in ./.venv/lib/python3.12/site-packages (from mypy>=1.3.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 38)) (1.1.0)\n2025-06-06 13:41:21,974 - DEBUG - Requirement already satisfied: pathspec>=0.9.0 in ./.venv/lib/python3.12/site-packages (from mypy>=1.3.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 38)) (0.12.1)\n2025-06-06 13:41:21,977 - DEBUG - Requirement already satisfied: click>=8.0.0 in ./.venv/lib/python3.12/site-packages (from black>=23.3.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 39)) (8.2.1)\n2025-06-06 13:41:21,978 - DEBUG - Requirement already satisfied: platformdirs>=2 in ./.venv/lib/python3.12/site-packages (from black>=23.3.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 39)) (4.3.8)\n2025-06-06 13:41:21,981 - DEBUG - Requirement already satisfied: sphinxcontrib-applehelp>=1.0.7 in ./.venv/lib/python3.12/site-packages (from sphinx>=7.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 43)) (2.0.0)\n2025-06-06 13:41:21,981 - DEBUG - Requirement already satisfied: sphinxcontrib-devhelp>=1.0.6 in ./.venv/lib/python3.12/site-packages (from sphinx>=7.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 43)) (2.0.0)\n2025-06-06 13:41:21,982 - DEBUG - Requirement already satisfied: sphinxcontrib-htmlhelp>=2.0.6 in ./.venv/lib/python3.12/site-packages (from sphinx>=7.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 43)) (2.1.0)\n2025-06-06 13:41:21,982 - DEBUG - Requirement already satisfied: sphinxcontrib-jsmath>=1.0.1 in ./.venv/lib/python3.12/site-packages (from sphinx>=7.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 43)) (1.0.1)\n2025-06-06 13:41:21,983 - DEBUG - Requirement already satisfied: sphinxcontrib-qthelp>=1.0.6 in ./.venv/lib/python3.12/site-packages (from sphinx>=7.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 43)) (2.0.0)\n2025-06-06 13:41:21,983 - DEBUG - Requirement already satisfied: sphinxcontrib-serializinghtml>=1.1.9 in ./.venv/lib/python3.12/site-packages (from sphinx>=7.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 43)) (2.0.0)\n2025-06-06 13:41:21,984 - DEBUG - Requirement already satisfied: Pygments>=2.17 in ./.venv/lib/python3.12/site-packages (from sphinx>=7.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 43)) (2.19.1)\n2025-06-06 13:41:21,984 - DEBUG - Requirement already satisfied: docutils<0.22,>=0.20 in ./.venv/lib/python3.12/site-packages (from sphinx>=7.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 43)) (0.21.2)\n2025-06-06 13:41:21,984 - DEBUG - Requirement already satisfied: snowballstemmer>=2.2 in ./.venv/lib/python3.12/site-packages (from sphinx>=7.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 43)) (3.0.1)\n2025-06-06 13:41:21,985 - DEBUG - Requirement already satisfied: babel>=2.13 in ./.venv/lib/python3.12/site-packages (from sphinx>=7.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 43)) (2.17.0)\n2025-06-06 13:41:21,985 - DEBUG - Requirement already satisfied: alabaster>=0.7.14 in ./.venv/lib/python3.12/site-packages (from sphinx>=7.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 43)) (1.0.0)\n2025-06-06 13:41:21,986 - DEBUG - Requirement already satisfied: imagesize>=1.3 in ./.venv/lib/python3.12/site-packages (from sphinx>=7.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 43)) (1.4.1)\n2025-06-06 13:41:21,986 - DEBUG - Requirement already satisfied: requests>=2.30.0 in ./.venv/lib/python3.12/site-packages (from sphinx>=7.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 43)) (2.32.3)\n2025-06-06 13:41:21,986 - DEBUG - Requirement already satisfied: roman-numerals-py>=1.0.0 in ./.venv/lib/python3.12/site-packages (from sphinx>=7.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 43)) (3.1.0)\n2025-06-06 13:41:21,992 - DEBUG - Requirement already satisfied: sphinxcontrib-jquery<5,>=4 in ./.venv/lib/python3.12/site-packages (from sphinx-rtd-theme>=1.2.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 44)) (4.1)\n2025-06-06 13:41:21,995 - DEBUG - Requirement already satisfied: decorator in ./.venv/lib/python3.12/site-packages (from ipython>=8.13.2->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 47)) (5.2.1)\n2025-06-06 13:41:21,995 - DEBUG - Requirement already satisfied: ipython-pygments-lexers in ./.venv/lib/python3.12/site-packages (from ipython>=8.13.2->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 47)) (1.1.1)\n2025-06-06 13:41:21,996 - DEBUG - Requirement already satisfied: jedi>=0.16 in ./.venv/lib/python3.12/site-packages (from ipython>=8.13.2->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 47)) (0.19.2)\n2025-06-06 13:41:21,996 - DEBUG - Requirement already satisfied: matplotlib-inline in ./.venv/lib/python3.12/site-packages (from ipython>=8.13.2->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 47)) (0.1.7)\n2025-06-06 13:41:21,996 - DEBUG - Requirement already satisfied: pexpect>4.3 in ./.venv/lib/python3.12/site-packages (from ipython>=8.13.2->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 47)) (4.9.0)\n2025-06-06 13:41:21,997 - DEBUG - Requirement already satisfied: prompt_toolkit<3.1.0,>=3.0.41 in ./.venv/lib/python3.12/site-packages (from ipython>=8.13.2->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 47)) (3.0.51)\n2025-06-06 13:41:21,997 - DEBUG - Requirement already satisfied: stack_data in ./.venv/lib/python3.12/site-packages (from ipython>=8.13.2->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 47)) (0.6.3)\n2025-06-06 13:41:21,998 - DEBUG - Requirement already satisfied: traitlets>=5.13.0 in ./.venv/lib/python3.12/site-packages (from ipython>=8.13.2->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 47)) (5.14.3)\n2025-06-06 13:41:22,001 - DEBUG - Requirement already satisfied: wcwidth in ./.venv/lib/python3.12/site-packages (from prompt_toolkit<3.1.0,>=3.0.41->ipython>=8.13.2->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 47)) (0.2.13)\n2025-06-06 13:41:22,015 - DEBUG - Requirement already satisfied: urllib3>=2 in ./.venv/lib/python3.12/site-packages (from types-requests>=2.30.0.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 51)) (2.4.0)\n2025-06-06 13:41:22,048 - DEBUG - Requirement already satisfied: parso<0.9.0,>=0.8.4 in ./.venv/lib/python3.12/site-packages (from jedi>=0.16->ipython>=8.13.2->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 47)) (0.8.4)\n2025-06-06 13:41:22,054 - DEBUG - Requirement already satisfied: MarkupSafe>=2.0 in ./.venv/lib/python3.12/site-packages (from jinja2->altair>=5.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 24)) (3.0.2)\n2025-06-06 13:41:22,056 - DEBUG - Requirement already satisfied: jsonschema-specifications>=2023.03.6 in ./.venv/lib/python3.12/site-packages (from jsonschema>=3.0->altair>=5.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 24)) (2025.4.1)\n2025-06-06 13:41:22,056 - DEBUG - Requirement already satisfied: referencing>=0.28.4 in ./.venv/lib/python3.12/site-packages (from jsonschema>=3.0->altair>=5.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 24)) (0.36.2)\n2025-06-06 13:41:22,057 - DEBUG - Requirement already satisfied: rpds-py>=0.7.1 in ./.venv/lib/python3.12/site-packages (from jsonschema>=3.0->altair>=5.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 24)) (0.25.1)\n2025-06-06 13:41:22,069 - DEBUG - Requirement already satisfied: importlib_metadata in ./.venv/lib/python3.12/site-packages (from myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (8.7.0)\n2025-06-06 13:41:22,069 - DEBUG - Requirement already satisfied: jupyter-cache>=0.5 in ./.venv/lib/python3.12/site-packages (from myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (1.0.1)\n2025-06-06 13:41:22,070 - DEBUG - Requirement already satisfied: nbclient in ./.venv/lib/python3.12/site-packages (from myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (0.10.2)\n2025-06-06 13:41:22,070 - DEBUG - Requirement already satisfied: myst-parser>=1.0.0 in ./.venv/lib/python3.12/site-packages (from myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (4.0.1)\n2025-06-06 13:41:22,071 - DEBUG - Requirement already satisfied: nbformat>=5.0 in ./.venv/lib/python3.12/site-packages (from myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (5.10.4)\n2025-06-06 13:41:22,071 - DEBUG - Requirement already satisfied: pyyaml in ./.venv/lib/python3.12/site-packages (from myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (6.0.2)\n2025-06-06 13:41:22,072 - DEBUG - Requirement already satisfied: ipykernel in ./.venv/lib/python3.12/site-packages (from myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (6.29.5)\n2025-06-06 13:41:22,077 - DEBUG - Requirement already satisfied: sqlalchemy<3,>=1.3.12 in ./.venv/lib/python3.12/site-packages (from jupyter-cache>=0.5->myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (2.0.41)\n2025-06-06 13:41:22,077 - DEBUG - Requirement already satisfied: tabulate in ./.venv/lib/python3.12/site-packages (from jupyter-cache>=0.5->myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (0.9.0)\n2025-06-06 13:41:22,081 - DEBUG - Requirement already satisfied: greenlet>=1 in ./.venv/lib/python3.12/site-packages (from sqlalchemy<3,>=1.3.12->jupyter-cache>=0.5->myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (3.2.2)\n2025-06-06 13:41:22,088 - DEBUG - Requirement already satisfied: markdown-it-py~=3.0 in ./.venv/lib/python3.12/site-packages (from myst-parser>=1.0.0->myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (3.0.0)\n2025-06-06 13:41:22,088 - DEBUG - Requirement already satisfied: mdit-py-plugins>=0.4.1,~=0.4 in ./.venv/lib/python3.12/site-packages (from myst-parser>=1.0.0->myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (0.4.2)\n2025-06-06 13:41:22,092 - DEBUG - Requirement already satisfied: mdurl~=0.1 in ./.venv/lib/python3.12/site-packages (from markdown-it-py~=3.0->myst-parser>=1.0.0->myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (0.1.2)\n2025-06-06 13:41:22,102 - DEBUG - Requirement already satisfied: jupyter-client>=6.1.12 in ./.venv/lib/python3.12/site-packages (from nbclient->myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (8.6.3)\n2025-06-06 13:41:22,102 - DEBUG - Requirement already satisfied: jupyter-core!=5.0.*,>=4.12 in ./.venv/lib/python3.12/site-packages (from nbclient->myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (5.7.2)\n2025-06-06 13:41:22,107 - DEBUG - Requirement already satisfied: pyzmq>=23.0 in ./.venv/lib/python3.12/site-packages (from jupyter-client>=6.1.12->nbclient->myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (26.4.0)\n2025-06-06 13:41:22,107 - DEBUG - Requirement already satisfied: tornado>=6.2 in ./.venv/lib/python3.12/site-packages (from jupyter-client>=6.1.12->nbclient->myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (6.5)\n2025-06-06 13:41:22,113 - DEBUG - Requirement already satisfied: fastjsonschema>=2.15 in ./.venv/lib/python3.12/site-packages (from nbformat>=5.0->myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (2.21.1)\n2025-06-06 13:41:22,119 - DEBUG - Requirement already satisfied: et-xmlfile in ./.venv/lib/python3.12/site-packages (from openpyxl>=3.0.7->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (2.0.0)\n2025-06-06 13:41:22,125 - DEBUG - Requirement already satisfied: ptyprocess>=0.5 in ./.venv/lib/python3.12/site-packages (from pexpect>4.3->ipython>=8.13.2->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 47)) (0.7.0)\n2025-06-06 13:41:22,148 - DEBUG - Requirement already satisfied: charset-normalizer<4,>=2 in ./.venv/lib/python3.12/site-packages (from requests>=2.30.0->sphinx>=7.0.1->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 43)) (3.4.2)\n2025-06-06 13:41:22,203 - DEBUG - Requirement already satisfied: zipp>=3.20 in ./.venv/lib/python3.12/site-packages (from importlib_metadata->myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (3.21.0)\n2025-06-06 13:41:22,211 - DEBUG - Requirement already satisfied: comm>=0.1.1 in ./.venv/lib/python3.12/site-packages (from ipykernel->myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (0.2.2)\n2025-06-06 13:41:22,211 - DEBUG - Requirement already satisfied: debugpy>=1.6.5 in ./.venv/lib/python3.12/site-packages (from ipykernel->myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (1.8.14)\n2025-06-06 13:41:22,212 - DEBUG - Requirement already satisfied: nest-asyncio in ./.venv/lib/python3.12/site-packages (from ipykernel->myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (1.6.0)\n2025-06-06 13:41:22,213 - DEBUG - Requirement already satisfied: psutil in ./.venv/lib/python3.12/site-packages (from ipykernel->myst-nb>=0.13.1->inferactively-pymdp<0.1.0->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 11)) (7.0.0)\n2025-06-06 13:41:22,236 - DEBUG - Requirement already satisfied: executing>=1.2.0 in ./.venv/lib/python3.12/site-packages (from stack_data->ipython>=8.13.2->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 47)) (2.2.0)\n2025-06-06 13:41:22,236 - DEBUG - Requirement already satisfied: asttokens>=2.1.0 in ./.venv/lib/python3.12/site-packages (from stack_data->ipython>=8.13.2->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 47)) (3.0.0)\n2025-06-06 13:41:22,236 - DEBUG - Requirement already satisfied: pure-eval in ./.venv/lib/python3.12/site-packages (from stack_data->ipython>=8.13.2->-r /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/requirements.txt (line 47)) (0.2.3)\n2025-06-06 13:41:22,371 - INFO - \u2705 Dependencies installation completed\n2025-06-06 13:41:22,371 - INFO - \u2705 All dependencies installed successfully (took 0.8s)\n2025-06-06 13:41:22,371 - INFO - \ud83d\udccb Getting list of installed packages...\n2025-06-06 13:41:22,630 - INFO - \ud83d\udce6 Found 138 installed packages in the virtual environment\n2025-06-06 13:41:22,630 - INFO - \ud83d\udccb Installed packages:\n2025-06-06 13:41:22,630 - INFO -   - Jinja2: 3.1.6\n2025-06-06 13:41:22,630 - INFO -   - Markdown: 3.8\n2025-06-06 13:41:22,630 - INFO -   - MarkupSafe: 3.0.2\n2025-06-06 13:41:22,630 - INFO -   - PyYAML: 6.0.2\n2025-06-06 13:41:22,630 - INFO -   - Pygments: 2.19.1\n2025-06-06 13:41:22,630 - INFO -   - SQLAlchemy: 2.0.41\n2025-06-06 13:41:22,630 - INFO -   - Sphinx: 8.2.3\n2025-06-06 13:41:22,630 - INFO -   - XlsxWriter: 3.2.3\n2025-06-06 13:41:22,630 - INFO -   - alabaster: 1.0.0\n2025-06-06 13:41:22,630 - INFO -   - altair: 5.5.0\n2025-06-06 13:41:22,630 - INFO -   - annotated-types: 0.7.0\n2025-06-06 13:41:22,630 - INFO -   - anyio: 4.9.0\n2025-06-06 13:41:22,630 - INFO -   - asttokens: 3.0.0\n2025-06-06 13:41:22,630 - INFO -   - attrs: 25.3.0\n2025-06-06 13:41:22,630 - INFO -   - autograd: 1.8.0\n2025-06-06 13:41:22,630 - INFO -   - babel: 2.17.0\n2025-06-06 13:41:22,630 - INFO -   - black: 25.1.0\n2025-06-06 13:41:22,630 - INFO -   - certifi: 2025.4.26\n2025-06-06 13:41:22,630 - INFO -   - charset-normalizer: 3.4.2\n2025-06-06 13:41:22,630 - INFO -   - click: 8.2.1\n2025-06-06 13:41:22,630 - INFO -   - comm: 0.2.2\n2025-06-06 13:41:22,630 - INFO -   - contourpy: 1.3.2\n2025-06-06 13:41:22,630 - INFO -   - coverage: 7.8.2\n2025-06-06 13:41:22,630 - INFO -   - cycler: 0.12.1\n2025-06-06 13:41:22,630 - INFO -   - debugpy: 1.8.14\n2025-06-06 13:41:22,630 - INFO -   - decorator: 5.2.1\n2025-06-06 13:41:22,630 - INFO -   - discopy: 1.2.0\n2025-06-06 13:41:22,630 - INFO -   - distro: 1.9.0\n2025-06-06 13:41:22,630 - INFO -   - docutils: 0.21.2\n2025-06-06 13:41:22,631 - INFO -   - et_xmlfile: 2.0.0\n2025-06-06 13:41:22,631 - INFO -   - executing: 2.2.0\n2025-06-06 13:41:22,631 - INFO -   - fastjsonschema: 2.21.1\n2025-06-06 13:41:22,631 - INFO -   - flake8: 7.2.0\n2025-06-06 13:41:22,631 - INFO -   - fonttools: 4.58.2\n2025-06-06 13:41:22,631 - INFO -   - graphviz: 0.20.3\n2025-06-06 13:41:22,631 - INFO -   - greenlet: 3.2.2\n2025-06-06 13:41:22,631 - INFO -   - h11: 0.16.0\n2025-06-06 13:41:22,631 - INFO -   - httpcore: 1.0.9\n2025-06-06 13:41:22,631 - INFO -   - httpx: 0.28.1\n2025-06-06 13:41:22,631 - INFO -   - idna: 3.10\n2025-06-06 13:41:22,631 - INFO -   - imagesize: 1.4.1\n2025-06-06 13:41:22,631 - INFO -   - importlib_metadata: 8.7.0\n2025-06-06 13:41:22,631 - INFO -   - inferactively-pymdp: 0.0.7.1\n2025-06-06 13:41:22,631 - INFO -   - iniconfig: 2.1.0\n2025-06-06 13:41:22,631 - INFO -   - ipdb: 0.13.13\n2025-06-06 13:41:22,631 - INFO -   - ipykernel: 6.29.5\n2025-06-06 13:41:22,631 - INFO -   - ipython: 9.2.0\n2025-06-06 13:41:22,631 - INFO -   - ipython_pygments_lexers: 1.1.1\n2025-06-06 13:41:22,631 - INFO -   - isort: 6.0.1\n2025-06-06 13:41:22,631 - INFO -   - jax: 0.6.0\n2025-06-06 13:41:22,631 - INFO -   - jaxlib: 0.6.0\n2025-06-06 13:41:22,631 - INFO -   - jedi: 0.19.2\n2025-06-06 13:41:22,631 - INFO -   - jiter: 0.10.0\n2025-06-06 13:41:22,631 - INFO -   - jsonschema: 4.23.0\n2025-06-06 13:41:22,631 - INFO -   - jsonschema-specifications: 2025.4.1\n2025-06-06 13:41:22,631 - INFO -   - jupyter-cache: 1.0.1\n2025-06-06 13:41:22,631 - INFO -   - jupyter_client: 8.6.3\n2025-06-06 13:41:22,631 - INFO -   - jupyter_core: 5.7.2\n2025-06-06 13:41:22,631 - INFO -   - kiwisolver: 1.4.8\n2025-06-06 13:41:22,631 - INFO -   - markdown-it-py: 3.0.0\n2025-06-06 13:41:22,631 - INFO -   - matplotlib: 3.10.3\n2025-06-06 13:41:22,631 - INFO -   - matplotlib-inline: 0.1.7\n2025-06-06 13:41:22,631 - INFO -   - mccabe: 0.7.0\n2025-06-06 13:41:22,631 - INFO -   - mdit-py-plugins: 0.4.2\n2025-06-06 13:41:22,631 - INFO -   - mdurl: 0.1.2\n2025-06-06 13:41:22,631 - INFO -   - ml_dtypes: 0.5.1\n2025-06-06 13:41:22,631 - INFO -   - mypy: 1.16.0\n2025-06-06 13:41:22,631 - INFO -   - mypy_extensions: 1.1.0\n2025-06-06 13:41:22,631 - INFO -   - myst-nb: 1.2.0\n2025-06-06 13:41:22,631 - INFO -   - myst-parser: 4.0.1\n2025-06-06 13:41:22,631 - INFO -   - narwhals: 1.40.0\n2025-06-06 13:41:22,631 - INFO -   - nbclient: 0.10.2\n2025-06-06 13:41:22,631 - INFO -   - nbformat: 5.10.4\n2025-06-06 13:41:22,631 - INFO -   - nest-asyncio: 1.6.0\n2025-06-06 13:41:22,631 - INFO -   - networkx: 3.5\n2025-06-06 13:41:22,631 - INFO -   - nose: 1.3.7\n2025-06-06 13:41:22,631 - INFO -   - numpy: 2.2.6\n2025-06-06 13:41:22,631 - INFO -   - openai: 1.79.0\n2025-06-06 13:41:22,631 - INFO -   - openpyxl: 3.1.5\n2025-06-06 13:41:22,631 - INFO -   - opt_einsum: 3.4.0\n2025-06-06 13:41:22,631 - INFO -   - packaging: 25.0\n2025-06-06 13:41:22,631 - INFO -   - pandas: 2.2.3\n2025-06-06 13:41:22,631 - INFO -   - parso: 0.8.4\n2025-06-06 13:41:22,631 - INFO -   - pathspec: 0.12.1\n2025-06-06 13:41:22,631 - INFO -   - pexpect: 4.9.0\n2025-06-06 13:41:22,631 - INFO -   - pillow: 11.2.1\n2025-06-06 13:41:22,631 - INFO -   - pip: 25.1.1\n2025-06-06 13:41:22,631 - INFO -   - platformdirs: 4.3.8\n2025-06-06 13:41:22,631 - INFO -   - pluggy: 1.6.0\n2025-06-06 13:41:22,631 - INFO -   - prompt_toolkit: 3.0.51\n2025-06-06 13:41:22,631 - INFO -   - psutil: 7.0.0\n2025-06-06 13:41:22,631 - INFO -   - ptyprocess: 0.7.0\n2025-06-06 13:41:22,631 - INFO -   - pure_eval: 0.2.3\n2025-06-06 13:41:22,631 - INFO -   - py: 1.11.0\n2025-06-06 13:41:22,631 - INFO -   - py-spy: 0.4.0\n2025-06-06 13:41:22,631 - INFO -   - pycodestyle: 2.13.0\n2025-06-06 13:41:22,631 - INFO -   - pydantic: 2.11.4\n2025-06-06 13:41:22,631 - INFO -   - pydantic_core: 2.33.2\n2025-06-06 13:41:22,632 - INFO -   - pyflakes: 3.3.2\n2025-06-06 13:41:22,632 - INFO -   - pyparsing: 3.2.3\n2025-06-06 13:41:22,632 - INFO -   - pytest: 8.3.5\n2025-06-06 13:41:22,632 - INFO -   - pytest-cov: 6.1.1\n2025-06-06 13:41:22,632 - INFO -   - pytest-mock: 3.14.1\n2025-06-06 13:41:22,632 - INFO -   - python-dateutil: 2.9.0.post0\n2025-06-06 13:41:22,632 - INFO -   - python-dotenv: 1.1.0\n2025-06-06 13:41:22,632 - INFO -   - pytz: 2025.2\n2025-06-06 13:41:22,632 - INFO -   - pyzmq: 26.4.0\n2025-06-06 13:41:22,632 - INFO -   - referencing: 0.36.2\n2025-06-06 13:41:22,632 - INFO -   - requests: 2.32.3\n2025-06-06 13:41:22,632 - INFO -   - roman-numerals-py: 3.1.0\n2025-06-06 13:41:22,632 - INFO -   - rpds-py: 0.25.1\n2025-06-06 13:41:22,632 - INFO -   - scipy: 1.15.3\n2025-06-06 13:41:22,632 - INFO -   - seaborn: 0.13.2\n2025-06-06 13:41:22,632 - INFO -   - six: 1.17.0\n2025-06-06 13:41:22,632 - INFO -   - sniffio: 1.3.1\n2025-06-06 13:41:22,632 - INFO -   - snowballstemmer: 3.0.1\n2025-06-06 13:41:22,632 - INFO -   - sphinx-rtd-theme: 3.0.2\n2025-06-06 13:41:22,632 - INFO -   - sphinxcontrib-applehelp: 2.0.0\n2025-06-06 13:41:22,632 - INFO -   - sphinxcontrib-devhelp: 2.0.0\n2025-06-06 13:41:22,632 - INFO -   - sphinxcontrib-htmlhelp: 2.1.0\n2025-06-06 13:41:22,632 - INFO -   - sphinxcontrib-jquery: 4.1\n2025-06-06 13:41:22,632 - INFO -   - sphinxcontrib-jsmath: 1.0.1\n2025-06-06 13:41:22,632 - INFO -   - sphinxcontrib-qthelp: 2.0.0\n2025-06-06 13:41:22,632 - INFO -   - sphinxcontrib-serializinghtml: 2.0.0\n2025-06-06 13:41:22,632 - INFO -   - stack-data: 0.6.3\n2025-06-06 13:41:22,632 - INFO -   - tabulate: 0.9.0\n2025-06-06 13:41:22,632 - INFO -   - toml: 0.10.2\n2025-06-06 13:41:22,632 - INFO -   - tornado: 6.5\n2025-06-06 13:41:22,632 - INFO -   - tqdm: 4.67.1\n2025-06-06 13:41:22,632 - INFO -   - traitlets: 5.14.3\n2025-06-06 13:41:22,632 - INFO -   - types-Markdown: 3.8.0.20250415\n2025-06-06 13:41:22,632 - INFO -   - types-requests: 2.32.0.20250602\n2025-06-06 13:41:22,632 - INFO -   - typing-inspection: 0.4.0\n2025-06-06 13:41:22,632 - INFO -   - typing_extensions: 4.13.2\n2025-06-06 13:41:22,632 - INFO -   - tzdata: 2025.2\n2025-06-06 13:41:22,632 - INFO -   - urllib3: 2.4.0\n2025-06-06 13:41:22,632 - INFO -   - wcwidth: 0.2.13\n2025-06-06 13:41:22,632 - INFO -   - zipp: 3.21.0\n2025-06-06 13:41:22,632 - INFO - \ud83d\udcc4 Full package list saved to: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/.venv/installed_packages.json\n2025-06-06 13:41:22,632 - INFO - \u2705 Dependencies installed in 1.8s\n2025-06-06 13:41:22,632 - INFO - \n\ud83c\udf89 Setup completed successfully!\n2025-06-06 13:41:22,632 - INFO - \u23f1\ufe0f Total time: 2.0s\n2025-06-06 13:41:22,632 - INFO - \nTo activate the virtual environment:\n2025-06-06 13:41:22,633 - INFO -   source .venv/bin/activate\n2025-06-06 13:41:22,633 - __main__ - INFO -   \u2705 Python virtual environment and dependencies setup completed.\n2025-06-06 13:41:22,633 - __main__ - INFO -   Phase 3: Generating installed packages report...\n2025-06-06 13:41:22,633 - __main__ - INFO - \ud83d\udccb Generating installed packages report...\n2025-06-06 13:41:22,633 - __main__ - DEBUG - Running /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/.venv/bin/pip list --format=json\n2025-06-06 13:41:22,857 - __main__ - INFO - \ud83d\udce6 Found 138 installed packages in the virtual environment\n2025-06-06 13:41:22,857 - __main__ - INFO - Installed packages:\n2025-06-06 13:41:22,857 - __main__ - INFO -   - Jinja2: 3.1.6\n2025-06-06 13:41:22,857 - __main__ - INFO -   - Markdown: 3.8\n2025-06-06 13:41:22,858 - __main__ - INFO -   - MarkupSafe: 3.0.2\n2025-06-06 13:41:22,858 - __main__ - INFO -   - PyYAML: 6.0.2\n2025-06-06 13:41:22,858 - __main__ - INFO -   - Pygments: 2.19.1\n2025-06-06 13:41:22,858 - __main__ - INFO -   - SQLAlchemy: 2.0.41\n2025-06-06 13:41:22,858 - __main__ - INFO -   - Sphinx: 8.2.3\n2025-06-06 13:41:22,858 - __main__ - INFO -   - XlsxWriter: 3.2.3\n2025-06-06 13:41:22,858 - __main__ - INFO -   - alabaster: 1.0.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - altair: 5.5.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - annotated-types: 0.7.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - anyio: 4.9.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - asttokens: 3.0.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - attrs: 25.3.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - autograd: 1.8.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - babel: 2.17.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - black: 25.1.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - certifi: 2025.4.26\n2025-06-06 13:41:22,858 - __main__ - INFO -   - charset-normalizer: 3.4.2\n2025-06-06 13:41:22,858 - __main__ - INFO -   - click: 8.2.1\n2025-06-06 13:41:22,858 - __main__ - INFO -   - comm: 0.2.2\n2025-06-06 13:41:22,858 - __main__ - INFO -   - contourpy: 1.3.2\n2025-06-06 13:41:22,858 - __main__ - INFO -   - coverage: 7.8.2\n2025-06-06 13:41:22,858 - __main__ - INFO -   - cycler: 0.12.1\n2025-06-06 13:41:22,858 - __main__ - INFO -   - debugpy: 1.8.14\n2025-06-06 13:41:22,858 - __main__ - INFO -   - decorator: 5.2.1\n2025-06-06 13:41:22,858 - __main__ - INFO -   - discopy: 1.2.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - distro: 1.9.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - docutils: 0.21.2\n2025-06-06 13:41:22,858 - __main__ - INFO -   - et_xmlfile: 2.0.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - executing: 2.2.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - fastjsonschema: 2.21.1\n2025-06-06 13:41:22,858 - __main__ - INFO -   - flake8: 7.2.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - fonttools: 4.58.2\n2025-06-06 13:41:22,858 - __main__ - INFO -   - graphviz: 0.20.3\n2025-06-06 13:41:22,858 - __main__ - INFO -   - greenlet: 3.2.2\n2025-06-06 13:41:22,858 - __main__ - INFO -   - h11: 0.16.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - httpcore: 1.0.9\n2025-06-06 13:41:22,858 - __main__ - INFO -   - httpx: 0.28.1\n2025-06-06 13:41:22,858 - __main__ - INFO -   - idna: 3.10\n2025-06-06 13:41:22,858 - __main__ - INFO -   - imagesize: 1.4.1\n2025-06-06 13:41:22,858 - __main__ - INFO -   - importlib_metadata: 8.7.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - inferactively-pymdp: 0.0.7.1\n2025-06-06 13:41:22,858 - __main__ - INFO -   - iniconfig: 2.1.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - ipdb: 0.13.13\n2025-06-06 13:41:22,858 - __main__ - INFO -   - ipykernel: 6.29.5\n2025-06-06 13:41:22,858 - __main__ - INFO -   - ipython: 9.2.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - ipython_pygments_lexers: 1.1.1\n2025-06-06 13:41:22,858 - __main__ - INFO -   - isort: 6.0.1\n2025-06-06 13:41:22,858 - __main__ - INFO -   - jax: 0.6.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - jaxlib: 0.6.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - jedi: 0.19.2\n2025-06-06 13:41:22,858 - __main__ - INFO -   - jiter: 0.10.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - jsonschema: 4.23.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - jsonschema-specifications: 2025.4.1\n2025-06-06 13:41:22,858 - __main__ - INFO -   - jupyter-cache: 1.0.1\n2025-06-06 13:41:22,858 - __main__ - INFO -   - jupyter_client: 8.6.3\n2025-06-06 13:41:22,858 - __main__ - INFO -   - jupyter_core: 5.7.2\n2025-06-06 13:41:22,858 - __main__ - INFO -   - kiwisolver: 1.4.8\n2025-06-06 13:41:22,858 - __main__ - INFO -   - markdown-it-py: 3.0.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - matplotlib: 3.10.3\n2025-06-06 13:41:22,858 - __main__ - INFO -   - matplotlib-inline: 0.1.7\n2025-06-06 13:41:22,858 - __main__ - INFO -   - mccabe: 0.7.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - mdit-py-plugins: 0.4.2\n2025-06-06 13:41:22,858 - __main__ - INFO -   - mdurl: 0.1.2\n2025-06-06 13:41:22,858 - __main__ - INFO -   - ml_dtypes: 0.5.1\n2025-06-06 13:41:22,858 - __main__ - INFO -   - mypy: 1.16.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - mypy_extensions: 1.1.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - myst-nb: 1.2.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - myst-parser: 4.0.1\n2025-06-06 13:41:22,858 - __main__ - INFO -   - narwhals: 1.40.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - nbclient: 0.10.2\n2025-06-06 13:41:22,858 - __main__ - INFO -   - nbformat: 5.10.4\n2025-06-06 13:41:22,858 - __main__ - INFO -   - nest-asyncio: 1.6.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - networkx: 3.5\n2025-06-06 13:41:22,858 - __main__ - INFO -   - nose: 1.3.7\n2025-06-06 13:41:22,858 - __main__ - INFO -   - numpy: 2.2.6\n2025-06-06 13:41:22,858 - __main__ - INFO -   - openai: 1.79.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - openpyxl: 3.1.5\n2025-06-06 13:41:22,858 - __main__ - INFO -   - opt_einsum: 3.4.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - packaging: 25.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - pandas: 2.2.3\n2025-06-06 13:41:22,858 - __main__ - INFO -   - parso: 0.8.4\n2025-06-06 13:41:22,858 - __main__ - INFO -   - pathspec: 0.12.1\n2025-06-06 13:41:22,858 - __main__ - INFO -   - pexpect: 4.9.0\n2025-06-06 13:41:22,858 - __main__ - INFO -   - pillow: 11.2.1\n2025-06-06 13:41:22,859 - __main__ - INFO -   - pip: 25.1.1\n2025-06-06 13:41:22,859 - __main__ - INFO -   - platformdirs: 4.3.8\n2025-06-06 13:41:22,859 - __main__ - INFO -   - pluggy: 1.6.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - prompt_toolkit: 3.0.51\n2025-06-06 13:41:22,859 - __main__ - INFO -   - psutil: 7.0.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - ptyprocess: 0.7.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - pure_eval: 0.2.3\n2025-06-06 13:41:22,859 - __main__ - INFO -   - py: 1.11.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - py-spy: 0.4.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - pycodestyle: 2.13.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - pydantic: 2.11.4\n2025-06-06 13:41:22,859 - __main__ - INFO -   - pydantic_core: 2.33.2\n2025-06-06 13:41:22,859 - __main__ - INFO -   - pyflakes: 3.3.2\n2025-06-06 13:41:22,859 - __main__ - INFO -   - pyparsing: 3.2.3\n2025-06-06 13:41:22,859 - __main__ - INFO -   - pytest: 8.3.5\n2025-06-06 13:41:22,859 - __main__ - INFO -   - pytest-cov: 6.1.1\n2025-06-06 13:41:22,859 - __main__ - INFO -   - pytest-mock: 3.14.1\n2025-06-06 13:41:22,859 - __main__ - INFO -   - python-dateutil: 2.9.0.post0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - python-dotenv: 1.1.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - pytz: 2025.2\n2025-06-06 13:41:22,859 - __main__ - INFO -   - pyzmq: 26.4.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - referencing: 0.36.2\n2025-06-06 13:41:22,859 - __main__ - INFO -   - requests: 2.32.3\n2025-06-06 13:41:22,859 - __main__ - INFO -   - roman-numerals-py: 3.1.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - rpds-py: 0.25.1\n2025-06-06 13:41:22,859 - __main__ - INFO -   - scipy: 1.15.3\n2025-06-06 13:41:22,859 - __main__ - INFO -   - seaborn: 0.13.2\n2025-06-06 13:41:22,859 - __main__ - INFO -   - six: 1.17.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - sniffio: 1.3.1\n2025-06-06 13:41:22,859 - __main__ - INFO -   - snowballstemmer: 3.0.1\n2025-06-06 13:41:22,859 - __main__ - INFO -   - sphinx-rtd-theme: 3.0.2\n2025-06-06 13:41:22,859 - __main__ - INFO -   - sphinxcontrib-applehelp: 2.0.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - sphinxcontrib-devhelp: 2.0.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - sphinxcontrib-htmlhelp: 2.1.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - sphinxcontrib-jquery: 4.1\n2025-06-06 13:41:22,859 - __main__ - INFO -   - sphinxcontrib-jsmath: 1.0.1\n2025-06-06 13:41:22,859 - __main__ - INFO -   - sphinxcontrib-qthelp: 2.0.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - sphinxcontrib-serializinghtml: 2.0.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - stack-data: 0.6.3\n2025-06-06 13:41:22,859 - __main__ - INFO -   - tabulate: 0.9.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - toml: 0.10.2\n2025-06-06 13:41:22,859 - __main__ - INFO -   - tornado: 6.5\n2025-06-06 13:41:22,859 - __main__ - INFO -   - tqdm: 4.67.1\n2025-06-06 13:41:22,859 - __main__ - INFO -   - traitlets: 5.14.3\n2025-06-06 13:41:22,859 - __main__ - INFO -   - types-Markdown: 3.8.0.20250415\n2025-06-06 13:41:22,859 - __main__ - INFO -   - types-requests: 2.32.0.20250602\n2025-06-06 13:41:22,859 - __main__ - INFO -   - typing-inspection: 0.4.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - typing_extensions: 4.13.2\n2025-06-06 13:41:22,859 - __main__ - INFO -   - tzdata: 2025.2\n2025-06-06 13:41:22,859 - __main__ - INFO -   - urllib3: 2.4.0\n2025-06-06 13:41:22,859 - __main__ - INFO -   - wcwidth: 0.2.13\n2025-06-06 13:41:22,859 - __main__ - INFO -   - zipp: 3.21.0\n2025-06-06 13:41:22,859 - __main__ - INFO - \ud83d\udcc4 Package list saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/installed_packages.json\n2025-06-06 13:41:22,859 - __main__ - INFO -   \u2705 Package report completed.\n2025-06-06 13:41:22,859 - __main__ - INFO - \u2705 Step 2: Setup complete (took 2.4 seconds)\n",
            "stderr": ""
        },
        {
            "step_number": 3,
            "script_name": "3_tests.py",
            "status": "SUCCESS",
            "start_time": "2025-06-06T13:41:22.879078",
            "end_time": "2025-06-06T13:41:25.035862",
            "duration_seconds": 2.156784,
            "details": "",
            "stdout": "2025-06-06 13:41:22,927 - __main__ - DEBUG - Script logger '__main__' level set to DEBUG.\n2025-06-06 13:41:22,927 - __main__ - INFO - \u25b6\ufe0f Starting Step 3: Tests\n2025-06-06 13:41:22,927 - __main__ - DEBUG -   Parsed arguments for tests: Namespace(target_dir=PosixPath('/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples'), output_dir=PosixPath('/home/trim/Documents/GitHub/GeneralizedNotationNotation/output'), verbose=True)\n2025-06-06 13:41:22,927 - __main__ - INFO - \u2139\ufe0f Running tests from directory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/tests\n2025-06-06 13:41:22,927 - __main__ - DEBUG - Ensured test reports directory exists: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/test_reports\n2025-06-06 13:41:22,927 - __main__ - DEBUG -   \ud83d\udc0d Executing test command: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/.venv/bin/python -m pytest /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/tests --junitxml=/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/test_reports/pytest_report.xml -v -rA\n2025-06-06 13:41:22,928 - __main__ - DEBUG -   \ud83d\udcc2 Running tests with CWD: /home/trim/Documents/GitHub/GeneralizedNotationNotation\n2025-06-06 13:41:23,205 - __main__ - INFO - [pytest] ============================= test session starts ==============================\n2025-06-06 13:41:23,205 - __main__ - INFO - [pytest] platform linux -- Python 3.12.2, pytest-8.3.5, pluggy-1.6.0 -- /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/.venv/bin/python\n2025-06-06 13:41:23,205 - __main__ - INFO - [pytest] cachedir: .pytest_cache\n2025-06-06 13:41:23,205 - __main__ - INFO - [pytest] rootdir: /home/trim/Documents/GitHub/GeneralizedNotationNotation\n2025-06-06 13:41:23,205 - __main__ - INFO - [pytest] plugins: cov-6.1.1, anyio-4.9.0, mock-3.14.1\n2025-06-06 13:41:24,314 - __main__ - INFO - [pytest] collecting ... collected 80 items\n2025-06-06 13:41:24,314 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,321 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_agent_hyperparameter_storage PASSED [  1%]\n2025-06-06 13:41:24,322 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_control_factor_parsing PASSED [  2%]\n2025-06-06 13:41:24,322 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_empty_gnn_spec PASSED [  3%]\n2025-06-06 13:41:24,323 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_matrix_specs_stored PASSED [  5%]\n2025-06-06 13:41:24,323 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_missing_essential_blocks PASSED [  6%]\n2025-06-06 13:41:24,324 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_mixed_direct_and_statespaceblock_precedence PASSED [  7%]\n2025-06-06 13:41:24,325 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_state_and_obs_dimensions_direct PASSED [  8%]\n2025-06-06 13:41:24,325 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_state_and_obs_dimensions_from_statespaceblock PASSED [ 10%]\n2025-06-06 13:41:24,326 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_with_minimal_spec PASSED [ 11%]\n2025-06-06 13:41:24,327 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_with_model_name_sanitization PASSED [ 12%]\n2025-06-06 13:41:24,327 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_with_stringified_direct_dimensions PASSED [ 13%]\n2025-06-06 13:41:24,413 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_A_matrix_invalid_spec FAILED [ 15%]\n2025-06-06 13:41:24,427 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_A_matrix_multiple_modalities_single_factor FAILED [ 16%]\n2025-06-06 13:41:24,440 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_A_matrix_numpy_array_input FAILED [ 17%]\n2025-06-06 13:41:24,453 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_A_matrix_single_modality_multiple_factors FAILED [ 18%]\n2025-06-06 13:41:24,468 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_A_matrix_single_modality_single_factor FAILED [ 20%]\n2025-06-06 13:41:24,481 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_B_matrix_invalid_spec FAILED [ 21%]\n2025-06-06 13:41:24,493 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_B_matrix_multiple_factors_mixed_control FAILED [ 22%]\n2025-06-06 13:41:24,494 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_B_matrix_numpy_array_input PASSED [ 23%]\n2025-06-06 13:41:24,505 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_B_matrix_single_factor_controlled FAILED [ 25%]\n2025-06-06 13:41:24,517 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_C_vector_invalid_spec FAILED [ 26%]\n2025-06-06 13:41:24,529 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_C_vector_multiple_modalities FAILED [ 27%]\n2025-06-06 13:41:24,540 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_C_vector_single_modality FAILED [ 28%]\n2025-06-06 13:41:24,552 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_D_vector_invalid_spec FAILED [ 30%]\n2025-06-06 13:41:24,564 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_D_vector_multiple_factors FAILED [ 31%]\n2025-06-06 13:41:24,576 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_D_vector_single_factor FAILED [ 32%]\n2025-06-06 13:41:24,577 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_E_vector PASSED [ 33%]\n2025-06-06 13:41:24,589 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_E_vector_invalid_spec FAILED [ 35%]\n2025-06-06 13:41:24,602 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestAgentAndUsageCodeGeneration::test_extract_agent_hyperparameters FAILED [ 36%]\n2025-06-06 13:41:24,603 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestAgentAndUsageCodeGeneration::test_generate_agent_instantiation_code_basic PASSED [ 37%]\n2025-06-06 13:41:24,616 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestAgentAndUsageCodeGeneration::test_generate_agent_instantiation_code_with_action_names FAILED [ 38%]\n2025-06-06 13:41:24,628 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestAgentAndUsageCodeGeneration::test_generate_agent_instantiation_code_with_hyperparams FAILED [ 40%]\n2025-06-06 13:41:24,640 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestAgentAndUsageCodeGeneration::test_generate_example_usage_code FAILED [ 41%]\n2025-06-06 13:41:24,652 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestFullScriptGeneration::test_get_full_python_script_minimal FAILED [ 42%]\n2025-06-06 13:41:24,664 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestFullScriptGeneration::test_get_full_python_script_no_example_usage FAILED [ 43%]\n2025-06-06 13:41:24,677 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestFullScriptGeneration::test_get_full_python_script_with_all_elements FAILED [ 45%]\n2025-06-06 13:41:24,689 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestHelperMethodsIndirectly::test_parse_string_to_literal_invalid_inputs FAILED [ 46%]\n2025-06-06 13:41:24,690 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py::TestHelperMethodsIndirectly::test_parse_string_to_literal_valid_inputs PASSED [ 47%]\n2025-06-06 13:41:24,691 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_templates.py::TestGenerateFileHeader::test_header_generation PASSED [ 48%]\n2025-06-06 13:41:24,692 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_templates.py::TestGenerateConversionSummary::test_summary_empty_entries PASSED [ 50%]\n2025-06-06 13:41:24,692 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_templates.py::TestGenerateConversionSummary::test_summary_with_entries PASSED [ 51%]\n2025-06-06 13:41:24,693 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_templates.py::TestGenerateDebugBlock::test_debug_block_generation_all_defined PASSED [ 52%]\n2025-06-06 13:41:24,696 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_templates.py::TestGenerateDebugBlock::test_debug_block_generation_none_values FAILED [ 53%]\n2025-06-06 13:41:24,697 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_templates.py::TestGenerateExampleUsageTemplate::test_basic_usage_generation PASSED [ 55%]\n2025-06-06 13:41:24,698 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_templates.py::TestGenerateExampleUsageTemplate::test_usage_boolean_flags PASSED [ 56%]\n2025-06-06 13:41:24,698 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_templates.py::TestGenerateExampleUsageTemplate::test_usage_multiple_modalities_factors PASSED [ 57%]\n2025-06-06 13:41:24,699 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_templates.py::TestGenerateExampleUsageTemplate::test_usage_no_modalities_no_factors PASSED [ 58%]\n2025-06-06 13:41:24,699 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_templates.py::TestGeneratePlaceholderMatrices::test_multiple_modalities_factors PASSED [ 60%]\n2025-06-06 13:41:24,700 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_templates.py::TestGeneratePlaceholderMatrices::test_single_modality_single_factor PASSED [ 61%]\n2025-06-06 13:41:24,701 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_templates.py::TestGeneratePlaceholderMatrices::test_zero_modalities_factors PASSED [ 62%]\n2025-06-06 13:41:24,702 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestNumpyArrayToString::test_1d_array PASSED [ 63%]\n2025-06-06 13:41:24,702 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestNumpyArrayToString::test_2d_array PASSED [ 65%]\n2025-06-06 13:41:24,703 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestNumpyArrayToString::test_3d_array PASSED [ 66%]\n2025-06-06 13:41:24,703 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestNumpyArrayToString::test_array_with_object_dtype PASSED [ 67%]\n2025-06-06 13:41:24,704 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestNumpyArrayToString::test_empty_array PASSED [ 68%]\n2025-06-06 13:41:24,705 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestNumpyArrayToString::test_none_input PASSED [ 70%]\n2025-06-06 13:41:24,705 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestNumpyArrayToString::test_scalar_array PASSED [ 71%]\n2025-06-06 13:41:24,706 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestFormatListRecursive::test_empty_list PASSED [ 72%]\n2025-06-06 13:41:24,711 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestFormatListRecursive::test_flat_list_numpy_arrays FAILED [ 73%]\n2025-06-06 13:41:24,716 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestFormatListRecursive::test_flat_list_simple_items FAILED [ 75%]\n2025-06-06 13:41:24,717 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestFormatListRecursive::test_indentation_multiline PASSED [ 76%]\n2025-06-06 13:41:24,717 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestFormatListRecursive::test_nested_list_numpy_arrays_multiline PASSED [ 77%]\n2025-06-06 13:41:24,718 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_data_is_none PASSED [ 78%]\n2025-06-06 13:41:24,719 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_data_is_preformatted_string PASSED [ 80%]\n2025-06-06 13:41:24,720 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_normal_array_conversion_error PASSED [ 81%]\n2025-06-06 13:41:24,720 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_normal_array_from_list PASSED [ 82%]\n2025-06-06 13:41:24,721 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_normal_array_from_numpy PASSED [ 83%]\n2025-06-06 13:41:24,722 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_object_array_empty_or_all_none_list PASSED [ 85%]\n2025-06-06 13:41:24,722 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_object_array_list_of_numpy PASSED [ 86%]\n2025-06-06 13:41:24,723 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_object_array_list_with_none PASSED [ 87%]\n2025-06-06 13:41:24,724 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_object_array_non_convertible_item PASSED [ 88%]\n2025-06-06 13:41:24,729 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_unexpected_data_type_handled_as_string_or_repr FAILED [ 90%]\n2025-06-06 13:41:24,734 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPAgentInstantiation::test_all_parameters FAILED [ 91%]\n2025-06-06 13:41:24,734 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPAgentInstantiation::test_basic_instantiation PASSED [ 92%]\n2025-06-06 13:41:24,735 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPAgentInstantiation::test_no_optional_params PASSED [ 93%]\n2025-06-06 13:41:24,736 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPAgentInstantiation::test_qs_initial_as_list_of_arrays PASSED [ 95%]\n2025-06-06 13:41:24,738 - __main__ - INFO - [pytest] src/tests/test_gnn_type_checker.py::TestGNNTypeChecker::test_check_directory PASSED [ 96%]\n2025-06-06 13:41:24,739 - __main__ - INFO - [pytest] src/tests/test_gnn_type_checker.py::TestGNNTypeChecker::test_check_invalid_file PASSED [ 97%]\n2025-06-06 13:41:24,740 - __main__ - INFO - [pytest] src/tests/test_gnn_type_checker.py::TestGNNTypeChecker::test_check_valid_file PASSED [ 98%]\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] src/tests/test_gnn_type_checker.py::TestGNNTypeChecker::test_generate_report PASSED [100%]\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] =================================== FAILURES ===================================\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] ___________ TestMatrixConversion.test_convert_A_matrix_invalid_spec ____________\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_A_matrix_invalid_spec>\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] def test_convert_A_matrix_invalid_spec(self):\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] gnn_spec_mismatch = create_basic_gnn_spec(\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] obs_modality_names=[\"Visual\"], num_obs_modalities=[2],\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"Location\"], num_hidden_states_factors=[3],\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] A_spec={\"Visual\": \"np.array([[0.8, 0.1], [0.1, 0.8]])\"} # 2x2, but expected 2x3\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] converter_mismatch = GnnToPyMdpConverter(gnn_spec_mismatch)\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] a_matrix_str_mismatch = converter_mismatch.convert_A_matrix()\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] >       self.assertTrue(any(\"Error processing A matrix for modality Visual\" in log for log in converter_mismatch.conversion_log) or\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] any(\"Could not parse or validate matrix A_Visual\" in log for log in converter_mismatch.conversion_log) or\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] any(\"shapes (2,2) and (2,3) not aligned\" in log.lower() for log in converter_mismatch.conversion_log))\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] E       AssertionError: False is not true\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:394: AssertionError\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] ERROR    src.render.pymdp_converter:pymdp_converter.py:137 A_matrix (modality Visual): Shape mismatch. Expected (2, 3), got (2, 2). Using default uniform A[0].\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] _ TestMatrixConversion.test_convert_A_matrix_multiple_modalities_single_factor _\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_A_matrix_multiple_modalities_single_factor>\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] def test_convert_A_matrix_multiple_modalities_single_factor(self):\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] gnn_spec = create_basic_gnn_spec(\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] obs_modality_names=[\"Visual\", \"Audio\"], num_obs_modalities=[2, 3],\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"Location\"], num_hidden_states_factors=[4],\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] A_spec={\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] \"Visual\": \"np.array([[0.8,0.1,0.0,0.1], [0.1,0.8,0.1,0.0]])\", # 2x4\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] \"Audio\": \"np.array([[0.5,0.3,0.1,0.1], [0.3,0.4,0.2,0.1], [0.1,0.1,0.6,0.2]])\" # 3x4\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] }\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(gnn_spec)\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] a_matrix_str = converter.convert_A_matrix()\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] >       self.assertIn(\"A_Visual = np.array([[0.8,0.1,0.0,0.1], [0.1,0.8,0.1,0.0]])\", a_matrix_str)\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] E       AssertionError: 'A_Visual = np.array([[0.8,0.1,0.0,0.1], [0.1,0.8,0.1,0.0]])' not found in 'A_Visual = utils.norm_dist(np.ones((2, 4)))\\nA_Audio = utils.norm_dist(np.ones((3, 4)))\\nA = np.empty(2, dtype=object)\\nA[0] = A_Visual\\nA[1] = A_Audio'\n2025-06-06 13:41:24,750 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:367: AssertionError\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] WARNING  src.render.pymdp_converter:pymdp_converter.py:137 A_matrix spec is a single dict but multiple modalities expected. Wrapping in list.\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] _________ TestMatrixConversion.test_convert_A_matrix_numpy_array_input _________\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_A_matrix_numpy_array_input>\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] def test_convert_A_matrix_numpy_array_input(self):\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] \"\"\"Test A matrix conversion when the spec provides an actual np.ndarray.\"\"\"\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] gnn_spec = create_basic_gnn_spec(\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] obs_modality_names=[\"Sensor\"], num_obs_modalities=[2],\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"Internal\"], num_hidden_states_factors=[2],\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] A_spec={\"Sensor\": np.array([[0.9, 0.1], [0.2, 0.8]])}\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(gnn_spec)\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] a_matrix_str = converter.convert_A_matrix()\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] >       self.assertIn(\"A_Sensor = np.array([[0.9, 0.1], [0.2, 0.8]])\", a_matrix_str)\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] E       AssertionError: 'A_Sensor = np.array([[0.9, 0.1], [0.2, 0.8]])' not found in 'A_Sensor = np.array([[0.9,0.1],[0.2,0.8]])\\nA = np.empty(1, dtype=object)\\nA[0] = A_Sensor'\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:419: AssertionError\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] _ TestMatrixConversion.test_convert_A_matrix_single_modality_multiple_factors __\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_A_matrix_single_modality_multiple_factors>\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] def test_convert_A_matrix_single_modality_multiple_factors(self):\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] gnn_spec = create_basic_gnn_spec(\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] obs_modality_names=[\"Sensor\"], num_obs_modalities=[2], # 2 outcomes\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"FactorA\", \"FactorB\"], num_hidden_states_factors=[2, 3], # 2 states, 3 states\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] A_spec={\"Sensor\": \"np.random.rand(2, 2, 3)\"} # Shape (num_outcomes, num_states_fA, num_states_fB)\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(gnn_spec)\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] a_matrix_str = converter.convert_A_matrix()\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] >       self.assertIn(\"A_Sensor = np.random.rand(2, 2, 3)\", a_matrix_str)\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] E       AssertionError: 'A_Sensor = np.random.rand(2, 2, 3)' not found in 'A_Sensor = utils.norm_dist(np.ones((2, 2, 3)))\\nA = np.empty(1, dtype=object)\\nA[0] = A_Sensor'\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:382: AssertionError\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] WARNING  src.render.pymdp_converter:pymdp_converter.py:137 B_matrix spec is a single dict but multiple factors expected. Wrapping in list.\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] ERROR    src.render.pymdp_converter:pymdp_converter.py:135 A_matrix (modality Sensor): ast.literal_eval failed. String 'np.random.rand(2, 2, 3)...'. malformed node or string on line 1: <ast.Call object at 0x74287e4a31d0>\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] Traceback (most recent call last):\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] File \"/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/render/pymdp_converter.py\", line 163, in _parse_string_to_literal\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] return ast.literal_eval(data_str)\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] ^^^^^^^^^^^^^^^^^^^^^^^^^^\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] File \"/home/trim/miniconda/lib/python3.12/ast.py\", line 112, in literal_eval\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] return _convert(node_or_string)\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] ^^^^^^^^^^^^^^^^^^^^^^^^\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] File \"/home/trim/miniconda/lib/python3.12/ast.py\", line 111, in _convert\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] return _convert_signed_num(node)\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] ^^^^^^^^^^^^^^^^^^^^^^^^^\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] File \"/home/trim/miniconda/lib/python3.12/ast.py\", line 85, in _convert_signed_num\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] return _convert_num(node)\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] ^^^^^^^^^^^^^^^^^^\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] File \"/home/trim/miniconda/lib/python3.12/ast.py\", line 76, in _convert_num\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] _raise_malformed_node(node)\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] File \"/home/trim/miniconda/lib/python3.12/ast.py\", line 73, in _raise_malformed_node\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] raise ValueError(msg + f': {node!r}')\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] ValueError: malformed node or string on line 1: <ast.Call object at 0x74287e4a31d0>\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] ___ TestMatrixConversion.test_convert_A_matrix_single_modality_single_factor ___\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_A_matrix_single_modality_single_factor>\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] def test_convert_A_matrix_single_modality_single_factor(self):\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] \"\"\"Test A matrix conversion for a simple case: 1 obs modality, 1 state factor.\"\"\"\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] gnn_spec = create_basic_gnn_spec(\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] obs_modality_names=[\"Visual\"], num_obs_modalities=[2],\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"Location\"], num_hidden_states_factors=[3],\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] A_spec={\"Visual\": \"np.array([[0.8, 0.1, 0.1], [0.1, 0.8, 0.1]])\"} # 2 obs_outcomes x 3 states\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(gnn_spec)\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] a_matrix_str = converter.convert_A_matrix()\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] >       self.assertIn(\"A_Visual = np.array([[0.8, 0.1, 0.1], [0.1, 0.8, 0.1]])\", a_matrix_str)\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] E       AssertionError: 'A_Visual = np.array([[0.8, 0.1, 0.1], [0.1, 0.8, 0.1]])' not found in 'A_Visual = np.array([[0.8,0.1,0.1],[0.1,0.8,0.1]])\\nA = np.empty(1, dtype=object)\\nA[0] = A_Visual'\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:351: AssertionError\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] ___________ TestMatrixConversion.test_convert_B_matrix_invalid_spec ____________\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_B_matrix_invalid_spec>\n2025-06-06 13:41:24,751 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] def test_convert_B_matrix_invalid_spec(self):\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] gnn_spec_mismatch = create_basic_gnn_spec(\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"Position\"], num_hidden_states_factors=[3],\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] num_control_factors=[2], control_action_names_per_factor={0: [\"Stay\", \"Move\"]},\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] B_spec={\"Position\": \"np.array([[1,0],[0,1]])\"} # Incorrect shape for B\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] converter_mismatch = GnnToPyMdpConverter(gnn_spec_mismatch)\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] b_matrix_str_mismatch = converter_mismatch.convert_B_matrix()\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] >       self.assertTrue(any(\"Error processing B matrix for factor Position\" in log for log in converter_mismatch.conversion_log) or\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] any(\"Could not parse or validate matrix B_Position\" in log for log in converter_mismatch.conversion_log))\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] E       AssertionError: False is not true\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:475: AssertionError\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] __ TestMatrixConversion.test_convert_B_matrix_multiple_factors_mixed_control ___\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_B_matrix_multiple_factors_mixed_control>\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] def test_convert_B_matrix_multiple_factors_mixed_control(self):\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] gnn_spec = create_basic_gnn_spec(\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"Location\", \"Tool\"], num_hidden_states_factors=[2, 3], # Loc:2 states, Tool:3 states\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] num_control_factors=[2, 0], # Location controlled (2 actions), Tool not controlled\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] control_action_names_per_factor={0: [\"Left\", \"Right\"]}, # Actions for Location\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] B_spec={\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \"Location\": \"np.array([[[0.9,0.1],[0.1,0.9]], [[0.1,0.9],[0.9,0.1]]])\", # 2 actions x 2 states x 2 states\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] }\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(gnn_spec)\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] b_matrix_str = converter.convert_B_matrix()\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] >       self.assertIn(\"B_Location = np.array([[[0.9,0.1],[0.1,0.9]], [[0.1,0.9],[0.9,0.1]]])\", b_matrix_str)\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] E       AssertionError: 'B_Location = np.array([[[0.9,0.1],[0.1,0.9]], [[0.1,0.9],[0.9,0.1]]])' not found in 'B_Location = utils.norm_dist(np.ones(2, 2, 2))\\nB_Tool = utils.norm_dist(np.eye(3)[:, :, np.newaxis])\\nB = np.empty(2, dtype=object)\\nB[0] = B_Location\\nB[1] = B_Tool'\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:448: AssertionError\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] WARNING  src.render.pymdp_converter:pymdp_converter.py:137 B_matrix spec is a single dict but multiple factors expected. Wrapping in list.\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] _____ TestMatrixConversion.test_convert_B_matrix_single_factor_controlled ______\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_B_matrix_single_factor_controlled>\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] def test_convert_B_matrix_single_factor_controlled(self):\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] gnn_spec = create_basic_gnn_spec(\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"Position\"], num_hidden_states_factors=[3],\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] num_control_factors=[2], # 2 actions for Position factor\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] control_action_names_per_factor={0: [\"Stay\", \"Move\"]},\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] B_spec={\"Position\": \"np.array([[[1,0,0],[0,1,0],[0,0,1]], [[0,1,0],[0,0,1],[1,0,0]]])\"} # 2 actions x 3 states x 3 states\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(gnn_spec)\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] b_matrix_str = converter.convert_B_matrix()\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] >       self.assertIn(\"B_Position = np.array([[[1,0,0],[0,1,0],[0,0,1]], [[0,1,0],[0,0,1],[1,0,0]]])\", b_matrix_str)\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] E       AssertionError: 'B_Position = np.array([[[1,0,0],[0,1,0],[0,0,1]], [[0,1,0],[0,0,1],[1,0,0]]])' not found in 'B_Position = np.array([[[1,0,0],[0,1,0],[0,0,1]],[[0,1,0],[0,0,1],[1,0,0]]])\\nB = np.empty(1, dtype=object)\\nB[0] = B_Position'\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:432: AssertionError\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] ___________ TestMatrixConversion.test_convert_C_vector_invalid_spec ____________\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_C_vector_invalid_spec>\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] def test_convert_C_vector_invalid_spec(self):\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] gnn_spec_mismatch = create_basic_gnn_spec(\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] obs_modality_names=[\"Reward\"], num_obs_modalities=[3],\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] C_spec={\"Reward\": \"np.array([0.0, 1.0])\"} # Mismatched size (2 vs 3)\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] converter_mismatch = GnnToPyMdpConverter(gnn_spec_mismatch)\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] c_str_mismatch = converter_mismatch.convert_C_vector()\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] >       self.assertTrue(any(\"Error processing C vector for modality Reward\" in log for log in converter_mismatch.conversion_log))\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] E       AssertionError: False is not true\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:525: AssertionError\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] ERROR    src.render.pymdp_converter:pymdp_converter.py:137 C_vector (modality Reward): Shape mismatch. Expected (3,), got (2,). Using default neutral C[0].\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] ________ TestMatrixConversion.test_convert_C_vector_multiple_modalities ________\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_C_vector_multiple_modalities>\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] def test_convert_C_vector_multiple_modalities(self):\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] gnn_spec = create_basic_gnn_spec(\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] obs_modality_names=[\"Feedback\", \"Score\"], num_obs_modalities=[2, 5],\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] C_spec={\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \"Feedback\": \"np.array([1.0, -1.0])\",\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] \"Score\": \"np.array([0, 10, 20, 30, 0])\"\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] }\n2025-06-06 13:41:24,752 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(gnn_spec)\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] c_vector_str = converter.convert_C_vector()\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] >       self.assertIn(\"C_Feedback = np.array([1.0, -1.0])\", c_vector_str)\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] E       AssertionError: 'C_Feedback = np.array([1.0, -1.0])' not found in 'C_Feedback = np.zeros(2)\\nC_Score = np.array([0,10,20,30,0])\\nC = np.empty(2, dtype=object)\\nC[0] = C_Feedback\\nC[1] = C_Score'\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:512: AssertionError\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] WARNING  src.render.pymdp_converter:pymdp_converter.py:137 A_matrix spec is a single dict but multiple modalities expected. Wrapping in list.\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] ERROR    src.render.pymdp_converter:pymdp_converter.py:137 C_vector (modality Feedback): Shape mismatch. Expected (2,), got (). Using default neutral C[0].\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] __________ TestMatrixConversion.test_convert_C_vector_single_modality __________\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_C_vector_single_modality>\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] def test_convert_C_vector_single_modality(self):\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] gnn_spec = create_basic_gnn_spec(\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] obs_modality_names=[\"Reward\"], num_obs_modalities=[3], # 3 outcomes for Reward modality\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] C_spec={\"Reward\": \"np.array([0.0, 1.0, -1.0])\"}\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(gnn_spec)\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] c_vector_str = converter.convert_C_vector()\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] >       self.assertIn(\"C_Reward = np.array([0.0, 1.0, -1.0])\", c_vector_str)\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] E       AssertionError: 'C_Reward = np.array([0.0, 1.0, -1.0])' not found in 'C_Reward = np.zeros(3)\\nC = np.empty(1, dtype=object)\\nC[0] = C_Reward'\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:498: AssertionError\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] ERROR    src.render.pymdp_converter:pymdp_converter.py:137 C_vector (modality Reward): Shape mismatch. Expected (3,), got (). Using default neutral C[0].\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] ___________ TestMatrixConversion.test_convert_D_vector_invalid_spec ____________\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_D_vector_invalid_spec>\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] def test_convert_D_vector_invalid_spec(self):\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] gnn_spec_mismatch = create_basic_gnn_spec(\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"Belief\"], num_hidden_states_factors=[4],\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] D_spec={\"Belief\": \"np.array([0.1, 0.9])\"} # Mismatched size (2 vs 4)\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] converter_mismatch = GnnToPyMdpConverter(gnn_spec_mismatch)\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] d_str_mismatch = converter_mismatch.convert_D_vector()\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] >       self.assertTrue(any(\"Error processing D vector for factor Belief\" in log for log in converter_mismatch.conversion_log))\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] E       AssertionError: False is not true\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:573: AssertionError\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] ERROR    src.render.pymdp_converter:pymdp_converter.py:137 D_vector (factor Belief): Shape mismatch. Expected (4,), got (2,). Using default uniform.\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] _________ TestMatrixConversion.test_convert_D_vector_multiple_factors __________\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_D_vector_multiple_factors>\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] def test_convert_D_vector_multiple_factors(self):\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] gnn_spec = create_basic_gnn_spec(\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"Location\", \"Topic\"], num_hidden_states_factors=[2, 3],\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] D_spec={\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \"Location\": \"np.array([0.8, 0.2])\",\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \"Topic\": \"np.array([0.5, 0.25, 0.25])\"\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] }\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(gnn_spec)\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] d_vector_str = converter.convert_D_vector()\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] >       self.assertIn(\"D_Location = np.array([0.8, 0.2])\", d_vector_str)\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] E       AssertionError: 'D_Location = np.array([0.8, 0.2])' not found in 'D_Location = np.array([0.8,0.2])\\nD_Topic = np.array([0.5,0.25,0.25])\\nD = np.empty(2, dtype=object)\\nD[0] = D_Location\\nD[1] = D_Topic'\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:560: AssertionError\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] WARNING  src.render.pymdp_converter:pymdp_converter.py:137 B_matrix spec is a single dict but multiple factors expected. Wrapping in list.\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] ___________ TestMatrixConversion.test_convert_D_vector_single_factor ___________\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_D_vector_single_factor>\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] def test_convert_D_vector_single_factor(self):\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] gnn_spec = create_basic_gnn_spec(\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"Belief\"], num_hidden_states_factors=[4],\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] D_spec={\"Belief\": \"np.array([0.1, 0.2, 0.3, 0.4])\"}\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(gnn_spec)\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] d_vector_str = converter.convert_D_vector()\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] >       self.assertIn(\"D_Belief = np.array([0.1, 0.2, 0.3, 0.4])\", d_vector_str)\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] E       AssertionError: 'D_Belief = np.array([0.1, 0.2, 0.3, 0.4])' not found in 'D_Belief = np.array([0.1,0.2,0.3,0.4])\\nD = np.empty(1, dtype=object)\\nD[0] = D_Belief'\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:546: AssertionError\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] ___________ TestMatrixConversion.test_convert_E_vector_invalid_spec ____________\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestMatrixConversion testMethod=test_convert_E_vector_invalid_spec>\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] def test_convert_E_vector_invalid_spec(self):\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] gnn_spec_no_E = create_basic_gnn_spec(\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"S1\"], num_hidden_states_factors=[2],\n2025-06-06 13:41:24,753 - __main__ - INFO - [pytest] num_control_factors=[2], control_action_names_per_factor={0: [\"a1\", \"a2\"]},\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] E_spec=None\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] converter_no_E = GnnToPyMdpConverter(gnn_spec_no_E)\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] e_str_no_E = converter_no_E.convert_E_vector()\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] >       self.assertIn(\"E = None\", e_str_no_E)\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] E       AssertionError: 'E = None' not found in '# E vector set to None due to no E specification.'\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:608: AssertionError\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] ______ TestAgentAndUsageCodeGeneration.test_extract_agent_hyperparameters ______\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestAgentAndUsageCodeGeneration testMethod=test_extract_agent_hyperparameters>\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] def test_extract_agent_hyperparameters(self):\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] base_spec = create_basic_gnn_spec() # Minimal spec\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] # Scenario 1: No hyperparameters specified\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] converter_no_params = GnnToPyMdpConverter(base_spec)\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] agent_p, policy_p, qs_init_p = converter_no_params.extract_agent_hyperparameters()\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] >       self.assertIsNone(agent_p)\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] E       AssertionError: {} is not None\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:631: AssertionError\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] _ TestAgentAndUsageCodeGeneration.test_generate_agent_instantiation_code_with_action_names _\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestAgentAndUsageCodeGeneration testMethod=test_generate_agent_instantiation_code_with_action_names>\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] def test_generate_agent_instantiation_code_with_action_names(self):\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] gnn_spec = create_basic_gnn_spec(\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"S1\"], num_hidden_states_factors=[2],\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] num_control_factors=[2],\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] control_action_names_per_factor={0: [\"Up\", \"Down\"]} # Factor 0 is S1\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(gnn_spec)\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] _ = converter.convert_A_matrix(); _ = converter.convert_B_matrix(); _ = converter.convert_C_vector(); _ = converter.convert_D_vector()\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] agent_code = converter.generate_agent_instantiation_code()\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] >       self.assertIn(\"agent = Agent(\", agent_code)\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] E       AssertionError: 'agent = Agent(' not found in '# Cannot instantiate agent: missing modalities or state factors'\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:755: AssertionError\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] ERROR    src.render.pymdp_converter:pymdp_converter.py:137 Cannot generate agent instantiation with no observation modalities or hidden state factors.\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] _ TestAgentAndUsageCodeGeneration.test_generate_agent_instantiation_code_with_hyperparams _\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestAgentAndUsageCodeGeneration testMethod=test_generate_agent_instantiation_code_with_hyperparams>\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] def test_generate_agent_instantiation_code_with_hyperparams(self):\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] hyperparams = {\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \"agent_params\": {\"planning_horizon\": 1, \"use_param_info_gain\": False},\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \"policy_params\": {\"initial_action_selection\": \"random\"},\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \"qs_initial_params\": {\"method\": \"fixed\", \"values\": \"np.array([0.1,0.9])\"} # qs_initial will be handled by qs_initial arg\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] }\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] gnn_spec = create_basic_gnn_spec(\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] obs_modality_names=[\"O\"], num_obs_modalities=[2],\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"S\"], num_hidden_states_factors=[2],\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] agent_hyperparameters=hyperparams\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(gnn_spec)\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] # Process matrices and extract hyperparams\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] _ = converter.convert_A_matrix(); _ = converter.convert_B_matrix(); _ = converter.convert_C_vector(); _ = converter.convert_D_vector()\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] extracted_agent_params, extracted_policy_params, extracted_qs_initial_params = converter.extract_agent_hyperparameters()\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] # The qs_initial_params are used to generate a qs_initial numpy array string\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] # which is then passed to generate_agent_instantiation_code\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] qs_initial_str = None\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] if extracted_qs_initial_params and extracted_qs_initial_params.get(\"method\") == \"fixed\":\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] qs_initial_val_str = extracted_qs_initial_params.get(\"values\")\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] if qs_initial_val_str:\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] qs_initial_str = (\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] f\"initial_qs_S = {qs_initial_val_str}\\n\"\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] f\"initial_qs = np.empty(1, dtype=object)\\n\"\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] f\"initial_qs[0] = initial_qs_S\"\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] converter.script_parts[\"preamble_vars\"].append(qs_initial_str)\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] qs_initial_arg_for_agent = \"initial_qs\"\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] else:\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] qs_initial_arg_for_agent = None\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] agent_code = converter.generate_agent_instantiation_code(\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] agent_params=extracted_agent_params,\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] policy_params=extracted_policy_params,\n2025-06-06 13:41:24,754 - __main__ - INFO - [pytest] >           qs_initial=qs_initial_arg_for_agent # Pass the name of the variable holding initial_qs\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] E       UnboundLocalError: cannot access local variable 'qs_initial_arg_for_agent' where it is not associated with a value\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:735: UnboundLocalError\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] _______ TestAgentAndUsageCodeGeneration.test_generate_example_usage_code _______\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestAgentAndUsageCodeGeneration testMethod=test_generate_example_usage_code>\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] def test_generate_example_usage_code(self):\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] gnn_spec = create_basic_gnn_spec(\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] obs_modality_names=[\"ObsModality\"], num_obs_modalities=[3],\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"StateFactor\"], num_hidden_states_factors=[2],\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] num_control_factors=[2], control_action_names_per_factor={0: [\"Action1\", \"Action2\"]}\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(gnn_spec)\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] # Ensure necessary attributes are set (as if matrices were converted)\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] converter.num_modalities = 1\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] converter.num_factors = 1\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] # converter.num_obs = [3] # Already set by create_basic_gnn_spec -> __init__\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] # converter.num_states = [2] # Already set\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] example_code_lines = converter.generate_example_usage_code()\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] self.assertIsInstance(example_code_lines, list)\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] self.assertTrue(len(example_code_lines) > 0)\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] example_code_str = \"\\n\".join(example_code_lines)\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] >       self.assertIn(f\"# --- Example Usage for {converter.model_name} ---\", example_code_str)\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] E       AssertionError: '# --- Example Usage for TestModel ---' not found in '\\n# Example usage of the agent\\nif __name__ == \"__main__\":\\n    \\n    # --- Example Usage ---\\n    if __name__ == \\'__main__\\':\\n        # Initialize agent (already done above)\\n        # agent = TestModel  # Agent is already instantiated above as \\'agent\\'\\n        print(f\"Agent \\'TestModel\\' initialized with {agent.num_factors if hasattr(agent, \\'num_factors\\') else \\'N/A\\'} factors and {agent.num_modalities if hasattr(agent, \\'num_modalities\\') else \\'N/A\\'} modalities.\")\\n        o_current = [0] # Example initial observation (e.g. first outcome for each modality)\\n        s_current = [0] # Example initial true states for simulation\\n        T = 5 # Number of timesteps\\n        A_gen_process = copy.deepcopy(A)\\n        B_gen_process = copy.deepcopy(B)\\n    \\n        for t_step in range(T):\\n            print(f\"\\\\n--- Timestep {t_step + 1} ---\")\\n            if o_current is not None:\\n                for g_idx, o_val in enumerate(o_current):\\n                    print(f\"Observation ({obs_names[g_idx] if obs_names else f\\'Modality {g_idx}\\'}): {o_val}\")\\n            # Infer states\\n            qs_current = agent.infer_states(o_current)\\n            if qs_current is not None:\\n                for f_idx, q_val in enumerate(qs_current):\\n                    print(f\"Beliefs about {state_names[f_idx] if state_names else f\\'Factor {f_idx}\\'}: {q_val}\")\\n    \\n            # Infer policies and sample action\\n            q_pi_current, efe_current = agent.infer_policies()\\n            if hasattr(agent, \\'q_pi\\') and agent.q_pi is not None:\\n                print(f\"Posterior over policies (q_pi): {agent.q_pi}\")\\n            if efe_current is not None:\\n                print(f\"Expected Free Energy (EFE): {efe_current}\")\\n            action_agent = agent.sample_action()\\n            # Map agent\\'s action (on control factors) to full environment action vector\\n            action_env = np.zeros(num_factors, dtype=int)\\n            if control_fac_idx and action_agent is not None:\\n                for i, cf_idx in enumerate(control_fac_idx):\\n                    action_env[cf_idx] = int(action_agent[i])\\n            # Construct action names for printing\\n            action_names_str_list = []\\n            if control_fac_idx and action_agent is not None:\\n                for i, cf_idx in enumerate(control_fac_idx):\\n                    factor_action_name_list = agent.action_names.get(cf_idx, []) if hasattr(agent, \\'action_names\\') and isinstance(agent.action_names, dict) else []\\n                    action_idx_on_factor = int(action_agent[i])\\n                    if factor_action_name_list and action_idx_on_factor < len(factor_action_name_list):\\n                        action_names_str_list.append(f\"{state_names[cf_idx] if state_names else f\\'Factor {cf_idx}\\'}: {factor_action_name_list[action_idx_on_factor]} (idx {action_idx_on_factor})\")\\n                    else:\\n                        action_names_str_list.append(f\"{state_names[cf_idx] if state_names else f\\'Factor {cf_idx}\\'}: Action idx {action_idx_on_factor}\")\\n            print(f\"Action taken: {\\', \\'.join(action_names_str_list) if action_names_str_list else \\'No controllable actions or names not found\\'}\")\\n    \\n            # Update true states of the environment based on action\\n            s_next = np.zeros(num_factors, dtype=int)\\n            if s_current is not None and B_gen_process is not None:\\n                for f_idx in range(num_factors):\\n                    # B_gen_process[f_idx] shape: (num_states[f_idx], num_states[f_idx], num_actions_for_this_factor_or_1)\\n                    action_for_factor = action_env[f_idx] if f_idx in control_fac_idx else 0\\n                    s_next[f_idx] = utils.sample(B_gen_process[f_idx][:, s_current[f_idx], action_for_factor])\\n            s_current = s_next.tolist()\\n            if s_current is not None:\\n                for f_idx, s_val in enumerate(s_current):\\n                    print(f\"New true state ({state_names[f_idx] if state_names else f\\'Factor {f_idx}\\'}): {s_val}\")\\n    \\n            # Generate next observation based on new true states\\n            o_next = np.zeros(num_modalities, dtype=int)\\n            if s_current is not None and A_gen_process is not None:\\n                for g_idx in range(num_modalities):\\n                    # A_gen_process[g_idx] shape: (num_obs[g_idx], num_states[0], num_states[1], ...)\\n                    # Construct index for A matrix: (outcome_idx, s_f0, s_f1, ...)\\n                    prob_vector = A_gen_process[g_idx][:, s_current[0]]\\n                    o_next[g_idx] = utils.sample(prob_vector)\\n            o_current = o_next.tolist()\\n    \\n        print(f\"\\\\nSimulation finished after {T} timesteps.\")'\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:778: AssertionError\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] _________ TestFullScriptGeneration.test_get_full_python_script_minimal _________\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestFullScriptGeneration testMethod=test_get_full_python_script_minimal>\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] def test_get_full_python_script_minimal(self):\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] gnn_spec = create_basic_gnn_spec(\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] model_name=\"MinimalAgent\",\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] obs_modality_names=[\"O\"], num_obs_modalities=[2],\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"S\"], num_hidden_states_factors=[2]\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(gnn_spec)\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] script_content = converter.get_full_python_script(include_example_usage=False)\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] self.assertIsInstance(script_content, str)\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] self.assertIn(\"import numpy as np\", script_content)\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] self.assertIn(\"from pymdp.agent import Agent\", script_content)\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] >       self.assertIn(\"# --- GNN Model: MinimalAgent ---\", script_content)\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] E       AssertionError: '# --- GNN Model: MinimalAgent ---' not found in '#!/usr/bin/env python3\\n\"\"\"\\nPyMDP Agent Script - MinimalAgent\\n\\nGenerated by GNN PyMDP Renderer\\n\"\"\"\\n\\n# =============================================================================\\n# WARNING: This is an automatically generated script from GNN\\n# If no matrix parameters were provided in the GNN spec, this script will\\n# contain minimal placeholder matrices that may not execute correctly.\\n# It is intended for basic structure only and may need manual adjustment.\\n# =============================================================================\\n\\nimport numpy as np\\nfrom pymdp.agent import Agent\\nfrom pymdp import utils\\nfrom pymdp import maths\\nimport copy\\nimport sys\\nimport inspect\\nimport traceback\\n\\n\\n\\n# --- GNN to PyMDP Conversion Summary ---\\n# INFO: Starting GNN data extraction.\\n# INFO: Using direct \\'num_obs_modalities\\' from GNN spec: [2]\\n# INFO: Observation dimensions (num_obs) derived directly from gnn_spec.num_obs_modalities: [2]\\n# INFO: Observation names derived directly from gnn_spec.obs_modality_names: [\\'O\\']\\n# INFO: Using direct \\'num_hidden_states_factors\\' from GNN spec: [2]\\n# INFO: State dimensions (num_states) derived directly from gnn_spec.num_hidden_states_factors: [2]\\n# INFO: State names derived directly from gnn_spec.hidden_state_factor_names: [\\'S\\']\\n# INFO: No control factors found in StateSpaceBlock.HiddenStateFactors.\\n# INFO: Finished GNN data extraction.\\n# INFO: Matrix definitions not generated yet. Generating matrices...\\n# INFO: E_vector: No E (policy prior) specification found. Defaulting to None.\\n# INFO: Agent instantiation code not generated yet. Generating...\\n# --- End of GNN to PyMDP Conversion Summary ---\\n\\n\\nnum_obs = [2]\\nnum_modalities = 1\\nobs_names = [\"O\"]\\nnum_states = [2]\\nnum_factors = 1\\nstate_names = [\"S\"]\\ncontrol_fac_idx = []\\nnum_controls = [1]\\n\\nA_O = utils.norm_dist(np.ones((2, 2)))\\nA = np.empty(1, dtype=object)\\nA[0] = A_O\\nB_S = utils.norm_dist(np.eye(2)[:, :, np.newaxis])\\nB = np.empty(1, dtype=object)\\nB[0] = B_S\\nC_O = np.zeros(2)\\nC = np.empty(1, dtype=object)\\nC[0] = C_O\\nD_S = np.ones(2) / 2.0\\nD = np.empty(1, dtype=object)\\nD[0] = D_S\\nE = None\\n\\nagent = Agent(\\n    A=A,\\n    B=B,\\n    C=C,\\n    D=D,\\n    E=E\\n)\\n\\n# Set action names as agent attribute\\nagent.action_names = {}\\n\\n\\nprint(\\'--- PyMDP Runtime Debug ---\\')\\ntry:\\n    import pymdp\\n    import inspect \\n    import traceback \\n    import ast\\n\\n    # try:\\n    #     print(f\\'AGENT_SCRIPT: Imported pymdp version: {pymdp.__version__}\\') # Commented out\\n    # except AttributeError:\\n    #     print(\\'AGENT_SCRIPT: pymdp.__version__ attribute not found.\\') # Commented out\\n    # print(f\\'AGENT_SCRIPT: pymdp module location: {pymdp.__file__}\\') # Commented out\\n    from pymdp.agent import Agent\\n    print(f\\'AGENT_SCRIPT: Imported Agent: {Agent}\\')\\n    print(f\\'AGENT_SCRIPT: Agent module location: {inspect.getfile(Agent)}\\')\\n    print(\\'AGENT_SCRIPT: Checking for required variables in global scope:\\')\\n    print(f\"  AGENT_SCRIPT: A = {A if \\'A\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: B = {B if \\'B\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: C = {C if \\'C\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: D = {D if \\'D\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: E = {E if \\'E\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: control_fac_idx = {control_fac_idx if \\'control_fac_idx\\' in globals() else \\'Not Defined\\'}\")\\n    print(\\'  AGENT_SCRIPT: action_names = {}\\')\\n    print(\\'  AGENT_SCRIPT: qs_initial = None\\')\\n    print(\\'  AGENT_SCRIPT: agent_hyperparams = {}\\')\\n    print(\\'AGENT_SCRIPT: Attempting to instantiate agent with defined parameters for debug...\\')\\n    \\n    local_agent_hyperparams_str_val = \\'{}\\'\\n\\n    agent_params_for_debug = {}\\n    if local_agent_hyperparams_str_val and local_agent_hyperparams_str_val.strip() and local_agent_hyperparams_str_val.strip() != \\'{}\\':\\n        try:\\n            agent_params_for_debug = ast.literal_eval(local_agent_hyperparams_str_val)\\n            if not isinstance(agent_params_for_debug, dict):\\n                print(\"AGENT_SCRIPT: Debug - Parsed agent_hyperparams_dict_str (\\'\" + local_agent_hyperparams_str_val + \"\\') was not a dict.\")\\n                agent_params_for_debug = {} \\n        except Exception as e_hyper_parse:\\n            print(\"AGENT_SCRIPT: Debug - Error parsing agent_hyperparams_dict_str (\\'\" + local_agent_hyperparams_str_val + \"\\'): \" + str(e_hyper_parse))\\n            agent_params_for_debug = {}\\n    else:\\n        print(\"AGENT_SCRIPT: Debug - agent_hyperparams_dict_str (\\'\" + local_agent_hyperparams_str_val + \"\\') is empty or \\'{}\\'. Using empty dict for debug agent.\")\\n    \\n    debug_params_copy = {k: v for k, v in agent_params_for_debug.items() if not (isinstance(v, str) and v == \\'None\\')}\\n    temp_agent = Agent(**debug_params_copy)\\n    print(f\\'AGENT_SCRIPT: Debug agent successfully instantiated: {temp_agent}\\')\\nexcept Exception as e_debug:\\n    print(f\\'AGENT_SCRIPT: Error during PyMDP runtime debug: {e_debug}\\')\\n    print(\"AGENT_SCRIPT: Traceback:\")\\n    print(traceback.format_exc())\\nprint(\\'--- End PyMDP Runtime Debug ---\\')\\n'\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:800: AssertionError\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] ____ TestFullScriptGeneration.test_get_full_python_script_no_example_usage _____\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestFullScriptGeneration testMethod=test_get_full_python_script_no_example_usage>\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] def test_get_full_python_script_no_example_usage(self):\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] gnn_spec = create_basic_gnn_spec(model_name=\"NoExample\")\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(gnn_spec)\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] script_content = converter.get_full_python_script(include_example_usage=False)\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] >       self.assertIn(\"# --- GNN Model: NoExample ---\", script_content)\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] E       AssertionError: '# --- GNN Model: NoExample ---' not found in '#!/usr/bin/env python3\\n\"\"\"\\nPyMDP Agent Script - NoExample\\n\\nGenerated by GNN PyMDP Renderer\\n\"\"\"\\n\\n# =============================================================================\\n# WARNING: This is an automatically generated script from GNN\\n# If no matrix parameters were provided in the GNN spec, this script will\\n# contain minimal placeholder matrices that may not execute correctly.\\n# It is intended for basic structure only and may need manual adjustment.\\n# =============================================================================\\n\\nimport numpy as np\\nfrom pymdp.agent import Agent\\nfrom pymdp import utils\\nfrom pymdp import maths\\nimport copy\\nimport sys\\nimport inspect\\nimport traceback\\n\\n\\n\\n# --- GNN to PyMDP Conversion Summary ---\\n# INFO: Starting GNN data extraction.\\n# INFO: Observation dimensions derived from StateSpaceBlock.ObservationModalities (dict format): []\\n# INFO: Observation names derived from StateSpaceBlock.ObservationModalities (dict format): []\\n# INFO: State dimensions derived from StateSpaceBlock.HiddenStateFactors (dict format): []\\n# INFO: State names derived from StateSpaceBlock.HiddenStateFactors (dict format): []\\n# INFO: Finished GNN data extraction.\\n# INFO: Matrix definitions not generated yet. Generating matrices...\\n# INFO: A_matrix: No observation modalities defined. \\'A\\' will be None.\\n# INFO: B_matrix: No hidden state factors defined. \\'B\\' will be None.\\n# INFO: C_vector: No observation modalities defined. \\'C\\' will be None.\\n# INFO: D_vector: No hidden state factors defined. \\'D\\' will be None.\\n# INFO: E_vector: No E (policy prior) specification found. Defaulting to None.\\n# INFO: Agent instantiation code not generated yet. Generating...\\n# ERROR: Cannot generate agent instantiation with no observation modalities or hidden state factors.\\n# --- End of GNN to PyMDP Conversion Summary ---\\n\\n\\ncontrol_fac_idx = []\\nnum_controls = []\\n\\nA = None\\nB = None\\nC = None\\nD = None\\nE = None\\n\\nA = None # No modalities or states defined\\nB = None # No state factors defined\\nC = None # No modalities defined\\nD = None # No state factors defined\\n\\n\\nprint(\\'--- PyMDP Runtime Debug ---\\')\\ntry:\\n    import pymdp\\n    import inspect \\n    import traceback \\n    import ast\\n\\n    # try:\\n    #     print(f\\'AGENT_SCRIPT: Imported pymdp version: {pymdp.__version__}\\') # Commented out\\n    # except AttributeError:\\n    #     print(\\'AGENT_SCRIPT: pymdp.__version__ attribute not found.\\') # Commented out\\n    # print(f\\'AGENT_SCRIPT: pymdp module location: {pymdp.__file__}\\') # Commented out\\n    from pymdp.agent import Agent\\n    print(f\\'AGENT_SCRIPT: Imported Agent: {Agent}\\')\\n    print(f\\'AGENT_SCRIPT: Agent module location: {inspect.getfile(Agent)}\\')\\n    print(\\'AGENT_SCRIPT: Checking for required variables in global scope:\\')\\n    print(f\"  AGENT_SCRIPT: A = {A if \\'A\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: B = {B if \\'B\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: C = {C if \\'C\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: D = {D if \\'D\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: E = {E if \\'E\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: control_fac_idx = {control_fac_idx if \\'control_fac_idx\\' in globals() else \\'Not Defined\\'}\")\\n    print(\\'  AGENT_SCRIPT: action_names = {}\\')\\n    print(\\'  AGENT_SCRIPT: qs_initial = None\\')\\n    print(\\'  AGENT_SCRIPT: agent_hyperparams = {}\\')\\n    print(\\'AGENT_SCRIPT: Attempting to instantiate agent with defined parameters for debug...\\')\\n    \\n    local_agent_hyperparams_str_val = \\'{}\\'\\n\\n    agent_params_for_debug = {}\\n    if local_agent_hyperparams_str_val and local_agent_hyperparams_str_val.strip() and local_agent_hyperparams_str_val.strip() != \\'{}\\':\\n        try:\\n            agent_params_for_debug = ast.literal_eval(local_agent_hyperparams_str_val)\\n            if not isinstance(agent_params_for_debug, dict):\\n                print(\"AGENT_SCRIPT: Debug - Parsed agent_hyperparams_dict_str (\\'\" + local_agent_hyperparams_str_val + \"\\') was not a dict.\")\\n                agent_params_for_debug = {} \\n        except Exception as e_hyper_parse:\\n            print(\"AGENT_SCRIPT: Debug - Error parsing agent_hyperparams_dict_str (\\'\" + local_agent_hyperparams_str_val + \"\\'): \" + str(e_hyper_parse))\\n            agent_params_for_debug = {}\\n    else:\\n        print(\"AGENT_SCRIPT: Debug - agent_hyperparams_dict_str (\\'\" + local_agent_hyperparams_str_val + \"\\') is empty or \\'{}\\'. Using empty dict for debug agent.\")\\n    \\n    debug_params_copy = {k: v for k, v in agent_params_for_debug.items() if not (isinstance(v, str) and v == \\'None\\')}\\n    temp_agent = Agent(**debug_params_copy)\\n    print(f\\'AGENT_SCRIPT: Debug agent successfully instantiated: {temp_agent}\\')\\nexcept Exception as e_debug:\\n    print(f\\'AGENT_SCRIPT: Error during PyMDP runtime debug: {e_debug}\\')\\n    print(\"AGENT_SCRIPT: Traceback:\")\\n    print(traceback.format_exc())\\nprint(\\'--- End PyMDP Runtime Debug ---\\')\\n'\n2025-06-06 13:41:24,755 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:861: AssertionError\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] ERROR    src.render.pymdp_converter:pymdp_converter.py:137 Cannot generate agent instantiation with no observation modalities or hidden state factors.\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] ____ TestFullScriptGeneration.test_get_full_python_script_with_all_elements ____\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestFullScriptGeneration testMethod=test_get_full_python_script_with_all_elements>\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] def test_get_full_python_script_with_all_elements(self):\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] hyperparams = {\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] \"agent_params\": {\"planning_horizon\": 2},\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] \"policy_params\": {\"initial_action_selection\": \"boltzmann\"}\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] }\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] gnn_spec = create_basic_gnn_spec(\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] model_name=\"ComplexAgent\",\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] obs_modality_names=[\"Visual\", \"Audio\"], num_obs_modalities=[2,3],\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] hidden_state_factor_names=[\"Location\", \"Context\"], num_hidden_states_factors=[4,2],\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] num_control_factors=[3,0], control_action_names_per_factor={0:[\"L\",\"R\",\"S\"]},\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] A_spec={\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] \"Visual\": \"np.random.rand(2,4,2)\",\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] \"Audio\": \"np.random.rand(3,4,2)\"\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] },\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] B_spec={\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] \"Location\": \"np.random.rand(3,4,4)\", # Controlled\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] # Context is not controlled, will get identity\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] },\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] C_spec={\"Visual\": \"np.zeros(2)\", \"Audio\": \"np.zeros(3)\"},\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] D_spec={\"Location\": \"np.ones(4)/4.0\", \"Context\": \"np.ones(2)/2.0\"},\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] E_spec={\"policy_prior\": \"np.ones(10)/10.0\"}, # Assuming 10 policies for test\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] agent_hyperparameters=hyperparams\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(gnn_spec)\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] script_content = converter.get_full_python_script(include_example_usage=True)\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] self.assertIn(\"import numpy as np\", script_content)\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] self.assertIn(\"from pymdp.agent import Agent\", script_content)\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] >       self.assertIn(\"# --- GNN Model: ComplexAgent ---\", script_content)\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] E       AssertionError: '# --- GNN Model: ComplexAgent ---' not found in '#!/usr/bin/env python3\\n\"\"\"\\nPyMDP Agent Script - ComplexAgent\\n\\nGenerated by GNN PyMDP Renderer\\n\"\"\"\\n\\n# =============================================================================\\n# WARNING: This is an automatically generated script from GNN\\n# If no matrix parameters were provided in the GNN spec, this script will\\n# contain minimal placeholder matrices that may not execute correctly.\\n# It is intended for basic structure only and may need manual adjustment.\\n# =============================================================================\\n\\nimport numpy as np\\nfrom pymdp.agent import Agent\\nfrom pymdp import utils\\nfrom pymdp import maths\\nimport copy\\nimport sys\\nimport inspect\\nimport traceback\\n\\n\\n\\n# --- GNN to PyMDP Conversion Summary ---\\n# INFO: Starting GNN data extraction.\\n# INFO: Using direct \\'num_obs_modalities\\' from GNN spec: [2, 3]\\n# INFO: Observation dimensions (num_obs) derived directly from gnn_spec.num_obs_modalities: [2, 3]\\n# INFO: Observation names derived directly from gnn_spec.obs_modality_names: [\\'Visual\\', \\'Audio\\']\\n# INFO: Using direct \\'num_hidden_states_factors\\' from GNN spec: [4, 2]\\n# INFO: State dimensions (num_states) derived directly from gnn_spec.num_hidden_states_factors: [4, 2]\\n# INFO: State names derived directly from gnn_spec.hidden_state_factor_names: [\\'Location\\', \\'Context\\']\\n# INFO: Control dimensions derived directly from gnn_spec.num_control_factors: [3, 0]\\n# INFO: Action names for control factor 0 derived directly from gnn_spec.control_action_names_per_factor.\\n# WARNING: A_matrix spec is a single dict but multiple modalities expected. Wrapping in list.\\n# WARNING: B_matrix spec is a single dict but multiple factors expected. Wrapping in list.\\n# INFO: Finished GNN data extraction.\\n# INFO: Matrix definitions not generated yet. Generating matrices...\\n# ERROR: C_vector (modality Visual): ast.literal_eval failed. String \\'np.zeros(2)...\\'. malformed node or string on line 1: <ast.Call object at 0x74287e4d1610>\\n# INFO: C_vector (modality Visual): Failed to parse array data string. Using default.\\n# ERROR: C_vector (modality Audio): ast.literal_eval failed. String \\'np.zeros(3)...\\'. malformed node or string on line 1: <ast.Call object at 0x74287e4d0210>\\n# INFO: C_vector (modality Audio): Failed to parse array data string. Using default.\\n# DEBUG: D_vector (factor Location): Detected numpy expression with operations. Preserving as code.\\n# ERROR: D_vector (factor Location): Shape mismatch. Expected (4,), got (). Using default uniform.\\n# DEBUG: D_vector (factor Context): Detected numpy expression with operations. Preserving as code.\\n# ERROR: D_vector (factor Context): Shape mismatch. Expected (2,), got (). Using default uniform.\\n# DEBUG: E_vector (policy_prior): Detected numpy expression with operations. Preserving as code.\\n# INFO: Agent instantiation code not generated yet. Generating...\\n# INFO: Example usage code not generated yet. Generating...\\n# --- End of GNN to PyMDP Conversion Summary ---\\n\\n\\nnum_obs = [2, 3]\\nnum_modalities = 2\\nobs_names = [\"Visual\", \"Audio\"]\\nnum_states = [4, 2]\\nnum_factors = 2\\nstate_names = [\"Location\", \"Context\"]\\ncontrol_fac_idx = [0]\\nnum_controls = [3, 1]\\n\\nA_Visual = utils.norm_dist(np.ones((2, 4, 2)))\\nA_Audio = utils.norm_dist(np.ones((3, 4, 2)))\\nA = np.empty(2, dtype=object)\\nA[0] = A_Visual\\nA[1] = A_Audio\\nB_Location = utils.norm_dist(np.ones(4, 4, 3))\\nB_Context = utils.norm_dist(np.eye(2)[:, :, np.newaxis])\\nB = np.empty(2, dtype=object)\\nB[0] = B_Location\\nB[1] = B_Context\\nC_Visual = np.zeros(2)\\nC_Audio = np.zeros(3)\\nC = np.empty(2, dtype=object)\\nC[0] = C_Visual\\nC[1] = C_Audio\\nD_Location = np.ones(4) / 4.0\\nD_Context = np.ones(2) / 2.0\\nD = np.empty(2, dtype=object)\\nD[0] = D_Location\\nD[1] = D_Context\\nE_policy_prior = np.ones(10)/10.0\\nE = E_policy_prior\\n\\nagent = Agent(\\n    A=A,\\n    B=B,\\n    C=C,\\n    D=D,\\n    E=E,\\n    control_fac_idx=[0]\\n)\\n\\n# Set action names as agent attribute\\nagent.action_names = {0: [\\'L\\', \\'R\\', \\'S\\']}\\n\\n\\n# Example usage of the agent\\nif __name__ == \"__main__\":\\n    \\n    # --- Example Usage ---\\n    if __name__ == \\'__main__\\':\\n        # Initialize agent (already done above)\\n        # agent = ComplexAgent  # Agent is already instantiated above as \\'agent\\'\\n        print(f\"Agent \\'ComplexAgent\\' initialized with {agent.num_factors if hasattr(agent, \\'num_factors\\') else \\'N/A\\'} factors and {agent.num_modalities if hasattr(agent, \\'num_modalities\\') else \\'N/A\\'} modalities.\")\\n        o_current = [0, 0] # Example initial observation (e.g. first outcome for each modality)\\n        s_current = [0, 0] # Example initial true states for simulation\\n        T = 5 # Number of timesteps\\n        A_gen_process = copy.deepcopy(A)\\n        B_gen_process = copy.deepcopy(B)\\n    \\n        for t_step in range(T):\\n            print(f\"\\\\n--- Timestep {t_step + 1} ---\")\\n            if o_current is not None:\\n                for g_idx, o_val in enumerate(o_current):\\n                    print(f\"Observation ({obs_names[g_idx] if obs_names else f\\'Modality {g_idx}\\'}): {o_val}\")\\n            # Infer states\\n            qs_current = agent.infer_states(o_current)\\n            if qs_current is not None:\\n                for f_idx, q_val in enumerate(qs_current):\\n                    print(f\"Beliefs about {state_names[f_idx] if state_names else f\\'Factor {f_idx}\\'}: {q_val}\")\\n    \\n            # Infer policies and sample action\\n            q_pi_current, efe_current = agent.infer_policies()\\n            if hasattr(agent, \\'q_pi\\') and agent.q_pi is not None:\\n                print(f\"Posterior over policies (q_pi): {agent.q_pi}\")\\n            if efe_current is not None:\\n                print(f\"Expected Free Energy (EFE): {efe_current}\")\\n            action_agent = agent.sample_action()\\n            # Map agent\\'s action (on control factors) to full environment action vector\\n            action_env = np.zeros(num_factors, dtype=int)\\n            if control_fac_idx and action_agent is not None:\\n                for i, cf_idx in enumerate(control_fac_idx):\\n                    action_env[cf_idx] = int(action_agent[i])\\n            # Construct action names for printing\\n            action_names_str_list = []\\n            if control_fac_idx and action_agent is not None:\\n                for i, cf_idx in enumerate(control_fac_idx):\\n                    factor_action_name_list = agent.action_names.get(cf_idx, []) if hasattr(agent, \\'action_names\\') and isinstance(agent.action_names, dict) else []\\n                    action_idx_on_factor = int(action_agent[i])\\n                    if factor_action_name_list and action_idx_on_factor < len(factor_action_name_list):\\n                        action_names_str_list.append(f\"{state_names[cf_idx] if state_names else f\\'Factor {cf_idx}\\'}: {factor_action_name_list[action_idx_on_factor]} (idx {action_idx_on_factor})\")\\n                    else:\\n                        action_names_str_list.append(f\"{state_names[cf_idx] if state_names else f\\'Factor {cf_idx}\\'}: Action idx {action_idx_on_factor}\")\\n            print(f\"Action taken: {\\', \\'.join(action_names_str_list) if action_names_str_list else \\'No controllable actions or names not found\\'}\")\\n    \\n            # Update true states of the environment based on action\\n            s_next = np.zeros(num_factors, dtype=int)\\n            if s_current is not None and B_gen_process is not None:\\n                for f_idx in range(num_factors):\\n                    # B_gen_process[f_idx] shape: (num_states[f_idx], num_states[f_idx], num_actions_for_this_factor_or_1)\\n                    action_for_factor = action_env[f_idx] if f_idx in control_fac_idx else 0\\n                    s_next[f_idx] = utils.sample(B_gen_process[f_idx][:, s_current[f_idx], action_for_factor])\\n            s_current = s_next.tolist()\\n            if s_current is not None:\\n                for f_idx, s_val in enumerate(s_current):\\n                    print(f\"New true state ({state_names[f_idx] if state_names else f\\'Factor {f_idx}\\'}): {s_val}\")\\n    \\n            # Generate next observation based on new true states\\n            o_next = np.zeros(num_modalities, dtype=int)\\n            if s_current is not None and A_gen_process is not None:\\n                for g_idx in range(num_modalities):\\n                    # A_gen_process[g_idx] shape: (num_obs[g_idx], num_states[0], num_states[1], ...)\\n                    # Construct index for A matrix: (outcome_idx, s_f0, s_f1, ...)\\n                    prob_vector = A_gen_process[g_idx][:, s_current[0], s_current[1]]\\n                    o_next[g_idx] = utils.sample(prob_vector)\\n            o_current = o_next.tolist()\\n    \\n        print(f\"\\\\nSimulation finished after {T} timesteps.\")\\n\\n\\nprint(\\'--- PyMDP Runtime Debug ---\\')\\ntry:\\n    import pymdp\\n    import inspect \\n    import traceback \\n    import ast\\n\\n    # try:\\n    #     print(f\\'AGENT_SCRIPT: Imported pymdp version: {pymdp.__version__}\\') # Commented out\\n    # except AttributeError:\\n    #     print(\\'AGENT_SCRIPT: pymdp.__version__ attribute not found.\\') # Commented out\\n    # print(f\\'AGENT_SCRIPT: pymdp module location: {pymdp.__file__}\\') # Commented out\\n    from pymdp.agent import Agent\\n    print(f\\'AGENT_SCRIPT: Imported Agent: {Agent}\\')\\n    print(f\\'AGENT_SCRIPT: Agent module location: {inspect.getfile(Agent)}\\')\\n    print(\\'AGENT_SCRIPT: Checking for required variables in global scope:\\')\\n    print(f\"  AGENT_SCRIPT: A = {A if \\'A\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: B = {B if \\'B\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: C = {C if \\'C\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: D = {D if \\'D\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: E = {E if \\'E\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: control_fac_idx = {control_fac_idx if \\'control_fac_idx\\' in globals() else \\'Not Defined\\'}\")\\n    print(\\'  AGENT_SCRIPT: action_names = {0: [\\'L\\', \\'R\\', \\'S\\']}\\')\\n    print(\\'  AGENT_SCRIPT: qs_initial = None\\')\\n    print(\\'  AGENT_SCRIPT: agent_hyperparams = {}\\')\\n    print(\\'AGENT_SCRIPT: Attempting to instantiate agent with defined parameters for debug...\\')\\n    \\n    local_agent_hyperparams_str_val = \\'{}\\'\\n\\n    agent_params_for_debug = {}\\n    if local_agent_hyperparams_str_val and local_agent_hyperparams_str_val.strip() and local_agent_hyperparams_str_val.strip() != \\'{}\\':\\n        try:\\n            agent_params_for_debug = ast.literal_eval(local_agent_hyperparams_str_val)\\n            if not isinstance(agent_params_for_debug, dict):\\n                print(\"AGENT_SCRIPT: Debug - Parsed agent_hyperparams_dict_str (\\'\" + local_agent_hyperparams_str_val + \"\\') was not a dict.\")\\n                agent_params_for_debug = {} \\n        except Exception as e_hyper_parse:\\n            print(\"AGENT_SCRIPT: Debug - Error parsing agent_hyperparams_dict_str (\\'\" + local_agent_hyperparams_str_val + \"\\'): \" + str(e_hyper_parse))\\n            agent_params_for_debug = {}\\n    else:\\n        print(\"AGENT_SCRIPT: Debug - agent_hyperparams_dict_str (\\'\" + local_agent_hyperparams_str_val + \"\\') is empty or \\'{}\\'. Using empty dict for debug agent.\")\\n    \\n    debug_params_copy = {k: v for k, v in agent_params_for_debug.items() if not (isinstance(v, str) and v == \\'None\\')}\\n    temp_agent = Agent(**debug_params_copy)\\n    print(f\\'AGENT_SCRIPT: Debug agent successfully instantiated: {temp_agent}\\')\\nexcept Exception as e_debug:\\n    print(f\\'AGENT_SCRIPT: Error during PyMDP runtime debug: {e_debug}\\')\\n    print(\"AGENT_SCRIPT: Traceback:\")\\n    print(traceback.format_exc())\\nprint(\\'--- End PyMDP Runtime Debug ---\\')\\n'\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:834: AssertionError\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] WARNING  src.render.pymdp_converter:pymdp_converter.py:137 A_matrix spec is a single dict but multiple modalities expected. Wrapping in list.\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] WARNING  src.render.pymdp_converter:pymdp_converter.py:137 B_matrix spec is a single dict but multiple factors expected. Wrapping in list.\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] ERROR    src.render.pymdp_converter:pymdp_converter.py:135 C_vector (modality Visual): ast.literal_eval failed. String 'np.zeros(2)...'. malformed node or string on line 1: <ast.Call object at 0x74287e4d1610>\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] Traceback (most recent call last):\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] File \"/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/render/pymdp_converter.py\", line 163, in _parse_string_to_literal\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] return ast.literal_eval(data_str)\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] ^^^^^^^^^^^^^^^^^^^^^^^^^^\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] File \"/home/trim/miniconda/lib/python3.12/ast.py\", line 112, in literal_eval\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] return _convert(node_or_string)\n2025-06-06 13:41:24,756 - __main__ - INFO - [pytest] ^^^^^^^^^^^^^^^^^^^^^^^^\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] File \"/home/trim/miniconda/lib/python3.12/ast.py\", line 111, in _convert\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] return _convert_signed_num(node)\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] ^^^^^^^^^^^^^^^^^^^^^^^^^\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] File \"/home/trim/miniconda/lib/python3.12/ast.py\", line 85, in _convert_signed_num\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] return _convert_num(node)\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] ^^^^^^^^^^^^^^^^^^\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] File \"/home/trim/miniconda/lib/python3.12/ast.py\", line 76, in _convert_num\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] _raise_malformed_node(node)\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] File \"/home/trim/miniconda/lib/python3.12/ast.py\", line 73, in _raise_malformed_node\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] raise ValueError(msg + f': {node!r}')\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] ValueError: malformed node or string on line 1: <ast.Call object at 0x74287e4d1610>\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] ERROR    src.render.pymdp_converter:pymdp_converter.py:135 C_vector (modality Audio): ast.literal_eval failed. String 'np.zeros(3)...'. malformed node or string on line 1: <ast.Call object at 0x74287e4d0210>\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] Traceback (most recent call last):\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] File \"/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/render/pymdp_converter.py\", line 163, in _parse_string_to_literal\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] return ast.literal_eval(data_str)\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] ^^^^^^^^^^^^^^^^^^^^^^^^^^\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] File \"/home/trim/miniconda/lib/python3.12/ast.py\", line 112, in literal_eval\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] return _convert(node_or_string)\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] ^^^^^^^^^^^^^^^^^^^^^^^^\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] File \"/home/trim/miniconda/lib/python3.12/ast.py\", line 111, in _convert\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] return _convert_signed_num(node)\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] ^^^^^^^^^^^^^^^^^^^^^^^^^\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] File \"/home/trim/miniconda/lib/python3.12/ast.py\", line 85, in _convert_signed_num\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] return _convert_num(node)\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] ^^^^^^^^^^^^^^^^^^\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] File \"/home/trim/miniconda/lib/python3.12/ast.py\", line 76, in _convert_num\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] _raise_malformed_node(node)\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] File \"/home/trim/miniconda/lib/python3.12/ast.py\", line 73, in _raise_malformed_node\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] raise ValueError(msg + f': {node!r}')\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] ValueError: malformed node or string on line 1: <ast.Call object at 0x74287e4d0210>\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] ERROR    src.render.pymdp_converter:pymdp_converter.py:137 D_vector (factor Location): Shape mismatch. Expected (4,), got (). Using default uniform.\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] ERROR    src.render.pymdp_converter:pymdp_converter.py:137 D_vector (factor Context): Shape mismatch. Expected (2,), got (). Using default uniform.\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] WARNING  src.render.pymdp_utils:pymdp_utils.py:239 Usage of 'control_params' in generate_pymdp_agent_instantiation is deprecated. Merge into other relevant parameter groups.\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] ___ TestHelperMethodsIndirectly.test_parse_string_to_literal_invalid_inputs ____\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_converter.TestHelperMethodsIndirectly testMethod=test_parse_string_to_literal_invalid_inputs>\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] def test_parse_string_to_literal_invalid_inputs(self):\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] converter = GnnToPyMdpConverter(create_basic_gnn_spec())\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] invalid_cases = [\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] \"np.array([1, 2])\", # Not a literal\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] \"some_function()\",   # Not a literal\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] \"[1, 2\",             # Syntax error\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] \"{'a': 1\",           # Syntax error\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] \"1.2.3\",             # Not valid Python\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] \"\\\"unclosed string\",\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] \"\",                  # Empty string\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] \"  \"                 # Whitespace only\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] ]\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] for invalid_input in invalid_cases:\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] with self.subTest(invalid_input=invalid_input):\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] result = converter._parse_string_to_literal(invalid_input, \"test_invalid\")\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] >               self.assertIsNone(result, f\"Expected None for invalid input: {invalid_input}\")\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] E               AssertionError: [1, 2] is not None : Expected None for invalid input: np.array([1, 2])\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_converter.py:906: AssertionError\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] ________ TestGenerateDebugBlock.test_debug_block_generation_none_values ________\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_templates.TestGenerateDebugBlock testMethod=test_debug_block_generation_none_values>\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] def test_debug_block_generation_none_values(self):\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] action_names_str = \"None\" # Representing it as the string \"None\"\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] qs_initial_str = \"None\"\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] agent_hyperparams_str = \"{}\" # Empty dict string\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] debug_block = generate_debug_block(action_names_str, qs_initial_str, agent_hyperparams_str)\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] >       self.assertIn(f\"action_names = Not Defined\", debug_block) # Template logic for None/empty\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] E       AssertionError: 'action_names = Not Defined' not found in '\\nprint(\\'--- PyMDP Runtime Debug ---\\')\\ntry:\\n    import pymdp\\n    import inspect \\n    import traceback \\n    import ast\\n\\n    # try:\\n    #     print(f\\'AGENT_SCRIPT: Imported pymdp version: {pymdp.__version__}\\') # Commented out\\n    # except AttributeError:\\n    #     print(\\'AGENT_SCRIPT: pymdp.__version__ attribute not found.\\') # Commented out\\n    # print(f\\'AGENT_SCRIPT: pymdp module location: {pymdp.__file__}\\') # Commented out\\n    from pymdp.agent import Agent\\n    print(f\\'AGENT_SCRIPT: Imported Agent: {Agent}\\')\\n    print(f\\'AGENT_SCRIPT: Agent module location: {inspect.getfile(Agent)}\\')\\n    print(\\'AGENT_SCRIPT: Checking for required variables in global scope:\\')\\n    print(f\"  AGENT_SCRIPT: A = {A if \\'A\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: B = {B if \\'B\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: C = {C if \\'C\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: D = {D if \\'D\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: E = {E if \\'E\\' in globals() else \\'Not Defined\\'}\")\\n    print(f\"  AGENT_SCRIPT: control_fac_idx = {control_fac_idx if \\'control_fac_idx\\' in globals() else \\'Not Defined\\'}\")\\n    print(\\'  AGENT_SCRIPT: action_names = None\\')\\n    print(\\'  AGENT_SCRIPT: qs_initial = None\\')\\n    print(\\'  AGENT_SCRIPT: agent_hyperparams = {}\\')\\n    print(\\'AGENT_SCRIPT: Attempting to instantiate agent with defined parameters for debug...\\')\\n    \\n    local_agent_hyperparams_str_val = \\'{}\\'\\n\\n    agent_params_for_debug = {}\\n    if local_agent_hyperparams_str_val and local_agent_hyperparams_str_val.strip() and local_agent_hyperparams_str_val.strip() != \\'{}\\':\\n        try:\\n            agent_params_for_debug = ast.literal_eval(local_agent_hyperparams_str_val)\\n            if not isinstance(agent_params_for_debug, dict):\\n                print(\"AGENT_SCRIPT: Debug - Parsed agent_hyperparams_dict_str (\\'\" + local_agent_hyperparams_str_val + \"\\') was not a dict.\")\\n                agent_params_for_debug = {} \\n        except Exception as e_hyper_parse:\\n            print(\"AGENT_SCRIPT: Debug - Error parsing agent_hyperparams_dict_str (\\'\" + local_agent_hyperparams_str_val + \"\\'): \" + str(e_hyper_parse))\\n            agent_params_for_debug = {}\\n    else:\\n        print(\"AGENT_SCRIPT: Debug - agent_hyperparams_dict_str (\\'\" + local_agent_hyperparams_str_val + \"\\') is empty or \\'{}\\'. Using empty dict for debug agent.\")\\n    \\n    debug_params_copy = {k: v for k, v in agent_params_for_debug.items() if not (isinstance(v, str) and v == \\'None\\')}\\n    temp_agent = Agent(**debug_params_copy)\\n    print(f\\'AGENT_SCRIPT: Debug agent successfully instantiated: {temp_agent}\\')\\nexcept Exception as e_debug:\\n    print(f\\'AGENT_SCRIPT: Error during PyMDP runtime debug: {e_debug}\\')\\n    print(\"AGENT_SCRIPT: Traceback:\")\\n    print(traceback.format_exc())\\nprint(\\'--- End PyMDP Runtime Debug ---\\')\\n'\n2025-06-06 13:41:24,757 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_templates.py:67: AssertionError\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] _____________ TestFormatListRecursive.test_flat_list_numpy_arrays ______________\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_utils.TestFormatListRecursive testMethod=test_flat_list_numpy_arrays>\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] def test_flat_list_numpy_arrays(self):\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] data = [np.array([1,2]), np.array([3,4])] # 2 items, simple, might be single line\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] expected = \"[np.array([1,2]),np.array([3,4])]\"\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] result = format_list_recursive(data, 0, self._dummy_item_formatter)\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] >       self.assertEqual(result.replace(\" \", \"\"), expected.replace(\" \", \"\"))\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] E       AssertionError: '[\\nnp.array([1,2]),\\nnp.array([3,4])\\n]' != '[np.array([1,2]),np.array([3,4])]'\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] E       + [np.array([1,2]),np.array([3,4])]\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] E       - [\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] E       - np.array([1,2]),\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] E       - np.array([3,4])\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] E       - ]\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py:106: AssertionError\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] _____________ TestFormatListRecursive.test_flat_list_simple_items ______________\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_utils.TestFormatListRecursive testMethod=test_flat_list_simple_items>\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] def test_flat_list_simple_items(self):\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] data = [1, \"hello\", True]\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] expected = \"[1,\\'hello\\',True]\" # No spaces after comma due to _numpy_array_to_string changes for items\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] >       self.assertEqual(format_list_recursive(data, 0, self._dummy_item_formatter).replace(\" \", \"\"), expected.replace(\" \", \"\"))\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] E       AssertionError: \"[\\n1,\\n'hello',\\nTrue\\n]\" != \"[1,'hello',True]\"\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] E       + [1,'hello',True]\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] E       - [\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] E       - 1,\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] E       - 'hello',\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] E       - True\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] E       - ]\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py:87: AssertionError\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] _ TestGeneratePyMDPMatrixDefinition.test_unexpected_data_type_handled_as_string_or_repr _\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_utils.TestGeneratePyMDPMatrixDefinition testMethod=test_unexpected_data_type_handled_as_string_or_repr>\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] def test_unexpected_data_type_handled_as_string_or_repr(self):\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] data_dict = {'a': 1}\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] result_dict = generate_pymdp_matrix_definition(\"I_dict\", data_dict)\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] >       self.assertIn(\"# Note: Data for I_dict is of unexpected type <class 'dict'>\", result_dict)\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] E       AssertionError: \"# Note: Data for I_dict is of unexpected type <class 'dict'>\" not found in \"I_dict = {'a': 1}\"\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py:207: AssertionError\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] WARNING  src.render.pymdp_utils:pymdp_utils.py:191 Matrix I_dict: Unexpected data type <class 'dict'>. Assigning directly or via repr.\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] ___________ TestGeneratePyMDPAgentInstantiation.test_all_parameters ____________\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] self = <src.tests.render.test_pymdp_utils.TestGeneratePyMDPAgentInstantiation testMethod=test_all_parameters>\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] def test_all_parameters(self):\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] model_params = {\"A\": \"A_m\", \"B\": \"B_m\", \"C\": \"C_m\", \"D\": \"D_m\"}\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] action_names_val = {0: ['L', 'R'], 1: ['U', 'D']}\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] qs_initial_val_str = \"initial_qs_var\"\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] result = generate_pymdp_agent_instantiation(\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] agent_name=\"complex_agent\",\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] model_params=model_params,\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] control_fac_idx_list=[0, 1],\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] policy_len=5,\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] use_utility=True,\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] use_states_info_gain=False,\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] use_param_info_gain=True,\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] action_selection=\"bayesian_model_reduction\",\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] action_names=action_names_val,\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] qs_initial=qs_initial_val_str,\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] learning_params={'lr_pA': 0.1, 'lr_pB': 0.2, 'use_BMA': False},\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] algorithm_params={'num_iter': 10, 'policy_sep_prior': True}\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] )\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] expected_param_order_independent_check = {\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \"A\": \"A_m\", \"B\": \"B_m\", \"C\": \"C_m\", \"D\": \"D_m\",\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \"control_fac_idx\": repr([0, 1]),\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \"policy_len\": repr(5),\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \"use_utility\": repr(True),\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \"use_states_info_gain\": repr(False),\n2025-06-06 13:41:24,758 - __main__ - INFO - [pytest] \"use_param_info_gain\": repr(True),\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] \"action_selection\": repr(\"bayesian_model_reduction\"), # action_selection value is a string\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] \"action_names\": repr(action_names_val),\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] \"qs_initial\": qs_initial_val_str, # This is a variable name\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] \"lr_pA\": repr(0.1),\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] \"lr_pB\": repr(0.2),\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] \"use_BMA\": repr(False),\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] \"num_iter\": repr(10),\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] \"policy_sep_prior\": repr(True)\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] }\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] self.assertTrue(result.startswith(\"complex_agent = Agent(\"))\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] >       self.assertTrue(result.endswith(\")\"))\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] E       AssertionError: False is not true\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] \n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] src/tests/render/test_pymdp_utils.py:273: AssertionError\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] ==================================== PASSES ====================================\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] _ TestGnnToPyMdpConverterInitialization.test_initialization_control_factor_parsing _\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] WARNING  src.render.pymdp_converter:pymdp_converter.py:137 B_matrix spec is a single dict but multiple factors expected. Wrapping in list.\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] _ TestGnnToPyMdpConverterInitialization.test_initialization_state_and_obs_dimensions_direct _\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] WARNING  src.render.pymdp_converter:pymdp_converter.py:137 A_matrix spec is a single dict but multiple modalities expected. Wrapping in list.\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] WARNING  src.render.pymdp_converter:pymdp_converter.py:137 B_matrix spec is a single dict but multiple factors expected. Wrapping in list.\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] _ TestGnnToPyMdpConverterInitialization.test_initialization_with_model_name_sanitization _\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] WARNING  src.render.pymdp_converter:pymdp_converter.py:137 ModelName from GNN spec is not a string (type: <class 'int'>), using default 'pymdp_agent_model'.\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] _____ TestGeneratePyMDPMatrixDefinition.test_normal_array_conversion_error _____\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] ERROR    src.render.pymdp_utils:pymdp_utils.py:182 Matrix H_jagged: Could not convert list/tuple to np.array: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.. Assigning None.\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] Traceback (most recent call last):\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] File \"/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/render/pymdp_utils.py\", line 180, in generate_pymdp_matrix_definition\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] np_array_data = np.array(data)\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] ^^^^^^^^^^^^^^\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] ValueError: setting an array element with a sequence. The requested array has an inhomogeneous shape after 1 dimensions. The detected shape was (2,) + inhomogeneous part.\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] ___ TestGeneratePyMDPMatrixDefinition.test_object_array_non_convertible_item ___\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] WARNING  src.render.pymdp_utils:pymdp_utils.py:142 Object array E_obj_bad: Skipping item of type <class 'str'>: not_an_array_str\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] ___________________ TestGNNTypeChecker.test_check_directory ____________________\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] WARNING  gnn_type_checker.checker:checker.py:109 File /tmp/tmpt8tzod8o/invalid.md has 3 errors: ['Connection references undefined variable: y', 'Invalid time specification: InvalidTimeSpec        # Invalid time specification', \"Equation 'z = f(y)               # Invalid equation with undefined variables' references undefined variable: z\"]\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] __________________ TestGNNTypeChecker.test_check_invalid_file __________________\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] ------------------------------ Captured log call -------------------------------\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] WARNING  gnn_type_checker.checker:checker.py:109 File /tmp/tmpcs_vurn5.md has 3 errors: ['Connection references undefined variable: y', 'Invalid time specification: InvalidTimeSpec        # Invalid time specification', \"Equation 'z = f(y)               # Invalid equation with undefined variables' references undefined variable: z\"]\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] - generated xml file: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/test_reports/pytest_report.xml -\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] =========================== short test summary info ============================\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_agent_hyperparameter_storage\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_control_factor_parsing\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_empty_gnn_spec\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_matrix_specs_stored\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_missing_essential_blocks\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_mixed_direct_and_statespaceblock_precedence\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_state_and_obs_dimensions_direct\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_state_and_obs_dimensions_from_statespaceblock\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_with_minimal_spec\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_with_model_name_sanitization\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_converter.py::TestGnnToPyMdpConverterInitialization::test_initialization_with_stringified_direct_dimensions\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_B_matrix_numpy_array_input\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_E_vector\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_converter.py::TestAgentAndUsageCodeGeneration::test_generate_agent_instantiation_code_basic\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_converter.py::TestHelperMethodsIndirectly::test_parse_string_to_literal_valid_inputs\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_templates.py::TestGenerateFileHeader::test_header_generation\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_templates.py::TestGenerateConversionSummary::test_summary_empty_entries\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_templates.py::TestGenerateConversionSummary::test_summary_with_entries\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_templates.py::TestGenerateDebugBlock::test_debug_block_generation_all_defined\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_templates.py::TestGenerateExampleUsageTemplate::test_basic_usage_generation\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_templates.py::TestGenerateExampleUsageTemplate::test_usage_boolean_flags\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_templates.py::TestGenerateExampleUsageTemplate::test_usage_multiple_modalities_factors\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_templates.py::TestGenerateExampleUsageTemplate::test_usage_no_modalities_no_factors\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_templates.py::TestGeneratePlaceholderMatrices::test_multiple_modalities_factors\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_templates.py::TestGeneratePlaceholderMatrices::test_single_modality_single_factor\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_templates.py::TestGeneratePlaceholderMatrices::test_zero_modalities_factors\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestNumpyArrayToString::test_1d_array\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestNumpyArrayToString::test_2d_array\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestNumpyArrayToString::test_3d_array\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestNumpyArrayToString::test_array_with_object_dtype\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestNumpyArrayToString::test_empty_array\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestNumpyArrayToString::test_none_input\n2025-06-06 13:41:24,759 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestNumpyArrayToString::test_scalar_array\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestFormatListRecursive::test_empty_list\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestFormatListRecursive::test_indentation_multiline\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestFormatListRecursive::test_nested_list_numpy_arrays_multiline\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_data_is_none\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_data_is_preformatted_string\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_normal_array_conversion_error\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_normal_array_from_list\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_normal_array_from_numpy\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_object_array_empty_or_all_none_list\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_object_array_list_of_numpy\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_object_array_list_with_none\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_object_array_non_convertible_item\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPAgentInstantiation::test_basic_instantiation\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPAgentInstantiation::test_no_optional_params\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPAgentInstantiation::test_qs_initial_as_list_of_arrays\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/test_gnn_type_checker.py::TestGNNTypeChecker::test_check_directory\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/test_gnn_type_checker.py::TestGNNTypeChecker::test_check_invalid_file\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/test_gnn_type_checker.py::TestGNNTypeChecker::test_check_valid_file\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] PASSED src/tests/test_gnn_type_checker.py::TestGNNTypeChecker::test_generate_report\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_A_matrix_invalid_spec\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_A_matrix_multiple_modalities_single_factor\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_A_matrix_numpy_array_input\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_A_matrix_single_modality_multiple_factors\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_A_matrix_single_modality_single_factor\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_B_matrix_invalid_spec\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_B_matrix_multiple_factors_mixed_control\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_B_matrix_single_factor_controlled\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_C_vector_invalid_spec\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_C_vector_multiple_modalities\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_C_vector_single_modality\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_D_vector_invalid_spec\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_D_vector_multiple_factors\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_D_vector_single_factor\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestMatrixConversion::test_convert_E_vector_invalid_spec\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestAgentAndUsageCodeGeneration::test_extract_agent_hyperparameters\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestAgentAndUsageCodeGeneration::test_generate_agent_instantiation_code_with_action_names\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestAgentAndUsageCodeGeneration::test_generate_agent_instantiation_code_with_hyperparams\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestAgentAndUsageCodeGeneration::test_generate_example_usage_code\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestFullScriptGeneration::test_get_full_python_script_minimal\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestFullScriptGeneration::test_get_full_python_script_no_example_usage\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestFullScriptGeneration::test_get_full_python_script_with_all_elements\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_converter.py::TestHelperMethodsIndirectly::test_parse_string_to_literal_invalid_inputs\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_templates.py::TestGenerateDebugBlock::test_debug_block_generation_none_values\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_utils.py::TestFormatListRecursive::test_flat_list_numpy_arrays\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_utils.py::TestFormatListRecursive::test_flat_list_simple_items\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPMatrixDefinition::test_unexpected_data_type_handled_as_string_or_repr\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] FAILED src/tests/render/test_pymdp_utils.py::TestGeneratePyMDPAgentInstantiation::test_all_parameters\n2025-06-06 13:41:24,760 - __main__ - INFO - [pytest] ======================== 28 failed, 52 passed in 1.55s =========================\n2025-06-06 13:41:24,978 - __main__ - INFO - \u2139\ufe0f JUnit XML test report is at: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/test_reports/pytest_report.xml\n2025-06-06 13:41:24,978 - __main__ - ERROR - \u274c Some tests failed or pytest reported an error. Pytest exit code: 1\n2025-06-06 13:41:24,978 - __main__ - WARNING - \u26a0\ufe0f Continuing with pipeline despite test failures.\n2025-06-06 13:41:24,978 - __main__ - ERROR - \u274c Step 3: Tests failed or encountered a critical error.\n2025-06-06 13:41:24,978 - __main__ - WARNING - \u26a0\ufe0f Continuing with pipeline despite test failures.\n",
            "stderr": ""
        },
        {
            "step_number": 4,
            "script_name": "4_gnn_type_checker.py",
            "status": "SUCCESS",
            "start_time": "2025-06-06T13:41:25.035908",
            "end_time": "2025-06-06T13:41:27.245129",
            "duration_seconds": 2.209221,
            "details": "",
            "stdout": "2025-06-06 13:41:25,815 - __main__ - INFO - \u25b6\ufe0f Starting Step 4: Type Checking (4_gnn_type_checker.py)...\n2025-06-06 13:41:25,815 - __main__ - DEBUG - Set logger '__main__' to DEBUG within run_type_checker.\n2025-06-06 13:41:25,815 - __main__ - DEBUG - Set logger 'gnn_type_checker' to INFO.\n2025-06-06 13:41:25,815 - __main__ - INFO -   \ud83d\udc0d Invoking GNN Type Checker module with arguments: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples --output-dir /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_type_check --report-file type_check_report.md --project-root /home/trim/Documents/GitHub/GeneralizedNotationNotation --recursive --estimate-resources\n2025-06-06 13:41:25,815 - __main__ - INFO -   \u2139\ufe0f Target GNN files in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples\n2025-06-06 13:41:25,815 - __main__ - INFO -   \u2139\ufe0f Type checker outputs will be in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_type_check\n2025-06-06 13:41:25,815 - __main__ - INFO -   \ud83d\udcdd Main type check report will be: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_type_check/type_check_report.md\n2025-06-06 13:41:27,159 - __main__ - INFO - \u2705 GNN Type Checker module completed successfully.\n2025-06-06 13:41:27,159 - __main__ - INFO - \u2705 Step 4: Type Checking complete.\n",
            "stderr": ""
        },
        {
            "step_number": 5,
            "script_name": "5_export.py",
            "status": "SUCCESS",
            "start_time": "2025-06-06T13:41:27.245185",
            "end_time": "2025-06-06T13:41:27.429423",
            "duration_seconds": 0.184238,
            "details": "",
            "stdout": "2025-06-06 13:41:27,399 - __main__ - DEBUG - Script logger '__main__' level set to DEBUG.\n2025-06-06 13:41:27,399 - __main__ - INFO - \u25b6\ufe0f Starting Step 5: Export (5_export.py)\n2025-06-06 13:41:27,399 - __main__ - DEBUG -   Parsed args: Namespace(target_dir=PosixPath('/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples'), output_dir=PosixPath('/home/trim/Documents/GitHub/GeneralizedNotationNotation/output'), recursive=True, formats='json,xml,txt_summary,dsl', verbose=True)\n2025-06-06 13:41:27,399 - __main__ - INFO -   Ensured output directory for exports: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_exports\n2025-06-06 13:41:27,399 - __main__ - INFO -   Selected formats for export: ['json', 'xml', 'txt_summary', 'dsl']\n2025-06-06 13:41:27,399 - __main__ - INFO - Found 2 GNN file(s) to process for export from '/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples'.\n2025-06-06 13:41:27,399 - __main__ - INFO -   Processing exports for GNN file: src/gnn/examples/pymdp_pomdp_agent.md\n2025-06-06 13:41:27,401 - __main__ - DEBUG -     \ud83d\udce4 Ensured export subdirectory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_exports/pymdp_pomdp_agent\n2025-06-06 13:41:27,401 - __main__ - DEBUG -       \ud83d\udce4 Exporting to JSON -> output/gnn_exports/pymdp_pomdp_agent/pymdp_pomdp_agent.json\n2025-06-06 13:41:27,401 - __main__ - INFO -       \u2705 Successfully exported to pymdp_pomdp_agent.json (format: json)\n2025-06-06 13:41:27,401 - __main__ - DEBUG -       \ud83d\udce4 Exporting to XML -> output/gnn_exports/pymdp_pomdp_agent/pymdp_pomdp_agent.xml\n2025-06-06 13:41:27,403 - __main__ - INFO -       \u2705 Successfully exported to pymdp_pomdp_agent.xml (format: xml)\n2025-06-06 13:41:27,404 - __main__ - DEBUG -       \ud83d\udce4 Exporting to TXT_SUMMARY -> output/gnn_exports/pymdp_pomdp_agent/pymdp_pomdp_agent.txt\n2025-06-06 13:41:27,404 - __main__ - INFO -       \u2705 Successfully exported to pymdp_pomdp_agent.txt (format: txt_summary)\n2025-06-06 13:41:27,404 - __main__ - DEBUG -       \ud83d\udce4 Exporting to DSL -> output/gnn_exports/pymdp_pomdp_agent/pymdp_pomdp_agent.gnn\n2025-06-06 13:41:27,404 - __main__ - INFO -       \u2705 Successfully exported to pymdp_pomdp_agent.gnn (format: dsl)\n2025-06-06 13:41:27,404 - __main__ - INFO -     \u2705 All 4 requested exports for src/gnn/examples/pymdp_pomdp_agent.md completed successfully.\n2025-06-06 13:41:27,404 - __main__ - INFO -   Processing exports for GNN file: src/gnn/examples/rxinfer_multiagent_gnn.md\n2025-06-06 13:41:27,405 - __main__ - DEBUG -     \ud83d\udce4 Ensured export subdirectory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_exports/rxinfer_multiagent_gnn\n2025-06-06 13:41:27,405 - __main__ - DEBUG -       \ud83d\udce4 Exporting to JSON -> output/gnn_exports/rxinfer_multiagent_gnn/rxinfer_multiagent_gnn.json\n2025-06-06 13:41:27,405 - __main__ - INFO -       \u2705 Successfully exported to rxinfer_multiagent_gnn.json (format: json)\n2025-06-06 13:41:27,405 - __main__ - DEBUG -       \ud83d\udce4 Exporting to XML -> output/gnn_exports/rxinfer_multiagent_gnn/rxinfer_multiagent_gnn.xml\n2025-06-06 13:41:27,407 - __main__ - INFO -       \u2705 Successfully exported to rxinfer_multiagent_gnn.xml (format: xml)\n2025-06-06 13:41:27,408 - __main__ - DEBUG -       \ud83d\udce4 Exporting to TXT_SUMMARY -> output/gnn_exports/rxinfer_multiagent_gnn/rxinfer_multiagent_gnn.txt\n2025-06-06 13:41:27,408 - __main__ - INFO -       \u2705 Successfully exported to rxinfer_multiagent_gnn.txt (format: txt_summary)\n2025-06-06 13:41:27,408 - __main__ - DEBUG -       \ud83d\udce4 Exporting to DSL -> output/gnn_exports/rxinfer_multiagent_gnn/rxinfer_multiagent_gnn.gnn\n2025-06-06 13:41:27,408 - __main__ - INFO -       \u2705 Successfully exported to rxinfer_multiagent_gnn.gnn (format: dsl)\n2025-06-06 13:41:27,408 - __main__ - INFO -     \u2705 All 4 requested exports for src/gnn/examples/rxinfer_multiagent_gnn.md completed successfully.\n2025-06-06 13:41:27,408 - __main__ - INFO - Export processing complete. Files with all formats successful: 2, Files with at least one failure: 0\n2025-06-06 13:41:27,408 - __main__ - INFO - \ud83d\udcc4 Generating GNN Export Step Summary Report...\n2025-06-06 13:41:27,408 - __main__ - INFO - \ud83d\udcc4 Export step summary report generated: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_exports/5_export_step_report.md\n2025-06-06 13:41:27,408 - __main__ - INFO - \ud83d\udcc4 Generating Overall GNN Processing Summary Report...\n2025-06-06 13:41:27,408 - __main__ - DEBUG -   \ud83d\udcca Found 2 .md files for overall summary in '/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples'.\n2025-06-06 13:41:27,409 - __main__ - INFO - \ud83d\udcc4 Overall pipeline summary report saved to: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_processing_summary.md\n2025-06-06 13:41:27,409 - __main__ - INFO - \u2705 Step 5: Export operations finished.\n",
            "stderr": ""
        },
        {
            "step_number": 6,
            "script_name": "6_visualization.py",
            "status": "SUCCESS",
            "start_time": "2025-06-06T13:41:27.429463",
            "end_time": "2025-06-06T13:41:44.517643",
            "duration_seconds": 17.08818,
            "details": "",
            "stdout": "2025-06-06 13:41:27,940 - __main__ - INFO - \u25b6\ufe0f Starting Step 6: Visualization (6_visualization.py)\n2025-06-06 13:41:27,940 - __main__ - DEBUG -   Parsing options:\n2025-06-06 13:41:27,940 - __main__ - DEBUG -     Target directory/file: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples\n2025-06-06 13:41:27,940 - __main__ - DEBUG -     Pipeline output directory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output\n2025-06-06 13:41:27,940 - __main__ - DEBUG -     Recursive: True\n2025-06-06 13:41:27,940 - __main__ - DEBUG -     Verbose: True\n2025-06-06 13:41:27,940 - __main__ - INFO - \ud83d\uddbc\ufe0f Preparing to generate GNN visualizations...\n2025-06-06 13:41:27,940 - __main__ - DEBUG -   \ud83c\udfaf Target GNN files in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples\n2025-06-06 13:41:27,940 - __main__ - DEBUG -   \u0565\u056c Output visualizations will be in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization\n2025-06-06 13:41:27,940 - __main__ - DEBUG -   \ud83d\udd04 Recursive mode: Enabled\n2025-06-06 13:41:27,940 - __main__ - DEBUG -   \ud83d\udc0d Invoking GNN Visualization module (visualization.cli.main)\n2025-06-06 13:41:27,941 - __main__ - DEBUG -      Arguments: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples --output-dir /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization --project-root /home/trim/Documents/GitHub/GeneralizedNotationNotation --recursive\nChecking for variables in /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples/pymdp_pomdp_agent.md...\nFound 21 variables: ['A_m0', 'A_m1', 'A_m2', 'B_f0', 'B_f1', 'C_m0', 'C_m1', 'C_m2', 'D_f0', 'D_f1', 's_f0', 's_f1', 's_prime_f0', 's_prime_f1', 'o_m0', 'o_m1', 'o_m2', '\u03c0_f1', 'u_f1', 'G', 't']\nState space visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/pymdp_pomdp_agent/state_space.png\nChecking for edges in /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples/pymdp_pomdp_agent.md...\nFound 2 edges\nConnections visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/pymdp_pomdp_agent/connections.png\n[GNNVisualizer] Found 'InitialParameterization' section for pymdp_pomdp_agent. Attempting matrix visualization.\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/pymdp_pomdp_agent/matrix_Am0.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/pymdp_pomdp_agent/matrix_Am1.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/pymdp_pomdp_agent/matrix_Am2.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/pymdp_pomdp_agent/matrix_Bf0.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/pymdp_pomdp_agent/matrix_Bf1.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/pymdp_pomdp_agent/matrix_Cm0.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/pymdp_pomdp_agent/matrix_Cm1.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/pymdp_pomdp_agent/matrix_Cm2.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/pymdp_pomdp_agent/matrix_Df0.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/pymdp_pomdp_agent/matrix_Df1.png\nCombined matrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/pymdp_pomdp_agent/combined_matrices.png\n[GNNVisualizer] Found 'ActInfOntologyAnnotation' section for pymdp_pomdp_agent. Attempting ontology visualization.\nOntology visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/pymdp_pomdp_agent/ontology_annotations.png\nCombined visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/pymdp_pomdp_agent/combined_visualization.png\nChecking for variables in /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples/rxinfer_multiagent_gnn.md...\nFound 60 variables: ['dt', 'gamma', 'nr_steps', 'nr_iterations', 'nr_agents', 'softmin_temperature', 'intermediate_steps', 'save_intermediates', 'A', 'B', 'C', 'initial_state_variance', 'control_variance', 'goal_constraint_variance', 'gamma_shape', 'gamma_scale_factor', 'x_limits', 'y_limits', 'fps', 'heatmap_resolution', 'plot_width', 'plot_height', 'agent_alpha', 'target_alpha', 'color_palette', 'door_obstacle_center_1', 'door_obstacle_size_1', 'door_obstacle_center_2', 'door_obstacle_size_2', 'wall_obstacle_center', 'wall_obstacle_size', 'combined_obstacle_center_1', 'combined_obstacle_size_1', 'combined_obstacle_center_2', 'combined_obstacle_size_2', 'combined_obstacle_center_3', 'combined_obstacle_size_3', 'agent1_id', 'agent1_radius', 'agent1_initial_position', 'agent1_target_position', 'agent2_id', 'agent2_radius', 'agent2_initial_position', 'agent2_target_position', 'agent3_id', 'agent3_radius', 'agent3_initial_position', 'agent3_target_position', 'agent4_id', 'agent4_radius', 'agent4_initial_position', 'agent4_target_position', 'experiment_seeds', 'results_dir', 'animation_template', 'control_vis_filename', 'obstacle_distance_filename', 'path_uncertainty_filename', 'convergence_filename']\nState space visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/state_space.png\nChecking for edges in /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples/rxinfer_multiagent_gnn.md...\nFound 1 edges\nConnections visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/connections.png\n[GNNVisualizer] Found 'InitialParameterization' section for rxinfer_multiagent_gnn. Attempting matrix visualization.\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_A.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_B.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_C.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_xlimits.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_ylimits.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_doorobstaclecenter1.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_doorobstaclesize1.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_doorobstaclecenter2.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_doorobstaclesize2.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_wallobstaclecenter.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_wallobstaclesize.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_combinedobstaclecenter1.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_combinedobstaclesize1.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_combinedobstaclecenter2.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_combinedobstaclesize2.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_combinedobstaclecenter3.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_combinedobstaclesize3.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_agent1initialposition.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_agent1targetposition.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_agent2initialposition.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_agent2targetposition.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_agent3initialposition.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_agent3targetposition.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_agent4initialposition.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_agent4targetposition.png\nMatrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/matrix_experimentseeds.png\nCombined matrix visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/combined_matrices.png\n[GNNVisualizer] Found 'ActInfOntologyAnnotation' section for rxinfer_multiagent_gnn. Attempting ontology visualization.\nOntology visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/ontology_annotations.png\nCombined visualization saved to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization/rxinfer_multiagent_gnn/combined_visualization.png\nVisualizations generated in /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization\n2025-06-06 13:41:44,384 - __main__ - INFO - \u2705 GNN Visualization module completed successfully.\n2025-06-06 13:41:44,384 - __main__ - DEBUG -   \ud83d\uddbc\ufe0f Visualizations should be available in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_examples_visualization\n2025-06-06 13:41:44,384 - __main__ - DEBUG -   \ud83d\udcca Found 54 items (files/directories) in the output directory.\n2025-06-06 13:41:44,384 - __main__ - INFO - \u2705 Step 6: Visualization (6_visualization.py) - COMPLETED\n",
            "stderr": "/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/visualization/matrix_visualizer.py:247: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n  plt.tight_layout()  # Make room for colorbar and title\n/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/visualization/matrix_visualizer.py:247: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n  plt.tight_layout()  # Make room for colorbar and title\n"
        },
        {
            "step_number": 7,
            "script_name": "7_mcp.py",
            "status": "SUCCESS",
            "start_time": "2025-06-06T13:41:44.517683",
            "end_time": "2025-06-06T13:41:46.102080",
            "duration_seconds": 1.584397,
            "details": "",
            "stdout": "2025-06-06 13:41:45,869 - __main__ - DEBUG - Verbose logging enabled for standalone run of 7_mcp.py, including core MCP modules.\n2025-06-06 13:41:45,869 - __main__ - DEBUG - Script logger '__main__' level set to DEBUG.\n2025-06-06 13:41:45,869 - __main__ - INFO - \u25b6\ufe0f  Starting Step 7: MCP Operations (7_mcp.py)\n2025-06-06 13:41:45,869 - __main__ - DEBUG -   Parsing options (from main.py or standalone):\n2025-06-06 13:41:45,869 - __main__ - DEBUG -     Effective MCP Core Directory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/mcp\n2025-06-06 13:41:45,869 - __main__ - DEBUG -     Effective Project Source Root (for module scanning): /home/trim/Documents/GitHub/GeneralizedNotationNotation/src\n2025-06-06 13:41:45,869 - __main__ - DEBUG -     Output directory for MCP report: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output\n2025-06-06 13:41:45,869 - __main__ - DEBUG -     Verbose: True\n2025-06-06 13:41:45,870 - __main__ - DEBUG - Set logger 'mcp' to DEBUG for MCP operations.\n2025-06-06 13:41:45,870 - __main__ - INFO -     \ud83d\ude80 Initializing MCP system to load registered tool descriptions...\n2025-06-06 13:41:45,870 - __main__ - INFO -     \u2705 MCP system initialization process completed successfully (SDK status OK, all modules loaded).\n2025-06-06 13:41:45,871 - __main__ - INFO -   \ud83d\udd0e Processing MCP integration checks and method discovery...\n2025-06-06 13:41:45,871 - __main__ - DEBUG -     \ud83d\udcd6 MCP Core Directory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/mcp\n2025-06-06 13:41:45,871 - __main__ - DEBUG -     \ud83c\udfd7\ufe0f Project Source Root for modules: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src\n2025-06-06 13:41:45,871 - __main__ - DEBUG -     Checking for core MCP files...\n2025-06-06 13:41:45,871 - __main__ - DEBUG -       \ud83d\udcd6 Core MCP file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/mcp/mcp.py (20304 bytes)\n2025-06-06 13:41:45,871 - __main__ - DEBUG -       \ud83d\udcd6 Core MCP file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/mcp/meta_mcp.py (4954 bytes)\n2025-06-06 13:41:45,871 - __main__ - DEBUG -       \ud83d\udcd6 Core MCP file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/mcp/cli.py (4644 bytes)\n2025-06-06 13:41:45,871 - __main__ - DEBUG -       \ud83d\udcd6 Core MCP file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/mcp/server_stdio.py (7620 bytes)\n2025-06-06 13:41:45,871 - __main__ - DEBUG -       \ud83d\udcd6 Core MCP file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/mcp/server_http.py (7731 bytes)\n2025-06-06 13:41:45,871 - __main__ - DEBUG -       Processing module: export\n2025-06-06 13:41:45,871 - __main__ - DEBUG -         \u2705 MCP integration file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/export/mcp.py (7976 bytes)\n2025-06-06 13:41:45,871 - __main__ - DEBUG -           Found registered MCP tool: export_gnn_to_json(gnn_file_path, output_file_path) - Description: Exports a GNN model to JSON format.\n2025-06-06 13:41:45,871 - __main__ - DEBUG -           Found registered MCP tool: export_gnn_to_xml(gnn_file_path, output_file_path) - Description: Exports a GNN model to XML format.\n2025-06-06 13:41:45,872 - __main__ - DEBUG -           Found registered MCP tool: export_gnn_to_plaintext_summary(gnn_file_path, output_file_path) - Description: Exports a GNN model to a human-readable plain text summary.\n2025-06-06 13:41:45,872 - __main__ - DEBUG -           Found registered MCP tool: export_gnn_to_plaintext_dsl(gnn_file_path, output_file_path) - Description: Exports a GNN model back to its GNN DSL plain text format.\n2025-06-06 13:41:45,872 - __main__ - DEBUG -           Found registered MCP tool: export_gnn_to_gexf(gnn_file_path, output_file_path) - Description: Exports a GNN model to GEXF graph format (requires NetworkX).\n2025-06-06 13:41:45,872 - __main__ - DEBUG -           Found registered MCP tool: export_gnn_to_graphml(gnn_file_path, output_file_path) - Description: Exports a GNN model to GraphML graph format (requires NetworkX).\n2025-06-06 13:41:45,872 - __main__ - DEBUG -           Found registered MCP tool: export_gnn_to_json_adjacency_list(gnn_file_path, output_file_path) - Description: Exports a GNN model to JSON Adjacency List graph format (requires NetworkX).\n2025-06-06 13:41:45,872 - __main__ - DEBUG -           Found registered MCP tool: export_gnn_to_python_pickle(gnn_file_path, output_file_path) - Description: Serializes a GNN model to a Python pickle file.\n2025-06-06 13:41:45,872 - __main__ - DEBUG -       \ud83d\udc0d Parsing for MCP methods in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/export/mcp.py\n2025-06-06 13:41:45,873 - __main__ - DEBUG -         Found method: _handle_export(export_func, gnn_file_path, output_file_path, format_name, requires_nx) - \"Generic helper to run an export function and handle common exceptions.\"...\n2025-06-06 13:41:45,873 - __main__ - DEBUG -         Found method: export_gnn_to_json_mcp(gnn_file_path, output_file_path) - \"\"...\n2025-06-06 13:41:45,873 - __main__ - DEBUG -         Found method: export_gnn_to_xml_mcp(gnn_file_path, output_file_path) - \"\"...\n2025-06-06 13:41:45,873 - __main__ - DEBUG -         Found method: export_gnn_to_plaintext_summary_mcp(gnn_file_path, output_file_path) - \"\"...\n2025-06-06 13:41:45,873 - __main__ - DEBUG -         Found method: export_gnn_to_plaintext_dsl_mcp(gnn_file_path, output_file_path) - \"\"...\n2025-06-06 13:41:45,873 - __main__ - DEBUG -         Found method: export_gnn_to_gexf_mcp(gnn_file_path, output_file_path) - \"\"...\n2025-06-06 13:41:45,873 - __main__ - DEBUG -         Found method: export_gnn_to_graphml_mcp(gnn_file_path, output_file_path) - \"\"...\n2025-06-06 13:41:45,873 - __main__ - DEBUG -         Found method: export_gnn_to_json_adjacency_list_mcp(gnn_file_path, output_file_path) - \"\"...\n2025-06-06 13:41:45,873 - __main__ - DEBUG -         Found method: export_gnn_to_python_pickle_mcp(gnn_file_path, output_file_path) - \"\"...\n2025-06-06 13:41:45,873 - __main__ - DEBUG -         Found method: register_tools(mcp_instance) - \"Registers all GNN export tools with the MCP instance.\"...\n2025-06-06 13:41:45,873 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): _handle_export(export_func, gnn_file_path, output_file_path, format_name, requires_nx) - Docstring: Generic helper to run an export function and handle common exceptions.\n2025-06-06 13:41:45,873 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): export_gnn_to_json_mcp(gnn_file_path, output_file_path) - Docstring: \n2025-06-06 13:41:45,873 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): export_gnn_to_xml_mcp(gnn_file_path, output_file_path) - Docstring: \n2025-06-06 13:41:45,873 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): export_gnn_to_plaintext_summary_mcp(gnn_file_path, output_file_path) - Docstring: \n2025-06-06 13:41:45,873 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): export_gnn_to_plaintext_dsl_mcp(gnn_file_path, output_file_path) - Docstring: \n2025-06-06 13:41:45,873 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): export_gnn_to_gexf_mcp(gnn_file_path, output_file_path) - Docstring: \n2025-06-06 13:41:45,873 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): export_gnn_to_graphml_mcp(gnn_file_path, output_file_path) - Docstring: \n2025-06-06 13:41:45,873 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): export_gnn_to_json_adjacency_list_mcp(gnn_file_path, output_file_path) - Docstring: \n2025-06-06 13:41:45,873 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): export_gnn_to_python_pickle_mcp(gnn_file_path, output_file_path) - Docstring: \n2025-06-06 13:41:45,873 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): register_tools(mcp_instance) - Docstring: Registers all GNN export tools with the MCP instance.\n2025-06-06 13:41:45,873 - __main__ - DEBUG -       Processing module: gnn\n2025-06-06 13:41:45,873 - __main__ - DEBUG -         \u2705 MCP integration file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/mcp.py (4122 bytes)\n2025-06-06 13:41:45,873 - __main__ - DEBUG -           Found registered MCP tool: get_gnn_documentation(doc_name) - Description: Retrieve the content of a GNN core documentation file (e.g., syntax, file structure).\n2025-06-06 13:41:45,873 - __main__ - DEBUG -       \ud83d\udc0d Parsing for MCP methods in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/mcp.py\n2025-06-06 13:41:45,874 - __main__ - DEBUG -         Found method: get_gnn_documentation(doc_name) - \"Retrieve content of a GNN documentation file.\"...\n2025-06-06 13:41:45,874 - __main__ - DEBUG -         Found method: _retrieve_gnn_doc_resource(uri) - \"Retrieve GNN documentation resource by URI.\"...\n2025-06-06 13:41:45,874 - __main__ - DEBUG -         Found method: register_tools(mcp_instance) - \"Register GNN documentation tools and resources with the MCP.\"...\n2025-06-06 13:41:45,874 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): _retrieve_gnn_doc_resource(uri) - Docstring: Retrieve GNN documentation resource by URI.\n2025-06-06 13:41:45,874 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): register_tools(mcp_instance) - Docstring: Register GNN documentation tools and resources with the MCP.\n2025-06-06 13:41:45,874 - __main__ - DEBUG -       Processing module: gnn_type_checker\n2025-06-06 13:41:45,874 - __main__ - DEBUG -         \u2705 MCP integration file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn_type_checker/mcp.py (10921 bytes)\n2025-06-06 13:41:45,874 - __main__ - DEBUG -           Found registered MCP tool: type_check_gnn_file(file_path) - Description: Runs the GNN type checker on a specified GNN model file.\n2025-06-06 13:41:45,874 - __main__ - DEBUG -           Found registered MCP tool: type_check_gnn_directory(dir_path, recursive, output_dir_base, report_md_filename) - Description: Runs the GNN type checker on all GNN files in a specified directory. If output_dir_base is provided, reports are generated.\n2025-06-06 13:41:45,874 - __main__ - DEBUG -           Found registered MCP tool: estimate_resources_for_gnn_file(file_path) - Description: Estimates computational resources (memory, inference, storage) for a GNN model file.\n2025-06-06 13:41:45,874 - __main__ - DEBUG -           Found registered MCP tool: estimate_resources_for_gnn_directory(dir_path, recursive) - Description: Estimates computational resources for all GNN files in a specified directory.\n2025-06-06 13:41:45,874 - __main__ - DEBUG -       \ud83d\udc0d Parsing for MCP methods in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn_type_checker/mcp.py\n2025-06-06 13:41:45,875 - __main__ - DEBUG -         Found method: type_check_gnn_file_mcp(file_path) - \"Run the GNN type checker on a single GNN file. Exposed via MCP.\"...\n2025-06-06 13:41:45,875 - __main__ - DEBUG -         Found method: type_check_gnn_directory_mcp(dir_path, recursive, output_dir_base, report_md_filename) - \"Run the GNN type checker on all GNN files in a directory. Exposed via MCP.\"...\n2025-06-06 13:41:45,875 - __main__ - DEBUG -         Found method: estimate_resources_for_gnn_file_mcp(file_path) - \"Estimate computational resources for a single GNN file. Exposed via MCP.\"...\n2025-06-06 13:41:45,875 - __main__ - DEBUG -         Found method: estimate_resources_for_gnn_directory_mcp(dir_path, recursive) - \"Estimate resources for all GNN files in a directory. Exposed via MCP.\"...\n2025-06-06 13:41:45,875 - __main__ - DEBUG -         Found method: register_tools(mcp_instance) - \"Register GNN type checker and resource estimator tools with the MCP.\"...\n2025-06-06 13:41:45,875 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): type_check_gnn_file_mcp(file_path) - Docstring: Run the GNN type checker on a single GNN file. Exposed via MCP.\n2025-06-06 13:41:45,876 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): type_check_gnn_directory_mcp(dir_path, recursive, output_dir_base, report_md_filename) - Docstring: Run the GNN type checker on all GNN files in a directory. Exposed via MCP.\n2025-06-06 13:41:45,876 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): estimate_resources_for_gnn_file_mcp(file_path) - Docstring: Estimate computational resources for a single GNN file. Exposed via MCP.\n2025-06-06 13:41:45,876 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): estimate_resources_for_gnn_directory_mcp(dir_path, recursive) - Docstring: Estimate resources for all GNN files in a directory. Exposed via MCP.\n2025-06-06 13:41:45,876 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): register_tools(mcp_instance) - Docstring: Register GNN type checker and resource estimator tools with the MCP.\n2025-06-06 13:41:45,876 - __main__ - DEBUG -       Processing module: ontology\n2025-06-06 13:41:45,876 - __main__ - DEBUG -         \u2705 MCP integration file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/ontology/mcp.py (13473 bytes)\n2025-06-06 13:41:45,876 - __main__ - DEBUG -       \ud83d\udc0d Parsing for MCP methods in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/ontology/mcp.py\n2025-06-06 13:41:45,877 - __main__ - DEBUG -         Found method: get_mcp_interface() - \"Returns the MCP interface for the Ontology module.\"...\n2025-06-06 13:41:45,877 - __main__ - DEBUG -         Found method: parse_gnn_ontology_section(gnn_file_content, verbose) - \"Parses the 'ActInfOntologyAnnotation' section from GNN file content.\"...\n2025-06-06 13:41:45,877 - __main__ - DEBUG -         Found method: load_defined_ontology_terms(ontology_terms_path, verbose) - \"Loads defined ontological terms from a JSON file.\"...\n2025-06-06 13:41:45,877 - __main__ - DEBUG -         Found method: validate_annotations(parsed_annotations, defined_terms, verbose) - \"Validates parsed GNN annotations against a set of defined ontological terms.\"...\n2025-06-06 13:41:45,877 - __main__ - DEBUG -         Found method: generate_ontology_report_for_file(gnn_file_path, parsed_annotations, validation_results) - \"Generates a markdown formatted report string for a single GNN file's ontology annotations.\"...\n2025-06-06 13:41:45,877 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): get_mcp_interface() - Docstring: Returns the MCP interface for the Ontology module.\n2025-06-06 13:41:45,877 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): parse_gnn_ontology_section(gnn_file_content, verbose) - Docstring: Parses the 'ActInfOntologyAnnotation' section from GNN file content.\n2025-06-06 13:41:45,877 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): load_defined_ontology_terms(ontology_terms_path, verbose) - Docstring: Loads defined ontological terms from a JSON file.\n2025-06-06 13:41:45,877 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): validate_annotations(parsed_annotations, defined_terms, verbose) - Docstring: Validates parsed GNN annotations against a set of defined ontological terms.\n2025-06-06 13:41:45,877 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): generate_ontology_report_for_file(gnn_file_path, parsed_annotations, validation_results) - Docstring: Generates a markdown formatted report string for a single GNN file's ontology annotations.\n2025-06-06 13:41:45,877 - __main__ - DEBUG -       Processing module: setup\n2025-06-06 13:41:45,877 - __main__ - DEBUG -         \u2705 MCP integration file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/setup/mcp.py (4257 bytes)\n2025-06-06 13:41:45,877 - __main__ - DEBUG -           Found registered MCP tool: ensure_directory_exists(directory_path) - Description: Ensures a directory exists, creating it if necessary. Returns the absolute path.\n2025-06-06 13:41:45,878 - __main__ - DEBUG -           Found registered MCP tool: find_project_gnn_files(search_directory, recursive) - Description: Finds all GNN (.md) files in a specified directory within the project.\n2025-06-06 13:41:45,878 - __main__ - DEBUG -           Found registered MCP tool: get_standard_output_paths(base_output_directory) - Description: Gets a dictionary of standard output directory paths (e.g., for type_check, visualization), creating them if needed.\n2025-06-06 13:41:45,878 - __main__ - DEBUG -       \ud83d\udc0d Parsing for MCP methods in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/setup/mcp.py\n2025-06-06 13:41:45,878 - __main__ - DEBUG -         Found method: ensure_directory_exists_mcp(directory_path) - \"Ensure a directory exists, creating it if necessary. Exposed via MCP.\"...\n2025-06-06 13:41:45,878 - __main__ - DEBUG -         Found method: find_project_gnn_files_mcp(search_directory, recursive) - \"Find all GNN (.md) files in a directory. Exposed via MCP.\"...\n2025-06-06 13:41:45,878 - __main__ - DEBUG -         Found method: get_standard_output_paths_mcp(base_output_directory) - \"Get standard output paths for the pipeline. Exposed via MCP.\"...\n2025-06-06 13:41:45,878 - __main__ - DEBUG -         Found method: register_tools(mcp_instance) - \"Register setup utility tools with the MCP.\"...\n2025-06-06 13:41:45,878 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): ensure_directory_exists_mcp(directory_path) - Docstring: Ensure a directory exists, creating it if necessary. Exposed via MCP.\n2025-06-06 13:41:45,878 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): find_project_gnn_files_mcp(search_directory, recursive) - Docstring: Find all GNN (.md) files in a directory. Exposed via MCP.\n2025-06-06 13:41:45,878 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): get_standard_output_paths_mcp(base_output_directory) - Docstring: Get standard output paths for the pipeline. Exposed via MCP.\n2025-06-06 13:41:45,878 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): register_tools(mcp_instance) - Docstring: Register setup utility tools with the MCP.\n2025-06-06 13:41:45,878 - __main__ - DEBUG -       Processing module: tests\n2025-06-06 13:41:45,878 - __main__ - DEBUG -         \u2705 MCP integration file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/tests/mcp.py (7083 bytes)\n2025-06-06 13:41:45,878 - __main__ - DEBUG -           Found registered MCP tool: run_gnn_type_checker(file_path) - Description: Run the GNN type checker on a specific file (via test module).\n2025-06-06 13:41:45,878 - __main__ - DEBUG -           Found registered MCP tool: run_gnn_type_checker_on_directory(dir_path, report_file) - Description: Run the GNN type checker on all GNN files in a directory (via test module).\n2025-06-06 13:41:45,879 - __main__ - DEBUG -           Found registered MCP tool: run_gnn_unit_tests() - Description: Run the GNN unit tests and return results.\n2025-06-06 13:41:45,879 - __main__ - DEBUG -       \ud83d\udc0d Parsing for MCP methods in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/tests/mcp.py\n2025-06-06 13:41:45,879 - __main__ - DEBUG -         Found method: run_type_checker_on_file(file_path) - \"Run the GNN type checker on a file.\"...\n2025-06-06 13:41:45,879 - __main__ - DEBUG -         Found method: run_type_checker_on_directory(dir_path, report_file) - \"Run the GNN type checker on a directory of files.\"...\n2025-06-06 13:41:45,879 - __main__ - DEBUG -         Found method: run_unit_tests() - \"Run the GNN unit tests.\"...\n2025-06-06 13:41:45,879 - __main__ - DEBUG -         Found method: get_test_report(uri) - \"Retrieve a test report by URI.\"...\n2025-06-06 13:41:45,879 - __main__ - DEBUG -         Found method: register_tools(mcp) - \"Register test tools with the MCP.\"...\n2025-06-06 13:41:45,880 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): run_type_checker_on_file(file_path) - Docstring: Run the GNN type checker on a file.\n2025-06-06 13:41:45,880 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): run_type_checker_on_directory(dir_path, report_file) - Docstring: Run the GNN type checker on a directory of files.\n2025-06-06 13:41:45,880 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): run_unit_tests() - Docstring: Run the GNN unit tests.\n2025-06-06 13:41:45,880 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): get_test_report(uri) - Docstring: Retrieve a test report by URI.\n2025-06-06 13:41:45,880 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): register_tools(mcp) - Docstring: Register test tools with the MCP.\n2025-06-06 13:41:45,880 - __main__ - DEBUG -       Processing module: visualization\n2025-06-06 13:41:45,880 - __main__ - DEBUG -         \u2705 MCP integration file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/visualization/mcp.py (5934 bytes)\n2025-06-06 13:41:45,880 - __main__ - DEBUG -           Found registered MCP tool: visualize_gnn_file(file_path, output_dir) - Description: Generate visualizations for a specific GNN file.\n2025-06-06 13:41:45,880 - __main__ - DEBUG -           Found registered MCP tool: visualize_gnn_directory(dir_path, output_dir) - Description: Visualize all GNN files in a directory\n2025-06-06 13:41:45,880 - __main__ - DEBUG -           Found registered MCP tool: parse_gnn_file(file_path) - Description: Parse a GNN file without visualization\n2025-06-06 13:41:45,880 - __main__ - DEBUG -       \ud83d\udc0d Parsing for MCP methods in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/visualization/mcp.py\n2025-06-06 13:41:45,881 - __main__ - DEBUG -         Found method: visualize_file(file_path, output_dir) - \"Visualize a GNN file through MCP.\"...\n2025-06-06 13:41:45,881 - __main__ - DEBUG -         Found method: visualize_directory(dir_path, output_dir) - \"Visualize all GNN files in a directory through MCP.\"...\n2025-06-06 13:41:45,881 - __main__ - DEBUG -         Found method: parse_gnn_file(file_path) - \"Parse a GNN file without visualization through MCP.\"...\n2025-06-06 13:41:45,881 - __main__ - DEBUG -         Found method: get_visualization_results(uri) - \"Retrieve visualization results by URI.\"...\n2025-06-06 13:41:45,881 - __main__ - DEBUG -         Found method: register_tools(mcp) - \"Register visualization tools with the MCP.\"...\n2025-06-06 13:41:45,881 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): visualize_file(file_path, output_dir) - Docstring: Visualize a GNN file through MCP.\n2025-06-06 13:41:45,881 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): visualize_directory(dir_path, output_dir) - Docstring: Visualize all GNN files in a directory through MCP.\n2025-06-06 13:41:45,881 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): get_visualization_results(uri) - Docstring: Retrieve visualization results by URI.\n2025-06-06 13:41:45,881 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): register_tools(mcp) - Docstring: Register visualization tools with the MCP.\n2025-06-06 13:41:45,881 - __main__ - DEBUG -       Processing module: llm\n2025-06-06 13:41:45,881 - __main__ - DEBUG -         \u2705 MCP integration file found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/llm/mcp.py (19238 bytes)\n2025-06-06 13:41:45,881 - __main__ - DEBUG -           Found registered MCP tool: llm.summarize_gnn_file(file_path_str, user_prompt_suffix) - Description: Reads a GNN specification file and uses an LLM to generate a concise summary of its content. Optionally, a user prompt suffix can refine the summary focus.\n2025-06-06 13:41:45,881 - __main__ - DEBUG -           Found registered MCP tool: llm.explain_gnn_file(file_path_str, aspect_to_explain) - Description: Reads a GNN specification file and uses an LLM to generate an explanation of its content. Can focus on a specific aspect if provided.\n2025-06-06 13:41:45,881 - __main__ - DEBUG -           Found registered MCP tool: llm.generate_professional_summary(file_path_str, experiment_details, target_audience) - Description: Reads a GNN file and optional experiment details, then uses an LLM to generate a professional summary suitable for reports or papers.\n2025-06-06 13:41:45,881 - __main__ - DEBUG -       \ud83d\udc0d Parsing for MCP methods in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/llm/mcp.py\n2025-06-06 13:41:45,883 - __main__ - DEBUG -         Found method: initialize_llm_module(mcp_instance_ref) - \"Initializes the LLM module, loads API key, and updates MCP status.\"...\n2025-06-06 13:41:45,883 - __main__ - DEBUG -         Found method: summarize_gnn_file_content(file_path_str, user_prompt_suffix) - \"Reads a GNN file, sends its content to an LLM, and returns a summary.\"...\n2025-06-06 13:41:45,883 - __main__ - DEBUG -         Found method: explain_gnn_file_content(file_path_str, aspect_to_explain) - \"Reads a GNN file, sends its content to an LLM, and returns an explanation.\"...\n2025-06-06 13:41:45,883 - __main__ - DEBUG -         Found method: generate_professional_summary_from_gnn(file_path_str, experiment_details, target_audience) - \"Generates a professional summary of a GNN model and its experimental context.\"...\n2025-06-06 13:41:45,883 - __main__ - DEBUG -         Found method: register_tools(mcp_instance_ref) - \"\"...\n2025-06-06 13:41:45,883 - __main__ - DEBUG -         Found method: ensure_llm_tools_registered(mcp_instance_ref) - \"Ensures that LLM tools are registered with the provided MCP instance.\"...\n2025-06-06 13:41:45,883 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): initialize_llm_module(mcp_instance_ref) - Docstring: Initializes the LLM module, loads API key, and updates MCP status.\n2025-06-06 13:41:45,883 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): summarize_gnn_file_content(file_path_str, user_prompt_suffix) - Docstring: Reads a GNN file, sends its content to an LLM, and returns a summary.\n2025-06-06 13:41:45,883 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): explain_gnn_file_content(file_path_str, aspect_to_explain) - Docstring: Reads a GNN file, sends its content to an LLM, and returns an explanation.\n2025-06-06 13:41:45,883 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): generate_professional_summary_from_gnn(file_path_str, experiment_details, target_audience) - Docstring: Generates a professional summary of a GNN model and its experimental context.\n2025-06-06 13:41:45,883 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): register_tools(mcp_instance_ref) - Docstring: \n2025-06-06 13:41:45,883 - __main__ - DEBUG -           Found AST method (not a direct MCP tool or already listed): ensure_llm_tools_registered(mcp_instance_ref) - Docstring: Ensures that LLM tools are registered with the provided MCP instance.\n2025-06-06 13:41:45,883 - __main__ - DEBUG -   \u2705 MCP integration and API report saved: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/mcp_processing_step/7_mcp_integration_report.md (42829 bytes)\n2025-06-06 13:41:45,883 - __main__ - INFO - \u2705 Step 7: MCP Operations (7_mcp.py) - COMPLETED (Report generated; check report for details on findings)\n",
            "stderr": "2025-06-06 13:41:45,622 - root - WARNING - Could not directly import MCPTool from src.mcp. This might be okay if loaded by the main MCP system.\n2025-06-06 13:41:45,632 - src.render.mcp - INFO - Render module MCP tools registered.\n2025-06-06 13:41:45,866 - src.llm.mcp - INFO - Successfully imported MCPTool and MCPSDKNotFoundError from src.mcp.mcp in initialize_llm_module.\n2025-06-06 13:41:45,866 - llm.llm_operations - INFO - OpenAI API key loaded successfully.\n2025-06-06 13:41:45,866 - src.llm.mcp - INFO - LLM API Key loaded successfully.\n2025-06-06 13:41:45,866 - src.llm.mcp - INFO - Registered MCP tool: llm.summarize_gnn_file\n2025-06-06 13:41:45,866 - src.llm.mcp - INFO - Registered MCP tool: llm.explain_gnn_file\n2025-06-06 13:41:45,866 - src.llm.mcp - INFO - Registered MCP tool: llm.generate_professional_summary\n2025-06-06 13:41:45,866 - src.llm.mcp - INFO - LLM module MCP tools registration process completed.\n2025-06-06 13:41:45,867 - src.mcp.sympy_mcp - INFO - Successfully registered SymPy MCP tools\n2025-06-06 13:41:45,867 - mcp - INFO - Successfully registered SymPy MCP tools\n2025-06-06 13:41:45,867 - mcp - INFO - MCP system initialized using project's internal MCP components. SDK Status: Using project's internal MCP implementation.\n2025-06-06 13:41:45,867 - src.visualization.mcp - INFO - Visualization module MCP tools and resources registered.\n2025-06-06 13:41:45,868 - src.render.mcp - INFO - Render module MCP tools registered.\n2025-06-06 13:41:45,868 - src.llm.mcp - INFO - Successfully imported MCPTool and MCPSDKNotFoundError from src.mcp.mcp in initialize_llm_module.\n2025-06-06 13:41:45,868 - llm.llm_operations - INFO - OpenAI API key loaded successfully.\n2025-06-06 13:41:45,868 - src.llm.mcp - INFO - LLM API Key loaded successfully.\n2025-06-06 13:41:45,868 - src.llm.mcp - INFO - Registered MCP tool: llm.summarize_gnn_file\n2025-06-06 13:41:45,868 - src.llm.mcp - INFO - Registered MCP tool: llm.explain_gnn_file\n2025-06-06 13:41:45,868 - src.llm.mcp - INFO - Registered MCP tool: llm.generate_professional_summary\n2025-06-06 13:41:45,868 - src.llm.mcp - INFO - LLM module MCP tools registration process completed.\n2025-06-06 13:41:45,868 - src.mcp.sympy_mcp - INFO - Successfully registered SymPy MCP tools\n2025-06-06 13:41:45,868 - mcp - INFO - Successfully registered SymPy MCP tools\n2025-06-06 13:41:45,868 - mcp - INFO - MCP system initialized using project's internal MCP components. SDK Status: Using project's internal MCP implementation.\n2025-06-06 13:41:45,870 - mcp - DEBUG - MCP modules already discovered. Skipping redundant discovery.\n2025-06-06 13:41:45,870 - mcp - INFO - MCP system initialized using project's internal MCP components. SDK Status: Using project's internal MCP implementation.\n"
        },
        {
            "step_number": 8,
            "script_name": "8_ontology.py",
            "status": "SUCCESS",
            "start_time": "2025-06-06T13:41:46.102118",
            "end_time": "2025-06-06T13:41:46.157825",
            "duration_seconds": 0.055707,
            "details": "",
            "stdout": "2025-06-06 13:41:46,142 - __main__ - INFO - \u25b6\ufe0f Starting Step 8: Ontology Operations (8_ontology.py)\n2025-06-06 13:41:46,142 - __main__ - DEBUG -   Parsed options (from main.py or standalone):\n2025-06-06 13:41:46,142 - __main__ - DEBUG -     Target GNN files directory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples\n2025-06-06 13:41:46,142 - __main__ - DEBUG -     Output directory for report: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output\n2025-06-06 13:41:46,142 - __main__ - DEBUG -     Recursive: False\n2025-06-06 13:41:46,142 - __main__ - DEBUG -     Ontology terms definition file: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/ontology/act_inf_ontology_terms.json\n2025-06-06 13:41:46,142 - __main__ - DEBUG -     Verbose flag from args: True\n2025-06-06 13:41:46,142 - __main__ - INFO -   \ud83d\udd0e Processing ontology related tasks...\n2025-06-06 13:41:46,142 - __main__ - DEBUG -     \ud83c\udfaf Target GNN files in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples\n2025-06-06 13:41:46,142 - __main__ - DEBUG -     \u0565\u056c Output directory for ontology report: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output\n2025-06-06 13:41:46,142 - __main__ - DEBUG -     \ud83d\udd04 Recursive mode: Disabled\n2025-06-06 13:41:46,143 - __main__ - DEBUG -     \ud83d\udcd6 Using ontology terms definition from: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/ontology/act_inf_ontology_terms.json\n2025-06-06 13:41:46,143 - __main__ - DEBUG -     \ud83e\udde0 Conceptual Note: Ontologies provide a formal way to represent knowledge.\n2025-06-06 13:41:46,143 - __main__ - DEBUG -       - Informal ontologies (like folksonomies or taxonomies) help organize concepts.\n2025-06-06 13:41:46,143 - __main__ - DEBUG -       - Formal ontologies (e.g., in OWL, RDF) allow for logical reasoning and consistency checks.\n2025-06-06 13:41:46,143 - __main__ - DEBUG -       - This script focuses on extracting and validating terms based on a predefined JSON schema.\n2025-06-06 13:41:46,143 - __main__ - DEBUG -       - Different ontology languages (OWL, RDF, SKOS) offer varying expressiveness.\n2025-06-06 13:41:46,143 - __main__ - DEBUG -     \u270d\ufe0f Ontology report will be saved in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/ontology_processing\n2025-06-06 13:41:46,143 - __main__ - DEBUG -     \ud83e\uddd0 Loading defined ontology terms from: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/ontology/act_inf_ontology_terms.json\n2025-06-06 13:41:46,144 - __main__ - DEBUG -       \ud83d\udcda Loaded 48 ontology terms successfully.\n2025-06-06 13:41:46,144 - __main__ - DEBUG -     \ud83d\udcca Found 2 GNN (.md) files to process.\n2025-06-06 13:41:46,144 - __main__ - DEBUG -     \ud83d\udcc4 Processing file: pymdp_pomdp_agent.md (6387 bytes)\n2025-06-06 13:41:46,145 - __main__ - DEBUG -       Found 20 ontology annotations in pymdp_pomdp_agent.md.\n2025-06-06 13:41:46,145 - __main__ - DEBUG -         Validated for pymdp_pomdp_agent.md: 20 passed, 0 failed.\n2025-06-06 13:41:46,145 - __main__ - DEBUG -     \ud83d\udcc4 Processing file: rxinfer_multiagent_gnn.md (9002 bytes)\n2025-06-06 13:41:46,146 - __main__ - DEBUG -       Found 12 ontology annotations in rxinfer_multiagent_gnn.md.\n2025-06-06 13:41:46,146 - __main__ - DEBUG -         Validated for rxinfer_multiagent_gnn.md: 0 passed, 12 failed.\n2025-06-06 13:41:46,146 - __main__ - DEBUG -   \u2705 Ontology processing report saved: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/ontology_processing/ontology_processing_report.md (2204 bytes)\n2025-06-06 13:41:46,146 - __main__ - WARNING - \u26a0\ufe0f Step 8: Ontology validation completed with 12 failed term(s). Check '/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/ontology_processing/ontology_processing_report.md' for details.\n",
            "stderr": ""
        },
        {
            "step_number": 9,
            "script_name": "9_render.py",
            "status": "SUCCESS",
            "start_time": "2025-06-06T13:41:46.157865",
            "end_time": "2025-06-06T13:41:47.379576",
            "duration_seconds": 1.221711,
            "details": "",
            "stdout": "2025-06-06 13:41:47,195 - __main__ - INFO - Successfully imported render module.\n2025-06-06 13:41:47,195 - __main__ - INFO - Executing render step with arguments from main pipeline: Namespace(target_dir=PosixPath('/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples'), output_dir=PosixPath('/home/trim/Documents/GitHub/GeneralizedNotationNotation/output'), recursive=True, verbose=True, target_format=None)\n2025-06-06 13:41:47,195 - __main__ - INFO - Render step will target GNN specifications from: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_exports\n2025-06-06 13:41:47,195 - __main__ - INFO - Rendering to all supported formats: pymdp, rxinfer, rxinfer_toml\n2025-06-06 13:41:47,195 - __main__ - INFO - Searching for GNN specification files (*.json) in /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_exports (recursive: True)\n2025-06-06 13:41:47,195 - __main__ - INFO - Found 2 GNN specification files to process.\n2025-06-06 13:41:47,195 - __main__ - INFO - Processing GNN specification: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_exports/pymdp_pomdp_agent/pymdp_pomdp_agent.json\n2025-06-06 13:41:47,195 - __main__ - INFO -   Rendering to format: pymdp\n2025-06-06 13:41:47,196 - __main__ - DEBUG -     Calling render_module.main with args: ['/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_exports/pymdp_pomdp_agent/pymdp_pomdp_agent.json', '/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/pymdp/pymdp_pomdp_agent', 'pymdp', '--output_filename', 'pymdp_pomdp_agent', '--verbose']\nSuccessfully rendered to pymdp: Successfully wrote PyMDP script: Multifactor PyMDP Agent v1_pymdp.py\nConversion Log Summary:\nINFO: Starting GNN data extraction.\nDEBUG: Successfully parsed stringified direct_num_obs: [3, 3, 3]\nDEBUG: Successfully parsed stringified direct_num_states: [2, 3]\nINFO: StateSpaceBlock not found or empty in GNN spec.\nINFO: Using direct 'num_obs_modalities' from GNN spec: [3, 3, 3]\nINFO: Observation dimensions (num_obs) derived directly from gnn_spec.num_obs_modalities: [3, 3, 3]\nINFO: Observation names generated as defaults (gnn_spec.obs_modality_names not found or mismatched).\nINFO: Using direct 'num_hidden_states_factors' from GNN spec: [2, 3]\nINFO: State dimensions (num_states) derived directly from gnn_spec.num_hidden_states_factors: [2, 3]\nINFO: State names generated as defaults (gnn_spec.hidden_state_factor_names not found or mismatched).\nINFO: No control factors found in StateSpaceBlock.HiddenStateFactors.\nINFO: Finished GNN data extraction.\nINFO: Matrix definitions not generated yet. Generating matrices...\nINFO: E_vector: No E (policy prior) specification found. Defaulting to None.\nINFO: Agent instantiation code not generated yet. Generating...\nINFO: Example usage code not generated yet. Generating...\nINFO: Generated full Python script (10558 characters)\nOutput artifacts: file:///home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/pymdp/pymdp_pomdp_agent/Multifactor%20PyMDP%20Agent%20v1_pymdp.py\n2025-06-06 13:41:47,197 - __main__ - INFO -     Successfully rendered pymdp_pomdp_agent.json to pymdp in /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/pymdp/pymdp_pomdp_agent\n2025-06-06 13:41:47,197 - __main__ - INFO -   Rendering to format: rxinfer\n2025-06-06 13:41:47,197 - __main__ - DEBUG -     Calling render_module.main with args: ['/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_exports/pymdp_pomdp_agent/pymdp_pomdp_agent.json', '/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer/pymdp_pomdp_agent', 'rxinfer', '--output_filename', 'pymdp_pomdp_agent', '--verbose']\nSuccessfully rendered to rxinfer: Successfully rendered to RxInfer.jl: Multifactor PyMDP Agent v1_rxinfer.jl\nOutput artifacts: file:///home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer/pymdp_pomdp_agent/Multifactor%20PyMDP%20Agent%20v1_rxinfer.jl\n2025-06-06 13:41:47,198 - __main__ - INFO -     Successfully rendered pymdp_pomdp_agent.json to rxinfer in /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer/pymdp_pomdp_agent\n2025-06-06 13:41:47,198 - __main__ - INFO -   Rendering to format: rxinfer_toml\n2025-06-06 13:41:47,198 - __main__ - DEBUG -     Calling render_module.main with args: ['/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_exports/pymdp_pomdp_agent/pymdp_pomdp_agent.json', '/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer_toml/pymdp_pomdp_agent', 'rxinfer_toml', '--output_filename', 'pymdp_pomdp_agent', '--verbose']\nSuccessfully rendered to rxinfer_toml: Successfully rendered to RxInfer TOML: Multifactor PyMDP Agent v1_config.toml\nOutput artifacts: file:///home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer_toml/pymdp_pomdp_agent/Multifactor%20PyMDP%20Agent%20v1_config.toml\n2025-06-06 13:41:47,199 - __main__ - INFO -     Successfully rendered pymdp_pomdp_agent.json to rxinfer_toml in /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer_toml/pymdp_pomdp_agent\n2025-06-06 13:41:47,199 - __main__ - INFO - Processing GNN specification: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_exports/rxinfer_multiagent_gnn/rxinfer_multiagent_gnn.json\n2025-06-06 13:41:47,199 - __main__ - INFO -   Rendering to format: pymdp\n2025-06-06 13:41:47,199 - __main__ - DEBUG -     Calling render_module.main with args: ['/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_exports/rxinfer_multiagent_gnn/rxinfer_multiagent_gnn.json', '/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/pymdp/rxinfer_multiagent_gnn', 'pymdp', '--output_filename', 'rxinfer_multiagent_gnn', '--verbose']\nSuccessfully rendered to pymdp: Successfully wrote PyMDP script: Multi-agent Trajectory Planning_pymdp.py\nConversion Log Summary:\nINFO: Starting GNN data extraction.\nINFO: StateSpaceBlock not found or empty in GNN spec.\nINFO: ModelParameters not found or empty in GNN spec.\nINFO: Finished GNN data extraction.\nINFO: Matrix definitions not generated yet. Generating matrices...\nINFO: A_matrix: No observation modalities defined. 'A' will be None.\nINFO: B_matrix: No hidden state factors defined. 'B' will be None.\nINFO: C_vector: No observation modalities defined. 'C' will be None.\nINFO: D_vector: No hidden state factors defined. 'D' will be None.\nINFO: E_vector: No E (policy prior) specification found. Defaulting to None.\nINFO: Agent instantiation code not generated yet. Generating...\nERROR: Cannot generate agent instantiation with no observation modalities or hidden state factors.\nINFO: Example usage code not generated yet. Generating...\nINFO: Skipping example usage code due to missing modalities or state factors.\nINFO: Generated full Python script (4807 characters)\nOutput artifacts: file:///home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/pymdp/rxinfer_multiagent_gnn/Multi-agent%20Trajectory%20Planning_pymdp.py\n2025-06-06 13:41:47,201 - __main__ - INFO -     Successfully rendered rxinfer_multiagent_gnn.json to pymdp in /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/pymdp/rxinfer_multiagent_gnn\n2025-06-06 13:41:47,201 - __main__ - INFO -   Rendering to format: rxinfer\n2025-06-06 13:41:47,202 - __main__ - DEBUG -     Calling render_module.main with args: ['/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_exports/rxinfer_multiagent_gnn/rxinfer_multiagent_gnn.json', '/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer/rxinfer_multiagent_gnn', 'rxinfer', '--output_filename', 'rxinfer_multiagent_gnn', '--verbose']\nSuccessfully rendered to rxinfer: Successfully rendered to RxInfer.jl: Multi-agent Trajectory Planning_rxinfer.jl\nOutput artifacts: file:///home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer/rxinfer_multiagent_gnn/Multi-agent%20Trajectory%20Planning_rxinfer.jl\n2025-06-06 13:41:47,203 - __main__ - INFO -     Successfully rendered rxinfer_multiagent_gnn.json to rxinfer in /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer/rxinfer_multiagent_gnn\n2025-06-06 13:41:47,203 - __main__ - INFO -   Rendering to format: rxinfer_toml\n2025-06-06 13:41:47,204 - __main__ - DEBUG -     Calling render_module.main with args: ['/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_exports/rxinfer_multiagent_gnn/rxinfer_multiagent_gnn.json', '/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer_toml/rxinfer_multiagent_gnn', 'rxinfer_toml', '--output_filename', 'rxinfer_multiagent_gnn', '--verbose']\nSuccessfully rendered to rxinfer_toml: Successfully rendered to RxInfer TOML: Multi-agent Trajectory Planning_config.toml\nOutput artifacts: file:///home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer_toml/rxinfer_multiagent_gnn/Multi-agent%20Trajectory%20Planning_config.toml\n2025-06-06 13:41:47,205 - __main__ - INFO -     Successfully rendered rxinfer_multiagent_gnn.json to rxinfer_toml in /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer_toml/rxinfer_multiagent_gnn\n2025-06-06 13:41:47,205 - __main__ - INFO - Render step completed successfully for 2 GNN file(s).\n",
            "stderr": "2025-06-06 13:41:47,196 - render.render - WARNING - Could not import GNN parser, using JSON loader as fallback\n2025-06-06 13:41:47,196 - render.pymdp_renderer - INFO - Initializing GNN to PyMDP converter for model: UnknownModel\n2025-06-06 13:41:47,197 - render.pymdp_converter - INFO - Starting GNN data extraction.\n2025-06-06 13:41:47,197 - render.pymdp_converter - DEBUG - Successfully parsed stringified direct_num_obs: [3, 3, 3]\n2025-06-06 13:41:47,197 - render.pymdp_converter - DEBUG - Successfully parsed stringified direct_num_states: [2, 3]\n2025-06-06 13:41:47,197 - render.pymdp_converter - INFO - StateSpaceBlock not found or empty in GNN spec.\n2025-06-06 13:41:47,197 - render.pymdp_converter - INFO - Using direct 'num_obs_modalities' from GNN spec: [3, 3, 3]\n2025-06-06 13:41:47,197 - render.pymdp_converter - INFO - Observation dimensions (num_obs) derived directly from gnn_spec.num_obs_modalities: [3, 3, 3]\n2025-06-06 13:41:47,197 - render.pymdp_converter - INFO - Observation names generated as defaults (gnn_spec.obs_modality_names not found or mismatched).\n2025-06-06 13:41:47,197 - render.pymdp_converter - INFO - Using direct 'num_hidden_states_factors' from GNN spec: [2, 3]\n2025-06-06 13:41:47,197 - render.pymdp_converter - INFO - State dimensions (num_states) derived directly from gnn_spec.num_hidden_states_factors: [2, 3]\n2025-06-06 13:41:47,197 - render.pymdp_converter - INFO - State names generated as defaults (gnn_spec.hidden_state_factor_names not found or mismatched).\n2025-06-06 13:41:47,197 - render.pymdp_converter - INFO - No control factors found in StateSpaceBlock.HiddenStateFactors.\n2025-06-06 13:41:47,197 - render.pymdp_converter - INFO - Finished GNN data extraction.\n2025-06-06 13:41:47,197 - render.pymdp_renderer - INFO - Generating PyMDP Python script content...\n2025-06-06 13:41:47,197 - render.pymdp_converter - INFO - Matrix definitions not generated yet. Generating matrices...\n2025-06-06 13:41:47,197 - render.pymdp_converter - INFO - E_vector: No E (policy prior) specification found. Defaulting to None.\n2025-06-06 13:41:47,197 - render.pymdp_converter - INFO - Agent instantiation code not generated yet. Generating...\n2025-06-06 13:41:47,197 - render.pymdp_converter - INFO - Example usage code not generated yet. Generating...\n2025-06-06 13:41:47,197 - render.pymdp_converter - INFO - Generated full Python script (10558 characters)\n2025-06-06 13:41:47,197 - render.pymdp_renderer - INFO - Writing PyMDP script to: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/pymdp/pymdp_pomdp_agent/Multifactor PyMDP Agent v1_pymdp.py\n2025-06-06 13:41:47,197 - render.pymdp_renderer - INFO - Successfully wrote PyMDP script: Multifactor PyMDP Agent v1_pymdp.py\n2025-06-06 13:41:47,198 - render.render - WARNING - Could not import GNN parser, using JSON loader as fallback\n2025-06-06 13:41:47,198 - render.rxinfer - INFO - Rendering GNN spec to RxInfer.jl configuration '/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer/pymdp_pomdp_agent/Multifactor PyMDP Agent v1_rxinfer.jl'.\n2025-06-06 13:41:47,198 - rxinfer.config_generator - INFO - Successfully generated RxInfer.jl configuration file: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer/pymdp_pomdp_agent/Multifactor PyMDP Agent v1_rxinfer.jl\n2025-06-06 13:41:47,198 - render.rxinfer - INFO - Successfully wrote RxInfer.jl configuration to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer/pymdp_pomdp_agent/Multifactor PyMDP Agent v1_rxinfer.jl\n2025-06-06 13:41:47,199 - render.render - WARNING - Could not import GNN parser, using JSON loader as fallback\n2025-06-06 13:41:47,199 - render.rxinfer - INFO - Rendering GNN spec to RxInfer TOML configuration '/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer_toml/pymdp_pomdp_agent/Multifactor PyMDP Agent v1_config.toml'.\n2025-06-06 13:41:47,199 - rxinfer.toml_generator - INFO - Generating RxInfer TOML configuration at /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer_toml/pymdp_pomdp_agent/Multifactor PyMDP Agent v1_config.toml\n2025-06-06 13:41:47,199 - rxinfer.toml_generator - INFO - Successfully wrote TOML configuration to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer_toml/pymdp_pomdp_agent/Multifactor PyMDP Agent v1_config.toml\n2025-06-06 13:41:47,199 - render.rxinfer - INFO - Successfully wrote RxInfer TOML configuration to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer_toml/pymdp_pomdp_agent/Multifactor PyMDP Agent v1_config.toml\n2025-06-06 13:41:47,200 - render.render - WARNING - Could not import GNN parser, using JSON loader as fallback\n2025-06-06 13:41:47,200 - render.pymdp_renderer - INFO - Initializing GNN to PyMDP converter for model: UnknownModel\n2025-06-06 13:41:47,200 - render.pymdp_converter - INFO - Starting GNN data extraction.\n2025-06-06 13:41:47,200 - render.pymdp_converter - INFO - StateSpaceBlock not found or empty in GNN spec.\n2025-06-06 13:41:47,200 - render.pymdp_converter - INFO - ModelParameters not found or empty in GNN spec.\n2025-06-06 13:41:47,200 - render.pymdp_converter - INFO - Finished GNN data extraction.\n2025-06-06 13:41:47,200 - render.pymdp_renderer - INFO - Generating PyMDP Python script content...\n2025-06-06 13:41:47,200 - render.pymdp_converter - INFO - Matrix definitions not generated yet. Generating matrices...\n2025-06-06 13:41:47,200 - render.pymdp_converter - INFO - A_matrix: No observation modalities defined. 'A' will be None.\n2025-06-06 13:41:47,200 - render.pymdp_converter - INFO - B_matrix: No hidden state factors defined. 'B' will be None.\n2025-06-06 13:41:47,200 - render.pymdp_converter - INFO - C_vector: No observation modalities defined. 'C' will be None.\n2025-06-06 13:41:47,200 - render.pymdp_converter - INFO - D_vector: No hidden state factors defined. 'D' will be None.\n2025-06-06 13:41:47,200 - render.pymdp_converter - INFO - E_vector: No E (policy prior) specification found. Defaulting to None.\n2025-06-06 13:41:47,200 - render.pymdp_converter - INFO - Agent instantiation code not generated yet. Generating...\n2025-06-06 13:41:47,200 - render.pymdp_converter - ERROR - Cannot generate agent instantiation with no observation modalities or hidden state factors.\n2025-06-06 13:41:47,200 - render.pymdp_converter - INFO - Example usage code not generated yet. Generating...\n2025-06-06 13:41:47,200 - render.pymdp_converter - INFO - Skipping example usage code due to missing modalities or state factors.\n2025-06-06 13:41:47,200 - render.pymdp_converter - INFO - Generated full Python script (4807 characters)\n2025-06-06 13:41:47,201 - render.pymdp_renderer - INFO - Writing PyMDP script to: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/pymdp/rxinfer_multiagent_gnn/Multi-agent Trajectory Planning_pymdp.py\n2025-06-06 13:41:47,201 - render.pymdp_renderer - INFO - Successfully wrote PyMDP script: Multi-agent Trajectory Planning_pymdp.py\n2025-06-06 13:41:47,203 - render.render - WARNING - Could not import GNN parser, using JSON loader as fallback\n2025-06-06 13:41:47,203 - render.rxinfer - INFO - Rendering GNN spec to RxInfer.jl configuration '/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer/rxinfer_multiagent_gnn/Multi-agent Trajectory Planning_rxinfer.jl'.\n2025-06-06 13:41:47,203 - rxinfer.config_generator - INFO - Successfully generated RxInfer.jl configuration file: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer/rxinfer_multiagent_gnn/Multi-agent Trajectory Planning_rxinfer.jl\n2025-06-06 13:41:47,203 - render.rxinfer - INFO - Successfully wrote RxInfer.jl configuration to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer/rxinfer_multiagent_gnn/Multi-agent Trajectory Planning_rxinfer.jl\n2025-06-06 13:41:47,204 - render.render - WARNING - Could not import GNN parser, using JSON loader as fallback\n2025-06-06 13:41:47,204 - render.rxinfer - INFO - Rendering GNN spec to RxInfer TOML configuration '/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer_toml/rxinfer_multiagent_gnn/Multi-agent Trajectory Planning_config.toml'.\n2025-06-06 13:41:47,204 - rxinfer.toml_generator - INFO - Generating RxInfer TOML configuration at /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer_toml/rxinfer_multiagent_gnn/Multi-agent Trajectory Planning_config.toml\n2025-06-06 13:41:47,205 - rxinfer.toml_generator - INFO - Successfully wrote TOML configuration to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer_toml/rxinfer_multiagent_gnn/Multi-agent Trajectory Planning_config.toml\n2025-06-06 13:41:47,205 - render.rxinfer - INFO - Successfully wrote RxInfer TOML configuration to /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer_toml/rxinfer_multiagent_gnn/Multi-agent Trajectory Planning_config.toml\n"
        },
        {
            "step_number": 10,
            "script_name": "10_execute.py",
            "status": "FAILED_NONZERO_EXIT",
            "start_time": "2025-06-06T13:41:47.379637",
            "end_time": "2025-06-06T13:41:53.690136",
            "duration_seconds": 6.310499,
            "details": "Process exited with code 1",
            "stdout": "2025-06-06 13:41:47,424 - __main__ - DEBUG - Verbose logging extended to 'execute.pymdp_runner' module.\n2025-06-06 13:41:47,424 - __main__ - DEBUG - Verbose logging extended to 'execute.rxinfer_runner' module.\n2025-06-06 13:41:47,424 - __main__ - INFO - \u25b6\ufe0f Starting Step 10: Execute Rendered Simulators (10_execute.py)\n2025-06-06 13:41:47,424 - __main__ - DEBUG -   Pipeline arguments received: Namespace(output_dir=PosixPath('/home/trim/Documents/GitHub/GeneralizedNotationNotation/output'), recursive=True, verbose=True, pymdp_only=False, rxinfer_only=False, target_dir=PosixPath('/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples'))\n2025-06-06 13:41:47,424 - __main__ - INFO -   Executing PyMDP rendered scripts...\n2025-06-06 13:41:50,123 - __main__ - INFO -   \u2705 PyMDP scripts executed successfully or no scripts were found to run.\n2025-06-06 13:41:50,123 - __main__ - INFO -   Executing RxInfer.jl rendered scripts...\n2025-06-06 13:41:53,683 - __main__ - ERROR -   \u274c Some RxInfer.jl scripts failed during execution.\n2025-06-06 13:41:53,683 - __main__ - ERROR - \u274c Step 10: Execute Rendered Simulators (10_execute.py) - FAILED\n",
            "stderr": "Script execution failed with return code 1: Multifactor PyMDP Agent v1_rxinfer.jl\nError output:\nERROR: LoadError: UndefVarError: `model` not defined in `Main`\nStacktrace:\n [1] top-level scope\n   @ ~/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer/pymdp_pomdp_agent/Multifactor PyMDP Agent v1_rxinfer.jl:3\nin expression starting at /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer/pymdp_pomdp_agent/Multifactor PyMDP Agent v1_rxinfer.jl:3\n\nScript execution failed with return code 1: Multi-agent Trajectory Planning_rxinfer.jl\nError output:\nERROR: LoadError: UndefVarError: `model` not defined in `Main`\nStacktrace:\n [1] top-level scope\n   @ ~/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer/rxinfer_multiagent_gnn/Multi-agent Trajectory Planning_rxinfer.jl:3\nin expression starting at /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_rendered_simulators/rxinfer/rxinfer_multiagent_gnn/Multi-agent Trajectory Planning_rxinfer.jl:3\n\n"
        },
        {
            "step_number": 11,
            "script_name": "11_llm.py",
            "status": "FAILED_TIMEOUT",
            "start_time": "2025-06-06T13:41:53.690223",
            "end_time": "2025-06-06T13:43:53.712500",
            "duration_seconds": 120.022277,
            "details": "Process timed out after 120.0 seconds (limit: 120s)",
            "stdout": "2025-06-06 13:41:55,090 - __main__ - INFO - Standalone run: Ensuring LLM tools are registered (if not already done)...\n2025-06-06 13:41:55,090 - __main__ - INFO - Ensuring LLM tools are registered (one-time setup)...\n2025-06-06 13:41:55,090 - __main__ - INFO - LLM tools registration check complete and API key loaded.\n2025-06-06 13:41:55,090 - __main__ - INFO - Standalone run: LLM tools registration check complete.\n2025-06-06 13:41:55,090 - __main__ - DEBUG - Script logger '__main__' level set to DEBUG.\n2025-06-06 13:41:55,090 - __main__ - DEBUG - Verbose mode: Set logger for 'src.llm.llm_operations' to DEBUG.\n2025-06-06 13:41:55,090 - __main__ - INFO - Starting LLM processing step. Target directory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples, Output directory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output\n2025-06-06 13:41:55,090 - __main__ - DEBUG - Full arguments: Namespace(target_dir=PosixPath('/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples'), output_dir=PosixPath('/home/trim/Documents/GitHub/GeneralizedNotationNotation/output'), recursive=False, verbose=True, llm_tasks=['all'], llm_timeout=60)\n2025-06-06 13:41:55,091 - __main__ - INFO - LLM outputs will be saved in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/llm_processing_step\n2025-06-06 13:41:55,091 - __main__ - INFO - LLM tasks to run: summary, analysis, qa\n2025-06-06 13:41:55,091 - __main__ - INFO - Discovered 2 potential GNN input files.\n2025-06-06 13:41:55,091 - __main__ - DEBUG -   - Found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples/pymdp_pomdp_agent.md\n2025-06-06 13:41:55,091 - __main__ - DEBUG -   - Found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples/rxinfer_multiagent_gnn.md\n2025-06-06 13:41:55,091 - __main__ - INFO - --- Processing GNN file: pymdp_pomdp_agent.md ---\n2025-06-06 13:41:55,091 - __main__ - INFO - Processing GNN file with LLM: pymdp_pomdp_agent.md\n2025-06-06 13:41:55,091 - __main__ - INFO - Task 1: Generating summary for pymdp_pomdp_agent.md...\n2025-06-06 13:41:55,091 - __main__ - DEBUG - Summary prompt for pymdp_pomdp_agent.md (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:42:03,359 - __main__ - INFO - Successfully generated summary for pymdp_pomdp_agent.md. Saved to: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/llm_processing_step/pymdp_pomdp_agent/pymdp_pomdp_agent_summary.txt (Size: 1705 bytes)\n2025-06-06 13:42:03,359 - __main__ - INFO - Task 2: Generating comprehensive analysis for pymdp_pomdp_agent.md...\n2025-06-06 13:42:03,359 - __main__ - DEBUG - Comprehensive analysis prompt for pymdp_pomdp_agent.md (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:42:59,079 - __main__ - INFO - Successfully generated comprehensive analysis for pymdp_pomdp_agent.md. Saved to: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/llm_processing_step/pymdp_pomdp_agent/pymdp_pomdp_agent_comprehensive_analysis.json (Size: 8088 bytes)\n2025-06-06 13:42:59,079 - __main__ - INFO - Tasks 3 & 4: Generating Q&A for pymdp_pomdp_agent.md...\n2025-06-06 13:42:59,079 - __main__ - DEBUG - Question generation prompt for pymdp_pomdp_agent.md (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:02,136 - __main__ - INFO - Successfully generated 5 questions for pymdp_pomdp_agent.md.\n2025-06-06 13:43:02,136 - __main__ - INFO - Answering 5 generated questions for pymdp_pomdp_agent.md...\n2025-06-06 13:43:02,136 - __main__ - DEBUG - Answering question 1/5: 'What are the implications of having multiple observation modalities in the PyMDP agent, and how might they interact to influence decision making?'\n2025-06-06 13:43:06,212 - __main__ - DEBUG - Answer for 'What are the implications of having multiple observation modalities in the PyMDP agent, and how might they interact to influence decision making?': The GNN file indicates that the PyMDP agent has multiple observation modalities\u2014specifically, \"state...\n2025-06-06 13:43:06,212 - __main__ - DEBUG - Answering question 2/5: 'How does the controllable 'decision_state' factor affect the overall dynamics of the agent, particularly in relation to the uncontrolled 'reward_level' factor?'\n2025-06-06 13:43:09,110 - __main__ - DEBUG - Answer for 'How does the controllable 'decision_state' factor affect the overall dynamics of the agent, particularly in relation to the uncontrolled 'reward_level' factor?': The GNN file indicates that the controllable 'decision_state' factor affects the overall dynamics of...\n2025-06-06 13:43:09,110 - __main__ - DEBUG - Answering question 3/5: 'What are the potential impacts of the chosen prior distributions (D_f0 and D_f1) on the inference processes and the agent's learning capabilities?'\n2025-06-06 13:43:16,156 - __main__ - DEBUG - Answer for 'What are the potential impacts of the chosen prior distributions (D_f0 and D_f1) on the inference processes and the agent's learning capabilities?': The GNN file specifies uniform prior distributions for both hidden state factors: D_f0 for \"reward_l...\n2025-06-06 13:43:16,156 - __main__ - DEBUG - Answering question 4/5: 'How do the specified transition matrices (B_f0 and B_f1) reflect the underlying assumptions about state transitions, and what real-world scenarios could they model effectively?'\n2025-06-06 13:43:21,566 - __main__ - DEBUG - Answer for 'How do the specified transition matrices (B_f0 and B_f1) reflect the underlying assumptions about state transitions, and what real-world scenarios could they model effectively?': The transition matrices (B_f0 and B_f1) in the provided GNN file reflect distinct underlying assumpt...\n2025-06-06 13:43:21,566 - __main__ - DEBUG - Answering question 5/5: 'In what ways might the expected free energy (G) serve as a guiding principle for the agent's actions, and how could variations in the preference vectors (C_m0, C_m1, C_m2) alter its behavior?'\n2025-06-06 13:43:25,755 - __main__ - DEBUG - Answer for 'In what ways might the expected free energy (G) serve as a guiding principle for the agent's actions, and how could variations in the preference vectors (C_m0, C_m1, C_m2) alter its behavior?': The expected free energy (G) serves as a guiding principle for the agent's actions by functioning as...\n2025-06-06 13:43:25,755 - __main__ - INFO - Successfully generated and answered questions for pymdp_pomdp_agent.md. Saved to: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/llm_processing_step/pymdp_pomdp_agent/pymdp_pomdp_agent_qa.json (Size: 7932 bytes)\n2025-06-06 13:43:25,755 - __main__ - INFO - Finished LLM processing for GNN file: pymdp_pomdp_agent.md\n2025-06-06 13:43:25,756 - __main__ - INFO - --- Processing GNN file: rxinfer_multiagent_gnn.md ---\n2025-06-06 13:43:25,756 - __main__ - INFO - Processing GNN file with LLM: rxinfer_multiagent_gnn.md\n2025-06-06 13:43:25,756 - __main__ - INFO - Task 1: Generating summary for rxinfer_multiagent_gnn.md...\n2025-06-06 13:43:25,756 - __main__ - DEBUG - Summary prompt for rxinfer_multiagent_gnn.md (first 500 chars): GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:32,922 - __main__ - INFO - Successfully generated summary for rxinfer_multiagent_gnn.md. Saved to: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/llm_processing_step/rxinfer_multiagent_gnn/rxinfer_multiagent_gnn_summary.txt (Size: 2424 bytes)\n2025-06-06 13:43:32,922 - __main__ - INFO - Task 2: Generating comprehensive analysis for rxinfer_multiagent_gnn.md...\n2025-06-06 13:43:32,922 - __main__ - DEBUG - Comprehensive analysis prompt for rxinfer_multiagent_gnn.md (first 500 chars): GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:49,729 - __main__ - WARNING - LLM comprehensive analysis for rxinfer_multiagent_gnn.md was not valid JSON. Saving as raw text.\n2025-06-06 13:43:49,730 - __main__ - INFO - Saved raw analysis output to: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/llm_processing_step/rxinfer_multiagent_gnn/rxinfer_multiagent_gnn_comprehensive_analysis.txt (Size: 4351 bytes)\n2025-06-06 13:43:49,730 - __main__ - INFO - Tasks 3 & 4: Generating Q&A for rxinfer_multiagent_gnn.md...\n2025-06-06 13:43:49,731 - __main__ - DEBUG - Question generation prompt for rxinfer_multiagent_gnn.md (first 500 chars): GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:52,453 - __main__ - INFO - Successfully generated 5 questions for rxinfer_multiagent_gnn.md.\n2025-06-06 13:43:52,453 - __main__ - INFO - Answering 5 generated questions for rxinfer_multiagent_gnn.md...\n2025-06-06 13:43:52,453 - __main__ - DEBUG - Answering question 1/5: 'What assumptions are made about agent behavior in terms of goal-directedness and obstacle avoidance within the multi-agent trajectory planning model?'\n2025-06-06 13:41:55,090 - __main__ - INFO - Standalone run: Ensuring LLM tools are registered (if not already done)...\n2025-06-06 13:41:55,090 - __main__ - INFO - Ensuring LLM tools are registered (one-time setup)...\n2025-06-06 13:41:55,090 - __main__ - INFO - LLM tools registration check complete and API key loaded.\n2025-06-06 13:41:55,090 - __main__ - INFO - Standalone run: LLM tools registration check complete.\n2025-06-06 13:41:55,090 - __main__ - DEBUG - Script logger '__main__' level set to DEBUG.\n2025-06-06 13:41:55,090 - __main__ - DEBUG - Verbose mode: Set logger for 'src.llm.llm_operations' to DEBUG.\n2025-06-06 13:41:55,090 - __main__ - INFO - Starting LLM processing step. Target directory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples, Output directory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output\n2025-06-06 13:41:55,090 - __main__ - DEBUG - Full arguments: Namespace(target_dir=PosixPath('/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples'), output_dir=PosixPath('/home/trim/Documents/GitHub/GeneralizedNotationNotation/output'), recursive=False, verbose=True, llm_tasks=['all'], llm_timeout=60)\n2025-06-06 13:41:55,091 - __main__ - INFO - LLM outputs will be saved in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/llm_processing_step\n2025-06-06 13:41:55,091 - __main__ - INFO - LLM tasks to run: summary, analysis, qa\n2025-06-06 13:41:55,091 - __main__ - INFO - Discovered 2 potential GNN input files.\n2025-06-06 13:41:55,091 - __main__ - DEBUG -   - Found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples/pymdp_pomdp_agent.md\n2025-06-06 13:41:55,091 - __main__ - DEBUG -   - Found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples/rxinfer_multiagent_gnn.md\n2025-06-06 13:41:55,091 - __main__ - INFO - --- Processing GNN file: pymdp_pomdp_agent.md ---\n2025-06-06 13:41:55,091 - __main__ - INFO - Processing GNN file with LLM: pymdp_pomdp_agent.md\n2025-06-06 13:41:55,091 - __main__ - INFO - Task 1: Generating summary for pymdp_pomdp_agent.md...\n2025-06-06 13:41:55,091 - __main__ - DEBUG - Summary prompt for pymdp_pomdp_agent.md (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:42:03,359 - __main__ - INFO - Successfully generated summary for pymdp_pomdp_agent.md. Saved to: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/llm_processing_step/pymdp_pomdp_agent/pymdp_pomdp_agent_summary.txt (Size: 1705 bytes)\n2025-06-06 13:42:03,359 - __main__ - INFO - Task 2: Generating comprehensive analysis for pymdp_pomdp_agent.md...\n2025-06-06 13:42:03,359 - __main__ - DEBUG - Comprehensive analysis prompt for pymdp_pomdp_agent.md (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:42:59,079 - __main__ - INFO - Successfully generated comprehensive analysis for pymdp_pomdp_agent.md. Saved to: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/llm_processing_step/pymdp_pomdp_agent/pymdp_pomdp_agent_comprehensive_analysis.json (Size: 8088 bytes)\n2025-06-06 13:42:59,079 - __main__ - INFO - Tasks 3 & 4: Generating Q&A for pymdp_pomdp_agent.md...\n2025-06-06 13:42:59,079 - __main__ - DEBUG - Question generation prompt for pymdp_pomdp_agent.md (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:02,136 - __main__ - INFO - Successfully generated 5 questions for pymdp_pomdp_agent.md.\n2025-06-06 13:43:02,136 - __main__ - INFO - Answering 5 generated questions for pymdp_pomdp_agent.md...\n2025-06-06 13:43:02,136 - __main__ - DEBUG - Answering question 1/5: 'What are the implications of having multiple observation modalities in the PyMDP agent, and how might they interact to influence decision making?'\n2025-06-06 13:43:06,212 - __main__ - DEBUG - Answer for 'What are the implications of having multiple observation modalities in the PyMDP agent, and how might they interact to influence decision making?': The GNN file indicates that the PyMDP agent has multiple observation modalities\u2014specifically, \"state...\n2025-06-06 13:43:06,212 - __main__ - DEBUG - Answering question 2/5: 'How does the controllable 'decision_state' factor affect the overall dynamics of the agent, particularly in relation to the uncontrolled 'reward_level' factor?'\n2025-06-06 13:43:09,110 - __main__ - DEBUG - Answer for 'How does the controllable 'decision_state' factor affect the overall dynamics of the agent, particularly in relation to the uncontrolled 'reward_level' factor?': The GNN file indicates that the controllable 'decision_state' factor affects the overall dynamics of...\n2025-06-06 13:43:09,110 - __main__ - DEBUG - Answering question 3/5: 'What are the potential impacts of the chosen prior distributions (D_f0 and D_f1) on the inference processes and the agent's learning capabilities?'\n2025-06-06 13:43:16,156 - __main__ - DEBUG - Answer for 'What are the potential impacts of the chosen prior distributions (D_f0 and D_f1) on the inference processes and the agent's learning capabilities?': The GNN file specifies uniform prior distributions for both hidden state factors: D_f0 for \"reward_l...\n2025-06-06 13:43:16,156 - __main__ - DEBUG - Answering question 4/5: 'How do the specified transition matrices (B_f0 and B_f1) reflect the underlying assumptions about state transitions, and what real-world scenarios could they model effectively?'\n2025-06-06 13:43:21,566 - __main__ - DEBUG - Answer for 'How do the specified transition matrices (B_f0 and B_f1) reflect the underlying assumptions about state transitions, and what real-world scenarios could they model effectively?': The transition matrices (B_f0 and B_f1) in the provided GNN file reflect distinct underlying assumpt...\n2025-06-06 13:43:21,566 - __main__ - DEBUG - Answering question 5/5: 'In what ways might the expected free energy (G) serve as a guiding principle for the agent's actions, and how could variations in the preference vectors (C_m0, C_m1, C_m2) alter its behavior?'\n2025-06-06 13:43:25,755 - __main__ - DEBUG - Answer for 'In what ways might the expected free energy (G) serve as a guiding principle for the agent's actions, and how could variations in the preference vectors (C_m0, C_m1, C_m2) alter its behavior?': The expected free energy (G) serves as a guiding principle for the agent's actions by functioning as...\n2025-06-06 13:43:25,755 - __main__ - INFO - Successfully generated and answered questions for pymdp_pomdp_agent.md. Saved to: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/llm_processing_step/pymdp_pomdp_agent/pymdp_pomdp_agent_qa.json (Size: 7932 bytes)\n2025-06-06 13:43:25,755 - __main__ - INFO - Finished LLM processing for GNN file: pymdp_pomdp_agent.md\n2025-06-06 13:43:25,756 - __main__ - INFO - --- Processing GNN file: rxinfer_multiagent_gnn.md ---\n2025-06-06 13:43:25,756 - __main__ - INFO - Processing GNN file with LLM: rxinfer_multiagent_gnn.md\n2025-06-06 13:43:25,756 - __main__ - INFO - Task 1: Generating summary for rxinfer_multiagent_gnn.md...\n2025-06-06 13:43:25,756 - __main__ - DEBUG - Summary prompt for rxinfer_multiagent_gnn.md (first 500 chars): GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:32,922 - __main__ - INFO - Successfully generated summary for rxinfer_multiagent_gnn.md. Saved to: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/llm_processing_step/rxinfer_multiagent_gnn/rxinfer_multiagent_gnn_summary.txt (Size: 2424 bytes)\n2025-06-06 13:43:32,922 - __main__ - INFO - Task 2: Generating comprehensive analysis for rxinfer_multiagent_gnn.md...\n2025-06-06 13:43:32,922 - __main__ - DEBUG - Comprehensive analysis prompt for rxinfer_multiagent_gnn.md (first 500 chars): GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:49,729 - __main__ - WARNING - LLM comprehensive analysis for rxinfer_multiagent_gnn.md was not valid JSON. Saving as raw text.\n2025-06-06 13:43:49,730 - __main__ - INFO - Saved raw analysis output to: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/llm_processing_step/rxinfer_multiagent_gnn/rxinfer_multiagent_gnn_comprehensive_analysis.txt (Size: 4351 bytes)\n2025-06-06 13:43:49,730 - __main__ - INFO - Tasks 3 & 4: Generating Q&A for rxinfer_multiagent_gnn.md...\n2025-06-06 13:43:49,731 - __main__ - DEBUG - Question generation prompt for rxinfer_multiagent_gnn.md (first 500 chars): GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:52,453 - __main__ - INFO - Successfully generated 5 questions for rxinfer_multiagent_gnn.md.\n2025-06-06 13:43:52,453 - __main__ - INFO - Answering 5 generated questions for rxinfer_multiagent_gnn.md...\n2025-06-06 13:43:52,453 - __main__ - DEBUG - Answering question 1/5: 'What assumptions are made about agent behavior in terms of goal-directedness and obstacle avoidance within the multi-agent trajectory planning model?'\n",
            "stderr": "2025-06-06 13:41:55,084 - root - WARNING - Could not directly import MCPTool from src.mcp. This might be okay if loaded by the main MCP system.\n2025-06-06 13:41:55,088 - src.render.mcp - INFO - Render module MCP tools registered.\n2025-06-06 13:41:55,088 - src.llm.mcp - INFO - Successfully imported MCPTool and MCPSDKNotFoundError from src.mcp.mcp in initialize_llm_module.\n2025-06-06 13:41:55,088 - llm.llm_operations - INFO - OpenAI API key loaded successfully.\n2025-06-06 13:41:55,088 - src.llm.mcp - INFO - LLM API Key loaded successfully.\n2025-06-06 13:41:55,088 - src.llm.mcp - INFO - Registered MCP tool: llm.summarize_gnn_file\n2025-06-06 13:41:55,088 - src.llm.mcp - INFO - Registered MCP tool: llm.explain_gnn_file\n2025-06-06 13:41:55,088 - src.llm.mcp - INFO - Registered MCP tool: llm.generate_professional_summary\n2025-06-06 13:41:55,088 - src.llm.mcp - INFO - LLM module MCP tools registration process completed.\n2025-06-06 13:41:55,089 - src.mcp.sympy_mcp - INFO - Successfully registered SymPy MCP tools\n2025-06-06 13:41:55,089 - mcp - INFO - Successfully registered SymPy MCP tools\n2025-06-06 13:41:55,089 - mcp - INFO - MCP system initialized using project's internal MCP components. SDK Status: Using project's internal MCP implementation.\n2025-06-06 13:41:55,089 - __main__ - INFO - Successfully imported llm_operations, llm_mcp, and mcp_instance.\n2025-06-06 13:41:55,090 - src.llm.mcp - INFO - Attempting to ensure LLM tools are registered with MCP.\n2025-06-06 13:41:55,090 - src.llm.mcp - INFO - Successfully imported MCPTool and MCPSDKNotFoundError from src.mcp.mcp in initialize_llm_module.\n2025-06-06 13:41:55,090 - llm.llm_operations - INFO - OpenAI API key loaded successfully.\n2025-06-06 13:41:55,090 - src.llm.mcp - INFO - LLM API Key loaded successfully.\n2025-06-06 13:41:55,090 - mcp - WARNING - Tool 'llm.summarize_gnn_file' already registered. Overwriting.\n2025-06-06 13:41:55,090 - src.llm.mcp - INFO - Registered MCP tool: llm.summarize_gnn_file\n2025-06-06 13:41:55,090 - mcp - WARNING - Tool 'llm.explain_gnn_file' already registered. Overwriting.\n2025-06-06 13:41:55,090 - src.llm.mcp - INFO - Registered MCP tool: llm.explain_gnn_file\n2025-06-06 13:41:55,090 - mcp - WARNING - Tool 'llm.generate_professional_summary' already registered. Overwriting.\n2025-06-06 13:41:55,090 - src.llm.mcp - INFO - Registered MCP tool: llm.generate_professional_summary\n2025-06-06 13:41:55,090 - src.llm.mcp - INFO - LLM module MCP tools registration process completed.\n2025-06-06 13:41:55,090 - src.llm.mcp - INFO - ensure_llm_tools_registered call completed.\n2025-06-06 13:41:55,091 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:41:55,091 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:41:55,091 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:41:55,113 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:42:03,345 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:42:03,358 - src.llm.llm_operations - INFO - LLM call successful. Response length: 1704 chars. Token usage: Prompt=2572, Completion=393, Total=2965\n2025-06-06 13:42:03,358 - src.llm.llm_operations - DEBUG - LLM Response preview: ### Summary of the GNN Model: Multifactor PyMDP Agent\n\n**Model Name:** Multifactor PyMDP Agent v1\n\n**Purpose:**  \nThe model represents a PyMDP agent designed for active inference, incorporating multiple observation modalities and hidden state factors. It aims to facilitate decision-making processes by integrating various forms of observations and controlling hidden state dynamics.\n\n**Key Components:**\n\n1. **Observation Modalities:**\n   - **State Observation:** 3 possible outcomes.\n   - **Reward:...\n2025-06-06 13:42:03,359 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:42:03,360 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 3000, Temperature: 0.7)\n2025-06-06 13:42:03,360 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:42:03,385 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:42:33,525 - openai._base_client - INFO - Retrying request to /chat/completions in 0.451885 seconds\n2025-06-06 13:42:59,074 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:42:59,077 - src.llm.llm_operations - INFO - LLM call successful. Response length: 4746 chars. Token usage: Prompt=2625, Completion=1388, Total=4013\n2025-06-06 13:42:59,077 - src.llm.llm_operations - DEBUG - LLM Response preview: ```json\n{\n  \"model_purpose\": \"The model represents a Multifactor PyMDP agent capable of handling multiple observation modalities and hidden state factors, designed for decision-making and inference in uncertain environments using Active Inference.\",\n  \"key_components\": {\n    \"observation_modalities\": {\n      \"state_observation\": {\"outcomes\": 3},\n      \"reward\": {\"outcomes\": 3},\n      \"decision_proprioceptive\": {\"outcomes\": 3}\n    },\n    \"hidden_state_factors\": {\n      \"reward_level\": {\"states\": ...\n2025-06-06 13:42:59,079 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:42:59,079 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:42:59,080 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:42:59,108 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:02,129 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:02,136 - src.llm.llm_operations - INFO - LLM call successful. Response length: 871 chars. Token usage: Prompt=2570, Completion=182, Total=2752\n2025-06-06 13:43:02,136 - src.llm.llm_operations - DEBUG - LLM Response preview: ```json\n[\n    \"What are the implications of having multiple observation modalities in the PyMDP agent, and how might they interact to influence decision making?\",\n    \"How does the controllable 'decision_state' factor affect the overall dynamics of the agent, particularly in relation to the uncontrolled 'reward_level' factor?\",\n    \"What are the potential impacts of the chosen prior distributions (D_f0 and D_f1) on the inference processes and the agent's learning capabilities?\",\n    \"How do the ...\n2025-06-06 13:43:02,136 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:02,137 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:43:02,137 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:02,166 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:06,208 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:06,211 - src.llm.llm_operations - INFO - LLM call successful. Response length: 1468 chars. Token usage: Prompt=2601, Completion=265, Total=2866\n2025-06-06 13:43:06,211 - src.llm.llm_operations - DEBUG - LLM Response preview: The GNN file indicates that the PyMDP agent has multiple observation modalities\u2014specifically, \"state_observation,\" \"reward,\" and \"decision_proprioceptive,\" each with distinct outcomes. The implications of having these multiple modalities include:\n\n1. **Rich Information Intake**: Each modality can provide different types of information, allowing the agent to build a more comprehensive understanding of its environment and internal states.\n\n2. **Enhanced State Inference**: The agent can leverage th...\n2025-06-06 13:43:06,212 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:06,212 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:43:06,213 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:06,252 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:09,109 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:09,110 - src.llm.llm_operations - INFO - LLM call successful. Response length: 1017 chars. Token usage: Prompt=2605, Completion=197, Total=2802\n2025-06-06 13:43:09,110 - src.llm.llm_operations - DEBUG - LLM Response preview: The GNN file indicates that the controllable 'decision_state' factor affects the overall dynamics of the agent primarily through its influence on the transition matrix B_f1, which governs the state transitions for 'decision_state' based on the chosen action (u_f1). This factor has three possible actions that can be taken, allowing the agent to control its decision-making process.\n\nIn contrast, the 'reward_level' factor is uncontrolled, meaning its transitions are governed solely by the matrix B_...\n2025-06-06 13:43:09,110 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:09,110 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:43:09,110 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:09,117 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:16,155 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:16,156 - src.llm.llm_operations - INFO - LLM call successful. Response length: 1493 chars. Token usage: Prompt=2605, Completion=290, Total=2895\n2025-06-06 13:43:16,156 - src.llm.llm_operations - DEBUG - LLM Response preview: The GNN file specifies uniform prior distributions for both hidden state factors: D_f0 for \"reward_level\" (2 states) and D_f1 for \"decision_state\" (3 states). The impacts of these chosen priors on the inference processes and the agent's learning capabilities are as follows:\n\n1. **Inference Processes**: \n   - Uniform priors suggest that the agent starts with no bias towards any particular state, which can lead to slower convergence during state inference as the agent may require more observations...\n2025-06-06 13:43:16,156 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:16,156 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:43:16,156 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:16,168 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:21,565 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:21,566 - src.llm.llm_operations - INFO - LLM call successful. Response length: 1472 chars. Token usage: Prompt=2608, Completion=291, Total=2899\n2025-06-06 13:43:21,566 - src.llm.llm_operations - DEBUG - LLM Response preview: The transition matrices (B_f0 and B_f1) in the provided GNN file reflect distinct underlying assumptions about state transitions in a multifactor PyMDP agent.\n\n1. **B_f0 (Transition Matrix for \"reward_level\")**: \n   - This matrix is defined for an uncontrolled factor with 2 states. It is an identity matrix, meaning that the state transitions are deterministic; if the agent is in a given state, it will remain in that state regardless of any action (since there is only one implicit action). This r...\n2025-06-06 13:43:21,566 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:21,566 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:43:21,566 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:21,573 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:25,754 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:25,755 - src.llm.llm_operations - INFO - LLM call successful. Response length: 1306 chars. Token usage: Prompt=2622, Completion=256, Total=2878\n2025-06-06 13:43:25,755 - src.llm.llm_operations - DEBUG - LLM Response preview: The expected free energy (G) serves as a guiding principle for the agent's actions by functioning as a scalar value that the agent aims to minimize. In the context of the GNN representation, G is influenced by the preferences encoded in the preference vectors (C_m0, C_m1, C_m2) and the observations made by the agent. The relationship indicated by the equations suggests that by adjusting these preference vectors, the agent can effectively guide its policy (\u03c0_f1) towards actions that are expected ...\n2025-06-06 13:43:25,756 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:25,756 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:43:25,756 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:25,762 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:32,919 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:32,921 - src.llm.llm_operations - INFO - LLM call successful. Response length: 2424 chars. Token usage: Prompt=2641, Completion=459, Total=3100\n2025-06-06 13:43:32,921 - src.llm.llm_operations - DEBUG - LLM Response preview: ### Summary of the GNN Model: Multi-agent Trajectory Planning\n\n**Model Name:** Multi-agent Trajectory Planning\n\n**Purpose:** \nThe model is designed for simulating and planning the trajectories of multiple agents in a 2D environment while accounting for obstacles, goal-directed behaviors, and inter-agent collision avoidance. It leverages the RxInfer.jl framework to facilitate inference and trajectory planning.\n\n**Key Components:**\n\n1. **State Space Model:**\n   - **Parameters:**\n     - `dt`: Time ...\n2025-06-06 13:43:32,922 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:32,922 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 3000, Temperature: 0.7)\n2025-06-06 13:43:32,923 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:32,951 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:49,726 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:49,729 - src.llm.llm_operations - INFO - LLM call successful. Response length: 4351 chars. Token usage: Prompt=2694, Completion=1055, Total=3749\n2025-06-06 13:43:49,729 - src.llm.llm_operations - DEBUG - LLM Response preview: ```json\n{\n  \"model_purpose\": \"The model is designed for multi-agent trajectory planning in a 2D environment, incorporating obstacle avoidance, goal-directed behavior, and inter-agent collision avoidance. It aims to simulate and optimize the trajectories of multiple agents while considering their interactions with obstacles and each other.\",\n  \"key_components\": {\n    \"states\": {\n      \"description\": \"The state of each agent in the system, represented in a 4-dimensional state space.\",\n      \"dimen...\n2025-06-06 13:43:49,730 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:49,731 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:43:49,731 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:49,759 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:52,452 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:52,453 - src.llm.llm_operations - INFO - LLM call successful. Response length: 880 chars. Token usage: Prompt=2639, Completion=160, Total=2799\n2025-06-06 13:43:52,453 - src.llm.llm_operations - DEBUG - LLM Response preview: ```json\n[\n    \"What assumptions are made about agent behavior in terms of goal-directedness and obstacle avoidance within the multi-agent trajectory planning model?\",\n    \"How do the parameters such as 'gamma', 'initial_state_variance', and 'control_variance' influence the agents' ability to navigate through the environment and avoid collisions?\",\n    \"In what ways does the visualization aspect, particularly the 'color_palette' and 'alpha' values, impact the interpretation of agent trajectories ...\n2025-06-06 13:43:52,453 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:52,453 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:43:52,453 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:52,459 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:41:55,084 - root - WARNING - Could not directly import MCPTool from src.mcp. This might be okay if loaded by the main MCP system.\n2025-06-06 13:41:55,088 - src.render.mcp - INFO - Render module MCP tools registered.\n2025-06-06 13:41:55,088 - src.llm.mcp - INFO - Successfully imported MCPTool and MCPSDKNotFoundError from src.mcp.mcp in initialize_llm_module.\n2025-06-06 13:41:55,088 - llm.llm_operations - INFO - OpenAI API key loaded successfully.\n2025-06-06 13:41:55,088 - src.llm.mcp - INFO - LLM API Key loaded successfully.\n2025-06-06 13:41:55,088 - src.llm.mcp - INFO - Registered MCP tool: llm.summarize_gnn_file\n2025-06-06 13:41:55,088 - src.llm.mcp - INFO - Registered MCP tool: llm.explain_gnn_file\n2025-06-06 13:41:55,088 - src.llm.mcp - INFO - Registered MCP tool: llm.generate_professional_summary\n2025-06-06 13:41:55,088 - src.llm.mcp - INFO - LLM module MCP tools registration process completed.\n2025-06-06 13:41:55,089 - src.mcp.sympy_mcp - INFO - Successfully registered SymPy MCP tools\n2025-06-06 13:41:55,089 - mcp - INFO - Successfully registered SymPy MCP tools\n2025-06-06 13:41:55,089 - mcp - INFO - MCP system initialized using project's internal MCP components. SDK Status: Using project's internal MCP implementation.\n2025-06-06 13:41:55,089 - __main__ - INFO - Successfully imported llm_operations, llm_mcp, and mcp_instance.\n2025-06-06 13:41:55,090 - src.llm.mcp - INFO - Attempting to ensure LLM tools are registered with MCP.\n2025-06-06 13:41:55,090 - src.llm.mcp - INFO - Successfully imported MCPTool and MCPSDKNotFoundError from src.mcp.mcp in initialize_llm_module.\n2025-06-06 13:41:55,090 - llm.llm_operations - INFO - OpenAI API key loaded successfully.\n2025-06-06 13:41:55,090 - src.llm.mcp - INFO - LLM API Key loaded successfully.\n2025-06-06 13:41:55,090 - mcp - WARNING - Tool 'llm.summarize_gnn_file' already registered. Overwriting.\n2025-06-06 13:41:55,090 - src.llm.mcp - INFO - Registered MCP tool: llm.summarize_gnn_file\n2025-06-06 13:41:55,090 - mcp - WARNING - Tool 'llm.explain_gnn_file' already registered. Overwriting.\n2025-06-06 13:41:55,090 - src.llm.mcp - INFO - Registered MCP tool: llm.explain_gnn_file\n2025-06-06 13:41:55,090 - mcp - WARNING - Tool 'llm.generate_professional_summary' already registered. Overwriting.\n2025-06-06 13:41:55,090 - src.llm.mcp - INFO - Registered MCP tool: llm.generate_professional_summary\n2025-06-06 13:41:55,090 - src.llm.mcp - INFO - LLM module MCP tools registration process completed.\n2025-06-06 13:41:55,090 - src.llm.mcp - INFO - ensure_llm_tools_registered call completed.\n2025-06-06 13:41:55,091 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:41:55,091 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:41:55,091 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:41:55,113 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:42:03,345 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:42:03,358 - src.llm.llm_operations - INFO - LLM call successful. Response length: 1704 chars. Token usage: Prompt=2572, Completion=393, Total=2965\n2025-06-06 13:42:03,358 - src.llm.llm_operations - DEBUG - LLM Response preview: ### Summary of the GNN Model: Multifactor PyMDP Agent\n\n**Model Name:** Multifactor PyMDP Agent v1\n\n**Purpose:**  \nThe model represents a PyMDP agent designed for active inference, incorporating multiple observation modalities and hidden state factors. It aims to facilitate decision-making processes by integrating various forms of observations and controlling hidden state dynamics.\n\n**Key Components:**\n\n1. **Observation Modalities:**\n   - **State Observation:** 3 possible outcomes.\n   - **Reward:...\n2025-06-06 13:42:03,359 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:42:03,360 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 3000, Temperature: 0.7)\n2025-06-06 13:42:03,360 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:42:03,385 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:42:33,525 - openai._base_client - INFO - Retrying request to /chat/completions in 0.451885 seconds\n2025-06-06 13:42:59,074 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:42:59,077 - src.llm.llm_operations - INFO - LLM call successful. Response length: 4746 chars. Token usage: Prompt=2625, Completion=1388, Total=4013\n2025-06-06 13:42:59,077 - src.llm.llm_operations - DEBUG - LLM Response preview: ```json\n{\n  \"model_purpose\": \"The model represents a Multifactor PyMDP agent capable of handling multiple observation modalities and hidden state factors, designed for decision-making and inference in uncertain environments using Active Inference.\",\n  \"key_components\": {\n    \"observation_modalities\": {\n      \"state_observation\": {\"outcomes\": 3},\n      \"reward\": {\"outcomes\": 3},\n      \"decision_proprioceptive\": {\"outcomes\": 3}\n    },\n    \"hidden_state_factors\": {\n      \"reward_level\": {\"states\": ...\n2025-06-06 13:42:59,079 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:42:59,079 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:42:59,080 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:42:59,108 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:02,129 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:02,136 - src.llm.llm_operations - INFO - LLM call successful. Response length: 871 chars. Token usage: Prompt=2570, Completion=182, Total=2752\n2025-06-06 13:43:02,136 - src.llm.llm_operations - DEBUG - LLM Response preview: ```json\n[\n    \"What are the implications of having multiple observation modalities in the PyMDP agent, and how might they interact to influence decision making?\",\n    \"How does the controllable 'decision_state' factor affect the overall dynamics of the agent, particularly in relation to the uncontrolled 'reward_level' factor?\",\n    \"What are the potential impacts of the chosen prior distributions (D_f0 and D_f1) on the inference processes and the agent's learning capabilities?\",\n    \"How do the ...\n2025-06-06 13:43:02,136 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:02,137 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:43:02,137 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:02,166 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:06,208 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:06,211 - src.llm.llm_operations - INFO - LLM call successful. Response length: 1468 chars. Token usage: Prompt=2601, Completion=265, Total=2866\n2025-06-06 13:43:06,211 - src.llm.llm_operations - DEBUG - LLM Response preview: The GNN file indicates that the PyMDP agent has multiple observation modalities\u2014specifically, \"state_observation,\" \"reward,\" and \"decision_proprioceptive,\" each with distinct outcomes. The implications of having these multiple modalities include:\n\n1. **Rich Information Intake**: Each modality can provide different types of information, allowing the agent to build a more comprehensive understanding of its environment and internal states.\n\n2. **Enhanced State Inference**: The agent can leverage th...\n2025-06-06 13:43:06,212 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:06,212 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:43:06,213 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:06,252 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:09,109 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:09,110 - src.llm.llm_operations - INFO - LLM call successful. Response length: 1017 chars. Token usage: Prompt=2605, Completion=197, Total=2802\n2025-06-06 13:43:09,110 - src.llm.llm_operations - DEBUG - LLM Response preview: The GNN file indicates that the controllable 'decision_state' factor affects the overall dynamics of the agent primarily through its influence on the transition matrix B_f1, which governs the state transitions for 'decision_state' based on the chosen action (u_f1). This factor has three possible actions that can be taken, allowing the agent to control its decision-making process.\n\nIn contrast, the 'reward_level' factor is uncontrolled, meaning its transitions are governed solely by the matrix B_...\n2025-06-06 13:43:09,110 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:09,110 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:43:09,110 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:09,117 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:16,155 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:16,156 - src.llm.llm_operations - INFO - LLM call successful. Response length: 1493 chars. Token usage: Prompt=2605, Completion=290, Total=2895\n2025-06-06 13:43:16,156 - src.llm.llm_operations - DEBUG - LLM Response preview: The GNN file specifies uniform prior distributions for both hidden state factors: D_f0 for \"reward_level\" (2 states) and D_f1 for \"decision_state\" (3 states). The impacts of these chosen priors on the inference processes and the agent's learning capabilities are as follows:\n\n1. **Inference Processes**: \n   - Uniform priors suggest that the agent starts with no bias towards any particular state, which can lead to slower convergence during state inference as the agent may require more observations...\n2025-06-06 13:43:16,156 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:16,156 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:43:16,156 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:16,168 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:21,565 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:21,566 - src.llm.llm_operations - INFO - LLM call successful. Response length: 1472 chars. Token usage: Prompt=2608, Completion=291, Total=2899\n2025-06-06 13:43:21,566 - src.llm.llm_operations - DEBUG - LLM Response preview: The transition matrices (B_f0 and B_f1) in the provided GNN file reflect distinct underlying assumptions about state transitions in a multifactor PyMDP agent.\n\n1. **B_f0 (Transition Matrix for \"reward_level\")**: \n   - This matrix is defined for an uncontrolled factor with 2 states. It is an identity matrix, meaning that the state transitions are deterministic; if the agent is in a given state, it will remain in that state regardless of any action (since there is only one implicit action). This r...\n2025-06-06 13:43:21,566 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:21,566 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:43:21,566 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (pymdp_pomdp_agent.md):\n# GNN Example: Multifactor PyMDP Agent\n# Format: Markdown representation of a Multifactor PyMDP model in Active Inference format\n# Version: 1.0\n# This file is machine-readable and attempts to represent a PyMDP agent with multiple observation modalities and hidden state factors.\n\n## GNNSection\nMultifactorPyMDPAgent\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMultifactor PyMDP Agent v1\n\n## ModelAnnotation\nThis model represents a PyMDP agent with multiple ob...\n2025-06-06 13:43:21,573 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:25,754 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:25,755 - src.llm.llm_operations - INFO - LLM call successful. Response length: 1306 chars. Token usage: Prompt=2622, Completion=256, Total=2878\n2025-06-06 13:43:25,755 - src.llm.llm_operations - DEBUG - LLM Response preview: The expected free energy (G) serves as a guiding principle for the agent's actions by functioning as a scalar value that the agent aims to minimize. In the context of the GNN representation, G is influenced by the preferences encoded in the preference vectors (C_m0, C_m1, C_m2) and the observations made by the agent. The relationship indicated by the equations suggests that by adjusting these preference vectors, the agent can effectively guide its policy (\u03c0_f1) towards actions that are expected ...\n2025-06-06 13:43:25,756 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:25,756 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:43:25,756 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:25,762 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:32,919 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:32,921 - src.llm.llm_operations - INFO - LLM call successful. Response length: 2424 chars. Token usage: Prompt=2641, Completion=459, Total=3100\n2025-06-06 13:43:32,921 - src.llm.llm_operations - DEBUG - LLM Response preview: ### Summary of the GNN Model: Multi-agent Trajectory Planning\n\n**Model Name:** Multi-agent Trajectory Planning\n\n**Purpose:** \nThe model is designed for simulating and planning the trajectories of multiple agents in a 2D environment while accounting for obstacles, goal-directed behaviors, and inter-agent collision avoidance. It leverages the RxInfer.jl framework to facilitate inference and trajectory planning.\n\n**Key Components:**\n\n1. **State Space Model:**\n   - **Parameters:**\n     - `dt`: Time ...\n2025-06-06 13:43:32,922 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:32,922 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 3000, Temperature: 0.7)\n2025-06-06 13:43:32,923 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:32,951 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:49,726 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:49,729 - src.llm.llm_operations - INFO - LLM call successful. Response length: 4351 chars. Token usage: Prompt=2694, Completion=1055, Total=3749\n2025-06-06 13:43:49,729 - src.llm.llm_operations - DEBUG - LLM Response preview: ```json\n{\n  \"model_purpose\": \"The model is designed for multi-agent trajectory planning in a 2D environment, incorporating obstacle avoidance, goal-directed behavior, and inter-agent collision avoidance. It aims to simulate and optimize the trajectories of multiple agents while considering their interactions with obstacles and each other.\",\n  \"key_components\": {\n    \"states\": {\n      \"description\": \"The state of each agent in the system, represented in a 4-dimensional state space.\",\n      \"dimen...\n2025-06-06 13:43:49,730 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:49,731 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:43:49,731 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:49,759 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n2025-06-06 13:43:52,452 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions \"HTTP/1.1 200 OK\"\n2025-06-06 13:43:52,453 - src.llm.llm_operations - INFO - LLM call successful. Response length: 880 chars. Token usage: Prompt=2639, Completion=160, Total=2799\n2025-06-06 13:43:52,453 - src.llm.llm_operations - DEBUG - LLM Response preview: ```json\n[\n    \"What assumptions are made about agent behavior in terms of goal-directedness and obstacle avoidance within the multi-agent trajectory planning model?\",\n    \"How do the parameters such as 'gamma', 'initial_state_variance', and 'control_variance' influence the agents' ability to navigate through the environment and avoid collisions?\",\n    \"In what ways does the visualization aspect, particularly the 'color_palette' and 'alpha' values, impact the interpretation of agent trajectories ...\n2025-06-06 13:43:52,453 - src.llm.llm_operations - DEBUG - Constructed prompt: GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:52,453 - src.llm.llm_operations - INFO - Sending prompt to OpenAI model: gpt-4o-mini (Timeout: 30.0s, Max Tokens: 1000, Temperature: 0.7)\n2025-06-06 13:43:52,453 - src.llm.llm_operations - DEBUG - Full prompt for gpt-4o-mini (first 500 chars): GNN File Content (rxinfer_multiagent_gnn.md):\n# GNN Example: RxInfer Multi-agent Trajectory Planning\n# Format: Markdown representation of a Multi-agent Trajectory Planning model for RxInfer.jl\n# Version: 1.0\n# This file is machine-readable and represents the configuration for the RxInfer.jl multi-agent trajectory planning example.\n\n## GNNSection\nRxInferMultiAgentTrajectoryPlanning\n\n## GNNVersionAndFlags\nGNN v1\n\n## ModelName\nMulti-agent Trajectory Planning\n\n## ModelAnnotation\nThis model represent...\n2025-06-06 13:43:52,459 - src.llm.llm_operations - INFO - Attempting to call OpenAI API with model gpt-4o-mini...\n"
        },
        {
            "step_number": 12,
            "script_name": "12_discopy.py",
            "status": "FAILED_NONZERO_EXIT",
            "start_time": "2025-06-06T13:43:53.712553",
            "end_time": "2025-06-06T13:43:54.660861",
            "duration_seconds": 0.948308,
            "details": "Process exited with code 2",
            "stdout": "2025-06-06 13:43:54,467 - __main__ - INFO - Starting pipeline step: 12_discopy.py - GNN to DisCoPy Transformation\n2025-06-06 13:43:54,467 - __main__ - INFO - Reading GNN files from: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples\n2025-06-06 13:43:54,467 - __main__ - INFO - DisCoPy outputs will be saved in: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/discopy_gnn\n2025-06-06 13:43:54,468 - __main__ - INFO - Found 2 GNN files to process.\n2025-06-06 13:43:54,468 - __main__ - INFO - Processing GNN file for DisCoPy: pymdp_pomdp_agent.md\n2025-06-06 13:43:54,469 - __main__ - WARNING - No DisCoPy diagram could be generated for pymdp_pomdp_agent.md. Skipping visualization.\n2025-06-06 13:43:54,469 - __main__ - INFO - Processing GNN file for DisCoPy: rxinfer_multiagent_gnn.md\n2025-06-06 13:43:54,471 - __main__ - WARNING - No DisCoPy diagram could be generated for rxinfer_multiagent_gnn.md. Skipping visualization.\n2025-06-06 13:43:54,471 - __main__ - INFO - Finished processing 2 GNN files. 0 diagrams generated successfully.\n2025-06-06 13:43:54,471 - __main__ - WARNING - Some GNN files failed to produce DisCoPy diagrams.\n",
            "stderr": "Failed to import Ty, Word from discopy.monoidal: cannot import name 'Word' from 'discopy.monoidal' (/home/trim/Documents/GitHub/GeneralizedNotationNotation/src/.venv/lib/python3.12/site-packages/discopy/monoidal.py). They remain placeholders.\nWARNING:2025-06-06 13:43:54,451:jax._src.xla_bridge:909: An NVIDIA GPU may be present on this machine, but a CUDA-enabled jaxlib is not installed. Falling back to cpu.\nJAX_AVAILABLE is False. One or more critical components (DisCoPy tensor/matrix/monoidal, JAX core, DisCoPy backend) failed to load.\nCore DisCoPy components (Diagram, Box, Id, Dim, or Ty) are Placeholders. Cannot create tensor-based DisCoPy diagram. DisCoPy import likely failed.\nCould not create a DisCoPy diagram from GNN file: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples/pymdp_pomdp_agent.md. Check Connections section.\nCore DisCoPy components (Diagram, Box, Id, Dim, or Ty) are Placeholders. Cannot create tensor-based DisCoPy diagram. DisCoPy import likely failed.\nCould not create a DisCoPy diagram from GNN file: /home/trim/Documents/GitHub/GeneralizedNotationNotation/src/gnn/examples/rxinfer_multiagent_gnn.md. Check Connections section.\n"
        },
        {
            "step_number": 15,
            "script_name": "15_site.py",
            "status": "SUCCESS",
            "start_time": "2025-06-06T13:43:54.660921",
            "end_time": "2025-06-06T13:43:54.827753",
            "duration_seconds": 0.166832,
            "details": "",
            "stdout": "2025-06-06 13:43:54,713 - __main__ - INFO - Starting pipeline step: 15_site.py - Generate HTML Summary Site\n2025-06-06 13:43:54,713 - __main__ - INFO - Reading from pipeline output directory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output\n2025-06-06 13:43:54,713 - __main__ - INFO - Generated site will be saved as: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_pipeline_summary_site.html\n2025-06-06 13:43:54,714 - __main__ - DEBUG - Calling generate_html_report with output_dir='/home/trim/Documents/GitHub/GeneralizedNotationNotation/output' and site_output_file='/home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_pipeline_summary_site.html'\n2025-06-06 13:43:54,714 - src.site.generator - INFO - Starting HTML report generation for directory: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output\n2025-06-06 13:43:54,714 - src.site.generator - INFO - Output HTML will be saved to: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_pipeline_summary_site.html\n2025-06-06 13:43:54,714 - src.site.generator - WARNING - Pipeline summary JSON not found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/pipeline_execution_summary.json\n2025-06-06 13:43:54,813 - src.site.generator - WARNING - PyMDP Execute Logs directory not found: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/pymdp_execute_logs\n2025-06-06 13:43:54,815 - src.site.generator - INFO - \u2705 HTML report generated successfully: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_pipeline_summary_site.html\n2025-06-06 13:43:54,815 - __main__ - INFO - HTML summary site generated successfully: /home/trim/Documents/GitHub/GeneralizedNotationNotation/output/gnn_pipeline_summary_site.html\n",
            "stderr": ""
        }
    ],
    "end_time": "2025-06-06T13:43:54.827764",
    "overall_status": "FAILED"
}