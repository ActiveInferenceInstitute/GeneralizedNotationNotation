{
  "timestamp": "2025-10-02T10:52:26.549412",
  "target_directory": "input/gnn_files",
  "output_directory": "output/12_execute_output",
  "total_scripts_found": 12,
  "successful_executions": 2,
  "failed_executions": 10,
  "execution_details": [
    {
      "script_path": "output/11_render_output/neural_response_model/pymdp/Active Inference Neural Response Model v1_pymdp.py",
      "script_name": "Active Inference Neural Response Model v1_pymdp.py",
      "framework": "pymdp",
      "model_name": "neural_response_model",
      "executor": "python3",
      "success": false,
      "return_code": 1,
      "stdout": "",
      "stderr": "WARNING:root:PyMDP not available - simulation will gracefully degrade with informative output\nERROR:__main__:Unexpected error: execute_pymdp_simulation() got an unexpected keyword argument 'config_overrides'\nTraceback (most recent call last):\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/neural_response_model/pymdp/Active Inference Neural Response Model v1_pymdp.py\", line 446, in main\n    success, results = execute_pymdp_simulation(\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: execute_pymdp_simulation() got an unexpected keyword argument 'config_overrides'\n",
      "execution_time": 1.404973,
      "timestamp": "2025-10-02T10:52:26.556539",
      "output_file": "output/12_execute_output/neural_response_model/pymdp/execution_logs/Active Inference Neural Response Model v1_pymdp.py_execution.log",
      "centralized_output_file": "output/12_execute_output/execution_results/individual_outputs/pymdp/Active Inference Neural Response Model v1_pymdp.py_output.txt",
      "implementation_directory": "output/12_execute_output/neural_response_model/pymdp"
    },
    {
      "script_path": "output/11_render_output/neural_response_model/jax/Active Inference Neural Response Model v1_jax.py",
      "script_name": "Active Inference Neural Response Model v1_jax.py",
      "framework": "jax",
      "model_name": "neural_response_model",
      "executor": "python3",
      "success": false,
      "return_code": 1,
      "stdout": "",
      "stderr": "Traceback (most recent call last):\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/neural_response_model/jax/Active Inference Neural Response Model v1_jax.py\", line 169, in <module>\n    variables = model.init(key, {\"observations\": jnp.zeros((1, 3))})\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/neural_response_model/jax/Active Inference Neural Response Model v1_jax.py\", line 101, in __call__\n    beliefs = jax.vmap(belief_update)(initial_beliefs, observations)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/neural_response_model/jax/Active Inference Neural Response Model v1_jax.py\", line 88, in belief_update\n    likelihood = jnp.dot(self.A_matrix, belief)  # [num_observations, num_states] @ [num_states] = [num_observations]\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/jax/_src/numpy/tensor_contractions.py\", line 120, in dot\n    result = lax.dot_general(a, b, dimension_numbers=(contract_dims, batch_dims),\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: dot_general requires contracting dimensions to have the same shape, got (12,) and (3,).\n--------------------\nFor simplicity, JAX has removed its internal frames from the traceback of the following exception. Set JAX_TRACEBACK_FILTERING=off to include these.\n",
      "execution_time": 0.57688,
      "timestamp": "2025-10-02T10:52:27.962121",
      "output_file": "output/12_execute_output/neural_response_model/jax/execution_logs/Active Inference Neural Response Model v1_jax.py_execution.log",
      "centralized_output_file": "output/12_execute_output/execution_results/individual_outputs/jax/Active Inference Neural Response Model v1_jax.py_output.txt",
      "implementation_directory": "output/12_execute_output/neural_response_model/jax"
    },
    {
      "script_path": "output/11_render_output/neural_response_model/discopy/Active Inference Neural Response Model v1_discopy.py",
      "script_name": "Active Inference Neural Response Model v1_discopy.py",
      "framework": "discopy",
      "model_name": "neural_response_model",
      "executor": "python3",
      "success": false,
      "return_code": 1,
      "stdout": "\ud83d\udd2c DisCoPy Categorical Diagram Generation\n\ud83d\udcca State Space: 1 states, 3 observations, 27 actions\n============================================================\nDisCoPy Categorical Diagrams - GNN Generated\nModel: Active Inference Neural Response Model v1\n============================================================\n\u2713 Defined basic types: S (states), O (observations), A (actions), P (probabilities)\n\u2713 Defined 8 model components as morphisms\n\n\ud83c\udfd7\ufe0f  Building Active Inference circuit...\n\u274c Diagram generation failed: D does not compose with StateInf: S @ P != O.\n\ud83d\udd0d Stack trace:\n",
      "stderr": "Traceback (most recent call last):\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/neural_response_model/discopy/Active Inference Neural Response Model v1_discopy.py\", line 268, in main\n    circuit_dict = create_active_inference_circuit(S, O, A, P, components)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/neural_response_model/discopy/Active Inference Neural Response Model v1_discopy.py\", line 94, in create_active_inference_circuit\n    D_vector >>  # Prior beliefs\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/discopy/utils.py\", line 606, in <lambda>\n    __rshift__ = __llshift__ = lambda self, other: self.then(other)\n                                                   ^^^^^^^^^^^^^^^^\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/discopy/cat.py\", line 328, in then\n    return self.factory(inside, dom, cod)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/discopy/monoidal.py\", line 522, in __init__\n    super().__init__(inside, dom, cod, _scan=_scan)\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/discopy/cat.py\", line 236, in __init__\n    assert_iscomposable(f, g)\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/discopy/utils.py\", line 708, in assert_iscomposable\n    raise AxiomError(messages.NOT_COMPOSABLE.format(\ndiscopy.utils.AxiomError: D does not compose with StateInf: S @ P != O.\n",
      "execution_time": 0.387826,
      "timestamp": "2025-10-02T10:52:28.539639",
      "output_file": "output/12_execute_output/neural_response_model/discopy/execution_logs/Active Inference Neural Response Model v1_discopy.py_execution.log",
      "centralized_output_file": "output/12_execute_output/execution_results/individual_outputs/discopy/Active Inference Neural Response Model v1_discopy.py_output.txt",
      "implementation_directory": "output/12_execute_output/neural_response_model/discopy"
    },
    {
      "script_path": "output/11_render_output/actinf_pomdp_agent/pymdp/Classic Active Inference POMDP Agent v1_pymdp.py",
      "script_name": "Classic Active Inference POMDP Agent v1_pymdp.py",
      "framework": "pymdp",
      "model_name": "actinf_pomdp_agent",
      "executor": "python3",
      "success": false,
      "return_code": 1,
      "stdout": "",
      "stderr": "WARNING:root:PyMDP not available - simulation will gracefully degrade with informative output\nERROR:__main__:Unexpected error: execute_pymdp_simulation() got an unexpected keyword argument 'config_overrides'\nTraceback (most recent call last):\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/actinf_pomdp_agent/pymdp/Classic Active Inference POMDP Agent v1_pymdp.py\", line 318, in main\n    success, results = execute_pymdp_simulation(\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: execute_pymdp_simulation() got an unexpected keyword argument 'config_overrides'\n",
      "execution_time": 1.280635,
      "timestamp": "2025-10-02T10:52:28.928077",
      "output_file": "output/12_execute_output/actinf_pomdp_agent/pymdp/execution_logs/Classic Active Inference POMDP Agent v1_pymdp.py_execution.log",
      "centralized_output_file": "output/12_execute_output/execution_results/individual_outputs/pymdp/Classic Active Inference POMDP Agent v1_pymdp.py_output.txt",
      "implementation_directory": "output/12_execute_output/actinf_pomdp_agent/pymdp"
    },
    {
      "script_path": "output/11_render_output/actinf_pomdp_agent/jax/Classic Active Inference POMDP Agent v1_jax.py",
      "script_name": "Classic Active Inference POMDP Agent v1_jax.py",
      "framework": "jax",
      "model_name": "actinf_pomdp_agent",
      "executor": "python3",
      "success": true,
      "return_code": 0,
      "stdout": "\nGNNModel Model Summary:\n- Number of states: 3\n- Number of observations: 3\n- Number of actions: 1\n- Parameters: 24\n\nModel test successful!\nOutput keys: ['beliefs', 'actions', 'expected_free_energy', 'state_predictions', 'action_efes', 'predicted_observations']\n",
      "stderr": "",
      "execution_time": 0.906313,
      "timestamp": "2025-10-02T10:52:30.209362",
      "output_file": "output/12_execute_output/actinf_pomdp_agent/jax/execution_logs/Classic Active Inference POMDP Agent v1_jax.py_execution.log",
      "centralized_output_file": "output/12_execute_output/execution_results/individual_outputs/jax/Classic Active Inference POMDP Agent v1_jax.py_output.txt",
      "implementation_directory": "output/12_execute_output/actinf_pomdp_agent/jax"
    },
    {
      "script_path": "output/11_render_output/actinf_pomdp_agent/discopy/Classic Active Inference POMDP Agent v1_discopy.py",
      "script_name": "Classic Active Inference POMDP Agent v1_discopy.py",
      "framework": "discopy",
      "model_name": "actinf_pomdp_agent",
      "executor": "python3",
      "success": false,
      "return_code": 1,
      "stdout": "\ud83d\udd2c DisCoPy Categorical Diagram Generation\n\ud83d\udcca State Space: 3 states, 3 observations, 3 actions\n============================================================\nDisCoPy Categorical Diagrams - GNN Generated\nModel: Classic Active Inference POMDP Agent v1\n============================================================\n\u2713 Defined basic types: S (states), O (observations), A (actions), P (probabilities)\n\u2713 Defined 8 model components as morphisms\n\n\ud83c\udfd7\ufe0f  Building Active Inference circuit...\n\u274c Diagram generation failed: D does not compose with StateInf: S @ P != O.\n\ud83d\udd0d Stack trace:\n",
      "stderr": "Traceback (most recent call last):\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/actinf_pomdp_agent/discopy/Classic Active Inference POMDP Agent v1_discopy.py\", line 268, in main\n    circuit_dict = create_active_inference_circuit(S, O, A, P, components)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/actinf_pomdp_agent/discopy/Classic Active Inference POMDP Agent v1_discopy.py\", line 94, in create_active_inference_circuit\n    D_vector >>  # Prior beliefs\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/discopy/utils.py\", line 606, in <lambda>\n    __rshift__ = __llshift__ = lambda self, other: self.then(other)\n                                                   ^^^^^^^^^^^^^^^^\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/discopy/cat.py\", line 328, in then\n    return self.factory(inside, dom, cod)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/discopy/monoidal.py\", line 522, in __init__\n    super().__init__(inside, dom, cod, _scan=_scan)\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/discopy/cat.py\", line 236, in __init__\n    assert_iscomposable(f, g)\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/discopy/utils.py\", line 708, in assert_iscomposable\n    raise AxiomError(messages.NOT_COMPOSABLE.format(\ndiscopy.utils.AxiomError: D does not compose with StateInf: S @ P != O.\n",
      "execution_time": 0.367139,
      "timestamp": "2025-10-02T10:52:31.116418",
      "output_file": "output/12_execute_output/actinf_pomdp_agent/discopy/execution_logs/Classic Active Inference POMDP Agent v1_discopy.py_execution.log",
      "centralized_output_file": "output/12_execute_output/execution_results/individual_outputs/discopy/Classic Active Inference POMDP Agent v1_discopy.py_output.txt",
      "implementation_directory": "output/12_execute_output/actinf_pomdp_agent/discopy"
    },
    {
      "script_path": "output/11_render_output/chronic_pain_theories/pymdp/Active Inference Chronic Pain Multi-Theory Model v1_pymdp.py",
      "script_name": "Active Inference Chronic Pain Multi-Theory Model v1_pymdp.py",
      "framework": "pymdp",
      "model_name": "chronic_pain_theories",
      "executor": "python3",
      "success": false,
      "return_code": 1,
      "stdout": "",
      "stderr": "WARNING:root:PyMDP not available - simulation will gracefully degrade with informative output\nERROR:__main__:Unexpected error: execute_pymdp_simulation() got an unexpected keyword argument 'config_overrides'\nTraceback (most recent call last):\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/chronic_pain_theories/pymdp/Active Inference Chronic Pain Multi-Theory Model v1_pymdp.py\", line 1193, in main\n    success, results = execute_pymdp_simulation(\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: execute_pymdp_simulation() got an unexpected keyword argument 'config_overrides'\n",
      "execution_time": 1.399188,
      "timestamp": "2025-10-02T10:52:31.484160",
      "output_file": "output/12_execute_output/chronic_pain_theories/pymdp/execution_logs/Active Inference Chronic Pain Multi-Theory Model v1_pymdp.py_execution.log",
      "centralized_output_file": "output/12_execute_output/execution_results/individual_outputs/pymdp/Active Inference Chronic Pain Multi-Theory Model v1_pymdp.py_output.txt",
      "implementation_directory": "output/12_execute_output/chronic_pain_theories/pymdp"
    },
    {
      "script_path": "output/11_render_output/chronic_pain_theories/jax/Active Inference Chronic Pain Multi-Theory Model v1_jax.py",
      "script_name": "Active Inference Chronic Pain Multi-Theory Model v1_jax.py",
      "framework": "jax",
      "model_name": "chronic_pain_theories",
      "executor": "python3",
      "success": true,
      "return_code": 0,
      "stdout": "\nGNNModel Model Summary:\n- Number of states: 3\n- Number of observations: 3\n- Number of actions: 3\n- Parameters: 111\n\nModel test successful!\nOutput keys: ['beliefs', 'actions', 'expected_free_energy', 'state_predictions', 'action_efes', 'predicted_observations']\n",
      "stderr": "",
      "execution_time": 1.030466,
      "timestamp": "2025-10-02T10:52:32.883978",
      "output_file": "output/12_execute_output/chronic_pain_theories/jax/execution_logs/Active Inference Chronic Pain Multi-Theory Model v1_jax.py_execution.log",
      "centralized_output_file": "output/12_execute_output/execution_results/individual_outputs/jax/Active Inference Chronic Pain Multi-Theory Model v1_jax.py_output.txt",
      "implementation_directory": "output/12_execute_output/chronic_pain_theories/jax"
    },
    {
      "script_path": "output/11_render_output/chronic_pain_theories/discopy/Active Inference Chronic Pain Multi-Theory Model v1_discopy.py",
      "script_name": "Active Inference Chronic Pain Multi-Theory Model v1_discopy.py",
      "framework": "discopy",
      "model_name": "chronic_pain_theories",
      "executor": "python3",
      "success": false,
      "return_code": 1,
      "stdout": "\ud83d\udd2c DisCoPy Categorical Diagram Generation\n\ud83d\udcca State Space: 378 states, 72 observations, 81 actions\n============================================================\nDisCoPy Categorical Diagrams - GNN Generated\nModel: Active Inference Chronic Pain Multi-Theory Model v1\n============================================================\n\u2713 Defined basic types: S (states), O (observations), A (actions), P (probabilities)\n\u2713 Defined 8 model components as morphisms\n\n\ud83c\udfd7\ufe0f  Building Active Inference circuit...\n\u274c Diagram generation failed: D does not compose with StateInf: S @ P != O.\n\ud83d\udd0d Stack trace:\n",
      "stderr": "Traceback (most recent call last):\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/chronic_pain_theories/discopy/Active Inference Chronic Pain Multi-Theory Model v1_discopy.py\", line 268, in main\n    circuit_dict = create_active_inference_circuit(S, O, A, P, components)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/chronic_pain_theories/discopy/Active Inference Chronic Pain Multi-Theory Model v1_discopy.py\", line 94, in create_active_inference_circuit\n    D_vector >>  # Prior beliefs\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/discopy/utils.py\", line 606, in <lambda>\n    __rshift__ = __llshift__ = lambda self, other: self.then(other)\n                                                   ^^^^^^^^^^^^^^^^\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/discopy/cat.py\", line 328, in then\n    return self.factory(inside, dom, cod)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/discopy/monoidal.py\", line 522, in __init__\n    super().__init__(inside, dom, cod, _scan=_scan)\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/discopy/cat.py\", line 236, in __init__\n    assert_iscomposable(f, g)\n  File \"/Users/4d/Documents/GitHub/generalizednotationnotation/.venv/lib/python3.11/site-packages/discopy/utils.py\", line 708, in assert_iscomposable\n    raise AxiomError(messages.NOT_COMPOSABLE.format(\ndiscopy.utils.AxiomError: D does not compose with StateInf: S @ P != O.\n",
      "execution_time": 0.370748,
      "timestamp": "2025-10-02T10:52:33.915115",
      "output_file": "output/12_execute_output/chronic_pain_theories/discopy/execution_logs/Active Inference Chronic Pain Multi-Theory Model v1_discopy.py_execution.log",
      "centralized_output_file": "output/12_execute_output/execution_results/individual_outputs/discopy/Active Inference Chronic Pain Multi-Theory Model v1_discopy.py_output.txt",
      "implementation_directory": "output/12_execute_output/chronic_pain_theories/discopy"
    },
    {
      "script_path": "output/11_render_output/neural_response_model/activeinference_jl/Active Inference Neural Response Model v1_activeinference.jl",
      "script_name": "Active Inference Neural Response Model v1_activeinference.jl",
      "framework": "activeinference_jl",
      "model_name": "neural_response_model",
      "executor": "julia",
      "success": false,
      "return_code": 1,
      "stdout": "======================================================================\nActiveInference.jl Script for GNN Model: Active Inference Neural Response Model v1\n======================================================================\nJulia version: 1.11.6\nDate: 2025-10-02T10:52:41.793\nModel dimensions: States=3, Observations=3, Actions=3\n\n\ud83d\udcc1 Output directory: activeinference_outputs_2025-10-02_10-52-41\n\ud83d\udd27 Creating model matrices from GNN specification...\n\u2705 A matrix created: (3, 12)\n\u2705 B matrix created: (0,)\n\u2705 C vector created: 12\n",
      "stderr": "ERROR: LoadError: ParseError:\n# Error @ /Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/neural_response_model/activeinference_jl/Active Inference Neural Response Model v1_activeinference.jl:248:31\nprintln(\"\\nActiveInference.jl script completed!\")\nprintln(\"Model: $MODEL_NAME\")\n#                            \n\u2514 \u2500\u2500 Expected `]`\nStacktrace:\n [1] top-level scope\n   @ ~/Documents/GitHub/generalizednotationnotation/output/11_render_output/neural_response_model/activeinference_jl/Active Inference Neural Response Model v1_activeinference.jl:248\nin expression starting at /Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/neural_response_model/activeinference_jl/Active Inference Neural Response Model v1_activeinference.jl:248\n",
      "execution_time": 8.496686,
      "timestamp": "2025-10-02T10:52:34.286527",
      "output_file": "output/12_execute_output/neural_response_model/activeinference_jl/execution_logs/Active Inference Neural Response Model v1_activeinference.jl_execution.log",
      "centralized_output_file": "output/12_execute_output/execution_results/individual_outputs/activeinference_jl/Active Inference Neural Response Model v1_activeinference.jl_output.txt",
      "implementation_directory": "output/12_execute_output/neural_response_model/activeinference_jl"
    },
    {
      "script_path": "output/11_render_output/actinf_pomdp_agent/activeinference_jl/Classic Active Inference POMDP Agent v1_activeinference.jl",
      "script_name": "Classic Active Inference POMDP Agent v1_activeinference.jl",
      "framework": "activeinference_jl",
      "model_name": "actinf_pomdp_agent",
      "executor": "julia",
      "success": false,
      "return_code": 1,
      "stdout": "======================================================================\nActiveInference.jl Script for GNN Model: Classic Active Inference POMDP Agent v1\n======================================================================\nJulia version: 1.11.6\nDate: 2025-10-02T10:52:47.496\nModel dimensions: States=3, Observations=3, Actions=1\n\n\ud83d\udcc1 Output directory: activeinference_outputs_2025-10-02_10-52-47\n\ud83d\udd27 Creating model matrices from GNN specification...\n\u2705 A matrix created: (3, 3)\n",
      "stderr": "ERROR: LoadError: ParseError:\n# Error @ /Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/actinf_pomdp_agent/activeinference_jl/Classic Active Inference POMDP Agent v1_activeinference.jl:60:18\n# B matrix (transition model) \nB_matrix = [(1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0); (0.0 1.0 0.0) (1.0 0.0 0.0) (0.0 0.0 1.0); (0.0 0.0 1.0) (0.0 1.0 0.0) (1.0 0.0 0.0)]\n#                \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2500\u2500 Expected `)`\nStacktrace:\n [1] top-level scope\n   @ ~/Documents/GitHub/generalizednotationnotation/output/11_render_output/actinf_pomdp_agent/activeinference_jl/Classic Active Inference POMDP Agent v1_activeinference.jl:60\nin expression starting at /Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/actinf_pomdp_agent/activeinference_jl/Classic Active Inference POMDP Agent v1_activeinference.jl:60\n",
      "execution_time": 5.615406,
      "timestamp": "2025-10-02T10:52:42.783891",
      "output_file": "output/12_execute_output/actinf_pomdp_agent/activeinference_jl/execution_logs/Classic Active Inference POMDP Agent v1_activeinference.jl_execution.log",
      "centralized_output_file": "output/12_execute_output/execution_results/individual_outputs/activeinference_jl/Classic Active Inference POMDP Agent v1_activeinference.jl_output.txt",
      "implementation_directory": "output/12_execute_output/actinf_pomdp_agent/activeinference_jl"
    },
    {
      "script_path": "output/11_render_output/chronic_pain_theories/activeinference_jl/Active Inference Chronic Pain Multi-Theory Model v1_activeinference.jl",
      "script_name": "Active Inference Chronic Pain Multi-Theory Model v1_activeinference.jl",
      "framework": "activeinference_jl",
      "model_name": "chronic_pain_theories",
      "executor": "julia",
      "success": false,
      "return_code": 1,
      "stdout": "======================================================================\nActiveInference.jl Script for GNN Model: Active Inference Chronic Pain Multi-Theory Model v1\n======================================================================\nJulia version: 1.11.6\nDate: 2025-10-02T10:52:52.675\nModel dimensions: States=3, Observations=3, Actions=3\n\n\ud83d\udcc1 Output directory: activeinference_outputs_2025-10-02_10-52-52\n\ud83d\udd27 Creating model matrices from GNN specification...\n",
      "stderr": "ERROR: LoadError: UndefVarError: `amplified` not defined in `Main`\nSuggestion: check for spelling errors or missing imports.\nStacktrace:\n [1] top-level scope\n   @ ~/Documents/GitHub/generalizednotationnotation/output/11_render_output/chronic_pain_theories/activeinference_jl/Active Inference Chronic Pain Multi-Theory Model v1_activeinference.jl:71\nin expression starting at /Users/4d/Documents/GitHub/generalizednotationnotation/output/11_render_output/chronic_pain_theories/activeinference_jl/Active Inference Chronic Pain Multi-Theory Model v1_activeinference.jl:71\n",
      "execution_time": 5.04769,
      "timestamp": "2025-10-02T10:52:48.399920",
      "output_file": "output/12_execute_output/chronic_pain_theories/activeinference_jl/execution_logs/Active Inference Chronic Pain Multi-Theory Model v1_activeinference.jl_execution.log",
      "centralized_output_file": "output/12_execute_output/execution_results/individual_outputs/activeinference_jl/Active Inference Chronic Pain Multi-Theory Model v1_activeinference.jl_output.txt",
      "implementation_directory": "output/12_execute_output/chronic_pain_theories/activeinference_jl"
    }
  ],
  "success": true
}